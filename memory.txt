# file opened: src/rd3dmazeV6-sj.asm
   1  0000              ; written by me, richard dodds (dickydodds.com) beginning may 2018
   2  0000
   3  0000              ; some useful info:-
   4  0000              ; the zx81 character based screen is drawn in memory and then copied to the spectrum screen.
   5  0000
   6  0000              ;2nd oct 2018 - layer 6 completed - can print udg and spectrum
   7  0000              ;             character set now.
   8  0000              ;20th oct 2018 - left side completed except for multiple blocks in
   9  0000              ;layer 2, 3 & 4
  10  0000              ;11th oct - left side done and colours added.
  11  0000              ;V3. 22 nov - left side properly fixed - had bugs on top and bottom of maze
  12  0000              ;V4 27 nov. Removed the maze generation code from Malcolm Evans
  13  0000              ;V6 - 20 June 2018 - fixed end wall distance. Started chopping into manageable chunks.
  14  0000              ;2019 - done a load of stuff!
  15  0000              ;Oct 2020 - moved to SJASMPlus and implemented backbuffer
  16  0000              ;Oct 19 2020 - added ULANext colours and removed maze printing routine that used ROM - implemented M/C one.
  17  0000              ;
  18  0000
  19  0000              ;For SJASMPLUS
  20  0000
  21  0000                      ; Allow the Next paging and instructions
  22  0000                      DEVICE ZXSPECTRUMNEXT
  23  0000
  24  0000                      ; Generate a map file for use with Cspect
  25  0000                      CSPECTMAP "project.map"
  26  0000
  27  0000
  28  0000                ;      INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
  29  0000                ;      INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
  30  0000
  31  0000
  32  0000              ;for info...
  33  0000              ;load "4-rd3dmazeV6.asm" ; draw left side of maze
  34  0000              ;load "5-rd3dmazeV6.asm" ; draw wall in front of player
  35  0000              ;load "6-rd3dmazeV6.asm" ; draw right side of maze
  36  0000
  37  0000
  38  0000              ;##################################################
  39  0000              ;##################################################
  40  0000              ;##################################################
  41  0000              ;##################################################
  42  0000              ;##################################################
  43  0000              ;#                                                #
  44  0000              ;#               main game loop here              #
  45  0000              ;#                                                #
  46  0000              ;##################################################
  47  0000              ;##################################################
  48  0000              ;##################################################
  49  0000              ;##################################################
  50  0000              ;##################################################
  51  0000
  52  0000              main:           org 32768
  53  8000
  54  8000              ;;; dont forget to create your character set on the next! ;;
  55  8000
  56  8000              ;set the player direction based on keypress
  57  8000              ; 0=north, 1=west, 2=south, 3=east
  58  8000
  59  8000 F3           start_game:    di       ;disable interrupts
  60  8001
  61  8001
  62  8001              ; set stack pointer in lower just before the _chars data
  63  8001
  64  8001                     ; ld sp,64500
  65  8001
  66  8001
  67  8001                         ; BREAK
  68  8001                        ;  ld a,$69
  69  8001                        ;  ld BC,$243b
  70  8001                        ;  out (c),a
  71  8001                        ;  ld bc,$253b
  72  8001                         ; Ld a,%10
  73  8001                        ;  in a,(c)
  74  8001
  75  8001                   ;       ld a,$43
  76  8001                   ;       call ReadNextReg
  77  8001                   ;       ;a holds the value
  78  8001
  79  8001              ;first, clear the 2 ULA bank screens as they are at ROM location 0
  80  8001
  81  8001 ED 91 50 0A                NEXTREG $50,10
  82  8005 CD 65 81                   CALL clsULA
  83  8008 ED 91 50 0E                NEXTREG $50,14
  84  800C CD 65 81                   CALL clsULA
  85  800F
  86  800F              ;setup ULA Plus Palette
  87  800F
  88  800F CD 75 82                   call Setup_palette
  89  8012
  90  8012              ; jump straight into sjasmplus debugger
  91  8012                    ;  BREAK
  92  8012
  93  8012              ;SET DEFAULT PLAYER POSITION AND DIRECTION
  94  8012              ; 0=north, 1=west, 2=south, 3=east
  95  8012 3E 02                      ld a,2            ;set default to be south
  96  8014 32 08 FA                   ld (player_dir),a
  97  8017
  98  8017                            ;make sure our exit door is closed
  99  8017 AF                         xor a                 ;reg a=0
 100  8018 32 2A FA                   ld (show_exit),a
 101  801B                            ;make sure our switch is up = 0 = not pulled
 102  801B 32 2B FA                   ld (switch_pulled),a
 103  801E
 104  801E              ;remember to set maze_highbyte for current maze
 105  801E
 106  801E              ;start on maze map 0
 107  801E              a_map:
 108  801E 3E 06                      ld a,6
 109  8020 CD 7A 9F                   call set_map      ;set our map
 110  8023
 111  8023              ;              ld h,$71          ;set at maze 1 bottom maze
 112  8023 2E 01                      ld l,01              ;top left of maze
 113  8025
 114  8025 22 00 FA                   ld (player_pos),hl
 115  8028
 116  8028              main_loop:
 117  8028              ;set CPU Speed
 118  8028                            ;set CPU Speed Mhz
 119  8028                            ;0 = 3.5
 120  8028                            ;1 = 7
 121  8028                            ;2 = 14
 122  8028                            ;4 = 28
 123  8028 ED 91 07 01                nextreg 7,1
 124  802C
 125  802C                         ;   ;put standard printing back to black text & white paper
 126  802C                         ;   ld a,98
 127  802C                         ;   ld (att),a
 128  802C
 129  802C CD 57 81                   call clear_char_screen    ;clear screen @c000
 130  802F
 131  802F CD BF 8A                   call get_distance ; get distance we can see
 132  8032                                              ; and save depth we can see
 133  8032                            ; load de is done when getting the distance above
 134  8032                            ; we need de to hold the jump value in the maze direction
 135  8032                            ; we are looking
 136  8032
 137  8032 CD 46 8C                   call draw_left_side   ; start drawing the left side of the maze
 138  8035
 139  8035                            ;we need to repopulate var furthest_point
 140  8035
 141  8035 CD BF 8A                   call get_distance     ; get distance we can see
 142  8038                                                  ; and set de accordingly
 143  8038                                                  ; and save depth we can see
 144  8038
 145  8038 CD 44 98                   call draw_right_side  ; start drawing the right side of the maze
 146  803B
 147  803B CD E9 93                   call draw_front_view  ; draw wall in front of player
 148  803E
 149  803E                            ;check if we are at an end wall. If so, draw walls left
 150  803E                            ;and right to simulate the long outside edge wall
 151  803E
 152  803E CD 75 94                   call draw_side_walls
 153  8041
 154  8041                            ;draw screen at mem location 0000
 155  8041                            ;my print used to print screen @c000 to 16384 inc udg's
 156  8041 CD BA 89                   call my_print         ;copy to screen from c000
 157  8044
 158  8044 CD F5 95                   call draw_colours     ;colourise the display
 159  8047
 160  8047                            ;make sure we point to our character set
 161  8047 21 00 C5                   ld hl,charset_1-256
 162  804A 22 62 89                   ld (base),hl
 163  804D CD 0D 8A                   call compass          ; draw compass
 164  8050
 165  8050              ;------------------------------------------------------------------------
 166  8050                            ;see if we need to draw the door or switch
 167  8050 3E 01            ld a,1
 168  8052 32 2B FA         ld (switch_pulled),a
 169  8055
 170  8055 CD F3 8B                   call draw_door
 171  8058              ;----------------------------------------------------------------------
 172  8058              ;setup right hand side of the screen
 173  8058 CD 57 97                   call draw_screen_right
 174  805B
 175  805B                            ;now flip the screen into the visible screen
 176  805B CD A2 81                   call FlipULABuffers_peter
 177  805E
 178  805E              ;set CPU Speed
 179  805E                            ;set CPU Speed Mhz
 180  805E                            ;0 = 3.5
 181  805E                            ;1 = 7
 182  805E                            ;2 = 14
 183  805E                            ;4 = 28
 184  805E ED 91 07 00                nextreg 7,0
 185  8062
 186  8062              ;#######################################
 187  8062              ;now move based on keypress
 188  8062              ;#######################################
 189  8062
 190  8062              ;Now set our view direction based on keypress
 191  8062
 192  8062              ;c bit values: 1 = 0 fire
 193  8062               ;             2 = 5 right
 194  8062               ;             4 = 7 up (forward)
 195  8062               ;             8 = 6 down
 196  8062               ;            16 = 8 left
 197  8062
 198  8062
 199  8062              ;set the player direction based on keypress
 200  8062              ; 0=north, 1=west, 2=south, 3=east
 201  8062
 202  8062
 203  8062              ;######################################
 204  8062              ;speed of game set here
 205  8062              ;######################################
 206  8062
 207  8062 CD 42 81                     call pause      ;slow down the game here
 208  8065
 209  8065              wait4key:
 210  8065 CD 2D 9F                   call get_keys      ;keypress in C register
 211  8068
 212  8068 79                         ld a,c
 213  8069
 214  8069 B7                         or a               ;clear flags
 215  806A CA 65 80                   jp z,wait4key      ;wait for a keypress b4 continuing
 216  806D
 217  806D                            ;check if its the map key and have we already pressed it
 218  806D 47                         ld b,a             ;save our key
 219  806E 3A 29 FA                   ld a,(map_show)    ;get our last pressed map key
 220  8071 90                         sub b              ;map key is 0 =1 in reg a
 221  8072                                               ;1= we are already showing the map, 0 says we are not
 222  8072 28 F1                      jr z,wait4key      ;zero flag set if map_show=1 so do nothing
 223  8074
 224  8074 AF                         xor a               ;make reg a zero
 225  8075 32 29 FA                   ld (map_show),a
 226  8078 78                         ld a,b              ;now carry on :)
 227  8079
 228  8079 FE 10                      cp 16              ; 8 (right) pressed
 229  807B CA CA 80                   jp z,plus
 230  807E
 231  807E FE 08        key_6         cp 8               ;6 (down) pressed
 232  8080 C2 99 80                   jp nz, comp_4      ;carry on if not pressed
 233  8083 ED 91 43 00                nextreg $43,0      ;turn off ulanext
 234  8087 ED 91 69 00                nextreg $69,0      ;turn off ula banking
 235  808B ED 91 50 FF                NEXTREG $50,$FF
 236  808F ED 91 52 0A                NEXTREG $52,$0A
 237  8093 FD 21 3A 5C                ld iy,$5c3a
 238  8097 FB                         ei
 239  8098 C9                         ret                ;return to BASIC
 240  8099
 241  8099 FE 04        comp_4:       cp 4               ;7 (forward) pressed
 242  809B CA E5 80                   jp z,move_forward
 243  809E
 244  809E FE 02                      cp 2               ; 5 (left) pressed
 245  80A0 CA D7 80                   jp z,minus
 246  80A3
 247  80A3               ;             cp 1               ;0 PRESSED
 248  80A3                            ;0 was pressed or we never get here!
 249  80A3 A8                         xor b             ;make b zero
 250  80A4 3A 29 FA                   ld a,(map_show)
 251  80A7 90 97                      sub b,a           ;exit if b=1 as we are already showing the map!
 252  80A9 C2 65 80                   jp nz,wait4key
 253  80AC 3C                         inc a             ;a=1 to show we pressed 6 to show the map
 254  80AD 32 29 FA                   ld (map_show),a   ;save it
 255  80B0 E5                         push hl
 256  80B1
 257  80B1 32 29 FA                   ld (map_show),a   ;save that we have pressed 6 - reg a = 1
 258  80B4 3A A1 81                   ld a,(ULABank)
 259  80B7                       ;     NEXTREG $52,a    ;page in the proper ULA screen but dont display it unless
 260  80B7                                              ;already displayed.
 261  80B7 CD 65 81                   CALL clsULA       ;clear the hidden ULA Screen as it shows old data
 262  80BA CD 6E 88                   CALL DRAW_MAP
 263  80BD CD 82 81                   call FlipULABuffers
 264  80C0 E1                         pop hl
 265  80C1
 266  80C1 C3 65 80                   jp wait4key
 267  80C4
 268  80C4 32 08 FA     go1:          ld (player_dir),a
 269  80C7 C3 28 80                   jp main_loop      ;start again
 270  80CA
 271  80CA
 272  80CA              plus:
 273  80CA 3A 08 FA                   ld a,(player_dir)
 274  80CD 3C                         inc a
 275  80CE FE 04                      cp 4          ;if its 4, make it 0 as it cant be >3
 276  80D0 C2 C4 80                   jp nz,go1     ;start game loop if its not 4
 277  80D3 97                         sub a         ;make it 0 (wraparound
 278  80D4 C3 C4 80                   jp go1
 279  80D7
 280  80D7 3A 08 FA     minus:        ld a,(player_dir)
 281  80DA 3D                         dec a
 282  80DB FE FF                      cp 255
 283  80DD C2 C4 80                   jp nz,go1         ;continue game if not 0
 284  80E0 3E 03                      ld a,3            ;wraparound
 285  80E2 C3 C4 80                   jp go1
 286  80E5
 287  80E5
 288  80E5              ;how do i implement a less-than/greater-than test in assembly?
 289  80E5
 290  80E5              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
 291  80E5              ;a and the argument were equal, else if the carry is set the argument was greater,
 292  80E5              ;and finally, if neither is set, then reg 'a' must be greater
 293  80E5              ;(cp does nothing to the registers, only the f (flag) register is changed).
 294  80E5
 295  80E5              move_forward:
 296  80E5
 297  80E5              ;----------------------------------------------------------------------------
 298  80E5              ;1st, check if we are trying to enter an open exit door
 299  80E5              ;so, is the door open?
 300  80E5
 301  80E5              ; door will always face NORTH.
 302  80E5              ; show door type = 0 = front, 1 = side
 303  80E5
 304  80E5                         ;  ld (show_exit),a
 305  80E5                           ;are we facing south?
 306  80E5 3A 08 FA                  ld a,(player_dir)
 307  80E8 D6 02                     sub 2                  ;2 = south
 308  80EA 20 2C                     jr nz,cont_a           ;if not, just continue in the normal way
 309  80EC
 310  80EC 2A 00 FA                  ld hl,(player_pos)
 311  80EF 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 312  80F2 19                        add hl,de
 313  80F3 7E                        ld a,(hl)
 314  80F4 FE C0                     cp _me                 ;is it our DOOR block?
 315  80F6 20 20                     jr nz,cont_a           ;if not, just continue in the normal way
 316  80F8                           ;YES its a door - so exit through it - but only if we are looking south
 317  80F8 3A 2B FA                  ld a,(switch_pulled)
 318  80FB A7                        and a
 319  80FC 28 1A                     jr z,cont_a            ;if not, just continue in the normal way
 320  80FE              ;Door is in front of us AND open so lets exit!
 321  80FE
 322  80FE                         ; ld hl,switch_pulled
 323  80FE AF                       xor a
 324  80FF 32 2B FA                 ld (switch_pulled),a
 325  8102              ;need to set thre player start position now.
 326  8102
 327  8102 3A 22 FA                 ld a,(cur_map)
 328  8105 3D                       dec a               ;point to our next map
 329  8106 CD 7A 9F                 call set_map      ;set our map
 330  8109 2E 01                    ld l,01              ;top left of maze
 331  810B 22 00 FA                 ld (player_pos),hl
 332  810E
 333  810E              ;draw exit animation
 334  810E                      ;    nextreg $69,0           ;turn off paging
 335  810E                          ;we moved forward and overwrote the door so redraw it
 336  810E ED 91 07 03              nextreg 7,3             ;set cpu speed to max
 337  8112                       ;   call draw_exit_door_open
 338  8112 CD 25 B3                 call exit_anim
 339  8115
 340  8115                       ;   call new_maze_anim
 341  8115                       ;   nextreg $69,64          ;turn on paging
 342  8115 C3 28 80                 jp main_loop          ;jump to our next level
 343  8118              ;--------------------------------------------------------------------------------
 344  8118 3A 02 FA     cont_a:      ld a,(maxview)         ;if our maximum view depth = 0 ie we are
 345  811B                                                  ;in front of a wall face
 346  811B                                                  ;then do nothing
 347  811B 3C                         inc a
 348  811C 3D                         dec a
 349  811D CA 65 80                   jp z,wait4key
 350  8120
 351  8120 CD D1 8B                   call load_walk        ; get walk forward value to add
 352  8123 2A 00 FA                   ld hl,(player_pos)    ;get our current position
 353  8126 7C                         ld a,h                ;save our current H value for comparing later
 354  8127 19                         add hl,de              ;move our position forward in our view
 355  8128
 356  8128 BC                         cp h              ;have we crossed 256 byte boundry?
 357  8129 C2 28 80                   jp nz,main_loop   ;we have exited our boundry so dont
 358  812C                                              ;move our view anywhere.
 359  812C                            ;now test if l=0
 360  812C              ;              ld a,l
 361  812C 2C                         inc l
 362  812D 2D                         dec l             ;are we at position 0? Exit if yes and do nothing
 363  812E                            ;cp 0
 364  812E CA 28 80                   jp z,main_loop   ;we are at location 0 in the maze, so, again do nothing
 365  8131                                              ;and just exit so we stay at position 1
 366  8131
 367  8131              ;;;;;;;;;;#########################
 368  8131                            ;now check if l=255 ;
 369  8131              ;              cp 255                ;are we at the bottom edge of the maze
 370  8131              ;              jp z,main_loop
 371  8131
 372  8131                            ;we ARE at the bottom row so DO NOT MOVE FORWARD
 373  8131 22 00 FA                   ld (player_pos),hl
 374  8134 C3 28 80                   jp main_loop          ;continue to the game loop
 375  8137
 376  8137
 377  8137
 378  8137
 379  8137              ;we get here as we are not at the bottom of the maze.
 380  8137 FE 10        move_1:       cp 16                 ;are we at the top edge of the maze?
 381  8139 D2 28 80                   jp nc,main_loop
 382  813C 22 00 FA                   ld (player_pos),hl    ;save our new position
 383  813F
 384  813F              ;we are at the TOP of the maze so dont saaveour addition to HL
 385  813F C3 28 80                   jp main_loop          ;continue to the game loop
 386  8142
 387  8142
 388  8142              ;move_back:
 389  8142               ;             jp main_loop
 390  8142
 391  8142              ;##########################################################################
 392  8142              ;Pause routine for slowing down the game
 393  8142
 394  8142 E5           pause:        push hl
 395  8143 C5                         push bc
 396  8144 06 01                      ld b,1           ;delay loop
 397  8146              loop19:       ;halt             ;no interrupts!
 398  8146 21 A0 2F                   ld hl,12192
 399  8149 2B           abc:          dec hl
 400  814A 7C                         ld a,h
 401  814B 3D                         dec a
 402  814C                            ;dec h
 403  814C 20 FB                      jr nz,abc
 404  814E 05                         dec b
 405  814F C2 46 81                   jp nz,loop19
 406  8152 C1                         pop bc
 407  8153 E1                         pop hl
 408  8154 C9                         ret
 409  8155              ;##########################################################################
 410  8155
 411  8155              ;load other programs
 412  8155
 413  8155              ;for SJASMPLUS
 414  8155
 415  8155                  INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
# file opened: src/1-rd3dmazeV6.asm
   1+ 8155
   2+ 8155              ;variables
   3+ 8155
   4+ 8155              chan_open: equ 5633
   5+ 8155              cl_line:   equ 3652 ; clear screen not changing print pos
   6+ 8155              print:     equ 8252 ; print text line
   7+ 8155              at         equ 22   ; the 'print 'at' directive
   8+ 8155              paper      equ $11  ; paper directive
   9+ 8155              ink        equ $10  ; ink directive
  10+ 8155              flash      equ $12  ; flash directive
  11+ 8155              bright     equ $13
  12+ 8155              over       equ $15
  13+ 8155              blue       equ $02
  14+ 8155              red        equ $00
  15+ 8155              magenta    equ $06
  16+ 8155              green      equ $80
  17+ 8155              cyan       equ $02
  18+ 8155              yellow     equ 26
  19+ 8155              white      equ 255
  20+ 8155              black      equ 253
  21+ 8155              ;rex_pos    equ 32904
  22+ 8155
  23+ 8155              udg_start  equ 63480+8 ;63488  ;= 1024 less than real address for the display printing routine
  24+ 8155
  25+ 8155
  26+ 8155              screen_add equ 16384
  27+ 8155              screen_atr equ screen_add + 6144
  28+ 8155              screen_bot equ 23659
  29+ 8155              screen_mem equ $c000   ;49152
  30+ 8155              df_cc      equ $5c84
  31+ 8155
  32+ 8155 00 C0        d_file   dw $c000    ;char display in memory at 49152
  33+ 8157
  34+ 8157
  35+ 8157              ;maze_highbyte           equ  $71  ;H value (of HL) of current maze being drawn
  36+ 8157              _hugewall               equ  $b8
  37+ 8157              _chequerboard           equ  $9f
  38+ 8157              _space                  equ  32
  39+ 8157              _bottomblack            equ  $a2
  40+ 8157              _topblack               equ  $a3
  41+ 8157              _topwhitebottomchequer  equ  $a1
  42+ 8157              _topchequerbottomwhite  equ  $a0
  43+ 8157              _topleftwhite           equ  39
  44+ 8157              _bottomleftwhite        equ  40
  45+ 8157              _toprightwhite          equ  41
  46+ 8157              _bottomrightwhite       equ  42
  47+ 8157              _black                  equ  $af
  48+ 8157              _topcorner1             equ  $b0  ;bottom corner left slope to righttop
  49+ 8157              _topcorner2             equ  $b1  ;left corner slope to right bottom from left
  50+ 8157              _topcorner3             equ  $b2  ;bottom corner slope to right top
  51+ 8157              _topcorner4             equ  $b3  ;top corner left slope to right bottom
  52+ 8157              _wall                   equ  $a4  ;wall pattern
  53+ 8157              _leftinnerwall          equ  $a5  ;diagonal brick pattern left
  54+ 8157              _topleft5               equ  $a9  ;next 4 are for far view on layer 5
  55+ 8157              _bottomleft5            equ  $ab  ;
  56+ 8157              _topright5              equ  $aa
  57+ 8157              _bottomright5           equ  $ac
  58+ 8157              _smallwall              equ  $b4  ;far away wall
  59+ 8157              _mediumwall             equ  $b5  ;middle wall
  60+ 8157              _mediumwall_1           equ  $b7  ;middle wall_1
  61+ 8157              _largewall              equ  $b6  ;close view wall
  62+ 8157              _layer5lefttop          equ  $9b  ;layer 5 top left chevron
  63+ 8157              _layer5leftbottom       equ  $9c  ;layer 5 bottom left chevron
  64+ 8157
  65+ 8157
  66+ 8157
  67+ 8157              ;*******  NO MORE CODE HERE PLEASE AS IT WILL SHIFT THE MEMORY UP ****************
  68+ 8157
  69+ 8157              ;################################################################
  70+ 8157              ; some routines here in the 1.5k before the maze data
  71+ 8157              ;################################################################
  72+ 8157
  73+ 8157              ;============================================
  74+ 8157              ;clear the character maze in memory
  75+ 8157              ;============================================
  76+ 8157
  77+ 8157              clear_char_screen:
  78+ 8157
  79+ 8157 21 00 C0             ld hl,$c000
  80+ 815A 01 16 03             ld bc,790;767
  81+ 815D 11 01 C0             ld de,$c001
  82+ 8160 36 20                ld (hl),32      ;space
  83+ 8162 ED B0                ldir
  84+ 8164 C9                   ret
  85+ 8165              ;################################################################
  86+ 8165              ;rom routine for cls of the 2 video pages
  87+ 8165              ;################################################################
  88+ 8165
  89+ 8165              clsULA:                 ;Clear Ula Buffer:
  90+ 8165 21 00 00         ld  hl,$0000
  91+ 8168 11 01 00         ld  de,$0001
  92+ 816B 01 00 18         ld  bc,$1800
  93+ 816E 75               ld  (hl),l
  94+ 816F ED B0            ldir
  95+ 8171 36 F0            ld  (hl),240    ;black was $48    ; black paper, cyan ink
  96+ 8173 01 FF 02         ld  bc,$02FF
  97+ 8176 ED B0            ldir
  98+ 8178 C9               ret
  99+ 8179
 100+ 8179              ; ******************************************************************************
 101+ 8179              ; from Mike Daily
 102+ 8179              ; Function: Read a next register
 103+ 8179              ; Out: a = register to read
 104+ 8179              ; Out: a = value in register
 105+ 8179
 106+ 8179              ; call with reg value in reg a
 107+ 8179              ; ******************************************************************************
 108+ 8179              readnextreg:
 109+ 8179 01 3B 24             ld bc,$243b ; select NEXT register
 110+ 817C ED 79                out (c),a
 111+ 817E 04                   inc b ; $253b to access (read or write) value
 112+ 817F ED 78                in a,(c)
 113+ 8181 C9                   ret
 114+ 8182              ;#################################################################################
 115+ 8182              FlipULABuffers:
 116+ 8182                              ; Flip ULA/Alt UA screen (double buffer ULA screen)
 117+ 8182
 118+ 8182                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 119+ 8182
 120+ 8182 3A A1 81                     ld      a,(ULABank)             ; Get screen to display this frame
 121+ 8185 FE 0A                        cp      10
 122+ 8187 28 07                        jr      z,@DisplayAltULA
 123+ 8189
 124+ 8189 3E 40                        ld      a,64                    ; set CURRENT screen to Alternate ULA (bit 6
 125+ 818B 06 0A                        ld      b,10                    ; set target screen to ULA
 126+ 818D C3 93 81                     jp      @DisplayULA
 127+ 8190
 128+ 8190 06 0E        @DisplayAltULA: ld      b,14                    ; set target screen to Alternate ULA screen
 129+ 8192 AF                           xor     a                       ; zero the a reg
 130+ 8193 ED 92 69     @DisplayULA:    nextreg $69,a                   ; Select Timex/ULA screen to show
 131+ 8196 78                           ld      a,b                     ; get bank to render to next frame
 132+ 8197 32 A1 81                     ld      (ULABank),a             ; store it...
 133+ 819A
 134+ 819A              ; swap the ula bank we are writing out buffer screen to
 135+ 819A              swap_bank:                          ;load bank 10 or 14 to location 0 to write to
 136+ 819A 3A A1 81                     ld a,(ULABank)
 137+ 819D ED 92 52                     nextreg $52,a       ;was $50
 138+ 81A0 C9                           ret
 139+ 81A1
 140+ 81A1 0A           ULABank         defb 10   ;holds current ULA screen in use
 141+ 81A2              ;#################################################################################
 142+ 81A2
 143+ 81A2
 144+ 81A2
 145+ 81A2              ;##################################################################################
 146+ 81A2              FlipULABuffers_peter:     ; Flip ULA/Alt ULA screen (double buffer ULA screen)
 147+ 81A2                                        ; from Peter Ped Helcmanovsky on the Next Team
 148+ 81A2
 149+ 81A2 3A A1 81         ld a,(ULABank)  ; Get screen to display this frame
 150+ 81A5
 151+ 81A5                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 152+ 81A5                  ; its %0000'1110 vs %0000'1010 in binary, so extract bit2 and move it to bit6
 153+ 81A5
 154+ 81A5 E6 04            and %0000'0100  ; $04 from A=14, $00 from A=10
 155+ 81A7 ED 23            swapnib         ; bit6 set from bit2
 156+ 81A9 ED 92 69         nextreg $69,a   ; Select Timex/ULA screen to show
 157+ 81AC
 158+ 81AC                  ; flip the drawing buffer mapped at $4000
 159+ 81AC 3A A1 81         ld a,(ULABank)
 160+ 81AF EE 04            xor 10^14       ; alternate between 10 and 14
 161+ 81B1 32 A1 81         ld (ULABank),a
 162+ 81B4 ED 92 52         nextreg $52,a   ; map the new "backbuffer" to $4000 (for next drawing)
 163+ 81B7 C9               ret
 164+ 81B8
 165+ 81B8              ;##################################################################################
 166+ 81B8
 167+ 81B8
 168+ 81B8
 169+ 81B8              ;##################################################################
 170+ 81B8              ;print a line of text on screen
 171+ 81B8              ;##################################################################
 172+ 81B8
 173+ 81B8              ; enter with IX pointing to the message
 174+ 81B8
 175+ 81B8              ;message format    row,col,colour,"message",end char
 176+ 81B8
 177+ 81B8              print_message:  ;make sure we point to our character set
 178+ 81B8 DD 46 00                     ld b,(ix)           ;row
 179+ 81BB DD 23                        inc ix
 180+ 81BD DD 4E 00                     ld c,(ix)           ;column
 181+ 81C0 DD 23                        inc ix
 182+ 81C2 DD 7E 00                     ld a,(ix)           ;set attribute colour
 183+ 81C5 32 66 89                     ld (att),a
 184+ 81C8
 185+ 81C8
 186+ 81C8 CD 48 89                     call locate
 187+ 81CB DD 23                        inc ix              ;point to characters to print
 188+ 81CD 21 00 C5     mesg_rept:      ld hl,charset_1-256 ; point to our character set
 189+ 81D0 22 62 89                     ld (base),hl
 190+ 81D3 DD 7E 00                     ld a,(ix)           ;load our character to print
 191+ 81D6
 192+ 81D6                              ;check if we are printing a UDG
 193+ 81D6                              ;we are currently pointing at the ram char set
 194+ 81D6 CB 7F                        bit 7,a                 ;are we printing udg's?
 195+ 81D8                                                      ;if bit 7=0 then zero test = false
 196+ 81D8 28 09                        jr z,no_udg             ;exit if theres no graphic to print
 197+ 81DA D6 80                        sub $80                 ;point to the first character of udg's
 198+ 81DC 11 00 FC                     ld de,_chars;           ;start of udg's in memory
 199+ 81DF ED 53 62 89                  ld (base),de
 200+ 81E3
 201+ 81E3 FE 7F        no_udg:         cp 127               ;check flags to see if a=zero
 202+ 81E5 C8                           ret z               ;quit when char = 0
 203+ 81E6 F5                           push af
 204+ 81E7 CD 6A 89                     call print1         ;print the message - auto increments the column
 205+ 81EA F1                           pop af
 206+ 81EB DD 23                        inc ix
 207+ 81ED 20 DE                        jr nz,mesg_rept
 208+ 81EF C9                           ret
 209+ 81F0
 210+ 81F0              ;#################################################################
 211+ 81F0
 212+ 81F0
 213+ 81F0
 214+ 81F0
 215+ 81F0              ;###############################################################
 216+ 81F0              ;Message list
 217+ 81F0              ;message format    row,col,colour,"message",end char
 218+ 81F0
 219+ 81F0 00 19 94 B0  message_border1:      db 0,25,148,$b0,$b1,$b0,$20,$b1,$b0,$b1,$7f
 219+ 81F4 B1 B0 20 B1
 219+ 81F8 B0 B1 7F
 220+ 81FB 01 19 57 88  message_get:          db 1,25,87,$88,"G E T",$89,$7f
 220+ 81FF 47 20 45 20
 220+ 8203 54 89 7F
 221+ 8206 02 19 57 88  message_out:          db 2,25,87,$88,"O U T",$89,$7F
 221+ 820A 4F 20 55 20
 221+ 820E 54 89 7F
 222+ 8211 03 19 94 B3  message_border4:      db 3,25,148,$b3,$b2,$b3,$20,$b2,$b3,$b2,$7f
 222+ 8215 B2 B3 20 B2
 222+ 8219 B3 B2 7F
 223+ 821C 17 02 3C 20  message_closed:       db 23,2,60," Go flick the switch ",$7F
 223+ 8220 47 6F 20 66
 223+ 8224 6C 69 63 6B
 223+ 8228 20 74 68 65
 223+ 822C 20 73 77 69
 223+ 8230 74 63 68 20
 223+ 8234 7F
 224+ 8235 17 01 46 20  message_switchon:     db 23,1,70," The Door is now Open ",$7F
 224+ 8239 54 68 65 20
 224+ 823D 44 6F 6F 72
 224+ 8241 20 69 73 20
 224+ 8245 6E 6F 77 20
 224+ 8249 4F 70 65 6E
 224+ 824D 20 7F
 225+ 824F 17 01 64 20  message_leave:        db 23,1,100," Woohoo! Time to leave ",$7F
 225+ 8253 57 6F 6F 68
 225+ 8257 6F 6F 21 20
 225+ 825B 54 69 6D 65
 225+ 825F 20 74 6F 20
 225+ 8263 6C 65 61 76
 225+ 8267 65 20 7F
 226+ 826A 0F 19 57 20  message_level         db 15,25,87," LEVEL ",$7f
 226+ 826E 4C 45 56 45
 226+ 8272 4C 20 7F
 227+ 8275
 228+ 8275
 229+ 8275              ;##########################################################################
 230+ 8275              ;setup ULANext palette data - code from Matt Davies early version of Ed.s
 231+ 8275
 232+ 8275              Setup_palette:
 233+ 8275
 234+ 8275 ED 91 43 01         nextreg $43,%00000001   ; Set ULANext palette ON
 235+ 8279 ED 91 40 00         nextreg $40,%00000000    ; set index to 0 which = start of palette
 236+ 827D ED 91 42 01         nextreg $42,%00000001   ; Set 2 ink & 254 paper
 237+ 8281
 238+ 8281              ;poke in the pallete data
 239+ 8281 21 8F 82             ld hl, .palette_data    ;get the start of .palette_data
 240+ 8284 7E           .lp1    ld a, (hl)
 241+ 8285 FE 01                cp $01                   ;99 is the end of the data
 242+ 8287 C8                   ret z                   ;exit if a=99
 243+ 8288 ED 92 41             nextreg $41,a           ;this auto increments
 244+ 828B 23                   inc hl
 245+ 828C C3 84 82             jp .lp1
 246+ 828F
 247+ 828F              .palette_data:
 248+ 828F              ;ink colours - only first 16 which are standard spectrum colours
 249+ 828F
 250+ 828F 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 250+ 8293 4A CB 1B F9
 250+ 8297 DF 00 07 E0
 250+ 829B E7 1F FC FE
 251+ 829F E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 251+ 82A3 24 49 92 B6
 251+ 82A7 FE DB 96 6E
 251+ 82AB 49 25 00 00
 252+ 82AF 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 252+ 82B3 AD F1 FA FE
 252+ 82B7 F5 EC C8 84
 252+ 82BB E8 EC F4 F8
 253+ 82BF FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 253+ 82C3 31 0D 09 05
 253+ 82C7 05 0E 13 1B
 253+ 82CB 1F 9F FB F3
 254+ 82CF C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 254+ 82D3 00 21 65 86
 254+ 82D7 CB CA F2 E9
 254+ 82DB E4 C4 80 40
 255+ 82DF 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 255+ 82E3 00 00 00 00
 255+ 82E7 00 00 00 00
 255+ 82EB 00 00 00 00
 256+ 82EF 00 00 00 00      db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 256+ 82F3 00 00 00 00
 256+ 82F7 00 00 00 00
 256+ 82FB 00 00 00 00
 257+ 82FF 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 257+ 8303 00 00 00 00
 257+ 8307 00 00 00 00
 257+ 830B 00 00
 258+ 830D
 259+ 830D 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 259+ 8311 4A CB 1B F9
 259+ 8315 DF 00 07 E0
 259+ 8319 E7 1F FC FE
 260+ 831D 00 02 A0 36  	db $0, $2, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 260+ 8321 4A CB 1B F9
 260+ 8325 DF 00 07 E0
 260+ 8329 E7 1F FC FE
 261+ 832D E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 261+ 8331 24 49 92 B6
 261+ 8335 FE DB 96 6E
 261+ 8339 49 25 00 00
 262+ 833D 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 262+ 8341 AD F1 FA FE
 262+ 8345 F5 EC C8 84
 262+ 8349 E8 EC F4 F8
 263+ 834D FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 263+ 8351 31 0D 09 05
 263+ 8355 05 0E 13 1B
 263+ 8359 1F 9F FB F3
 264+ 835D C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 264+ 8361 00 21 65 86
 264+ 8365 CB CA F2 E9
 264+ 8369 E4 C4 80 40
 265+ 836D
 266+ 836D              ;these are the red wall graduations - 6 colours
 267+ 836D C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $0, $0, $0, $0, $0, $7, $6, $4, $2, $0
 267+ 8371 40 20 00 00
 267+ 8375 00 00 00 07
 267+ 8379 06 04 02 00
 268+ 837D C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $ff, $ff, $ff, $ff, $0, $0, $0, $0, $ff, $01
 268+ 8381 40 20 FF FF
 268+ 8385 FF FF 00 00
 268+ 8389 00 00 FF 01
 269+ 838D
 270+ 838D              palette_end:
 271+ 838D              ;##################################################################################
 272+ 838D
 273+ 838D              draw_exit_door_closed:
 274+ 838D                             ; exit_closed 20 lines of 17 chars
 275+ 838D 06 14                        ld b,20
 276+ 838F 21 FD 83                     ld hl,exit_closed
 277+ 8392 C5           abcd:           push bc
 278+ 8393 E5                           push hl
 279+ 8394 E5 DD E1                     ld ix,hl        ;point to our data to print
 280+ 8397 CD B8 81                     CALL print_message
 281+ 839A E1                           pop hl
 282+ 839B 11 11 00                     ld de,17
 283+ 839E 19                           add hl,de
 284+ 839F E5 DD E1                     ld ix,hl
 285+ 83A2 C1                           pop bc
 286+ 83A3 10 ED                        djnz abcd
 286+ 83A5
 287+ 83A5              ;call the colouring routine
 288+ 83A5 CD D9 83                     call colour_door
 289+ 83A8              ;print the middle bars again as we overote them above
 290+ 83A8 DD 21 B7 83                  ld ix,over1
 291+ 83AC CD B8 81                     CALL print_message
 292+ 83AF DD 21 C8 83                  ld ix,over2
 293+ 83B3 CD B8 81                     CALL print_message
 294+ 83B6 C9                           ret
 295+ 83B7
 296+ 83B7 09 06 86 80  over1:          db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 296+ 83BB 81 80 81 80
 296+ 83BF 81 80 81 80
 296+ 83C3 81 80 81 80
 296+ 83C7 7F
 297+ 83C8 0A 06 84 82  over2:          db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 297+ 83CC 83 82 83 82
 297+ 83D0 83 82 83 82
 297+ 83D4 83 82 83 81
 297+ 83D8 7F
 298+ 83D9
 299+ 83D9
 300+ 83D9              ;this routine below will be used by the right wall closed door drawing routine as well as now
 301+ 83D9              ;now colour the bars white ink - this will overwrite the 2 dark bars at line 7 and 8 - will sort later
 302+ 83D9 21 A8 58     colour_door:    ld hl,22696         ;start of bar bit at the top of the door
 303+ 83DC 11 20 00                     ld de,32            ;to jump 1 line down
 304+ 83DF 3E 09                        ld a,9              ;draw 9 characters across
 305+ 83E1 32 FC 83                     ld (att_count),a
 306+ 83E4 3E C7                        ld a,199
 307+ 83E6 4F                           ld c,a              ;set colour to white ink, black paper
 308+ 83E7 3E 10                        ld a,16             ;do 16 lines
 309+ 83E9 E5           rept_5:         push hl
 310+ 83EA F5           rept_4:         push af
 311+ 83EB 3A FC 83                     ld a,(att_count)    ;9
 312+ 83EE 47                           ld b,a
 313+ 83EF F1                           pop af
 314+ 83F0 71           rept_3:         ld (hl),c           ;set the attribute colour
 315+ 83F1 23                           inc hl
 316+ 83F2 10 FC                        djnz rept_3
 317+ 83F4 E1                           pop hl
 318+ 83F5 19                           add hl,de           ;jump to next line below
 319+ 83F6 E5                           push hl
 320+ 83F7 3D                           dec a
 321+ 83F8 20 F0                        jr nz,rept_4
 322+ 83FA E1                           pop hl
 323+ 83FB C9                           ret
 324+ 83FC
 325+ 83FC 09           att_count       db  9
 326+ 83FD
 327+ 83FD              ;###############################################################
 328+ 83FD              ;door graphic
 329+ 83FD              ;message format    row,col,colour,"message",end char (127 ($7f) )
 330+ 83FD              exit_closed:    ;20 lines
 331+ 83FD 03 06 88 80                  db 3,6,136, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 331+ 8401 81 80 81 80
 331+ 8405 81 80 81 80
 331+ 8409 81 80 81 80
 331+ 840D 7F
 332+ 840E 04 06 86 82                  db 4,6,134, $82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 332+ 8412 83 82 83 82
 332+ 8416 83 82 83 82
 332+ 841A 83 82 83 81
 332+ 841E 7F
 333+ 841F 05 06 84 80                  db 5,6,132, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 333+ 8423 81 84 84 84
 333+ 8427 84 84 84 84
 333+ 842B 84 84 81 80
 333+ 842F 7F
 334+ 8430 06 06 82 82                  db 6,6,130, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 334+ 8434 83 84 84 84
 334+ 8438 84 84 84 84
 334+ 843C 84 84 83 81
 334+ 8440 7F
 335+ 8441 07 06 80 80                  db 7,6,128, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 335+ 8445 81 84 84 84
 335+ 8449 84 84 84 84
 335+ 844D 84 84 81 80
 335+ 8451 7F
 336+ 8452 08 06 7E 82                  db 8,6,126, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 336+ 8456 83 84 84 84
 336+ 845A 84 84 84 84
 336+ 845E 84 84 83 81
 336+ 8462 7F
 337+ 8463 09 06 86 80                  db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 337+ 8467 81 80 81 80
 337+ 846B 81 80 81 80
 337+ 846F 81 80 81 80
 337+ 8473 7F
 338+ 8474 0A 06 84 82                  db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 338+ 8478 83 82 83 82
 338+ 847C 83 82 83 82
 338+ 8480 83 82 83 81
 338+ 8484 7F
 339+ 8485 0B 06 82 80                  db 11,6,130,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 339+ 8489 81 84 84 84
 339+ 848D 84 84 84 84
 339+ 8491 84 84 81 80
 339+ 8495 7F
 340+ 8496 0C 06 80 82                  db 12,6,128,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 340+ 849A 83 84 84 84
 340+ 849E 84 84 84 84
 340+ 84A2 84 84 83 81
 340+ 84A6 7F
 341+ 84A7 0D 06 7E 80                  db 13,6,126,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 341+ 84AB 81 84 84 84
 341+ 84AF 84 84 84 84
 341+ 84B3 84 84 81 80
 341+ 84B7 7F
 342+ 84B8 0E 06 86 82                  db 14,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 342+ 84BC 83 84 84 84
 342+ 84C0 84 84 84 84
 342+ 84C4 84 84 83 81
 342+ 84C8 7F
 343+ 84C9 0F 06 84 80                  db 15,6,132,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 343+ 84CD 81 84 84 84
 343+ 84D1 84 84 84 84
 343+ 84D5 84 84 81 80
 343+ 84D9 7F
 344+ 84DA 10 06 82 82                  db 16,6,130,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 344+ 84DE 83 84 84 84
 344+ 84E2 84 84 84 84
 344+ 84E6 84 84 83 81
 344+ 84EA 7F
 345+ 84EB 11 06 80 80                  db 17,6,128,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 345+ 84EF 81 84 84 84
 345+ 84F3 84 84 84 84
 345+ 84F7 84 84 81 80
 345+ 84FB 7F
 346+ 84FC 12 06 7E 82                  db 18,6,126,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 346+ 8500 83 84 84 84
 346+ 8504 84 84 84 84
 346+ 8508 84 84 83 81
 346+ 850C 7F
 347+ 850D 13 06 88 80                  db 19,6,136,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 347+ 8511 81 84 84 84
 347+ 8515 84 84 84 84
 347+ 8519 84 84 81 80
 347+ 851D 7F
 348+ 851E 14 06 86 82                  db 20,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 348+ 8522 83 84 84 84
 348+ 8526 84 84 84 84
 348+ 852A 84 84 83 81
 348+ 852E 7F
 349+ 852F 15 06 84 80                  db 21,6,132,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 349+ 8533 81 80 81 80
 349+ 8537 81 80 81 80
 349+ 853B 81 80 81 80
 349+ 853F 7F
 350+ 8540 16 06 82 82                  db 22,6,130,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 350+ 8544 83 82 83 82
 350+ 8548 83 82 83 82
 350+ 854C 83 82 83 81
 350+ 8550 7F
 351+ 8551              ;------------------------------------------------------------------------------------
 352+ 8551              draw_exit_door_open:
 353+ 8551                             ; exit_closed 20 lines of 17 chars
 354+ 8551 06 14                        ld b,20
 355+ 8553 21 6A 85                     ld hl,exit_open
 356+ 8556 C5           abcde:          push bc
 357+ 8557 E5                           push hl
 358+ 8558 E5 DD E1                     ld ix,hl        ;point to our data to print
 359+ 855B CD B8 81                     CALL print_message
 360+ 855E E1                           pop hl
 361+ 855F 11 11 00                     ld de,17
 362+ 8562 19                           add hl,de
 363+ 8563 E5 DD E1                     ld ix,hl
 364+ 8566 C1                           pop bc
 365+ 8567 10 ED                        djnz abcde
 365+ 8569
 366+ 8569 C9                           ret
 367+ 856A              exit_open:    ;20 lines
 368+ 856A 03 06 BF B1                  db 3,6,191, $b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$7F
 368+ 856E AF AF AF AF
 368+ 8572 AF AF AF AF
 368+ 8576 AF AF AF B0
 368+ 857A 7F
 369+ 857B 04 06 BF 20                  db 4,6,191, $20,$b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$7F
 369+ 857F B1 AF AF AF
 369+ 8583 AF AF AF AF
 369+ 8587 AF AF B0 20
 369+ 858B 7F
 370+ 858C 05 06 BF 20                  db 5,6,191, $20,$20,$b1,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$20,$7F
 370+ 8590 20 B1 AF AF
 370+ 8594 AF AF AF AF
 370+ 8598 AF B0 20 20
 370+ 859C 7F
 371+ 859D 06 06 BE 20                  db 6,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 371+ 85A1 20 20 AF AF
 371+ 85A5 AF AF AF AF
 371+ 85A9 AF 20 20 20
 371+ 85AD 7F
 372+ 85AE 07 06 BE 20                  db 7,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 372+ 85B2 20 20 AF AF
 372+ 85B6 AF AF AF AF
 372+ 85BA AF 20 20 20
 372+ 85BE 7F
 373+ 85BF 08 06 BE 20                  db 8,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 373+ 85C3 20 20 AF AF
 373+ 85C7 AF AF AF AF
 373+ 85CB AF 20 20 20
 373+ 85CF 7F
 374+ 85D0 09 06 BE 20                  db 9,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 374+ 85D4 20 20 AF AF
 374+ 85D8 AF AF AF AF
 374+ 85DC AF 20 20 20
 374+ 85E0 7F
 375+ 85E1 0A 06 BE 20                  db 10,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 375+ 85E5 20 20 AF AF
 375+ 85E9 AF AF AF AF
 375+ 85ED AF 20 20 20
 375+ 85F1 7F
 376+ 85F2 0B 06 BE 20                  db 11,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 376+ 85F6 20 20 AF AF
 376+ 85FA AF AF AF AF
 376+ 85FE AF 20 20 20
 376+ 8602 7F
 377+ 8603 0C 06 BE 20                  db 12,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 377+ 8607 20 20 AF AF
 377+ 860B AF AF AF AF
 377+ 860F AF 20 20 20
 377+ 8613 7F
 378+ 8614 0D 06 BE 20                  db 13,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 378+ 8618 20 20 AF AF
 378+ 861C AF AF AF AF
 378+ 8620 AF 20 20 20
 378+ 8624 7F
 379+ 8625 0E 06 BE 20                  db 14,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 379+ 8629 20 20 AF AF
 379+ 862D AF AF AF AF
 379+ 8631 AF 20 20 20
 379+ 8635 7F
 380+ 8636 0F 06 BE 20                  db 15,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 380+ 863A 20 20 AF AF
 380+ 863E AF AF AF AF
 380+ 8642 AF 20 20 20
 380+ 8646 7F
 381+ 8647 10 06 BE 20                  db 16,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 381+ 864B 20 20 AF AF
 381+ 864F AF AF AF AF
 381+ 8653 AF 20 20 20
 381+ 8657 7F
 382+ 8658 11 06 BE 20                  db 17,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 382+ 865C 20 20 AF AF
 382+ 8660 AF AF AF AF
 382+ 8664 AF 20 20 20
 382+ 8668 7F
 383+ 8669 12 06 BE 20                  db 18,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 383+ 866D 20 20 AF AF
 383+ 8671 AF AF AF AF
 383+ 8675 AF 20 20 20
 383+ 8679 7F
 384+ 867A 13 06 BE 20                  db 19,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 384+ 867E 20 20 AF AF
 384+ 8682 AF AF AF AF
 384+ 8686 AF 20 20 20
 384+ 868A 7F
 385+ 868B 14 06 BF 20                  db 20,6,191,$20,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$20,$7F
 385+ 868F 20 B2 AF AF
 385+ 8693 AF AF AF AF
 385+ 8697 AF B3 20 20
 385+ 869B 7F
 386+ 869C 15 06 BF 20                  db 21,6,191,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$7F
 386+ 86A0 B2 AF AF AF
 386+ 86A4 AF AF AF AF
 386+ 86A8 AF AF B3 20
 386+ 86AC 7F
 387+ 86AD 16 06 BF B2                  db 22,6,191,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$7F
 387+ 86B1 AF AF AF AF
 387+ 86B5 AF AF AF AF
 387+ 86B9 AF AF AF B3
 387+ 86BD 7F
 388+ 86BE
 389+ 86BE              ;--------------------------------------------------------------------------------------
 390+ 86BE              draw_door_right_closed:
 391+ 86BE                             ; exit_closed 14 lines of 7 chars
 392+ 86BE 06 0D                        ld b,13
 393+ 86C0 21 3B 87                     ld hl,right_door_closed
 394+ 86C3 C5           abc_a:          push bc
 395+ 86C4 E5                           push hl
 396+ 86C5 E5 DD E1                     ld ix,hl        ;point to our data to print
 397+ 86C8 CD B8 81                     CALL print_message
 398+ 86CB E1                           pop hl
 399+ 86CC 11 07 00                     ld de,7
 400+ 86CF 19                           add hl,de
 401+ 86D0 E5 DD E1                     ld ix,hl
 402+ 86D3 C1                           pop bc
 403+ 86D4 10 ED                        djnz abc_a
 404+ 86D6
 405+ 86D6              ;draw top angled bit of the door on right wall
 406+ 86D6 DD 21 22 87                  ld ix,top_right_1        ;point to our data to print
 407+ 86DA CD B8 81                     CALL print_message
 408+ 86DD DD 21 27 87                  ld ix,top_right_2        ;point to our data to print
 409+ 86E1 CD B8 81                     CALL print_message
 410+ 86E4 DD 21 2D 87                  ld ix,top_right_3        ;point to our data to print
 411+ 86E8 CD B8 81                     CALL print_message
 412+ 86EB DD 21 34 87                  ld ix,top_right_4        ;point to our data to print
 413+ 86EF CD B8 81                     CALL print_message
 414+ 86F2
 415+ 86F2              ;draw bottom angled bit of the door on right wall
 416+ 86F2 DD 21 8F 87                  ld ix,bot_right_1        ;point to our data to print
 417+ 86F6 CD B8 81                     CALL print_message
 418+ 86F9 DD 21 96 87                  ld ix,bot_right_2        ;point to our data to print
 419+ 86FD CD B8 81                     CALL print_message
 420+ 8700 DD 21 9D 87                  ld ix,bot_right_3        ;point to our data to print
 421+ 8704 CD B8 81                     CALL print_message
 422+ 8707 DD 21 A3 87                  ld ix,bot_right_4        ;point to our data to print
 423+ 870B CD B8 81                     CALL print_message
 424+ 870E                         ; BREAK
 425+ 870E              ;now colour the attributes correctly to look diagonal
 426+ 870E                              ;do white colour bars first
 427+ 870E 21 B6 58                     ld hl,22710         ;start of bar bit at the top of the door
 428+ 8711 11 20 00                     ld de,32            ;to jump 1 line down
 429+ 8714 3E 01                        ld a,1              ;draw 9 attribute across
 430+ 8716 32 FC 83                     ld (att_count),a
 431+ 8719 3E C7                        ld a,199
 432+ 871B 4F                           ld c,a              ;set colour to white ink, black paper
 433+ 871C 3E 0E                        ld a,14             ;do 16 lines
 434+ 871E                             ; push hl
 435+ 871E CD E9 83                     call rept_5         ;colour our door correctly
 436+ 8721 C9                           ret
 437+ 8722
 438+ 8722
 439+ 8722              ;top 2 parts of the door
 440+ 8722 02 17 88 D3  top_right_1:    db 2,23,136,         $d3,$7F
 440+ 8726 7F
 441+ 8727 03 16 88 D5  top_right_2:    db 3,22,136,     $d5,$80,$7F
 441+ 872B 80 7F
 442+ 872D 04 15 88 D3  top_right_3:    db 4,21,136, $d3,$83,$82,$7F
 442+ 8731 83 82 7F
 443+ 8734 05 15 88 80  top_right_4:    db 5,21,136, $80,$87,$80,$7F
 443+ 8738 87 80 7F
 444+ 873B              ;middle of the closed door
 445+ 873B              right_door_closed:      ;15 lines
 446+ 873B 06 15 82 82                  db 6,21,130, $82,$87,$82,$7F
 446+ 873F 87 82 7F
 447+ 8742 07 15 80 80                  db 7,21,128, $80,$87,$80,$7F
 447+ 8746 87 80 7F
 448+ 8749 08 15 7E 82                  db 8,21,126, $82,$87,$82,$7F
 448+ 874D 87 82 7F
 449+ 8750 09 15 88 80                  db 9,21,136, $80,$87,$80,$7F
 449+ 8754 87 80 7F
 450+ 8757 0A 15 86 82                  db 10,21,134,$82,$87,$82,$7F
 450+ 875B 87 82 7F
 451+ 875E 0B 15 84 80                  db 11,21,132,$80,$87,$80,$7F
 451+ 8762 87 80 7F
 452+ 8765 0C 15 82 82                  db 12,21,130,$82,$87,$82,$7F
 452+ 8769 87 82 7F
 453+ 876C 0D 15 80 80                  db 13,21,128,$80,$87,$80,$7F
 453+ 8770 87 80 7F
 454+ 8773 0E 15 7E 82                  db 14,21,126,$82,$87,$82,$7F
 454+ 8777 87 82 7F
 455+ 877A 0F 15 88 80                  db 15,21,136,$80,$87,$80,$7F
 455+ 877E 87 80 7F
 456+ 8781 10 15 86 82                  db 16,21,134,$82,$87,$82,$7F
 456+ 8785 87 82 7F
 457+ 8788 11 15 84 80                  db 17,21,132,$80,$87,$80,$7F
 457+ 878C 87 80 7F
 458+ 878F              ;                db 18,21,130,$82,$87,$82,$7F
 459+ 878F              ;bottom 2 parts of the door
 460+ 878F 12 15 80 80  bot_right_1:    db 18,21,128, $80,$87,$80,$7F
 460+ 8793 87 80 7F
 461+ 8796 13 15 80 D4  bot_right_2:    db 19,21,128, $d4,$83,$82,$7F
 461+ 879A 83 82 7F
 462+ 879D 14 16 80 D6  bot_right_3:    db 20,22,128,     $d6,$80,$7F
 462+ 87A1 80 7F
 463+ 87A3 15 17 80 D4  bot_right_4:    db 21,23,128,         $d4,$7F
 463+ 87A7 7F
 464+ 87A8
 465+ 87A8              ;--------------------------------------------------------------------
 466+ 87A8              draw_door_right_open:
 467+ 87A8                             ; exit_closed 14 lines of 7 chars
 468+ 87A8 06 0D                        ld b,13
 469+ 87AA 21 FF 87                     ld hl,right_door_open
 470+ 87AD C5           abc_b:          push bc
 471+ 87AE E5                           push hl
 472+ 87AF E5 DD E1                     ld ix,hl        ;point to our data to print
 473+ 87B2 CD B8 81                     CALL print_message
 474+ 87B5 E1                           pop hl
 475+ 87B6 11 07 00                     ld de,7
 476+ 87B9 19                           add hl,de
 477+ 87BA E5 DD E1                     ld ix,hl
 478+ 87BD C1                           pop bc
 479+ 87BE 10 ED                        djnz abc_b
 480+ 87C0
 481+ 87C0              ;draw top angled bit of the door on right wall
 482+ 87C0 DD 21 EB 87                  ld ix,top_right_op2        ;point to our data to print
 483+ 87C4 CD B8 81                     CALL print_message
 484+ 87C7 DD 21 F1 87                  ld ix,top_right_op3        ;point to our data to print
 485+ 87CB CD B8 81                     CALL print_message
 486+ 87CE DD 21 F8 87                  ld ix,top_right_op4        ;point to our data to print
 487+ 87D2 CD B8 81                     CALL print_message
 488+ 87D5
 489+ 87D5              ;draw bottom angled bit of the door on right wall - basically, all spaces so floor colour is drawn
 490+ 87D5 DD 21 5A 88                  ld ix,bot_right_op1        ;point to our data to print
 491+ 87D9 CD B8 81                     CALL print_message
 492+ 87DC DD 21 61 88                  ld ix,bot_right_op2        ;point to our data to print
 493+ 87E0 CD B8 81                     CALL print_message
 494+ 87E3 DD 21 68 88                  ld ix,bot_right_op3        ;point to our data to print
 495+ 87E7 CD B8 81                     CALL print_message
 496+ 87EA
 497+ 87EA
 498+ 87EA              ;now colour the attributes correctly to look diagonal
 499+ 87EA                              ;do white colour bars first
 500+ 87EA                             ; ld hl,22710         ;start of bar bit at the top of the door
 501+ 87EA                             ; ld de,32            ;to jump 1 line down
 502+ 87EA                             ; ld a,1              ;draw 9 attribute across
 503+ 87EA                             ; ld (att_count),a
 504+ 87EA                             ; ld a,199
 505+ 87EA                             ; ld c,a              ;set colour to white ink, black paper
 506+ 87EA                             ; ld a,14             ;do 16 lines
 507+ 87EA                             ; call rept_5         ;colour our door correctly
 508+ 87EA
 509+ 87EA C9                           ret
 510+ 87EB
 511+ 87EB              ;top 2 parts of the door
 512+ 87EB 03 16 C0 B0  top_right_op2:    db 3,22,192,     $b0,$7F,$7F;;$20,$7F
 512+ 87EF 7F 7F
 513+ 87F1 04 15 C0 B0  top_right_op3:    db 4,21,192, $b0,$20,$7F,$7F;$20,$7F
 513+ 87F5 20 7F 7F
 514+ 87F8 05 15 BC 20  top_right_op4:    db 5,21,188, $20,$20,$7F,$7F;$20,$7F
 514+ 87FC 20 7F 7F
 515+ 87FF              ;middle of the open door
 516+ 87FF              right_door_open:      ;15 lines
 517+ 87FF 06 15 BC 20                  db 6,21,188, $20,$20,$7F,$7F;$20,$7F
 517+ 8803 20 7F 7F
 518+ 8806 07 15 BC 20                  db 7,21,188, $20,$20,$7F,$7F;,$20,$7F
 518+ 880A 20 7F 7F
 519+ 880D 08 15 BC 20                  db 8,21,188, $20,$20,$7F,$7F;,$20,$7F
 519+ 8811 20 7F 7F
 520+ 8814 09 15 BC 20                  db 9,21,188, $20,$20,$7F,$7F;$20,$7F
 520+ 8818 20 7F 7F
 521+ 881B 0A 15 BC 20                  db 10,21,188,$20,$20,$7F,$7F;$20,$7F
 521+ 881F 20 7F 7F
 522+ 8822 0B 15 BC 20                  db 11,21,188,$20,$20,$7F,$7F;$20,$7F
 522+ 8826 20 7F 7F
 523+ 8829 0C 15 BC 20                  db 12,21,188,$20,$20,$7F,$7F;$20,$7F
 523+ 882D 20 7F 7F
 524+ 8830 0D 15 BC 20                  db 13,21,188,$20,$20,$7F,$7F;$20,$7F
 524+ 8834 20 7F 7F
 525+ 8837 0E 15 BC 20                  db 14,21,188,$20,$20,$7F,$7F;$20,$7F
 525+ 883B 20 7F 7F
 526+ 883E 0F 15 BC 20                  db 15,21,188,$20,$20,$7F,$7F;$20,$7F
 526+ 8842 20 7F 7F
 527+ 8845 10 15 BC 20                  db 16,21,188,$20,$20,$7F,$7F;$20,$7F
 527+ 8849 20 7F 7F
 528+ 884C 11 15 BC 20                  db 17,21,188,$20,$20,$7F,$7F;$20,$7F
 528+ 8850 20 7F 7F
 529+ 8853 12 15 BC 20                  db 18,21,188,$20,$20,$7F,$7F;$20,$7F
 529+ 8857 20 7F 7F
 530+ 885A
 531+ 885A              ;bottom 2 parts of the door
 532+ 885A 13 15 BC 20  bot_right_op1:    db 19,21,188, $20,$20,$7F,$7F;$20,$7F
 532+ 885E 20 7F 7F
 533+ 8861 14 15 62 20  bot_right_op2:    db 20,21,98, $20,$20,$7F,$7F;$20,$7F
 533+ 8865 20 7F 7F
 534+ 8868 15 16 62 20  bot_right_op3:    db 21,22,98,     $20,$7F,$7F;$20,$7F
 534+ 886C 7F 7F
 535+ 886E
 536+ 886E
 537+ 886E
 538+ 886E
 539+ 886E
 540+ 886E
# file closed: src/1-rd3dmazeV6.asm
 416  886E                  INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
# file opened: src/2-rd3dmazeV6.asm
   1+ 886E
   2+ 886E              ;##############################################
   3+ 886E              ;Draw the current map on screen
   4+ 886E              ;##############################################
   5+ 886E
   6+ 886E                  ;    org $E000   ; 57344 - top 8k
   7+ 886E
   8+ 886E              ;max row=21, max column = 31
   9+ 886E
  10+ 886E              ;will need to change DF_CC position for sjasmplus
  11+ 886E              DRAW_MAP:
  12+ 886E                      ;set max speed!
  13+ 886E ED 91 07 03          nextreg 7,3
  14+ 8872
  15+ 8872                      ;set our colours
  16+ 8872 3E B2                ld a,178            ;red
  17+ 8874 32 F1 95             ld (wallcol),a
  18+ 8877
  19+ 8877              ;first draw a top wall line
  20+ 8877 3E 11                ld a,17          ;draw 16 wall chars
  21+ 8879 01 04 02             ld bc,$0204      ;print at 2,4;
  22+ 887C CD 25 89             call topbotline
  23+ 887F
  24+ 887F              ;now draw the map data
  25+ 887F 01 04 03             ld bc,$0304      ;set row and column to 2,4
  26+ 8882 2A 23 FA             ld hl,(map_start)
  27+ 8885 22 18 FA             ld (var7),hl   ;save it
  28+ 8888              rep1:
  29+ 8888 C5                   push bc
  30+ 8889 CD 48 89             call locate
  31+ 888C C1                   pop bc           ;restore our counter
  32+ 888D C5                   push bc          ;resave it
  33+ 888E
  34+ 888E CD CF 88             call get_maze_data
  35+ 8891 CD 6A 89             call print1      ;print character
  36+ 8894 C1                   pop bc
  37+ 8895 0C                   inc c
  38+ 8896 79                   ld a,c
  39+ 8897 D6 14                sub 20          ;just draw 16 characters (we start at loc 4)
  40+ 8899 C2 88 88             jp nz,rep1
  41+ 889C
  42+ 889C              ;now draw a final wall at the end of the line
  43+ 889C C5                   push bc
  44+ 889D 11 00 F8             ld de,udg_start  ;point to udg chars
  45+ 88A0 ED 53 62 89          ld (base),de
  46+ 88A4 CD 48 89             call locate      ;set print position
  47+ 88A7 CD FA 96             call set_wall_col   ;set our wall colour
  48+ 88AA 3A F1 95             ld a,(wallcol)
  49+ 88AD 32 66 89             ld (att),a
  50+ 88B0 3E B4                ld a,_smallwall  ;draw wall char
  51+ 88B2 CD 6A 89             call print1
  52+ 88B5 C1                   pop bc
  53+ 88B6 78                   ld a,b
  54+ 88B7 FE 12                cp 18            ;draw 18 lines (starting at line 2)
  55+ 88B9 28 05                jr z,ret2        ;exit after 18 lines
  56+ 88BB 04                   inc b
  57+ 88BC 0E 04                ld c,4           ;start row from pos 4 again
  58+ 88BE 18 C8                jr rep1          ;start again
  59+ 88C0
  60+ 88C0              ;now draw a bottom line wall
  61+ 88C0 3E 11        ret2:   ld a,17          ;draw 16 wall chars
  62+ 88C2 01 04 13             ld bc,$1304      ;print at 2,4;
  63+ 88C5 CD 25 89             call topbotline
  64+ 88C8
  65+ 88C8              ;put our char set back to normal!
  66+ 88C8 21 00 C5             ld hl,charset_1-256
  67+ 88CB 22 62 89             ld (base),hl
  68+ 88CE C9                   ret
  69+ 88CF
  70+ 88CF              ;cycle through the maze drawing blocks, player, exit etc
  71+ 88CF              get_maze_data:
  72+ 88CF 2A 18 FA             ld hl,(var7)    ;get our current map position
  73+ 88D2 3E 28                ld a,40         ;cyan paper, black ink
  74+ 88D4 32 66 89             ld (att),a
  75+ 88D7
  76+ 88D7              ;set charset to non udg
  77+ 88D7 11 00 C6             ld de,charset_1
  78+ 88DA 15                   dec d
  79+ 88DB ED 53 62 89          ld (base),de    ;set char set start for ptint1 routine
  80+ 88DF 7E                   ld a,(hl)       ;get our character to print
  81+ 88E0 23                   inc hl           ;jump to next maze location
  82+ 88E1 22 18 FA             ld (var7),hl
  83+ 88E4 67                   ld h,a          ;save reg a - we dont need reg h anymore
  84+ 88E5
  85+ 88E5              ;Now check if its a player, a wall or an Exit or switch,
  86+ 88E5 ED 5B 00 FA          ld de,(player_pos)      ;get player location
  87+ 88E9 2D                   dec l                   ;put back hl as we inc'd it earlier
  88+ 88EA 7B                   ld a,e                  ;go back 1 position as we already incremented it
  89+ 88EB BD                   cp l
  90+ 88EC 7C                   ld a,h             ;restore reg a for further compares
  91+ 88ED 20 02                jr nz,go_1          ;no match for a player
  92+ 88EF 3E A6                ld a,$a6           ;set a to  our little man character which is a graphic
  93+ 88F1 FE 20        go_1:   cp ' '
  94+ 88F3 C8                   ret z
  95+ 88F4
  96+ 88F4              ;its a graphic character - assume its a wall no matter what
  97+ 88F4 67                   ld h,a             ;save reg a
  98+ 88F5 3E 0A                ld a,10             ;yellow paper, black ink
  99+ 88F7 32 66 89             ld (att),a         ;red ink, blue background
 100+ 88FA 7C                   ld a,h
 101+ 88FB
 102+ 88FB
 103+ 88FB              ;Now check if its a player, a wall or an Exit or switch
 104+ 88FB 1E A6                ld e, $a6           ;our little man graphic
 105+ 88FD BB                   cp e
 106+ 88FE 28 1B                jr z,go_on          ;do next check
 107+ 8900
 108+ 8900              ;check for an exit....
 109+ 8900 1E C0                ld e,_me            ;exit char = 192
 110+ 8902 7C                   ld a,h
 111+ 8903 BB                   cp e               ;needs to be a compare so a is left intact
 112+ 8904 3E A8                ld a,$a8            ;load exit character
 113+ 8906 28 13                jr z,go_on
 114+ 8908              ;
 115+ 8908              ;a7 check for a switch...
 116+ 8908 1E A0                ld e,_ms           ;exit char = 192
 117+ 890A 7C                   ld a,h
 118+ 890B BB                   cp e               ;needs to be a compare so a is left intact
 119+ 890C 3E A7                ld a,$a7            ;load exit character
 120+ 890E 28 0B                jr z,go_on
 121+ 8910
 122+ 8910              ;default to a wall....
 123+ 8910              carry_on1:
 124+ 8910 CD FA 96             call set_wall_col   ;set our wall colour
 125+ 8913 3A F1 95             ld a,(wallcol)
 126+ 8916 32 66 89             ld (att),a         ;red ink, blue background
 127+ 8919 3E B4                ld a,_smallwall         ;return wall char
 128+ 891B
 129+ 891B
 130+ 891B              go_on:
 131+ 891B D6 80                sub $80          ;subtract 128 to point to correct graphic char
 132+ 891D              ;set char set to udg's
 133+ 891D 11 00 FC             ld de,_chars;$fc00
 134+ 8920 ED 53 62 89          ld (base),de
 135+ 8924 C9                   ret
 136+ 8925
 137+ 8925              topbotline:
 138+ 8925              ;draws a single line of 16 wall chars
 139+ 8925              ;set char set to udg's
 140+ 8925 11 00 FC             ld de,$fc00             ;point to udg's
 141+ 8928 ED 53 62 89          ld (base),de
 142+ 892C
 143+ 892C F5           rep3:   push af
 144+ 892D CD 48 89             call locate             ;set print position
 145+ 8930              ;set wall colour. Print 1 uses whats stored in (att)
 146+ 8930 CD FA 96             call set_wall_col   ;set our wall colour
 147+ 8933 3A F1 95             ld a,(wallcol)
 148+ 8936 32 66 89             ld (att),a
 149+ 8939 3E B4                ld a,_smallwall
 150+ 893B D6 80                sub $80
 151+ 893D C5                   push bc
 152+ 893E CD 6A 89             call print1      ;print the character
 153+ 8941 C1                   pop bc
 154+ 8942 0C                   inc c
 155+ 8943 F1                   pop af
 156+ 8944 3D                   dec a
 157+ 8945 20 E5                jr nz,rep3        ;exit when a=0
 158+ 8947 C9                   ret
 159+ 8948
 160+ 8948
 161+ 8948              ;==================================================
 162+ 8948              ;from advanced spectrum machine code book
 163+ 8948              ;==================================================
 164+ 8948
 165+ 8948              ;locate routine for use with print routine
 166+ 8948
 167+ 8948              ;   entry: b=line  c=column
 168+ 8948              ;   preserved = bc
 169+ 8948              ;   on exit -   hl = display file address
 170+ 8948              ;               de = attr address
 171+ 8948              ;               a  = attr (b,c)
 172+ 8948              ;   df_cc is altered
 173+ 8948
 174+ 8948
 175+ 8948
 176+ 8948                 ; BREAK
 177+ 8948 78           locate: ld a,b
 178+ 8949 E6 18                and $18
 179+ 894B 67                   ld h,a
 180+ 894C CB F4                set 6,h
 181+ 894E 0F                   rrca
 182+ 894F 0F                   rrca
 183+ 8950 0F                   rrca
 184+ 8951 F6 58                or $58
 185+ 8953 57                   ld d,a
 186+ 8954 78                   ld a,b
 187+ 8955 E6 07                and 7
 188+ 8957 0F                   rrca
 189+ 8958 0F                   rrca
 190+ 8959 0F                   rrca
 191+ 895A 81                   add a,c
 192+ 895B 6F                   ld l,a
 193+ 895C 5F                   ld e,a
 194+ 895D 1A                   ld a,(de)
 195+ 895E 22 84 5C             ld (df_cc),hl
 196+ 8961 C9                   ret
 197+ 8962
 198+ 8962              ;here is the new print routine
 199+ 8962
 200+ 8962              ;   entry: a=char code to be printed
 201+ 8962              ;   preserved = c
 202+ 8962              ;   exit -  b=0
 203+ 8962              ;           de = attribute address
 204+ 8962
 205+ 8962              ; variable base is initialised to 3c00h = normal spectrum character set
 206+ 8962              ; att is place immediately before mask so that
 207+ 8962              ; the two can be accessed with one ld instuction
 208+ 8962
 209+ 8962 00 3C        base    dw $3c00 ; start of speccy characer set
 210+ 8964 00 40        dfcc    dw $4000 ;start of spectrum screen mem
 211+ 8966              ;dfcc    dw $0000 ;start of spectrum screen mem slot 0
 212+ 8966 38 00        att     dw $38
 213+ 8968 00 00        mask    dw 0
 214+ 896A
 215+ 896A
 216+ 896A
 217+ 896A              print1: ; construct character data address
 218+ 896A
 219+ 896A
 220+ 896A 6F                   ld l,a
 221+ 896B 26 00                ld h,0
 222+ 896D 29                   add hl,hl
 223+ 896E 29                   add hl,hl
 224+ 896F 29                   add hl,hl
 225+ 8970 ED 5B 62 89          ld de,(base)                ;char set data
 226+ 8974 19                   add hl,de
 227+ 8975
 228+ 8975                      ; take display file address
 229+ 8975 ED 5B 84 5C          ld de,(df_cc)
 230+ 8979 06 08                ld b,8
 231+ 897B
 232+ 897B                      ; print character row by row
 233+ 897B 7E           nxtrow: ld a,(hl)
 234+ 897C 12                   ld (de),a
 235+ 897D 23                   inc hl
 236+ 897E 14                   inc d
 237+ 897F 10 FA                djnz nxtrow
 238+ 8981
 239+ 8981                      ; construct attribute address
 240+ 8981 7A                   ld a,d
 241+ 8982 0F                   rrca
 242+ 8983 0F                   rrca
 243+ 8984 0F                   rrca
 244+ 8985 3D                   dec a
 245+ 8986 E6 03                and 3
 246+ 8988 F6 58                or $58
 247+ 898A 57                   ld d,a
 248+ 898B 2A 66 89             ld hl,(att)    ; h=mask, l=attribute
 249+ 898E
 250+ 898E                      ; take old attribute
 251+ 898E 1A                   ld a,(de)
 252+ 898F
 253+ 898F                      ; construct new one
 254+ 898F AD                   xor l
 255+ 8990 A4                   and h
 256+ 8991 AD                   xor l
 257+ 8992
 258+ 8992                      ; replace attribute
 259+ 8992 12                   ld (de),a
 260+ 8993
 261+ 8993                      ; finally, set dfcc to next print position
 262+ 8993 21 84 5C             ld hl,df_cc
 263+ 8996 34                   inc (hl)
 264+ 8997 C0                   ret nz
 265+ 8998 23                   inc hl
 266+ 8999 7E                   ld a,(hl)
 267+ 899A C6 08                add a,8
 268+ 899C 77                   ld (hl),a
 269+ 899D C9                   ret
 270+ 899E
 271+ 899E
 272+ 899E              ; print routine - print screen at c000 to 16384
 273+ 899E              ; uses locate routine
 274+ 899E
 275+ 899E              my_print_info:  ; set dfcc to line , column
 276+ 899E
 277+ 899E              ;1st, check if we are printing a udg
 278+ 899E              ;reg a holds our character to print. udg's are char $90 onwards
 279+ 899E
 280+ 899E              ; the carry will be set if the cp argument > than a
 281+ 899E
 282+ 899E
 283+ 899E              setbase:
 284+ 899E F5                   push af
 285+ 899F C5                   push bc
 286+ 89A0 E5                   push hl
 287+ 89A1              ;        ld a,$3c                ;point to spectrum rom
 288+ 89A1              ;        ld (base+1),a
 289+ 89A1              ;        sub a                   ; make zero
 290+ 89A1              ;        ld (base),a
 291+ 89A1
 292+ 89A1              ;point to our character set
 293+ 89A1 21 00 C6             ld hl,charset_1
 294+ 89A4 25                   dec h
 295+ 89A5 22 62 89             ld (base),hl
 296+ 89A8
 297+ 89A8                      ;we are now pointing at the rom char set
 298+ 89A8 0A                   ld a,(bc)               ;get our char to print
 299+ 89A9               ;       nop ;or a
 300+ 89A9 CB 7F                bit 7,a                 ;are we printing udg's?
 301+ 89AB                      ; bit 7=1 so zero =false
 302+ 89AB 28 09                jr z,ret_1              ;exit if theres no graphic to print
 303+ 89AD D6 80                sub $80                 ;point to the first character of udg's
 304+ 89AF 01 00 F8             ld bc,udg_start         ;start of udg's in memory
 305+ 89B2 ED 43 62 89          ld (base),bc
 306+ 89B6                      ;ld hl,(base)
 307+ 89B6 E1           ret_1   pop hl
 308+ 89B7 C1                   pop bc
 309+ 89B8 F1                   pop af
 310+ 89B9
 311+ 89B9 C9                   ret
 312+ 89BA
 313+ 89BA              my_print:
 314+ 89BA 06 00        lp4:    ld b,0
 315+ 89BC 0E 00                ld c,0
 316+ 89BE              ;        ld a,120
 317+ 89BE
 318+ 89BE              ;        ld (att),a
 319+ 89BE CD 48 89             call locate ; set print pos and attribute
 320+ 89C1                      ;call cls - clear the screen
 321+ 89C1
 322+ 89C1                      ;loop 24 times
 323+ 89C1                      ;ld a,2
 324+ 89C1                      ;push af
 325+ 89C1
 326+ 89C1                      ; set base pointer to  character set
 327+ 89C1                      ; starts at space char code 0
 328+ 89C1                ;      ld hl,(base)
 329+ 89C1                      ;ld (base),hl
 330+ 89C1 97                   sub a
 331+ 89C2                    ;make reg a=0
 332+ 89C2 32 0C 8A             ld (lc),a   ;line counter
 333+ 89C5
 334+ 89C5                      ; remember, print1 preserves the c register
 335+ 89C5 01 FF BF             ld bc, $bfff ;c000  ; 1 less than display in memory
 336+ 89C8 2E 00                ld l,0
 337+ 89CA              lp3:
 338+ 89CA
 339+ 89CA C5                   push bc
 340+ 89CB E5                   push hl
 341+ 89CC 03                   inc bc
 342+ 89CD 0A                   ld a,(bc)
 343+ 89CE CD 9E 89             call setbase ; set char set
 344+ 89D1 3E F0                ld a,240
 345+ 89D3 32 66 89             ld (att),a          ;set black ink and paper
 346+ 89D6 0A                   ld a,(bc)           ;reload our character to print
 347+ 89D7 2A 62 89             ld hl,(base)
 348+ 89DA
 349+ 89DA              ;charset test
 350+ 89DA 2A 00 C6             ld hl,(charset_1)
 351+ 89DD
 352+ 89DD CD 6A 89             call print1  ; print char in a
 353+ 89E0 E1                   pop hl
 354+ 89E1 C1                   pop bc
 355+ 89E2
 356+ 89E2 03                   inc bc
 357+ 89E3 2C                   inc l
 358+ 89E4 7D                   ld a,l
 359+ 89E5 FE 19                cp 25       ; print 26 chars
 360+ 89E7 C2 CA 89             jp nz,lp3
 361+ 89EA
 362+ 89EA C5                   push bc
 363+ 89EB E1                   pop hl
 364+ 89EC 16 00                ld d,0
 365+ 89EE 1E 08                ld e,8
 366+ 89F0 19                   add hl,de
 367+ 89F1
 368+ 89F1 E5                   push hl
 369+ 89F2 C1                   pop bc
 370+ 89F3 2E 00                ld l,0       ;start at 0 for the next line
 371+ 89F5 3A 0C 8A             ld a,(lc)
 372+ 89F8 3C                   inc  a
 373+ 89F9
 374+ 89F9              ;we only draw the first 24 columns x 24 lines
 375+ 89F9 FE 18                cp 24      ; x lines to print
 376+ 89FB
 377+ 89FB C8                   ret z
 378+ 89FC
 379+ 89FC              ; reset position to next line. locate can do attributes too
 380+ 89FC D9                   exx
 381+ 89FD E5                   push hl
 382+ 89FE 32 0C 8A             ld (lc),a  ; save counter
 383+ 8A01 47                   ld b,a
 384+ 8A02 0E 00                ld c,0
 385+ 8A04 CD 48 89             call locate
 386+ 8A07 E1                   pop hl
 387+ 8A08 D9                   exx
 388+ 8A09 C3 CA 89             jp lp3
 389+ 8A0C
 390+ 8A0C
 391+ 8A0C 00           lc      db 0
 392+ 8A0D
 393+ 8A0D
 394+ 8A0D              ;============================================
 395+ 8A0D              ; draw player direction text on screen
 396+ 8A0D              ;===========================================
 397+ 8A0D
 398+ 8A0D              ; loop 7 times for 7 lines
 399+ 8A0D              ; start at column 14
 400+ 8A0D              ; print 7 characters
 401+ 8A0D
 402+ 8A0D              compass:
 403+ 8A0D              ;first colour in the background - 7 lines starting at 17,25
 404+ 8A0D              ;              ld b,17           ;row 21
 405+ 8A0D              ;              ld c,25           ;col 25
 406+ 8A0D
 407+ 8A0D              ;loc_1:        push bc
 408+ 8A0D              ;              call locate    ;set print position
 409+ 8A0D              ;              pop bc
 410+ 8A0D              ;              ;de holds the attribute position
 411+ 8A0D              ;              ld a,151          ;set colour
 412+ 8A0D              ;              call colour1
 413+ 8A0D              ;              ld a,23
 414+ 8A0D              ;              sub b
 415+ 8A0D              ;              inc b
 416+ 8A0D              ;              jr nz,loc_1
 417+ 8A0D              ;              jr draw_compass
 418+ 8A0D
 419+ 8A0D              ;colour1:      ld l,7
 420+ 8A0D              ;colour2:      ld (de),a
 421+ 8A0D              ;              inc de
 422+ 8A0D              ;              dec l
 423+ 8A0D              ;              ret z
 424+ 8A0D              ;              jr colour2
 425+ 8A0D
 426+ 8A0D              ;now draw the compass
 427+ 8A0D 06 17        draw_compass: ld b,23           ;row 21
 428+ 8A0F 0E 19                      ld c,25           ;col 25
 429+ 8A11
 430+ 8A11 C5                         push bc
 431+ 8A12 CD 3C 8A                   call print_pos    ;set print position
 432+ 8A15 C1                         pop bc
 433+ 8A16
 434+ 8A16              ; now print our characters
 435+ 8A16 11 83 8A                   ld de,c_dat-1       ;data start
 436+ 8A19 1A           loop1:        ld a,(de)
 437+ 8A1A FE 78                      cp 'x';120            ; = "x" data end
 438+ 8A1C CA 2E 8A                   jp z,nxt_line
 439+ 8A1F FE 46                      cp 'F';70             ; "F" finished so exit
 440+ 8A21 CA 47 8A                   jp z, do_exit
 441+ 8A24
 442+ 8A24 D5                         push de
 443+ 8A25 C5                         push bc
 444+ 8A26 CD 6A 89                   call print1       ; print the character
 445+ 8A29 C1                         pop bc
 446+ 8A2A D1                         pop de
 447+ 8A2B
 448+ 8A2B 1B                         dec de
 449+ 8A2C 18 EB                      jr loop1
 450+ 8A2E
 451+ 8A2E C5           nxt_line:     push bc
 452+ 8A2F D5                         push de
 453+ 8A30 0E 19                      ld c,25
 454+ 8A32 05                         dec b
 455+ 8A33 CD 3C 8A                   call print_pos
 456+ 8A36 D1                         pop de
 457+ 8A37 C1                         pop bc
 458+ 8A38 1B                         dec de
 459+ 8A39 05                         dec b
 460+ 8A3A 18 DD                      jr loop1
 461+ 8A3C
 462+ 8A3C              ; set print position
 463+ 8A3C C5           print_pos:    push bc
 464+ 8A3D CD 48 89                   call locate
 465+ 8A40 3E A5                      ld a,165          ;set ink and paper colour
 466+ 8A42 32 66 89                   ld (att),a
 467+ 8A45 C1                         pop bc
 468+ 8A46 C9                         ret
 469+ 8A47
 470+ 8A47 CD 84 8A     do_exit:  call show_dir     ; highlight player direction
 471+ 8A4A
 472+ 8A4A C9                         ret
 473+ 8A4B
 474+ 8A4B
 475+ 8A4B 46                   db "F"
 476+ 8A4C              ;        db "x       "
 477+ 8A4C 78 73 73 61          db "xssapmoC"
 477+ 8A50 70 6D 6F 43
 478+ 8A54 78 20 20 20          db "x       "
 478+ 8A58 20 20 20 20
 479+ 8A5C 78 20 20 20          db "x   N   "
 479+ 8A60 4E 20 20 20
 480+ 8A64 78 20 20 20          db "x   |   "
 480+ 8A68 7C 20 20 20
 481+ 8A6C 78 20 45 2D          db "x E-+-W "
 481+ 8A70 2B 2D 57 20
 482+ 8A74 78 20 20 20          db "x   |   "
 482+ 8A78 7C 20 20 20
 483+ 8A7C 78 20 20 20          db "x   S   "
 483+ 8A80 53 20 20 20
 484+ 8A84              c_dat:
 485+ 8A84
 486+ 8A84
 487+ 8A84              ;===========================================
 488+ 8A84              ; highlight player direction
 489+ 8A84              ;===========================================
 490+ 8A84
 491+ 8A84              ;l4085 holdsplayer view  direction
 492+ 8A84
 493+ 8A84              ;00= north, 01=west, 02=south, 03=east
 494+ 8A84
 495+ 8A84 3E A5        show_dir:     ld a,165;185             ;white txt, brown background
 496+ 8A86              ;now clear the settings to none
 497+ 8A86 21 FC 5A                   ld hl,23228+64       ;s
 498+ 8A89 77                         ld (hl),a
 499+ 8A8A 21 BE 5A                   ld hl,23166+64       ;e
 500+ 8A8D 77                         ld (hl),a
 501+ 8A8E 21 BA 5A                   ld hl,23162+64       ;w
 502+ 8A91 77                         ld (hl),a
 503+ 8A92 21 7C 5A                   ld hl,23100+64       ;n
 504+ 8A95 77                         ld (hl),a
 505+ 8A96
 506+ 8A96
 507+ 8A96              ;now colour the direction indicator
 508+ 8A96
 509+ 8A96 3A 08 FA                   ld a,(player_dir)
 510+ 8A99 FE 00                      cp 0              ;n
 511+ 8A9B C2 A4 8A                   jp nz,c1
 512+ 8A9E 21 7C 5A                   ld hl,23100+64       ;n
 513+ 8AA1 C3 BB 8A                   jp poke_it
 514+ 8AA4 FE 01        c1:           cp 1              ;w
 515+ 8AA6 20 06                      jr nz,c2
 516+ 8AA8 21 BA 5A                   ld hl,23162+64       ;w
 517+ 8AAB C3 BB 8A                   jp poke_it
 518+ 8AAE FE 02        c2:           cp 2              ;s
 519+ 8AB0 20 06                      jr nz,c3
 520+ 8AB2 21 FC 5A                   ld hl,23228+64       ;s
 521+ 8AB5 C3 BB 8A                   jp poke_it
 522+ 8AB8              ;it must be east                ;e
 523+ 8AB8 21 BE 5A     c3            ld hl,23166+64       ;e
 524+ 8ABB
 525+ 8ABB 3E 96        poke_it:      ld a,150          ;cyan paper, black writing
 526+ 8ABD 77                         ld(hl),a
 527+ 8ABE C9           q1:           ret
 528+ 8ABF
# file closed: src/2-rd3dmazeV6.asm
 417  8ABF                  INCLUDE "3-rd3dmazeV6.asm" ; check walls in front of player
# file opened: src/3-rd3dmazeV6.asm
   1+ 8ABF
   2+ 8ABF              ;##################################################
   3+ 8ABF              ; Start to draw the maze in memory
   4+ 8ABF              ;##################################################
   5+ 8ABF
   6+ 8ABF              ;hl will hold the player location in the maze
   7+ 8ABF
   8+ 8ABF              ;now draw the maze position
   9+ 8ABF
  10+ 8ABF              ;1 get our location from player_pos 16 bit but only the low byte used
  11+ 8ABF              ;  since our maze is max 256 bytes.
  12+ 8ABF              ;2 get our direction from player_dir 0 - 3 only.
  13+ 8ABF              ;  0=north
  14+ 8ABF              ;  1=west
  15+ 8ABF              ;  2=south
  16+ 8ABF              ;  3=east
  17+ 8ABF              ;3 work out how far away the wall is in front of our view-
  18+ 8ABF              ;  if its greater or less that 6 blocks since thats the max depth
  19+ 8ABF              ;  we will draw on screen (6 blocks)
  20+ 8ABF              ;4 start drawing from the back to the front
  21+ 8ABF              ;  so everything is overwritten (separate routine).
  22+ 8ABF              ;
  23+ 8ABF
  24+ 8ABF
  25+ 8ABF              ;screen is built in memory from c000 (49152) using characters
  26+ 8ABF
  27+ 8ABF              get_distance:
  28+ 8ABF
  29+ 8ABF 2A 00 FA                   ld hl,(player_pos)    ;get player location
  30+ 8AC2
  31+ 8AC2 3A 08 FA                   ld a,(player_dir)     ; get player direction
  32+ 8AC5
  33+ 8AC5
  34+ 8AC5              ;00= north, 01=west, 02=south, 03=east
  35+ 8AC5
  36+ 8AC5              ;if 0 decrease by -16 n
  37+ 8AC5              ;if 1 decrease by -1  w
  38+ 8AC5              ;if 2 increase by +16 s
  39+ 8AC5              ;if 3 increase by +1  e
  40+ 8AC5
  41+ 8AC5              ;when checking distance, if you are looking south and your current location
  42+ 8AC5              ;is >240 then you are at the south wall.
  43+ 8AC5
  44+ 8AC5
  45+ 8AC5              ;if you are at the top of the maze facing north, and you current location
  46+ 8AC5              ; is <16 you are at the far north wall of the maze
  47+ 8AC5
  48+ 8AC5              ;for east amd west you can detect a wall is chr $80 except for 255 (bottom
  49+ 8AC5              ; right) as the next  right location is outside the maze.
  50+ 8AC5
  51+ 8AC5              ; find out how far away we are from a wall
  52+ 8AC5                      ;are we facing north?
  53+ 8AC5 FE 00                      cp 0
  54+ 8AC7 CA 6A 8B                   jp z, north2
  55+ 8ACA FE 01                      cp 1
  56+ 8ACC CA 64 8B                   jp z, west2
  57+ 8ACF FE 02                      cp 2
  58+ 8AD1 CA 70 8B                   jp z, south2
  59+ 8AD4                      ;it must be facing east if we get heret
  60+ 8AD4
  61+ 8AD4                      ;check if were at the bottom right hand corner (255)
  62+ 8AD4                      ;if so we implicitly have a wall.
  63+ 8AD4
  64+ 8AD4
  65+ 8AD4
  66+ 8AD4                      ;we are facing east
  67+ 8AD4 11 01 00                   ld de, $0001      ; (+1) to go to next line in front of us
  68+ 8AD7
  69+ 8AD7              ;clear maxview flag and data
  70+ 8AD7              check_dist:
  71+ 8AD7 3E 06                      ld a,6
  72+ 8AD9 32 02 FA                   ld (maxview),a
  73+ 8ADC 3A 03 FA                   ld a,(flags)
  74+ 8ADF CB 87                      res 0,a
  75+ 8AE1 32 03 FA                   ld (flags),a
  76+ 8AE4
  77+ 8AE4 06 FF                      ld b,255            ;make accum 1 - counter
  78+ 8AE6
  79+ 8AE6              ;check if maxview set - if so, dont check for wall
  80+ 8AE6              ;in front of player anymore as there alreay is a wall set
  81+ 8AE6
  82+ 8AE6 3A 03 FA     loop2:        ld a,(flags)
  83+ 8AE9 CB 47                      bit 0,a           ;if 1, then already set
  84+ 8AEB C2 09 8B                   jp nz,check_mh
  85+ 8AEE
  86+ 8AEE 7E                         ld a,(hl)         ; this is the furthest point we can see
  87+ 8AEF FE 80                      cp _mw ;=128      ;is it a wall here
  88+ 8AF1 28 05                      jr z,j2
  89+ 8AF3              ;check for an exit wall and treat as if its a wall
  90+ 8AF3 FE C0                      cp _me
  91+ 8AF5 C2 09 8B                   jp nz, check_mh   ;if no wall check for end wall
  92+ 8AF8
  93+ 8AF8 78           j2:           ld a,b            ;there is a wall if we get here
  94+ 8AF9                            ;is it 255? if so make it 0
  95+ 8AF9 3C                         inc a             ;if a=0, it was 255
  96+ 8AFA CA FE 8A                   jp z,j1
  97+ 8AFD 3D                         dec a             ;put back to original value
  98+ 8AFE
  99+ 8AFE 32 02 FA     j1:           ld (maxview),a    ;save how far we can actually see
 100+ 8B01 3A 03 FA                   ld a,(flags)
 101+ 8B04 CB C7                      set 0,a
 102+ 8B06 32 03 FA                   ld (flags),a      ;set that we have set the flag
 103+ 8B09
 104+ 8B09
 105+ 8B09 7E           check_mh:     ld a,(hl)
 106+ 8B0A FE 81                      cp _mh ;=129      ; is it an end wall?
 107+ 8B0C 28 39                      jr z, end_loop    ; if yes, exit now
 108+ 8B0E 04                         inc b
 109+ 8B0F
 110+ 8B0F              ;check if we are at location 0 in the maze - if so do nothing
 111+ 8B0F 7D                         ld a,l
 112+ 8B10 3C                         inc a
 113+ 8B11 3D                         dec a             ;zero flag set if = to zero
 114+ 8B12 CA 44 8B                   jp z,end_loop2
 115+ 8B15
 116+ 8B15              ;##########################################################
 117+ 8B15
 118+ 8B15              ;now check if we are at the top end of the maze or the bottom
 119+ 8B15              ;end of the maze as there are no blocks to check for there.
 120+ 8B15              ;do bottom end first.
 121+ 8B15
 122+ 8B15
 123+ 8B15 3A 08 FA                   ld a,(player_dir)
 124+ 8B18 3D                         dec a                 ;is it 0 which = north
 125+ 8B19 3C                         inc a
 126+ 8B1A C2 28 8B                   jp nz,cont_6a          ;carry on if not at north wall
 127+ 8B1D
 128+ 8B1D                            ;are we trying to read data outside the 256 byte boundary?
 129+ 8B1D 7D                         ld a,l
 130+ 8B1E FE 11                      cp 17
 131+ 8B20 D2 3B 8B                   jp nc,cont_9
 132+ 8B23
 133+ 8B23 19                         add hl,de         ;now jump to next location in front of us
 134+ 8B24 78                         ld a,b            ;get our depth
 135+ 8B25 C3 47 8B                   jp end_loop       ;exit routine
 136+ 8B28
 137+ 8B28
 138+ 8B28 3A 08 FA     cont_6a       ld a,(player_dir)
 139+ 8B2B D6 02                      sub 2              ;are we facing south?
 140+ 8B2D C2 3B 8B                   jp nz,cont_9        ;z means yes
 141+ 8B30
 142+ 8B30 7D                         ld a,l
 143+ 8B31 FE F0                      cp 240
 144+ 8B33 DA 3B 8B                   jp c,cont_9      ;carry set if cp >a
 145+ 8B36
 146+ 8B36 19                         add hl,de         ;now jump to next location in front of us
 147+ 8B37 78                         ld a,b            ;get our depth
 148+ 8B38 C3 47 8B                   jp end_loop       ;exit routine
 149+ 8B3B
 150+ 8B3B
 151+ 8B3B              ;###########################################################
 152+ 8B3B
 153+ 8B3B 78           cont_9        ld a,b
 154+ 8B3C FE 06                      cp 6              ;only do a max of 6 loops as
 155+ 8B3E 19                         add hl,de         ;now jump to next location in front of
 156+ 8B3F 20 A5                      jr nz,loop2
 157+ 8B41 C3 47 8B                   jp end_loop
 158+ 8B44                      ;we have hit a wall or 6 loops
 159+ 8B44
 160+ 8B44 06 FF        end_loop2:    ld b,255          ;we are here as we are at the end wall
 161+ 8B46                                              ;top and bottom of the maze so make our
 162+ 8B46                                              ;depth 0
 163+ 8B46 04           end_loop1:    inc b
 164+ 8B47
 165+ 8B47              end_loop:
 166+ 8B47              ;first check if we hit an end wall - our maxview flag will =0
 167+ 8B47 3A 03 FA                   ld a,(flags)
 168+ 8B4A CB 47                      bit 0,a
 169+ 8B4C C2 53 8B                   jp nz,cont_8      ;continue on if not 0
 170+ 8B4F 78                         ld a,b
 171+ 8B50 32 02 FA                   ld (maxview),a    ;if it is make maxview 0
 172+ 8B53              cont_8:
 173+ 8B53              ;check if b=255, if so, make it 0
 174+ 8B53 04                         inc b
 175+ 8B54 CA 58 8B                   jp z,here1
 176+ 8B57 05                         dec b             ;put back original value
 177+ 8B58 78           here1:        ld a,b
 178+ 8B59 32 06 FA                   ld (depth),a         ; -save how far we can see
 179+ 8B5C ED 53 09 FA                ld (de_count),de     ;save the de value for adding / subtracting later
 180+ 8B60 22 25 FA                   ld (furthest_point),hl
 181+ 8B63 C9                         ret
 182+ 8B64
 183+ 8B64              west2:
 184+ 8B64 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the left
 185+ 8B67 C3 D7 8A                   jp check_dist
 186+ 8B6A
 187+ 8B6A              north2:
 188+ 8B6A 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind
 189+ 8B6D C3 D7 8A                   jp check_dist
 190+ 8B70              south2:
 191+ 8B70 11 10 00                   ld de, $0010      ; (+16) to go to next line to the left
 192+ 8B73 C3 D7 8A                   jp check_dist
 193+ 8B76
 194+ 8B76 C9                         ret
 195+ 8B77
 196+ 8B77
 197+ 8B77              ;############################################
 198+ 8B77              ; ld de with the value to use to check the walls in front
 199+ 8B77              ; or the sides of the player
 200+ 8B77              ;############################################
 201+ 8B77
 202+ 8B77              ; reg a must contain the direction you want to look at
 203+ 8B77
 204+ 8B77              load_de:
 205+ 8B77 3A 08 FA                 ld a,(player_dir)     ; get player direction
 206+ 8B7A              ; 00= north, 01=west, 02=south, 03=east
 207+ 8B7A
 208+ 8B7A              ;if 0 decrease by -16 n
 209+ 8B7A              ;if 1 decrease by -1  w
 210+ 8B7A              ;if 2 increase by +16 s
 211+ 8B7A              ;if 3 increase by +1  e
 212+ 8B7A
 213+ 8B7A              ;when checking distance, if you are looking south and your current location
 214+ 8B7A              ;is >240 then you are at the south wall.
 215+ 8B7A
 216+ 8B7A
 217+ 8B7A              ;if you are at the top of the maze facing north, and you current location
 218+ 8B7A              ; is <16 you are at the far north wall of the maze
 219+ 8B7A
 220+ 8B7A              ;for east and west you can detect a wall is $80 except for 255 (bottom
 221+ 8B7A              ; right) as the next  right location is outside the maze.
 222+ 8B7A
 223+ 8B7A              ; find out how far away we are from a wall
 224+ 8B7A                      ;are we facing north?
 225+ 8B7A FE 00                      cp 0
 226+ 8B7C C2 91 8B                   jp nz,de_1
 227+ 8B7F 11 FF FF                   ld de, $ffff  ; (-1) to go to the left of north
 228+ 8B82 ED 53 0B FA                ld (left),de
 229+ 8B86 11 01 00                   ld de, $0001  ; (+1) to go to next line right  - north
 230+ 8B89 ED 53 0D FA                ld (right),de
 231+ 8B8D 11 10 00                   ld de, $0010  ; (+16) to go to next line behind - north
 232+ 8B90 C9                         ret
 233+ 8B91
 234+ 8B91 FE 01        de_1:         cp 1          ;west
 235+ 8B93 C2 A8 8B                   jp nz,de_2
 236+ 8B96 11 10 00                   ld de, $0010  ; (+16) to go to next line to the left - west
 237+ 8B99 ED 53 0B FA                ld (left),de
 238+ 8B9D 11 F0 FF                   ld de, $fff0  ; (-16) to go to next line to the right - west
 239+ 8BA0 ED 53 0D FA                ld (right),de
 240+ 8BA4 11 01 00                   ld de, $0001  ; (+1) to go to next line behind - west
 241+ 8BA7 C9                         ret
 242+ 8BA8
 243+ 8BA8 FE 02        de_2:         cp 2          ; south
 244+ 8BAA C2 BF 8B                   jp nz,de_3
 245+ 8BAD 11 01 00                   ld de, $001  ; (+1) to go to next line to the left - south
 246+ 8BB0 ED 53 0B FA                ld (left),de
 247+ 8BB4 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the right - south
 248+ 8BB7 ED 53 0D FA                ld (right),de
 249+ 8BBB 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind - south
 250+ 8BBE C9                         ret
 251+ 8BBF
 252+ 8BBF                            ;we must be facing east if we get here
 253+ 8BBF 11 F0 FF     de_3:         ld de, $fff0      ; (-16) to go to next line left - east
 254+ 8BC2 ED 53 0B FA                ld (left),de
 255+ 8BC6 11 10 00                   ld de, $0010      ; (+16) to go to next line right - east
 256+ 8BC9 ED 53 0D FA                ld (right),de
 257+ 8BCD 11 FF FF                   ld de, $ffff      ; (-1) to go to next line behind - east
 258+ 8BD0 C9                         ret
 259+ 8BD1
 260+ 8BD1
 261+ 8BD1              ;#######################################################
 262+ 8BD1              ;load walk - load de with the amount to jump in the maze
 263+ 8BD1              ;as we walk forward
 264+ 8BD1              ;#######################################################
 265+ 8BD1
 266+ 8BD1              load_walk:
 267+ 8BD1 3A 08 FA                   ld a,(player_dir)   ;find out which way we are looking
 268+ 8BD4
 269+ 8BD4                            ;are we facing north?
 270+ 8BD4 FE 00                      cp 0
 271+ 8BD6 C2 DD 8B                   jp nz,de1
 272+ 8BD9 11 F0 FF                   ld de, $fff0 ; (-16) to go to next line behind - north
 273+ 8BDC C9                         ret
 274+ 8BDD
 275+ 8BDD FE 01        de1:          cp 1          ;west
 276+ 8BDF C2 E6 8B                   jp nz,de2
 277+ 8BE2 11 FF FF                   ld de, $ffff  ; (-1) to go to next line behind - west
 278+ 8BE5 C9                         ret
 279+ 8BE6
 280+ 8BE6 FE 02        de2:          cp 2          ; south
 281+ 8BE8 C2 EF 8B                   jp nz,de3
 282+ 8BEB 11 10 00                   ld de, $0010     ; (+16) to go to next line behind - south
 283+ 8BEE C9                         ret
 284+ 8BEF
 285+ 8BEF                            ;we must be facing east if we get here
 286+ 8BEF 11 01 00     de3:          ld de, $0001      ; (+1) to go to next line behind - east
 287+ 8BF2 C9                         ret
 288+ 8BF3
 289+ 8BF3
 290+ 8BF3
 291+ 8BF3              ;#################################################################################
 292+ 8BF3              ;DOOR DRAWING ROUTINES
 293+ 8BF3
 294+ 8BF3              ;#################################################################################
 295+ 8BF3              ;see if we need to draw an open or closed door
 296+ 8BF3
 297+ 8BF3              ; show door type = 0 = front, 1 = side
 298+ 8BF3              ;side_or_front_door  db 0
 299+ 8BF3              ;             ld (show_exit),a
 300+ 8BF3                              ;side_or_front_door
 301+ 8BF3              ;             ld (switch_pulled),a
 302+ 8BF3
 303+ 8BF3              draw_door:   ;check to see if we need to show the exit door
 304+ 8BF3                           ;door will always face NORTH.
 305+ 8BF3 AF                        xor a                  ;make reg a zero to say no door
 306+ 8BF4 32 2A FA                  ld (show_exit),a
 307+ 8BF7                           ;are we facing south?
 308+ 8BF7 3A 08 FA                  ld a,(player_dir)
 309+ 8BFA D6 02                     sub 2                  ;2 = south
 310+ 8BFC 20 28                     jr nz,check_east      ;if not check if door is to our right hand side
 311+ 8BFE                           ;we must be facing south and be in front of the door
 312+ 8BFE                           ;dec a
 313+ 8BFE                           ;ld (show_exit),a
 314+ 8BFE 2A 00 FA                  ld hl,(player_pos)
 315+ 8C01 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 316+ 8C04 19                        add hl,de
 317+ 8C05 7E                        ld a,(hl)
 318+ 8C06 FE C0                     cp _me                 ;is it our DOOR?
 319+ 8C08 20 1C                     jr nz,check_east      ;if not check if door is to our right hand side
 320+ 8C0A                           ;YES its a door - so draw it - but only if we are looking south
 321+ 8C0A 3A 2B FA                  ld a,(switch_pulled)
 322+ 8C0D A7                        and a
 323+ 8C0E 28 0B                     jr z,not_open
 324+ 8C10 CD 51 85                  call  draw_exit_door_open
 325+ 8C13                           ;print the door message
 326+ 8C13 DD 21 4F 82               ld ix,message_leave
 327+ 8C17 CD B8 81                  CALL print_message
 328+ 8C1A C9                        ret
 329+ 8C1B CD 8D 83     not_open:    call draw_exit_door_closed
 330+ 8C1E
 331+ 8C1E                           ;print the door message
 332+ 8C1E DD 21 1C 82               ld ix,message_closed        ;exit_closed
 333+ 8C22 CD B8 81                  CALL print_message
 334+ 8C25 C9                        ret
 335+ 8C26
 336+ 8C26              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 337+ 8C26              check_east:
 338+ 8C26                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 339+ 8C26                           ; so we have to be facing EAST
 340+ 8C26 3A 08 FA                  ld a,(player_dir)
 341+ 8C29 D6 03                     sub 3              ;EAST = 3
 342+ 8C2B C0                        ret nz             ;exit as theres no door to our right
 343+ 8C2C
 344+ 8C2C 2A 00 FA                  ld hl,(player_pos)
 345+ 8C2F 23                        inc hl             ;move test point to 1 place in front of us
 346+ 8C30 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 347+ 8C33 19                        add hl,de
 348+ 8C34 7E                        ld a,(hl)
 349+ 8C35 FE C0                     cp _me             ;;is it our DOOR?
 350+ 8C37 C0                        ret nz
 351+ 8C38                           ;there IS a door and it will always face NORTH and be on our right
 352+ 8C38                           ;yes its our door - so draw it
 353+ 8C38
 354+ 8C38                           ;determine if its open or closed
 355+ 8C38 3A 2B FA                  ld a,(switch_pulled)
 356+ 8C3B A7                        and a
 357+ 8C3C 20 04                     jr nz,_open           ;0=closed 1 = open
 358+ 8C3E CD BE 86                  call draw_door_right_closed
 359+ 8C41 C9                        ret
 360+ 8C42 CD A8 87     _open:       call draw_door_right_open
 361+ 8C45 C9                        ret
 362+ 8C46
 363+ 8C46              ;#########################################################################################
 364+ 8C46
 365+ 8C46
 366+ 8C46
# file closed: src/3-rd3dmazeV6.asm
 418  8C46                  INCLUDE "4-rd3dmazeV6.asm" ; draw left side of maze
# file opened: src/4-rd3dmazeV6.asm
   1+ 8C46
   2+ 8C46              ;============================================
   3+ 8C46              ;start to draw the maze from current location
   4+ 8C46              ;============================================
   5+ 8C46
   6+ 8C46
   7+ 8C46              draw_left_side:
   8+ 8C46
   9+ 8C46
  10+ 8C46
  11+ 8C46              ;       (depth) will hold how far we can see - max 6 squares in front of our view
  12+ 8C46
  13+ 8C46              ;              ld hl,(player_pos)    ;get player position
  14+ 8C46
  15+ 8C46              ;              ld a,l
  16+ 8C46                      ; if l=255  we are at the bottom right hand corner facing east to a end wall
  17+ 8C46                      ; if l>240 we are at the south wall
  18+ 8C46                      ; if l<16 we are at the north wall
  19+ 8C46
  20+ 8C46
  21+ 8C46              ;how do i implement a less-than/greater-than test in assembly?
  22+ 8C46
  23+ 8C46              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
  24+ 8C46              ;a and the argument were equal, else if the carry is set the argument was greater,
  25+ 8C46              ;and finally, if neither is set, then a must be greater
  26+ 8C46              ;(cp does nothing to the registers, only the f (flag) register is changed).
  27+ 8C46
  28+ 8C46              ;we need to draw from the furthest distance so
  29+ 8C46              ;point hl to furthest position - only need to use l reg in the subtraction
  30+ 8C46              ;              ld a,l
  31+ 8C46              ;              sub a,b           ;will never be >255 or less than 1
  32+ 8C46              ;hl now points to furthest visible point in front of the player
  33+ 8C46
  34+ 8C46
  35+ 8C46              ;no matter what, always draw layer 6 view so theres always a wall in front of us
  36+ 8C46
  37+ 8C46              ;        ld   de,$C177
  38+ 8C46              ;        ld   a,_topblack
  39+ 8C46              ;;        ld   a,_topwhitebottomchequer
  40+ 8C46              ;        ld   (de),a                             ; insert the top of the wall face.
  41+ 8C46              ;        ld   hl,$0021
  42+ 8C46              ;        add  hl,de                              ; advance to the next row of the display file.
  43+ 8C46              ;        ld   (hl),_bottomblack        ; insert the bottom of the wall face.
  44+ 8C46              ;;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
  45+ 8C46
  46+ 8C46              ;draw a complete line of chequerboard to emulate seeing the outside
  47+ 8C46              ;maze wall regardless of what blocks are seen.
  48+ 8C46
  49+ 8C46 21 6A C1             ld hl,$c16A
  50+ 8C49 11 6B C1             ld de,$C16b              ; offset to row 11, col 0
  51+ 8C4C 01 19 00             ld bc,25
  52+ 8C4F                    ; ld (hl),_topwhitebottomchequer
  53+ 8C4F 36 A2                ld (hl),_bottomblack        ; insert the bottom of the wall face.
  54+ 8C51
  55+ 8C51 ED B0                ldir
  56+ 8C53 21 8B C1             ld hl,$c18b
  57+ 8C56 11 8C C1             ld de,$C18c              ; offset to row 12, col 0
  58+ 8C59 01 19 00             ld bc,25
  59+ 8C5C                    ; ld (hl),_topchequerbottomwhite
  60+ 8C5C 36 A3                ld (hl),_topblack        ; insert the bottom of the wall face.
  61+ 8C5E ED B0                ldir
  62+ 8C60
  63+ 8C60              ;now draw the rest of the left side
  64+ 8C60
  65+ 8C60 3A 06 FA                   ld a,(depth)
  66+ 8C63 FE 06                      cp 6
  67+ 8C65 CA 85 8C                   jp z,draw_6	;just draw end middle block perhaps??
  68+ 8C68 FE 05                      cp 5
  69+ 8C6A CA C9 8C                   jp z,draw_5	;only need to draw 3 block + 1 part
  70+ 8C6D FE 04                      cp 4
  71+ 8C6F CA 73 8E                   jp z,draw_4	;only need to draw 2 block + 1 part
  72+ 8C72 FE 03                      cp 3
  73+ 8C74 CA 8C 90                   jp z,draw_3	;only need to draw 1 block + 1 part
  74+ 8C77 FE 02                      cp 2
  75+ 8C79 CA 1E 92                   jp z,draw_2	;only need to draw 1 block
  76+ 8C7C FE 01                      cp 1
  77+ 8C7E CA D6 92                   jp z,draw_1	;only need to draw 1 block
  78+ 8C81 C3 7F 93                   jp draw_0		;only need to draw edge blocks
  79+ 8C84              ;end of routine
  80+ 8C84 C9                         ret
  81+ 8C85
  82+ 8C85              draw_6:
  83+ 8C85
  84+ 8C85              draw_layer_6:
  85+ 8C85
  86+ 8C85
  87+ 8C85              ;now draw the maze starting at the furthest point we can see
  88+ 8C85              ; i.e. the middle of the display
  89+ 8C85
  90+ 8C85              ; draw section 6
  91+ 8C85              ; --------------
  92+ 8C85              ; hl=maze location being drawn.
  93+ 8C85              ; now determine what to draw for this section.
  94+ 8C85
  95+ 8C85 2A 25 FA             ld hl,(furthest_point)
  96+ 8C88 CD 77 8B             call load_de
  97+ 8C8B 19                   add hl,de
  98+ 8C8C 22 25 FA             ld (furthest_point),hl  ;increment for the next layer to draw
  99+ 8C8F
 100+ 8C8F 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
 101+ 8C92 11 77 01             ld   de,$0177           ; offset to row 11 column 12 - the centre of the 3d view.
 102+ 8C95 19                   add  hl,de
 103+ 8C96 E5                   push hl                 ;save it
 104+ 8C97
 105+ 8C97 ED 5B 25 FA          ld   de,(furthest_point); retrieve the maze location.
 106+ 8C9B EB                   ex   de,hl              ; transfer de to hl.
 107+ 8C9C
 108+ 8C9C ED 5B 09 FA          ld de,(de_count)
 109+ 8CA0 19                   add hl,de               ;get the block in front of us from the maze.
 110+ 8CA1
 111+ 8CA1              loop6:
 112+ 8CA1
 113+ 8CA1 7E                   ld a,(hl)
 114+ 8CA2 17                   rla
 115+ 8CA3 DA A9 8C             jp c,do_wall            ;bit 7 (128)
 116+ 8CA6
 117+ 8CA6 C3 BF 8C             jp do_no_wall         ; otherwise draw no wall
 118+ 8CA9
 119+ 8CA9
 120+ 8CA9              do_wall:
 121+ 8CA9                      ;check if bit 2 is set as thats an end wall
 122+ 8CA9                      ;and b must then be changed to 1 to stop drawing more than 1 wall.
 123+ 8CA9 17                   rla                     ;rotate next bit into carry.
 124+ 8CAA D2 B3 8C             jp nc, draw7
 125+ 8CAD CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 126+ 8CAF 28 02                jr z,draw7
 127+ 8CB1 06 01                ld b,1                  ;set b so we exit on return
 128+ 8CB3
 129+ 8CB3 D1           draw7   pop de
 130+ 8CB4 3E A2                ld   a,_bottomblack
 131+ 8CB6 12                   ld   (de),a             ; insert the top of the wall.
 132+ 8CB7 21 21 00             ld   hl,$0021
 133+ 8CBA 19                   add  hl,de              ; advance to the next row of the display file.
 134+ 8CBB 36 A3                ld   (hl),_topblack     ; insert the bottom of the wall.
 135+ 8CBD 18 0A                jr draw_5              ; jump to draw layer 5
 136+ 8CBF
 137+ 8CBF              ; there is a wall so insert chequerboard for the wall face.
 138+ 8CBF
 139+ 8CBF              do_no_wall:
 140+ 8CBF D1                   pop de
 141+ 8CC0                      ;push de
 142+ 8CC0 3E A2                ld   a,_bottomblack;_topwhitebottomchequer
 143+ 8CC2 12                   ld   (de),a                             ; insert the top of the wall face.
 144+ 8CC3 21 21 00             ld   hl,$0021
 145+ 8CC6 19                   add  hl,de                              ; advance to the next row of the display file.
 146+ 8CC7 36 A3                ld   (hl),_topblack;_topchequerbottomwhite        ; insert the bottom of the wall face.
 147+ 8CC9
 148+ 8CC9              ;now got to draw the 5th row of data
 149+ 8CC9
 150+ 8CC9
 151+ 8CC9              ;############################################
 152+ 8CC9              ;############################################
 153+ 8CC9              ;draw section 5 left
 154+ 8CC9              ;############################################
 155+ 8CC9              ;############################################
 156+ 8CC9
 157+ 8CC9              draw_5:
 158+ 8CC9              ;ret
 159+ 8CC9              ; hl=maze location being drawn.
 160+ 8CC9              ; now determine what to draw for this section.
 161+ 8CC9
 162+ 8CC9              ;first we need to decrement how far we can see to the layer
 163+ 8CC9              ;we are working on
 164+ 8CC9
 165+ 8CC9 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 166+ 8CCC
 167+ 8CCC CD 77 8B             call load_de            ;get left and right and front jump into de reg
 168+ 8CCF 19                   add hl,de               ;jump backwards along the user view 1 space
 169+ 8CD0
 170+ 8CD0 22 25 FA             ld (furthest_point),hl ;re save it
 171+ 8CD3
 172+ 8CD3 11 FF FF             ld de,$ffff             ;to move the display position -1
 173+ 8CD6 ED 53 11 FA          ld (var4),de
 174+ 8CDA
 175+ 8CDA ED 5B 0B FA          ld de,(left)
 176+ 8CDE
 177+ 8CDE              ;move the maze location pointer 1 to the left - used for all
 178+ 8CDE              ;remaining blocks to test if there is a wall there or not.
 179+ 8CDE
 180+ 8CDE 19                   add hl,de
 181+ 8CDF 22 15 FA             ld (var6),hl
 182+ 8CE2
 183+ 8CE2 ED 53 0F FA          ld (var3),de
 184+ 8CE6 11 75 01             ld   de,$0175           ; offset to row 11 column 10 - left of  centre of the 3d view.
 185+ 8CE9
 186+ 8CE9 CD EF 8C             call do_draw_5
 187+ 8CEC
 188+ 8CEC C3 73 8E              jp draw_4               ;now draw the 4th level
 189+ 8CEF
 190+ 8CEF              do_draw_5:
 191+ 8CEF
 192+ 8CEF 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
 193+ 8CF2 19                   add  hl,de
 194+ 8CF3
 195+ 8CF3
 196+ 8CF3              ; draw left half then right half of the display.
 197+ 8CF3
 198+ 8CF3 06 04                ld b,4                ; count for 4 columns left  of maze
 199+ 8CF5
 200+ 8CF5 ED 5B 15 FA          ld de,(var6); retrieve the maze location.
 201+ 8CF9
 202+ 8CF9
 203+ 8CF9
 204+ 8CF9              ;check if we are at the bottom right of the maze
 205+ 8CF9              ;if so, there is no wall after position 255 so point us to
 206+ 8CF9              ;position 240 and fake the wall!
 207+ 8CF9              ;;;        ld a,e
 208+ 8CF9              ;;;        cp 255
 209+ 8CF9              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 210+ 8CF9              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 211+ 8CF9
 212+ 8CF9
 213+ 8CF9              ;now move the maze pointer left (-1) 1 position
 214+ 8CF9              ;so we can read the type of walls to our left
 215+ 8CF9
 216+ 8CF9              cont_3:
 217+ 8CF9              ;*         push hl
 218+ 8CF9              ;*        ld hl,(left)
 219+ 8CF9              ;*        add hl,de
 220+ 8CF9              ;*        ex de,hl
 221+ 8CF9              ;*        pop hl
 222+ 8CF9
 223+ 8CF9 EB                   ex   de,hl              ; transfer de to hl.
 224+ 8CFA
 225+ 8CFA              ;       hl = furthest point in the maze
 226+ 8CFA              ;       de = d_file location to store byte to display
 227+ 8CFA
 228+ 8CFA              ;we have to load the first plot position with a corner bit to show
 229+ 8CFA              ;the end of the wall at the position we can see next to the center
 230+ 8CFA              ;plot position on section 6
 231+ 8CFA              ;then, while we draw the other blocks we can see we just want top and
 232+ 8CFA              ;bottom blacks pointed so will use var1 and var 2 to hold the
 233+ 8CFA              ;character block we need to print.
 234+ 8CFA
 235+ 8CFA
 236+ 8CFA 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 237+ 8CFC 32 04 FA             ld (var1),a
 238+ 8CFF 3C                   inc a
 239+ 8D00 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 240+ 8D02
 241+ 8D02 32 05 FA             ld (var2),a             ;ld with bottom left char
 242+ 8D05
 243+ 8D05              loop8:
 244+ 8D05 E5                   push hl
 245+ 8D06
 246+ 8D06
 247+ 8D06              ;############################################################################
 248+ 8D06              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 249+ 8D06
 250+ 8D06 3A 28 FA             ld a,(maze_highbyte)
 251+ 8D09 BC                   cp h                    ;are we at the top part of the maze?
 252+ 8D0A CA 3D 8D             jp z,cont_1s
 253+ 8D0D                                              ;if we are on a different maze boundary
 254+ 8D0D                                              ;then draw a maze wall as we are the top
 255+ 8D0D                                              ;or north wall but maze data has no
 256+ 8D0D                                              ;wall data.
 257+ 8D0D              ;4 = 2nd left wall
 258+ 8D0D              ;3 = 2nd left wall
 259+ 8D0D              ;2 = 3rd left wall
 260+ 8D0D              ;1 = 4th left wall
 261+ 8D0D
 262+ 8D0D 78                   ld a,b                  ;our current wall counter
 263+ 8D0E FE 04                cp 4
 264+ 8D10 C2 1B 8D             jp nz,a5_1                 ;its not wall 4
 265+ 8D13 3E 01                ld a,1
 266+ 8D15 47                   ld b,a
 267+ 8D16 C6 80                add a,128               ;make sure we set a wall!
 268+ 8D18 C3 73 8D             jp draw_5S             ;jump straight to making an end wall
 269+ 8D1B
 270+ 8D1B FE 03        a5_1:   cp 3
 271+ 8D1D C2 28 8D             jp nz,a5_2             ;its not wall 3
 272+ 8D20 3E 01                ld a,1
 273+ 8D22 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 274+ 8D23 C6 80                add a,128               ;make sure we set a wall!
 275+ 8D25 C3 9A 8D             jp do_2ndwall_l        ;draw the 2nd block to the left
 276+ 8D28
 277+ 8D28 FE 02        a5_2:   cp 2
 278+ 8D2A C2 35 8D             jp nz,a5_3             ;its not wall 3
 279+ 8D2D 3E 01                ld a,1
 280+ 8D2F 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 281+ 8D30 C6 80                add a,128               ;make sure we set a wall!
 282+ 8D32 C3 DA 8D             jp do_3rdwall_l       ;draw the 2nd block to the left
 283+ 8D35
 284+ 8D35              ;a must = 1 if we get here.
 285+ 8D35 3E 01        a5_3:   ld a,1
 286+ 8D37 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 287+ 8D38 C6 80                add a,128               ;make sure we set a wall!
 288+ 8D3A C3 27 8E             jp do_4thwall_l       ;draw the cnd block to the left
 289+ 8D3D
 290+ 8D3D              ;############################################################################
 291+ 8D3D
 292+ 8D3D              ;are we at a maze edge wall = clear flag?
 293+ 8D3D              cont_1s:
 294+ 8D3D 97                   sub a
 295+ 8D3E 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 296+ 8D41
 297+ 8D41
 298+ 8D41 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 299+ 8D42
 300+ 8D42 FE 81                cp _mh                  ;maze_wall = 129
 301+ 8D44 20 07                jr nz,cont9
 302+ 8D46 F5                   push af
 303+ 8D47 3E 01                ld a,1
 304+ 8D49 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 305+ 8D4C F1                   pop af
 306+ 8D4D
 307+ 8D4D 17           cont9:  rla
 308+ 8D4E DA 61 8D             jp c,do_wall5            ;bit 7 (128)
 309+ 8D51
 310+ 8D51
 311+ 8D51              go_back5:
 312+ 8D51 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 313+ 8D54 19                   add hl,de               ; holds current screen position
 314+ 8D55 EB                   ex de,hl
 315+ 8D56 E1                   pop hl
 316+ 8D57 D5                   push de
 317+ 8D58 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 318+ 8D5C 19                   add hl,de                ; go left 1 block in the maze
 319+ 8D5D D1                   pop de
 320+ 8D5E 10 A5                djnz loop8
 321+ 8D60 C9                   ret
 322+ 8D61
 323+ 8D61
 324+ 8D61              ; there is not a wall so insert black to show that the location is too far away to see its detail.
 325+ 8D61
 326+ 8D61              do_wall5:
 327+ 8D61
 328+ 8D61              ;check if b=2 - if so we are not at a wall immediately next to our left
 329+ 8D61              ;nor are we at an and wall. We are drawing the 2nd block to the left
 330+ 8D61              ;b=3 for 3rd block to the left.
 331+ 8D61
 332+ 8D61 78                   ld a,b
 333+ 8D62 D6 01                sub 1
 334+ 8D64 CA 27 8E             jp z,do_4thwall_l       ;draw the cnd block to the left
 335+ 8D67
 336+ 8D67 78                   ld a,b                  ;b is our loop count
 337+ 8D68 D6 02                sub 2                   ;check if a=2
 338+ 8D6A CA DA 8D             jp z,do_3rdwall_l       ;draw the 2nd block to the left
 339+ 8D6D
 340+ 8D6D 78                   ld a,b
 341+ 8D6E D6 03                sub 3
 342+ 8D70 CA 9A 8D             jp z,do_2ndwall_l       ;draw the cnd block to the left
 343+ 8D73
 344+ 8D73
 345+ 8D73
 346+ 8D73              ;b must = 4 if we get here, so draw the first wall
 347+ 8D73
 348+ 8D73                        ;check if bit 2 is set as thats an end
 349+ 8D73                      ;and b must then be changed to 1 to stop drawing.
 350+ 8D73              draw_5S:
 351+ 8D73 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 352+ 8D75 28 04                jr z,draw8
 353+ 8D77
 354+ 8D77 97                   sub a                   ;we do NOT have an ouside maze wall
 355+ 8D78 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 356+ 8D7B              ;b must be 1 if we get here!
 357+ 8D7B
 358+ 8D7B D5           draw8:  push de
 359+ 8D7C 3A 04 FA             ld   a,(var1)           ;holds _smallwall
 360+ 8D7F 12                   ld   (de),a             ; insert the top of the wall.
 361+ 8D80
 362+ 8D80 1B                   dec de
 363+ 8D81 12                   ld   (de),a             ; insert the top of the wall.
 364+ 8D82 13                   inc de                  ;put plot position back to start of wall
 365+ 8D83
 366+ 8D83              ;now check if we need to draw a black side on the right
 367+ 8D83              ;by looking to the character to the right of the wall
 368+ 8D83              ;and if there is not a wall already drawn, then draw a
 369+ 8D83              ;black side
 370+ 8D83
 371+ 8D83 3E A9                ld a,_topleft5          ;draw the top left side
 372+ 8D85 13                   inc de                  ;jump ahead 1 char in the display
 373+ 8D86 12                   ld (de),a               ;draw a black and chevron side
 374+ 8D87 1B                   dec de                  ;go back 1 space again
 375+ 8D88
 376+ 8D88              ;NOW DO THE NEXT LINE BELOW
 377+ 8D88
 378+ 8D88              ;_x1:
 379+ 8D88 21 21 00             ld   hl,$0021           ;jump to the next line below
 380+ 8D8B 19                   add  hl,de
 381+ 8D8C 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 382+ 8D8F 77                   ld   (hl),a             ; insert the bottom of the wall.
 383+ 8D90 2B                   dec hl
 384+ 8D91 77                   ld   (hl),a             ; insert the bottom of the wall.
 385+ 8D92 23                   inc hl
 386+ 8D93 23                   inc hl
 387+ 8D94 3E AB                ld a,_bottomleft5
 388+ 8D96 77                   ld (hl),a
 389+ 8D97
 390+ 8D97              ;_x2
 391+ 8D97 D1                    pop de
 392+ 8D98 18 B7                jr go_back5              ; jump back to main loop
 393+ 8D9A
 394+ 8D9A
 395+ 8D9A              ;************************************
 396+ 8D9A
 397+ 8D9A              ;draw the wall for 2nd LEFT layer
 398+ 8D9A
 399+ 8D9A              ;***********************************
 400+ 8D9A
 401+ 8D9A              do_2ndwall_l:
 402+ 8D9A
 403+ 8D9A D5                   push de                 ;save the current acreen position
 404+ 8D9B
 405+ 8D9B              ;1st check if theres a wall where we need to draw the black side
 406+ 8D9B
 407+ 8D9B 1B                   dec de
 408+ 8D9C 1B                   dec de                  ;move 3 place left to position us correctly
 409+ 8D9D
 410+ 8D9D              ;now draw a red wall to the right of section 2
 411+ 8D9D 13                   inc de
 412+ 8D9E 3E B4                ld a,_smallwall
 413+ 8DA0 12                   ld (de),a
 414+ 8DA1 1B                   dec de
 415+ 8DA2 12                   ld (de),a               ;draw 2nd one (4 wide)
 416+ 8DA3 1B                   dec de
 417+ 8DA4 12                   ld (de),a               ;draw 3rd one (4 wide)
 418+ 8DA5
 419+ 8DA5 13                   inc de
 420+ 8DA6 13                   inc de
 421+ 8DA7 13                   inc de
 422+ 8DA8                               ;put us back to our start position ready
 423+ 8DA8                                              ;to start drawing the black side
 424+ 8DA8
 425+ 8DA8              ;now check if we need to draw a black side on the right
 426+ 8DA8              ;by looking to the character to the right of the wall
 427+ 8DA8              ;and if there is not a wall already drawn, then draw a
 428+ 8DA8              ;black side
 429+ 8DA8
 430+ 8DA8 13                   inc de
 431+ 8DA9 1A                   ld a,(de)               ;read whats there
 432+ 8DAA FE B4                cp _smallwall           ;is it a wall
 433+ 8DAC CA B6 8D             jp z,_x1r_2_l           ;if yes, do NOT draw a black side.
 434+ 8DAF 1B                   dec de
 435+ 8DB0 3E 95                ld a,$95                ;draw top left side
 436+ 8DB2 12                   ld (de),a               ;draw middle top bit
 437+ 8DB3 3C                   inc a
 438+ 8DB4 13                   inc de
 439+ 8DB5 12                   ld (de),a               ;draw middle top bit
 440+ 8DB6
 441+ 8DB6
 442+ 8DB6              ;top line done
 443+ 8DB6
 444+ 8DB6              ;now do the bottom line underneath
 445+ 8DB6
 446+ 8DB6              ;REMEMBER - 1 block is 2 8 bit squares at the section
 447+ 8DB6              _x1r_2_l:
 448+ 8DB6 1B                   dec de
 449+ 8DB7 1B                   dec de
 450+ 8DB8 1B                   dec de                  ;move left 3 places in the display
 451+ 8DB9 21 21 00             ld  hl,$0021           ;jump to the next line below + 1 char right
 452+ 8DBC 19                   add hl,de
 453+ 8DBD
 454+ 8DBD
 455+ 8DBD              ;now draw a red wall to the right of section 2
 456+ 8DBD 23                   inc hl
 457+ 8DBE 3E B4                ld a,_smallwall
 458+ 8DC0 77                   ld (hl),a
 459+ 8DC1 2B                   dec hl
 460+ 8DC2 77                   ld (hl),a
 461+ 8DC3 2B                   dec hl
 462+ 8DC4 77                   ld (hl),a               ;draw 3rd one (3 wide)
 463+ 8DC5
 464+ 8DC5 23                   inc hl
 465+ 8DC6 23                   inc hl
 466+ 8DC7 23                   inc hl
 467+ 8DC8
 468+ 8DC8              ;now check if we need to draw a black side on the left of the lower half wall
 469+ 8DC8              ;do this by checking if the next block is already a wall just like above
 470+ 8DC8
 471+ 8DC8 23                   inc hl      ;look at the right block
 472+ 8DC9 7E                   ld a,(hl)
 473+ 8DCA FE B4                cp _smallwall           ;is there a bottom wall5 here?
 474+ 8DCC CA D6 8D             jp z,_x2r_2_l
 475+ 8DCF 3E 98                ld a,$98            ;draw rightmost bottom
 476+ 8DD1 2B                   dec hl
 477+ 8DD2 77                   ld (hl),a
 478+ 8DD3
 479+ 8DD3 3C                  inc a
 480+ 8DD4 23                   inc hl
 481+ 8DD5 77                   ld (hl),a
 482+ 8DD6
 483+ 8DD6 D1           _x2r_2_l  pop de
 484+ 8DD7 C3 51 8D             jp go_back5              ; jump back to main loop
 485+ 8DDA
 486+ 8DDA              ;##########################################
 487+ 8DDA
 488+ 8DDA              ;draw the wall for 3rd LEFT layer
 489+ 8DDA
 490+ 8DDA              ;##########################################
 491+ 8DDA
 492+ 8DDA              do_3rdwall_l:
 493+ 8DDA
 494+ 8DDA D5                   push de                 ;save the current acreen position
 495+ 8DDB              ;1st check if theres a wall where we need to draw the black side
 496+ 8DDB
 497+ 8DDB 1B                  dec de
 498+ 8DDC 1B                   dec de
 499+ 8DDD 1B                   dec de
 500+ 8DDE 1B                   dec de
 501+ 8DDF 1B                   dec de
 502+ 8DE0 1B                   dec de
 503+ 8DE1
 504+ 8DE1
 505+ 8DE1              ;now draw a red wall to the left of section 2,  top half
 506+ 8DE1
 507+ 8DE1 3E B4                ld a,_smallwall;$8e                ;8e - 3rd wall graphic
 508+ 8DE3 12                   ld (de),a
 509+ 8DE4 13                   inc de
 510+ 8DE5 12                   ld (de),a
 511+ 8DE6 13                   inc de
 512+ 8DE7 12                   ld (de),a
 513+ 8DE8 13                   inc de
 514+ 8DE9 12                   ld (de),a               ;draw 4th one (4 wide)
 515+ 8DEA
 516+ 8DEA
 517+ 8DEA              ;now check if we need to draw a black side on the right
 518+ 8DEA              ;by looking to the character to the right of the wall
 519+ 8DEA              ;and if there is not a wall already drawn, then draw a
 520+ 8DEA              ;black side
 521+ 8DEA
 522+ 8DEA 13                   inc de
 523+ 8DEB 1A                   ld a,(de)               ;read whats there
 524+ 8DEC                     ; dec de                  ;put our pointer back to the original position
 525+ 8DEC FE B4                cp _smallwall           ;is it a wall
 526+ 8DEE CA FE 8D             jp z,_x1r_3l               ;if yes, do NOT draw a black side.
 527+ 8DF1 1B                   dec de
 528+ 8DF2 13                   inc de
 529+ 8DF3 13                   inc de
 530+ 8DF4 13                   inc de
 531+ 8DF5 3E C5                ld a,$c5             ;draw top right side
 532+ 8DF7 12                   ld (de),a
 533+ 8DF8 1B                   dec de
 534+ 8DF9 3C                   inc a
 535+ 8DFA 12                   ld (de),a
 536+ 8DFB 3C                   inc a
 537+ 8DFC 1B                   dec de
 538+ 8DFD 12                   ld (de),a
 539+ 8DFE
 540+ 8DFE              ;Top line done
 541+ 8DFE              ;now do the bottom line
 542+ 8DFE
 543+ 8DFE              _x1r_3l:
 544+ 8DFE 1B                   dec de
 545+ 8DFF 1B                   dec de
 546+ 8E00 1B                   dec de
 547+ 8E01 1B                   dec de
 548+ 8E02
 549+ 8E02 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 8E05 19                   add  hl,de
 551+ 8E06 3E B4                ld a,_smallwall;$8e
 552+ 8E08 77                   ld (hl),a
 553+ 8E09 23                   inc hl
 554+ 8E0A 77                   ld (hl),a
 555+ 8E0B 23                   inc hl
 556+ 8E0C 77                   ld (hl),a
 557+ 8E0D 23                   inc hl
 558+ 8E0E 77                   ld (hl),a
 559+ 8E0F
 560+ 8E0F 23                   inc hl
 561+ 8E10
 562+ 8E10
 563+ 8E10              ;now check if we need to draw a black side on the left of the lower half wall
 564+ 8E10              ;do this by checking if the next block is already a wall just like above
 565+ 8E10
 566+ 8E10 23                   inc hl      ;look at the right block
 567+ 8E11 7E                   ld a,(hl)
 568+ 8E12 2B                   dec hl
 569+ 8E13 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 570+ 8E15 CA 23 8E             jp z,_x2r_3l
 571+ 8E18 2B                   dec hl
 572+ 8E19              ;inc hl
 573+ 8E19 3E C3                ld a,$c3            ;draw leftmost bottom
 574+ 8E1B 23                   inc hl
 575+ 8E1C 77                   ld (hl),a
 576+ 8E1D 23                   inc hl
 577+ 8E1E 3D                   dec a
 578+ 8E1F 77                   ld (hl),a
 579+ 8E20 23                   inc hl
 580+ 8E21 3D                   dec a
 581+ 8E22 77                   ld (hl),a
 582+ 8E23
 583+ 8E23 D1           _x2r_3l  pop de
 584+ 8E24 C3 51 8D             jp go_back5              ; jump back to main loop
 585+ 8E27
 586+ 8E27              ;##########################################
 587+ 8E27
 588+ 8E27              ;draw the wall for 4th (and last!) LEFT layer
 589+ 8E27
 590+ 8E27              ;##########################################
 591+ 8E27
 592+ 8E27              do_4thwall_l:
 593+ 8E27
 594+ 8E27              ;draw top half of wall
 595+ 8E27
 596+ 8E27 D5                   push de                 ;save the current acreen position
 597+ 8E28              ;1st check if theres a wall where we need to draw the black side
 598+ 8E28 1B                   dec de
 599+ 8E29 1B                   dec de
 600+ 8E2A 1B                   dec de
 601+ 8E2B 1B                   dec de
 602+ 8E2C 1B                   dec de
 603+ 8E2D 1B                   dec de
 604+ 8E2E              ;now draw a red wall to the right of section 2,  top half
 605+ 8E2E
 606+ 8E2E 3E B4                ld a,_smallwall;$8d
 607+ 8E30 12                   ld (de),a
 608+ 8E31 1B                   dec de
 609+ 8E32 12                   ld (de),a
 610+ 8E33 13                   inc de                  ;move print position back for black wall
 611+ 8E34
 612+ 8E34              ;now check if we need to draw a black side on the right
 613+ 8E34              ;by looking to the character to the right of the wall
 614+ 8E34              ;and if there is not a wall already drawn, then draw a
 615+ 8E34              ;black side
 616+ 8E34
 617+ 8E34 13                   inc de                  ;jump left 1 char in the display
 618+ 8E35 1A                   ld a,(de)               ;read whats there
 619+ 8E36 1B                   dec de                  ;put our pointer back to the original position
 620+ 8E37 FE B4                cp _smallwall;$8e                 ;is it a wall
 621+ 8E39 CA 4D 8E             jp z,_x1r_31_l               ;if yes, do NOT draw a black side.
 622+ 8E3C              ;        dec de
 623+ 8E3C 3E B9                ld a,$b9              ;draw top right side
 624+ 8E3E 13                   inc de
 625+ 8E3F 13                   inc de
 626+ 8E40 13                   inc de
 627+ 8E41 13                   inc de
 628+ 8E42 12                   ld (de),a           ;draw 4 black sides
 629+ 8E43 1B                   dec de
 630+ 8E44 3C                   inc a
 631+ 8E45 12                   ld (de),a
 632+ 8E46 3C                   inc a
 633+ 8E47 1B                   dec de
 634+ 8E48 12                   ld (de),a
 635+ 8E49 3C                   inc a
 636+ 8E4A 1B                   dec de
 637+ 8E4B 12                   ld (de),a
 638+ 8E4C
 639+ 8E4C 1B                   dec de              ;move to wall start
 640+ 8E4D
 641+ 8E4D
 642+ 8E4D              ;top line done
 643+ 8E4D
 644+ 8E4D              ;now do the bottom line underneath
 645+ 8E4D
 646+ 8E4D              _x1r_31_l
 647+ 8E4D 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 648+ 8E50 19                   add  hl,de
 649+ 8E51
 650+ 8E51 3E B4                ld a,_smallwall;$8d
 651+ 8E53 77                   ld (hl),a
 652+ 8E54 2B                   dec hl
 653+ 8E55 77                   ld (hl),a
 654+ 8E56
 655+ 8E56 23                   inc hl
 656+ 8E57
 657+ 8E57
 658+ 8E57              ;now check if we need to draw a black side on the left of the lower half wall
 659+ 8E57              ;do this by checking if the next block is already a wall just like above
 660+ 8E57
 661+ 8E57 23                   inc hl      ;look at the left block
 662+ 8E58 7E                   ld a,(hl)
 663+ 8E59 2B                   dec hl
 664+ 8E5A FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 665+ 8E5C CA 6F 8E             jp z,_x2r_31_l
 666+ 8E5F
 667+ 8E5F                   ;  dec hl
 668+ 8E5F 3E BD                ld a,$bd            ;draw leftmost bottom
 669+ 8E61 23                   inc hl
 670+ 8E62 23                   inc hl
 671+ 8E63 23                   inc hl
 672+ 8E64 23                   inc hl
 673+ 8E65
 674+ 8E65 77                   ld (hl),a
 675+ 8E66 2B                   dec hl
 676+ 8E67 3C                   inc a
 677+ 8E68 77                   ld (hl),a
 678+ 8E69 2B                   dec hl
 679+ 8E6A 3C                   inc a
 680+ 8E6B 77                   ld (hl),a
 681+ 8E6C 2B                   dec hl
 682+ 8E6D 3C                   inc a
 683+ 8E6E 77                   ld (hl),a
 684+ 8E6F
 685+ 8E6F D1           _x2r_31_l  pop de
 686+ 8E70 C3 51 8D             jp go_back5              ; jump back to main loop
 687+ 8E73
 688+ 8E73
 689+ 8E73              ;############################################
 690+ 8E73              ;############################################
 691+ 8E73              ;draw LEFT layer 4
 692+ 8E73              ;############################################
 693+ 8E73              ;############################################
 694+ 8E73
 695+ 8E73              draw_4
 696+ 8E73
 697+ 8E73              ; hl=maze location being drawn.
 698+ 8E73              ; now determine what to draw for this section.
 699+ 8E73
 700+ 8E73
 701+ 8E73 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 702+ 8E76
 703+ 8E76 CD 77 8B             call load_de            ;get left and right and front jump into de reg
 704+ 8E79 19                   add hl,de               ;jump backwards along the user view 1 space
 705+ 8E7A 22 25 FA             ld (furthest_point),hl  ;re save it
 706+ 8E7D
 707+ 8E7D              ;we should also move our pointer left to read where the walls are.
 708+ 8E7D              ;this will be from this point onwards as we can see the blocks more fully
 709+ 8E7D
 710+ 8E7D 11 FF FF             ld de,$ffff              ;to move the printed position -3
 711+ 8E80 ED 53 11 FA          ld (var4),de            ;as block is 3 chars wide
 712+ 8E84
 713+ 8E84              ;we need to move pointer 1 to the left for wall checking
 714+ 8E84 ED 5B 0B FA          ld de,(left)
 715+ 8E88 19                   add hl,de
 716+ 8E89 22 15 FA             ld (var6),hl ;re save it
 717+ 8E8C
 718+ 8E8C
 719+ 8E8C ED 53 0F FA          ld (var3),de
 720+ 8E90 11 51 01             ld de,$0151            ; offset to row 10 column 16 - left of  centre of the 3d view.
 721+ 8E93 CD 99 8E             call do_draw_4
 722+ 8E96
 723+ 8E96
 724+ 8E96 C3 8C 90             jp draw_3              ;now draw the 4th level
 725+ 8E99
 726+ 8E99              do_draw_4:
 727+ 8E99
 728+ 8E99 2A 55 81             ld hl,(d_file)         ; fetch the location of the display file.
 729+ 8E9C 19                   add hl,de
 730+ 8E9D 06 04                ld b,4                 ; count for 3 blocks left of display file
 731+ 8E9F                                             ; 0 is not counted so loops 3 times
 732+ 8E9F ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
 733+ 8EA3 EB                   ex de,hl
 734+ 8EA4
 735+ 8EA4              ;       hl = furthest point in the maze
 736+ 8EA4              ;       de = d_file location to store byte to display
 737+ 8EA4
 738+ 8EA4              loop9:
 739+ 8EA4 E5                   push hl
 740+ 8EA5
 741+ 8EA5              ;#############################################################################
 742+ 8EA5              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 743+ 8EA5
 744+ 8EA5 3A 28 FA             ld a,(maze_highbyte)
 745+ 8EA8 BC                   cp h                    ;are weoutside of our maze?
 746+ 8EA9 CA DC 8E             jp z,cont_5
 747+ 8EAC
 748+ 8EAC                       ;if we are on a different maze boundary
 749+ 8EAC                                              ;then draw a maze wall as we are the top
 750+ 8EAC                                              ;or north wall but maze data has no
 751+ 8EAC                                              ;wall data.
 752+ 8EAC
 753+ 8EAC              ;4 = 1st LEFT wall
 754+ 8EAC              ;3 = 2nd LEFT wall
 755+ 8EAC              ;2 = 3rd LEFT wall
 756+ 8EAC              ;1 = 4th LEFT wall
 757+ 8EAC
 758+ 8EAC 78                   ld a,b                  ;our current wall counter
 759+ 8EAD FE 04                cp 4
 760+ 8EAF C2 BA 8E             jp nz,a4_1              ;its not a wall
 761+ 8EB2 3E 01                ld a,1
 762+ 8EB4 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 763+ 8EB5 C6 80                add a,128               ;make sure we set a wall!
 764+ 8EB7 C3 0B 8F             jp draw_9               ;draw the 1st block to the left
 765+ 8EBA
 766+ 8EBA              ;        ld a,b
 767+ 8EBA FE 03        a4_1:   cp 3
 768+ 8EBC C2 C7 8E             jp nz,a4_2              ;its not wall
 769+ 8EBF 3E 01                ld a,1
 770+ 8EC1 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 771+ 8EC2 C6 80                add a,128               ;make sure we set a wall!
 772+ 8EC4 C3 4B 8F             jp draw_9_2L           ;draw the 2nd block to the left
 773+ 8EC7
 774+ 8EC7 FE 02        a4_2:   cp 2
 775+ 8EC9 C2 D4 8E             jp nz,a4_3              ;its not wall
 776+ 8ECC 3E 01                ld a,1
 777+ 8ECE 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 778+ 8ECF C6 80                add a,128               ;make sure we set a wall!
 779+ 8ED1 C3 BD 8F             jp draw_9_3L           ;draw the 3rd block to the left
 780+ 8ED4
 781+ 8ED4              ;a must = 1 if we get here.
 782+ 8ED4 3E 01        a4_3:   ld a,1
 783+ 8ED6 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 784+ 8ED7 C6 80                add a,128               ;make sure we set a wall!
 785+ 8ED9 C3 1C 90             jp draw_9_4L           ;draw the 4th block to the left
 786+ 8EDC
 787+ 8EDC              ;############################################################################
 788+ 8EDC
 789+ 8EDC
 790+ 8EDC              ;now check if we are on the south wall and frig it to draw the
 791+ 8EDC              ;walls we need.
 792+ 8EDC              ;reg a already contains l
 793+ 8EDC
 794+ 8EDC              ;cont_4s:
 795+ 8EDC
 796+ 8EDC
 797+ 8EDC              cont_5:
 798+ 8EDC 7E                   ld a,(hl)
 799+ 8EDD 17                   rla
 800+ 8EDE DA F1 8E             jp c,do_wall4            ;bit 7 (128)
 801+ 8EE1
 802+ 8EE1               ;       call do_no_wall4         ; otherwise draw no wall
 803+ 8EE1
 804+ 8EE1              go_back4:
 805+ 8EE1 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 806+ 8EE4 19                   add hl,de
 807+ 8EE5 EB                   ex de,hl
 808+ 8EE6 E1                   pop hl
 809+ 8EE7 D5                   push de
 810+ 8EE8 ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 811+ 8EEC 19                   add hl,de               ; move to the start of the next block to print
 812+ 8EED                                              ;we need to move back 4 blocks
 813+ 8EED                                              ;as the first block obscures the view
 814+ 8EED                                              ;of the next 3 blocks.
 815+ 8EED D1                   pop de
 816+ 8EEE 10 B4                djnz loop9
 817+ 8EF0 C9                   ret
 818+ 8EF1
 819+ 8EF1              do_wall4:
 820+ 8EF1
 821+ 8EF1              draw_4s:
 822+ 8EF1
 823+ 8EF1              ;Draw wall based on b count
 824+ 8EF1
 825+ 8EF1              wall4L_start:
 826+ 8EF1
 827+ 8EF1 78                   ld a,b
 828+ 8EF2 D6 01                sub 1                   ;4th wall  to the left
 829+ 8EF4 CA 1C 90             jp z,draw_9_4L
 830+ 8EF7
 831+ 8EF7 78                   ld a,b
 832+ 8EF8 D6 02                sub 2                   ;3rd wall to the left
 833+ 8EFA CA BD 8F             jp z,draw_9_3L
 834+ 8EFD
 835+ 8EFD 78                   ld a,b
 836+ 8EFE D6 03                sub 3                   ;2nd wall immediately wall to the left
 837+ 8F00 CA 4B 8F             jp z,draw_9_2L
 838+ 8F03
 839+ 8F03 78                   ld a,b
 840+ 8F04 D6 04                sub 4                   ;1st wall immediately wall to the left
 841+ 8F06 CA 0B 8F             jp z,draw_9
 842+ 8F09
 843+ 8F09 E1                   pop hl
 844+ 8F0A C9                   ret
 845+ 8F0B
 846+ 8F0B              draw_9:
 847+ 8F0B C5                   push bc
 848+ 8F0C D5                   push de                 ;save our display pointer
 849+ 8F0D 06 04                ld b,4                  ;block is 4 blocks high
 850+ 8F0F 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 851+ 8F12 1B                   dec de
 852+ 8F13
 853+ 8F13 3E B7        loop10: ld   a,_mediumwall_1      ;grey sides facing us
 854+ 8F15 12                   ld (de),a               ; insert thepart of the wall.
 855+ 8F16 13                   inc de
 856+ 8F17 12                   ld (de),a               ;put grey side to our right
 857+ 8F18 13                   inc de
 858+ 8F19 12                   ld (de),a
 859+ 8F1A 13                   inc de
 860+ 8F1B 12                   ld (de),a
 861+ 8F1C 1B                   dec de
 862+ 8F1D 1B                   dec de
 863+ 8F1E 1B                   dec de                  ;go left 1 again
 864+ 8F1F EB                   ex de,hl
 865+ 8F20 19                   add  hl,de              ; advance to the next row of the display file.
 866+ 8F21 EB                   ex de,hl
 867+ 8F22 10 EF                djnz loop10             ;do this 3 times
 868+ 8F24
 869+ 8F24                      ;now draw the blank face
 870+ 8F24 D1                   pop de                  ;back to our original position
 871+ 8F25 D5                   push de
 872+ 8F26 13                   inc de
 873+ 8F27 13                   inc de                  ;move ahead 3 spaces in the display
 874+ 8F28 13                   inc de
 875+ 8F29              ;        inc de
 876+ 8F29
 877+ 8F29              ;check if the char to our right is a wall block.
 878+ 8F29              ;if so, do not draw a black face as we need to hide it or it will
 879+ 8F29              ;ovewrite the already drawn block
 880+ 8F29
 881+ 8F29 1A                   ld a,(de)
 882+ 8F2A FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 883+ 8F2C C2 33 8F             jp nz,cont_1            ;there is no block so draw black edge
 884+ 8F2F D1                   pop de
 885+ 8F30 C1                   pop bc
 886+ 8F31 18 AE                jr go_back4             ;otherwise quit this draw
 887+ 8F33
 888+ 8F33 EB           cont_1  ex  de,hl
 889+ 8F34 11 21 00             ld de,$0021
 890+ 8F37 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
 891+ 8F39 77                   ld  (hl),a
 892+ 8F3A 19                   add hl,de
 893+ 8F3B 3E AF                ld  a,_black      ;triangle sloping to right bottom
 894+ 8F3D 77                   ld  (hl),a
 895+ 8F3E 19                   add hl,de
 896+ 8F3F 3E AF                ld  a,_black      ;triangle sloping to right bottom
 897+ 8F41 77                   ld  (hl),a
 898+ 8F42 19                   add hl,de
 899+ 8F43
 900+ 8F43 77                   ld  (hl),a
 901+ 8F44 3E B0                ld  a,_topcorner1
 902+ 8F46 77                   ld  (hl),a
 903+ 8F47 D1                   pop de
 904+ 8F48 C1                   pop bc
 905+ 8F49 18 96                jr go_back4              ; jump back to main loop
 906+ 8F4B
 907+ 8F4B              ;************************************
 908+ 8F4B              ;*Draw the 2nd LEFT block of section 4
 909+ 8F4B              ;************************************
 910+ 8F4B
 911+ 8F4B              draw_9_2L:
 912+ 8F4B C5                   push bc
 913+ 8F4C 21 FF FF             ld hl,$ffff                 ;move start point (-1) `to correct position
 914+ 8F4F 19                   add hl,de
 915+ 8F50 EB                   ex de,hl
 916+ 8F51 D5                   push de
 917+ 8F52
 918+ 8F52              ;now draw the 2nd wall itself
 919+ 8F52 06 04                ld b,4                  ;block is 4 blocks high
 920+ 8F54 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 921+ 8F57 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 922+ 8F59
 923+ 8F59              loop10r_2L:
 924+ 8F59 12                   ld (de),a             ; insert thepart of the wall.
 925+ 8F5A 1B                   dec de
 926+ 8F5B 12                   ld (de),a               ;put grey side to our right
 927+ 8F5C 1B                   dec de
 928+ 8F5D 12                   ld (de),a
 929+ 8F5E 1B                   dec de
 930+ 8F5F 12                   ld (de),a
 931+ 8F60 1B                   dec de
 932+ 8F61 12                   ld (de),a
 933+ 8F62 13                   inc de
 934+ 8F63 13                   inc de
 935+ 8F64 13                   inc de
 936+ 8F65 13                   inc de                  ;go left 1 again
 937+ 8F66 EB                   ex de,hl
 938+ 8F67 19                   add  hl,de              ; advance to the next row of the display file.
 939+ 8F68 EB                   ex de,hl
 940+ 8F69 10 EE                djnz loop10r_2L             ;do this 3 times
 941+ 8F6B
 942+ 8F6B                      ;now draw the blank face
 943+ 8F6B D1                   pop de                  ;back to our original position
 944+ 8F6C D5                   push de
 945+ 8F6D 13                   inc de                  ;move left 3 space left in the display
 946+ 8F6E 13                   inc de
 947+ 8F6F 13                   inc de
 948+ 8F70
 949+ 8F70              ;check if the char to our right is a wall block.
 950+ 8F70              ;if so, do not draw a black face as we need to hide it or it will
 951+ 8F70              ;ovewrite the already drawn block
 952+ 8F70
 953+ 8F70 1A                   ld a,(de)
 954+ 8F71 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 955+ 8F73 C2 7B 8F             jp nz,cont_1r_2L           ;there is no block so draw black edge
 956+ 8F76 D1                   pop de
 957+ 8F77 C1                   pop bc
 958+ 8F78 C3 E1 8E             jp go_back4             ;otherwise quit this draw
 959+ 8F7B
 960+ 8F7B              cont_1r_2L:
 961+ 8F7B EB                   ex  de,hl
 962+ 8F7C 11 21 00             ld de,$0021
 963+ 8F7F
 964+ 8F7F              ;need to loop 2 times drawing 2 lots of 3 top
 965+ 8F7F              ;& bottom chars- move down 1after 1st 3 top chars drawn
 966+ 8F7F              ;
 967+ 8F7F
 968+ 8F7F 3E 02                ld a,2
 969+ 8F81 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 970+ 8F84
 971+ 8F84              ;loop for 2 black wall columns
 972+ 8F84 3E 03                ld a,3                  ;column start height
 973+ 8F86 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 974+ 8F89
 975+ 8F89 06 03                ld b,3                  ;loop 3 times for 3 columns
 976+ 8F8B 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 977+ 8F8E 3E 97                ld a,$97
 978+ 8F90 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 979+ 8F93
 980+ 8F93              loop10br_2L:
 981+ 8F93 C5                   push bc                 ;save count
 982+ 8F94 3A 04 FA             ld a,(var1)             ;column height
 983+ 8F97 47                   ld b,a                  ;holds the column height in chars
 984+ 8F98 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 985+ 8F9B F5                   push af                 ;save a for bottom corners
 986+ 8F9C 77                   ld  (hl),a
 987+ 8F9D
 988+ 8F9D              loop10ar_2L:
 989+ 8F9D 19                   add hl,de
 990+ 8F9E 3E AF                ld  a,_black            ;black wall fill
 991+ 8FA0 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 992+ 8FA1 10 FA                djnz loop10ar_2L
 993+ 8FA3
 994+ 8FA3 F1                   pop af                  ;retrivetop corner
 995+ 8FA4 3D                   dec a                   ;prep for next top corner
 996+ 8FA5 32 05 FA             ld (var2),a             ;re-save it for next corner
 997+ 8FA8 C6 04                add a,4                 ;get the correct char to print
 998+ 8FAA 77                   ld  (hl),a              ;draw the bottom of the wall
 999+ 8FAB
1000+ 8FAB                      ;now change column count
1001+ 8FAB 3A 04 FA             ld a,(var1)
1002+ 8FAE C1                   pop bc
1003+ 8FAF
1004+ 8FAF 2A 13 FA             ld hl,(var5)
1005+ 8FB2 2B                   dec hl                  ;move print position to the left
1006+ 8FB3 22 13 FA             ld (var5),hl
1007+ 8FB6
1008+ 8FB6 10 DB                djnz loop10br_2L
1009+ 8FB8
1010+ 8FB8 D1                   pop de
1011+ 8FB9 C1                   pop bc
1012+ 8FBA C3 E1 8E             jp go_back4             ; jump back to main loop
1013+ 8FBD
1014+ 8FBD              ;#############################################
1015+ 8FBD              ;*Draw the 3rd LEFT block of section 4
1016+ 8FBD              ;#############################################
1017+ 8FBD
1018+ 8FBD              draw_9_3L:
1019+ 8FBD C5                   push bc
1020+ 8FBE D5                   push de                 ;save our display pointer
1021+ 8FBF 06 04                ld b,4                  ;block is 4 blocks high
1022+ 8FC1 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1023+ 8FC4 11 4A C1             ld de,$C162-24              ;start of drawing
1024+ 8FC7
1025+ 8FC7              loop10r_3L:
1026+ 8FC7 3E B7                ld a,_mediumwall_1      ;grey sides facing us
1027+ 8FC9 12                   ld (de),a               ; insert thepart of the wall.
1028+ 8FCA EB                   ex de,hl
1029+ 8FCB 19                   add  hl,de              ; advance to the next row of the display file.
1030+ 8FCC EB                   ex de,hl
1031+ 8FCD 10 F8                djnz loop10r_3L             ;do this 3 times
1032+ 8FCF
1033+ 8FCF                      ;now draw the blank face
1034+ 8FCF D1                   pop de                  ;back to our original position
1035+ 8FD0 D5                   push de
1036+ 8FD1
1037+ 8FD1              ;check if the char to our right is a wall block.
1038+ 8FD1              ;if so, do not draw a black face as we need to hide it or it will
1039+ 8FD1              ;ovewrite the already drawn block
1040+ 8FD1
1041+ 8FD1 1A                   ld a,(de)
1042+ 8FD2 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1043+ 8FD4 C2 DC 8F             jp nz,cont_1r_3L            ;there is no block so draw black edge
1044+ 8FD7
1045+ 8FD7 D1                   pop de
1046+ 8FD8 C1                   pop bc
1047+ 8FD9 C3 E1 8E             jp go_back4             ;otherwise quit this draw
1048+ 8FDC
1049+ 8FDC              cont_1r_3L:
1050+ 8FDC EB                   ex de,hl
1051+ 8FDD 11 21 00             ld de,$0021
1052+ 8FE0 21 4B C1             ld hl,$c161-22
1053+ 8FE3
1054+ 8FE3              ;need to loop 2 times drawing 2 lots of 3 top
1055+ 8FE3              ;& bottom chars- move down 1after 1st 3 top chars drawn
1056+ 8FE3              ;
1057+ 8FE3
1058+ 8FE3              ;loop for 5 black wall columns
1059+ 8FE3 3E 03                ld a,3                  ;column start height
1060+ 8FE5 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
1061+ 8FE8
1062+ 8FE8 06 05                ld b,5                  ;loop 5 times for 3 columns
1063+ 8FEA 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1064+ 8FED 3E CD                ld a,$cd ;91
1065+ 8FEF 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1066+ 8FF2
1067+ 8FF2              loop10br_2aL:
1068+ 8FF2 C5                   push bc                 ;save count
1069+ 8FF3 3A 04 FA             ld a,(var1)             ;column height
1070+ 8FF6 47                   ld b,a                  ;holds the column height in chars
1071+ 8FF7 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1072+ 8FFA F5                   push af                 ;save a for bottom corners
1073+ 8FFB 77                   ld  (hl),a
1074+ 8FFC
1075+ 8FFC              loop10ar_2aL:
1076+ 8FFC 19                   add hl,de
1077+ 8FFD 3E AF                ld  a,_black            ;black wall fill
1078+ 8FFF 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1079+ 9000 10 FA                djnz loop10ar_2aL
1080+ 9002
1081+ 9002 F1                   pop af                  ;retrivetop corner
1082+ 9003 3D                   dec a                   ;prep for next top corner
1083+ 9004 32 05 FA             ld (var2),a             ;re-save it for next corner
1084+ 9007 C6 06                add a,6                 ;get the correct char to print
1085+ 9009 77                   ld  (hl),a              ;draw the bottom of the wall
1086+ 900A
1087+ 900A                      ;now change column count
1088+ 900A 3A 04 FA             ld a,(var1)
1089+ 900D C1                   pop bc
1090+ 900E
1091+ 900E 2A 13 FA             ld hl,(var5)
1092+ 9011 23                   inc hl                  ;move print position to the right
1093+ 9012 22 13 FA             ld (var5),hl
1094+ 9015
1095+ 9015 10 DB                djnz loop10br_2aL
1096+ 9017
1097+ 9017 D1                   pop de
1098+ 9018 C1                   pop bc
1099+ 9019 C3 E1 8E             jp go_back4              ; jump back to main loop
1100+ 901C
1101+ 901C              ;#############################################
1102+ 901C              ;*Draw the 4th LEFT block of section 4
1103+ 901C              ;#############################################
1104+ 901C
1105+ 901C              ; we only need to draw 2 columns of black sides.
1106+ 901C
1107+ 901C              draw_9_4L:
1108+ 901C
1109+ 901C              ; we only need to draw up to 2 columns of black sides.
1110+ 901C
1111+ 901C
1112+ 901C C5                   push bc
1113+ 901D D5                   push de                 ;save our display pointer
1114+ 901E
1115+ 901E              ;check if the char to our left is a wall block.
1116+ 901E              ;if so, do not draw a black face as we need to hide it or it will
1117+ 901E              ;ovewrite the already drawn block
1118+ 901E
1119+ 901E 21 4A C1             ld hl,$C151-7              ;start of drawing
1120+ 9021 7E                   ld a,(hl)
1121+ 9022 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1122+ 9024 C2 2C 90             jp nz,cont_3L            ;there is no block so draw black edge
1123+ 9027
1124+ 9027 D1                   pop de
1125+ 9028 C1                   pop bc
1126+ 9029 C3 E1 8E             jp go_back4             ;otherwise quit this draw
1127+ 902C
1128+ 902C              cont_3L:
1129+ 902C 11 21 00             ld de,33                ;to jump to next line below
1130+ 902F 3E CA                ld a,$ca                ;top of the wall
1131+ 9031 E5                   push hl                 ;save for drawing 2nd black wall
1132+ 9032 77                   ld (hl),a               ;to cover up wall 5
1133+ 9033 19                   add hl,de               ;jump to next line
1134+ 9034 3E AF                ld a,_black
1135+ 9036 77                   ld (hl),a
1136+ 9037 19                   add hl,de
1137+ 9038 77                   ld (hl),a
1138+ 9039 19                   add hl,de
1139+ 903A 3E CF                ld a,$cf                ;draw bottom of the line
1140+ 903C 77                   ld (hl),a
1141+ 903D
1142+ 903D              ;now check if we need to cover wall 5 with a 2nd black line to the left
1143+ 903D              ;hl points to top of the 4 blocks
1144+ 903D E1                   pop hl                  ;restore our pointer in char ram
1145+ 903E 23                   inc hl                  ;go left 1 place
1146+ 903F E5                   push hl
1147+ 9040 19                   add hl,de               ;now we are at the wall 5 top position
1148+ 9041 7E                   ld a,(hl)
1149+ 9042 FE B4                cp _smallwall
1150+ 9044 E1                   pop hl
1151+ 9045 20 0B                jr nz,exit3L
1152+ 9047              ;draw the second wall over section 5 wall
1153+ 9047 36 C9                ld (hl),$c9             ;top of the wall
1154+ 9049 19                   add hl,de
1155+ 904A 36 AF                ld (hl),_black
1156+ 904C 19                   add hl,de
1157+ 904D 36 AF                ld (hl),_black
1158+ 904F 19                   add hl,de
1159+ 9050 36 CE                ld (hl),$ce             ;bottom of the wall
1160+ 9052
1161+ 9052 D1           exit3L:  pop de                  ;now exit
1162+ 9053 C1                   pop bc
1163+ 9054 C3 E1 8E             jp go_back4
1164+ 9057
1165+ 9057              ;###################################################
1166+ 9057              ;not needed down here
1167+ 9057
1168+ 9057 C5                   push bc
1169+ 9058 D5                   push de                 ;save our display pointer
1170+ 9059
1171+ 9059              ;check if the char to our right is a wall block.
1172+ 9059              ;if so, do not draw a black face as we need to hide it or it will
1173+ 9059              ;ovewrite the already drawn block
1174+ 9059
1175+ 9059 21 4A C1             ld hl,$C151-7              ;start of drawing
1176+ 905C 7E                   ld a,(hl)
1177+ 905D FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1178+ 905F C2 67 90             jp nz,cont_3L_l            ;there is no block so draw black edge
1179+ 9062
1180+ 9062 D1                   pop de
1181+ 9063 C1                   pop bc
1182+ 9064 C3 E1 8E             jp go_back4             ;otherwise quit this draw
1183+ 9067
1184+ 9067              cont_3L_l:
1185+ 9067 06 04                ld b,4                  ;block is 4 blocks high
1186+ 9069 3E CA                ld a,$ca
1187+ 906B 77                   ld (hl),a
1188+ 906C 23                   inc hl
1189+ 906D 3D                   dec a
1190+ 906E 77                   ld (hl),a
1191+ 906F
1192+ 906F              ;need 2 black walls now!
1193+ 906F 3E AF                ld a,_black
1194+ 9071 11 21 00             ld de,33;34                ;1 line width
1195+ 9074
1196+ 9074 CD 87 90             CALL black_wall_1         ;draw 2 black blocks
1197+ 9077 13                   inc de                        ;jump to next line below
1198+ 9078
1199+ 9078 CD 87 90             CALL black_wall_1         ;draw 2 black blocks
1200+ 907B 19                   add hl,de               ;jump to next line below
1201+ 907C
1202+ 907C
1203+ 907C              ;top half done - so do bottom half - 2 blacks first
1204+ 907C
1205+ 907C              ;de already holds 34  -1 line plus 2 chars to the right
1206+ 907C
1207+ 907C 3E CE                ld a,$ce
1208+ 907E 77                   ld (hl),a
1209+ 907F 2B                   dec hl
1210+ 9080 3C                   inc a
1211+ 9081 77                   ld (hl),a
1212+ 9082
1213+ 9082 D1                   pop de
1214+ 9083 C1                   pop bc
1215+ 9084 C3 E1 8E             jp go_back4
1216+ 9087
1217+ 9087              ;draw 2 black walls across 1 line
1218+ 9087              black_wall_1:
1219+ 9087 19                   add hl,de      ;jump 1 line below
1220+ 9088 77                   ld (hl),a
1221+ 9089 2B                   dec hl
1222+ 908A 77                   ld (hl),a
1223+ 908B C9                   ret
1224+ 908C
1225+ 908C
1226+ 908C
1227+ 908C              ;#############################################
1228+ 908C              ;#############################################
1229+ 908C              ;# draw LEFT wall 3
1230+ 908C              ;#############################################
1231+ 908C              ;#############################################
1232+ 908C
1233+ 908C              draw_3:
1234+ 908C              ;ret
1235+ 908C              ; hl=maze location being drawn.
1236+ 908C              ; now determine what to draw for this section.
1237+ 908C
1238+ 908C
1239+ 908C 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1240+ 908F
1241+ 908F CD 77 8B             call load_de            ;get left and right and front jump into de reg
1242+ 9092
1243+ 9092 19                   add hl,de               ;jump backwards along the user view 1 space
1244+ 9093 22 25 FA             ld (furthest_point),hl ;re save it
1245+ 9096
1246+ 9096 11 FF FF             ld de,$ffff             ;to move the display position -1
1247+ 9099 ED 53 11 FA          ld (var4),de
1248+ 909D
1249+ 909D ED 5B 0B FA          ld de,(left)            ;move our check position left -1
1250+ 90A1 19                   add hl,de
1251+ 90A2 22 15 FA             ld (var6),hl
1252+ 90A5
1253+ 90A5
1254+ 90A5 ED 53 0F FA          ld (var3),de
1255+ 90A9 11 0A 01             ld de,$10a;10b           ; offset to row 8 column5 - left of  centre of the 3d view.
1256+ 90AC
1257+ 90AC              ;2nd block starts at $109 and is 3 wall chars wide
1258+ 90AC CD B2 90             call do_draw_3
1259+ 90AF
1260+ 90AF C3 1E 92             jp draw_2           ;now draw the 2nd level
1261+ 90B2
1262+ 90B2              do_draw_3:
1263+ 90B2
1264+ 90B2 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
1265+ 90B5 19                   add  hl,de
1266+ 90B6
1267+ 90B6
1268+ 90B6              ; draw left half of the display.
1269+ 90B6
1270+ 90B6 06 03                ld b,3                 ; count for 1 blocks left of display file
1271+ 90B8 ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
1272+ 90BC
1273+ 90BC
1274+ 90BC EB                   ex   de,hl              ; transfer de to hl.
1275+ 90BD
1276+ 90BD              ;       hl = furthest point in the maze
1277+ 90BD              ;       de = d_file location to store byte to display
1278+ 90BD
1279+ 90BD              loop11:
1280+ 90BD E5                   push hl
1281+ 90BE
1282+ 90BE              ;################################################################
1283+ 90BE
1284+ 90BE              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1285+ 90BE              ;and stop drrawing anything else.
1286+ 90BE
1287+ 90BE 3A 28 FA             ld a,(maze_highbyte)
1288+ 90C1 BC                   cp h                    ;are we at the top part of the maze?
1289+ 90C2 CA E9 90             jp z,cont_3s
1290+ 90C5                                              ;if we are on a different maze boundary
1291+ 90C5                                              ;then draw a maze wall as we are the top
1292+ 90C5                                              ;or north wall but maze data has no
1293+ 90C5                                              ;wall data.
1294+ 90C5              ;see which wall we are at and draw the correct one before jumping out
1295+ 90C5              ;of the loop and stop drawing past the maze wall.
1296+ 90C5
1297+ 90C5              ;3 = first left wall
1298+ 90C5              ;2 = 2nd left wall
1299+ 90C5              ;1 = 4rd left wall
1300+ 90C5
1301+ 90C5 78                   ld a,b                  ;our current wall counter
1302+ 90C6 D6 03                sub 3
1303+ 90C8 C2 D3 90             jp nz,a3                 ;its not wall 1
1304+ 90CB 3E 01                ld a,1
1305+ 90CD 47                   ld b,a
1306+ 90CE C6 80                add a,128               ;make sure we set a wall!
1307+ 90D0 C3 0E 91             jp draw_10             ;jump straight to making an end wall
1308+ 90D3
1309+ 90D3
1310+ 90D3 78           a3:     ld a,b                  ;our current wall counter
1311+ 90D4 D6 02                sub 2
1312+ 90D6 C2 E1 90             jp nz,a3_1                 ;its not wall 1
1313+ 90D9 3E 01                ld a,1
1314+ 90DB 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1315+ 90DC C6 80                add a,128               ;make sure we set a wall!
1316+ 90DE C3 80 91             jp draw_10_2L	       	;draw the 2nd wall to the right
1317+ 90E1
1318+ 90E1 3E 01        a3_1:   ld a,1
1319+ 90E3 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1320+ 90E4 C6 80                add a,128               ;make sure we set a wall!
1321+ 90E6 C3 F2 91             jp draw_10_3L	       	;draw the 2nd wall to the right
1322+ 90E9
1323+ 90E9              ;################################################################
1324+ 90E9
1325+ 90E9
1326+ 90E9              ;now check if we are on the south wall and frig it to draw the
1327+ 90E9              ;walls we need.
1328+ 90E9              ;reg a already contains l
1329+ 90E9
1330+ 90E9              cont_3s:
1331+ 90E9              ;        ld a,l
1332+ 90E9              ;        cp $FA  ;250
1333+ 90E9              ;        jp nz,cont_6
1334+ 90E9              ;        ld l,240                ;fake it that we are at
1335+ 90E9              ;        jp draw_10             ;the south wall
1336+ 90E9
1337+ 90E9
1338+ 90E9 7E           cont_6: ld a,(hl)
1339+ 90EA 17                   rla
1340+ 90EB DA FA 90             jp c,do_wall3            ;bit 7 (128)
1341+ 90EE
1342+ 90EE                     ; call do_no_wall3         ; otherwise draw no wall
1343+ 90EE
1344+ 90EE              go_back3:
1345+ 90EE                    ;  ld hl,(var4)            ;used for left and right drawing
1346+ 90EE                    ;  add hl,de               ; holds current screen position
1347+ 90EE                    ;  ex de,hl
1348+ 90EE              ;we move the start position of block number 2 to the left of the display
1349+ 90EE              ;and although we overwrite the next block, we can still do the
1350+ 90EE              ;check to see if a block is already drawn.
1351+ 90EE
1352+ 90EE                      ;dec de                  ;move our start print position
1353+ 90EE                      ;dec de                  ;of block 2 back 3 spaces in the
1354+ 90EE 1B                   dec de ;only 1 space back  ;display file
1355+ 90EF E1                   pop hl
1356+ 90F0 D5                   push de
1357+ 90F1 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1358+ 90F5 19                   add hl,de                ; go left 1 block in the maze
1359+ 90F6 D1                   pop de
1360+ 90F7 10 C4                djnz loop11
1361+ 90F9 C9                   ret
1362+ 90FA              ;now do the 2nd position
1363+ 90FA
1364+ 90FA
1365+ 90FA
1366+ 90FA              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1367+ 90FA
1368+ 90FA              do_wall3:
1369+ 90FA
1370+ 90FA                      ;check if bit 2 is set as thats an end
1371+ 90FA                      ;and b must then be changed to 1 to stop drawing.
1372+ 90FA
1373+ 90FA              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1374+ 90FA              ;        jr z,draw_10
1375+ 90FA              ;        ld b,1                  ;set b so we exit on return
1376+ 90FA
1377+ 90FA              ;now draw the wall based on bc value
1378+ 90FA              ;wall3_start:
1379+ 90FA
1380+ 90FA
1381+ 90FA 78                   ld a,b			               ;b is the loop count i.e # of walls to draw
1382+ 90FB D6 03               	sub 3			               ;3 = the wall imediately right
1383+ 90FD CA 0E 91             jp z,draw_10          ;draw an end wall if blockid=16
1384+ 9100
1385+ 9100 78                   ld a,b
1386+ 9101 D6 02                sub 2
1387+ 9103 CA 80 91             jp z,draw_10_2L         		;draw the 1st wall to the right
1388+ 9106
1389+ 9106 78                   ld a,b
1390+ 9107 D6 01                sub 1
1391+ 9109 CA F2 91             jp z,draw_10_3L	       	;draw the 2nd wall to the right
1392+ 910C
1393+ 910C E1                   pop hl                  ;nothing to draw so return
1394+ 910D C9                   ret
1395+ 910E
1396+ 910E
1397+ 910E              draw_10:
1398+ 910E C5                   push bc
1399+ 910F D5                   push de                 ;save our display pointer
1400+ 9110 1B                   dec de
1401+ 9111 1B                   dec de
1402+ 9112
1403+ 9112 06 08                ld b,8                  ;block is 8 blocks high
1404+ 9114 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1405+ 9117 3E B5                ld a, _mediumwall       ;wall on sides facing us
1406+ 9119 12           loop12: ld (de),a               ; insert the part of the wall.
1407+ 911A 13                   inc de
1408+ 911B 12                   ld (de),a               ; insert the part of the wall.
1409+ 911C 13                   inc de
1410+ 911D 12                   ld (de),a               ; insert the part of the wall.
1411+ 911E 13                   inc de
1412+ 911F 12                   ld (de),a               ; insert the part of the wall.
1413+ 9120 13                   inc de
1414+ 9121 12                   ld (de),a               ; insert the part of the wall.
1415+ 9122 13                   inc de
1416+ 9123 12                   ld (de),a               ; insert the part of the wall.
1417+ 9124 13                   inc de
1418+ 9125 12                   ld (de),a
1419+ 9126 13                   inc de
1420+ 9127 12                   ld (de),a
1421+ 9128 1B                   dec de
1422+ 9129 1B                   dec de
1423+ 912A 1B                   dec de
1424+ 912B 1B                   dec de
1425+ 912C 1B                   dec de
1426+ 912D 1B                   dec de
1427+ 912E 1B                   dec de
1428+ 912F EB                   ex de,hl
1429+ 9130 19                   add  hl,de              ; advance to the next row of the display file.
1430+ 9131 EB                   ex de,hl
1431+ 9132 10 E5                djnz loop12             ;do this 3 times
1432+ 9134
1433+ 9134                      ;now draw the blank face to the right of the block
1434+ 9134                      ;create first column of right face characters
1435+ 9134 D1                   pop de                  ;back to our original position
1436+ 9135 D5                   push de
1437+ 9136 13                   inc de
1438+ 9137 13                   inc de
1439+ 9138 13                   inc de
1440+ 9139 13                   inc de                  ;move ahead 5 spaces in the display (right)
1441+ 913A 13                   inc de
1442+ 913B 13                   inc de
1443+ 913C
1444+ 913C                  ;    inc de
1445+ 913C                  ;    inc de
1446+ 913C                  ;    inc de
1447+ 913C              ;check if the char to our right is a wall block.
1448+ 913C              ;if so, do not draw a black face as we need to hide it or it will
1449+ 913C              ;ovewrite the already drawn block
1450+ 913C              ;jp cont_2
1451+ 913C 1A                   ld a,(de)
1452+ 913D FE B5                cp _mediumwall        ;is there an already drawn screen block here?
1453+ 913F C2 46 91             jp nz,cont_2            ;there is no block so draw black edge
1454+ 9142 D1                   pop de
1455+ 9143 C1                   pop bc
1456+ 9144 18 A8                jr go_back3             ;otherwise quit this draw
1457+ 9146
1458+ 9146 EB           cont_2: ex  de,hl
1459+ 9147 11 21 00             ld de,$0021
1460+ 914A
1461+ 914A              ;loop for 2 columns
1462+ 914A
1463+ 914A 06 02                ld b,2                  ; loop 2 times for 2 columns
1464+ 914C 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1465+ 914F 3E 07                ld a,7
1466+ 9151 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1467+ 9154
1468+ 9154              loop12b:
1469+ 9154 C5                   push bc                 ;save count
1470+ 9155 3A 04 FA             ld a,(var1)
1471+ 9158 47                   ld b,a                  ;holds the column height in chars
1472+ 9159 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
1473+ 915B 77                   ld  (hl),a
1474+ 915C
1475+ 915C              loop12a:                   ;we must start at 5 to draw 4 face blocks on right
1476+ 915C 19                   add hl,de
1477+ 915D 3E AF                ld  a,_black      ;triangle sloping to right bottom
1478+ 915F 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1479+ 9160 10 FA                djnz loop12a
1480+ 9162
1481+ 9162
1482+ 9162 3E B0                ld  a,_topcorner1
1483+ 9164 77                   ld  (hl),a
1484+ 9165
1485+ 9165                      ;now change column count
1486+ 9165 3A 04 FA             ld a,(var1)
1487+ 9168 D6 02                sub 2                   ;subtract 2
1488+ 916A 32 04 FA             ld (var1),a
1489+ 916D C1                   pop bc
1490+ 916E
1491+ 916E 2A 13 FA             ld hl,(var5)
1492+ 9171 23                   inc hl                  ;move print position to the right
1493+ 9172 11 21 00             ld de,$21               ;move top of next column down and across 1
1494+ 9175 19                   add hl,de
1495+ 9176 22 13 FA             ld (var5),hl
1496+ 9179
1497+ 9179 10 D9                djnz loop12b
1498+ 917B D1                   pop de
1499+ 917C C1                   pop bc
1500+ 917D C3 EE 90             jp go_back3              ; jump back to main loop
1501+ 9180
1502+ 9180
1503+ 9180              ;#############################################
1504+ 9180              ;     draw the 2nd LEFT block
1505+ 9180              ;#############################################
1506+ 9180
1507+ 9180              draw_10_2L:
1508+ 9180
1509+ 9180 C5                    push bc
1510+ 9181 11 FF C0              ld de, $c110-17          ;start print position of wall
1511+ 9184 D5                   push de
1512+ 9185              ;dont draw a front wall as we never see it.
1513+ 9185
1514+ 9185 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1515+ 9188 19                   add hl,de
1516+ 9189 EB                   ex de,hl
1517+ 918A              ;we do not need a front wall for this row as it is never seen.
1518+ 918A              ;below jp code can be removed :) Because a square block here
1519+ 918A              ;is 8 x 8
1520+ 918A
1521+ 918A 13                   inc de                  ;move ahead 1 space in the display (right)
1522+ 918B
1523+ 918B              ;check if the char to our left is a wall block.
1524+ 918B              ;if so, do not draw a black face as we need to hide it or it will
1525+ 918B              ;ovewrite the already drawn block
1526+ 918B 1A                    ld a,(de)
1527+ 918C FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1528+ 918E C2 96 91              jp nz,cont_2r_2L            ;there is no block so draw black edge
1529+ 9191 D1                    pop de
1530+ 9192 C1                    pop bc
1531+ 9193 C3 EE 90              jp go_back3             ;otherwise quit this draw
1532+ 9196
1533+ 9196
1534+ 9196              ;draw the black edge wall
1535+ 9196
1536+ 9196              cont_2r_2L:
1537+ 9196 EB                    ex  de,hl
1538+ 9197 11 21 00              ld de,$0021
1539+ 919A
1540+ 919A              ;need to loop 2 times drawing 2 lots of 3 top
1541+ 919A              ;& bottom chars- move down 1after 1st 3 top chars drawn
1542+ 919A              ;
1543+ 919A
1544+ 919A 3E 02                ld a,2
1545+ 919C 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1546+ 919F
1547+ 919F              ;loop for 3 black wall columns
1548+ 919F 3E 07                ld a,7                  ;column start height
1549+ 91A1 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1550+ 91A4
1551+ 91A4 06 03        loop_xL:ld b,3                  ;loop 3 times for 3 columns
1552+ 91A6 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1553+ 91A9 3E 95                ld a,$95
1554+ 91AB 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1555+ 91AE
1556+ 91AE              loop12br_2L:
1557+ 91AE C5                   push bc                 ;save count
1558+ 91AF 3A 04 FA             ld a,(var1)             ;column height
1559+ 91B2 47                   ld b,a                  ;holds the column height in chars
1560+ 91B3 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1561+ 91B6 F5                   push af                 ;save a for bottom corners
1562+ 91B7 77                   ld  (hl),a
1563+ 91B8
1564+ 91B8              loop12ar_2L:
1565+ 91B8 19                   add hl,de
1566+ 91B9 3E AF                ld  a,_black            ;black wall fill
1567+ 91BB 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1568+ 91BC 10 FA                djnz loop12ar_2L
1569+ 91BE
1570+ 91BE F1                   pop af                  ;retrivetop corner
1571+ 91BF 3C                   inc a                   ;prep for next top corner
1572+ 91C0 32 05 FA             ld (var2),a             ;re-save it for next corner
1573+ 91C3 C6 02                add a,2;4                 ;get the correct char to print
1574+ 91C5 77                   ld  (hl),a              ;draw the bottom of the wall
1575+ 91C6
1576+ 91C6                      ;now change column count
1577+ 91C6 3A 04 FA             ld a,(var1)
1578+ 91C9 C1                   pop bc
1579+ 91CA
1580+ 91CA 2A 13 FA             ld hl,(var5)
1581+ 91CD 23                   inc hl                  ;move print position to the left
1582+ 91CE 22 13 FA             ld (var5),hl
1583+ 91D1
1584+ 91D1 10 DB                djnz loop12br_2L
1585+ 91D3
1586+ 91D3              ;1st set of 3 top bits drawn
1587+ 91D3              ;now jump down the display 1 line
1588+ 91D3              ;then draw another 3 columns
1589+ 91D3
1590+ 91D3 3A 18 FA             ld a,(var7)             ;get our loop counter
1591+ 91D6 3D                   dec a
1592+ 91D7 28 12                jr z,exit_1L             ;exit after 2 loops
1593+ 91D9 32 18 FA             ld (var7),a             ;save it
1594+ 91DC 2A 13 FA             ld hl,(var5)
1595+ 91DF              ;get our last print position
1596+ 91DF                                              ;need to go to next line -1 char
1597+ 91DF 19                   add hl,de
1598+ 91E0                                              ; now move back in the display
1599+ 91E0                                              ;1 char
1600+ 91E0 22 13 FA             ld (var5),hl            ;re save it for use above
1601+ 91E3
1602+ 91E3 3E 05                ld a,5                  ;reduce black wall column height
1603+ 91E5 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1604+ 91E8
1605+ 91E8 C3 A4 91             jp loop_xL
1606+ 91EB
1607+ 91EB
1608+ 91EB D1           exit_1L: pop de
1609+ 91EC C1                   pop bc
1610+ 91ED 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1611+ 91EF
1612+ 91EF C3 EE 90             jp go_back3              ; jump back to main loop
1613+ 91F2
1614+ 91F2              ;#############################################
1615+ 91F2              ;*Draw the 3rd LEFT block of section3
1616+ 91F2              ;#############################################
1617+ 91F2
1618+ 91F2              ; we only need to draw 2 columns of black sides.
1619+ 91F2              ; if theres no brick pattern !
1620+ 91F2
1621+ 91F2              draw_10_3L:
1622+ 91F2 C5                   push bc
1623+ 91F3 D5                   push de                 ;save our display pointer
1624+ 91F4
1625+ 91F4 21 29 C1             ld hl,$C18C-66-30-3              ;start of drawing
1626+ 91F7 7E                   ld a,(hl)               ;read what char is there
1627+ 91F8 FE B5                cp _mediumwall
1628+ 91FA 20 05                jr nz,cont_1r_4L        ;exit if a wall is already there
1629+ 91FC D1                   pop de
1630+ 91FD C1                   pop bc
1631+ 91FE C3 E1 8E             jp go_back4             ;otherwise quit this draw
1632+ 9201
1633+ 9201              cont_1r_4L:
1634+ 9201
1635+ 9201 3E C9                ld a,$c9
1636+ 9203 77                   ld (hl),a
1637+ 9204
1638+ 9204 3E AF                ld a,_black
1639+ 9206 11 21 00             ld de,33                ;1 line width
1640+ 9209
1641+ 9209 CD 15 92             CALL black_wall         ;draw 4 black blocks
1642+ 920C
1643+ 920C 19                   add hl,de               ;jump to next line below
1644+ 920D
1645+ 920D
1646+ 920D              ;top half done - so do bottom half - 2 blacks first
1647+ 920D
1648+ 920D              ;de already holds 32
1649+ 920D
1650+ 920D 3E CE                ld a,$ce
1651+ 920F 77                   ld (hl),a
1652+ 9210
1653+ 9210 D1                   pop de
1654+ 9211 C1                   pop bc
1655+ 9212 C3 EE 90             jp go_back3
1656+ 9215
1657+ 9215              ;draw 2 black walls across 1 line
1658+ 9215              black_wall:
1659+ 9215 19                   add hl,de      ;jump 1 line below
1660+ 9216 77                   ld (hl),a
1661+ 9217 19                   add hl,de      ;jump 1 line below
1662+ 9218 77                   ld (hl),a
1663+ 9219 19                   add hl,de      ;jump 1 line below
1664+ 921A 77                   ld (hl),a
1665+ 921B 19                   add hl,de      ;jump 1 line below
1666+ 921C 77                   ld (hl),a
1667+ 921D
1668+ 921D
1669+ 921D C9                   ret
1670+ 921E
1671+ 921E
1672+ 921E
1673+ 921E              ;#############################################
1674+ 921E              ;#############################################
1675+ 921E              ; draw 2nd layer
1676+ 921E              ;#############################################
1677+ 921E              ;#############################################
1678+ 921E
1679+ 921E              draw_2:
1680+ 921E              ;
1681+ 921E              ;ret
1682+ 921E              ; hl=maze location being drawn.
1683+ 921E              ; now determine what to draw for this section.
1684+ 921E
1685+ 921E
1686+ 921E 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1687+ 9221
1688+ 9221 CD 77 8B             call load_de            ;get left and right and front jump into de reg
1689+ 9224
1690+ 9224 19                   add hl,de               ;jump backwards along the user view 1 space
1691+ 9225 22 25 FA             ld (furthest_point),hl ;re save it
1692+ 9228
1693+ 9228 11 FF FF             ld de,$ffff             ;to move the display position -1
1694+ 922B ED 53 11 FA          ld (var4),de
1695+ 922F
1696+ 922F ED 5B 0B FA          ld de,(left)
1697+ 9233
1698+ 9233              ;we need to move pointer 1 to the left for wall checking
1699+ 9233 19                   add hl,de
1700+ 9234 22 15 FA             ld (var6),hl ;re save it
1701+ 9237
1702+ 9237 ED 53 0F FA          ld (var3),de
1703+ 923B
1704+ 923B 11 A4 00             ld  de,$a4           ; offset to row10 column 7 - left of  centre of the 3d view.
1705+ 923E CD 44 92             call do_draw_2
1706+ 9241
1707+ 9241 C3 D6 92             jp draw_1           ;now draw the 2nd level
1708+ 9244
1709+ 9244              do_draw_2:
1710+ 9244
1711+ 9244 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
1712+ 9247 19                   add  hl,de
1713+ 9248
1714+ 9248
1715+ 9248              ; draw left half then right half of the display.
1716+ 9248
1717+ 9248 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1718+ 924A                                              ; 0 is not counted so loops 12 times
1719+ 924A ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1720+ 924E EB                   ex   de,hl              ; transfer de to hl.
1721+ 924F
1722+ 924F              ;       hl = furthest point in the maze
1723+ 924F              ;       de = d_file location to store byte to display
1724+ 924F
1725+ 924F E5           loop14: push hl
1726+ 9250
1727+ 9250              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1728+ 9250
1729+ 9250 3A 28 FA             ld a,(maze_highbyte)
1730+ 9253 BC                   cp h                    ;are we at the top part of the maze?
1731+ 9254 CA 5F 92             jp z,cont_2s
1732+ 9257                                              ;if we are on a different maze boundary
1733+ 9257                                              ;then draw a maze wall as we are the top
1734+ 9257                                              ;or north wall but maze data has no
1735+ 9257                                              ;wall data.
1736+ 9257
1737+ 9257 3E 01                ld a,1
1738+ 9259 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1739+ 925A C6 7F                add a,127               ;make sure we set a wall!
1740+ 925C C3 74 92             jp do_wall2             ;jump straight to making an end wall
1741+ 925F
1742+ 925F              ;*#########################################
1743+ 925F              cont_2s:
1744+ 925F 7E                   ld a,(hl)
1745+ 9260 17                   rla
1746+ 9261 DA 74 92             jp c,do_wall2            ;bit 7 (128)
1747+ 9264
1748+ 9264                     ; call do_no_wall2         ; otherwise draw no wall
1749+ 9264
1750+ 9264              go_back2:
1751+ 9264 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1752+ 9267 19                   add hl,de               ; holds current screen position
1753+ 9268 EB                   ex de,hl
1754+ 9269 E1                   pop hl
1755+ 926A D5                   push de
1756+ 926B ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1757+ 926F 19                   add hl,de                ; go left 1 block in the maze
1758+ 9270 D1                   pop de
1759+ 9271 10 DC                djnz loop14
1760+ 9273 C9                   ret
1761+ 9274              ;now do the 2nd position
1762+ 9274
1763+ 9274
1764+ 9274              do_wall2:
1765+ 9274                      ;check if bit 2 is set as thats an end
1766+ 9274                      ;and b must then be changed to 1 to stop drawing.
1767+ 9274
1768+ 9274 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1769+ 9276 28 02                jr z,draw_11
1770+ 9278 06 01                ld b,1                  ;set b so we exit on return
1771+ 927A
1772+ 927A              draw_11:
1773+ 927A                                   ; draw the wall face bit
1774+ 927A C5                   push bc
1775+ 927B D5                   push de
1776+ 927C 13                   inc de
1777+ 927D                                     ;save our display pointer
1778+ 927D 06 0E                ld b,14                  ;block is 14 blocks high
1779+ 927F 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1780+ 9282 3E B6                ld   a,_largewall            ;wall on sides facing us
1781+ 9284              loop13:
1782+ 9284 12                   ld (de),a             ; insert the part of the wall.
1783+ 9285 13                   inc de
1784+ 9286 12                   ld (de),a               ;put grey side to our right
1785+ 9287 13                   inc de
1786+ 9288 12                   ld (de),a               ;put grey side to our right
1787+ 9289 13                   inc de
1788+ 928A 12                   ld (de),a               ;put grey side to our right
1789+ 928B 13                   inc de
1790+ 928C 12                   ld (de),a               ;put grey side to our right
1791+ 928D 1B                   dec de
1792+ 928E 1B                   dec de
1793+ 928F 1B                   dec de
1794+ 9290 1B                   dec de
1795+ 9291 EB                   ex de,hl
1796+ 9292 19                   add  hl,de              ; advance to the next row of the display file.
1797+ 9293 EB                   ex de,hl
1798+ 9294 10 EE                djnz loop13             ;do this 3 times
1799+ 9296
1800+ 9296                      ;now draw the blank face to the right of the block
1801+ 9296                      ;create first column of right face characters
1802+ 9296 D1                   pop de                  ;back to our original position
1803+ 9297 13                   inc de
1804+ 9298 13                   inc de
1805+ 9299 13                   inc de                  ;move ahead 6 spaces in the display (right)
1806+ 929A 13                   inc de
1807+ 929B 13                   inc de
1808+ 929C 13                   inc de
1809+ 929D EB                   ex  de,hl
1810+ 929E 11 21 00             ld de,$0021
1811+ 92A1
1812+ 92A1 06 03                ld b,3                  ; for 8 face columns to draw to draw
1813+ 92A3 22 13 FA             ld (var5),hl
1814+ 92A6 3E 0D                ld a,13                 ; for 14 blocks high per column
1815+ 92A8 32 04 FA             ld (var1),a
1816+ 92AB
1817+ 92AB              loop13b:
1818+ 92AB C5                   push bc
1819+ 92AC 3A 04 FA             ld a,(var1)
1820+ 92AF 47                   ld b,a
1821+ 92B0 3E B3                ld a,_topcorner4
1822+ 92B2 77                   ld (hl),a
1823+ 92B3
1824+ 92B3              loop13a:
1825+ 92B3 19                   add hl,de
1826+ 92B4 3E AF                ld  a,_black  ;leftinnerwall  ;black      ;triangle sloping to right bottom
1827+ 92B6 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1828+ 92B7 10 FA                djnz loop13a
1829+ 92B9
1830+ 92B9                      ;ld  (hl),a
1831+ 92B9 3E B0                ld  a,_topcorner1
1832+ 92BB 77                   ld  (hl),a
1833+ 92BC
1834+ 92BC              ; now change the column count
1835+ 92BC 3A 04 FA             ld a,(var1)
1836+ 92BF D6 02                sub 2
1837+ 92C1 32 04 FA             ld (var1),a
1838+ 92C4 C1                   pop bc
1839+ 92C5
1840+ 92C5 2A 13 FA             ld hl,(var5)
1841+ 92C8 23                   inc hl
1842+ 92C9 11 21 00             ld de,$21
1843+ 92CC 19                   add hl,de
1844+ 92CD 22 13 FA             ld (var5),hl
1845+ 92D0
1846+ 92D0 10 D9                djnz loop13b
1847+ 92D2
1848+ 92D2 C1                   pop bc
1849+ 92D3 C3 64 92             jp go_back2              ; jump back to main loop
1850+ 92D6
1851+ 92D6
1852+ 92D6              ;#############################################
1853+ 92D6              ; draw 1st layer
1854+ 92D6              ;#############################################
1855+ 92D6
1856+ 92D6              draw_1:
1857+ 92D6
1858+ 92D6              ;ret
1859+ 92D6              ; hl=maze location being drawn.
1860+ 92D6              ; now determine what to draw for this section.
1861+ 92D6
1862+ 92D6
1863+ 92D6 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1864+ 92D9
1865+ 92D9 CD 77 8B             call load_de            ;get left and right and front jump into de reg
1866+ 92DC
1867+ 92DC 19                   add hl,de               ;jump backwards along the user view 1 space
1868+ 92DD 22 25 FA             ld (furthest_point),hl ;re save it
1869+ 92E0
1870+ 92E0 11 FF FF             ld de,$ffff             ;to move the display position -1
1871+ 92E3 ED 53 11 FA          ld (var4),de
1872+ 92E7
1873+ 92E7 ED 5B 0B FA          ld de,(left)
1874+ 92EB
1875+ 92EB              ;we need to move pointer 1 to the left for wall checking
1876+ 92EB 19                   add hl,de
1877+ 92EC 22 15 FA             ld (var6),hl
1878+ 92EF
1879+ 92EF ED 53 0F FA          ld (var3),de
1880+ 92F3 11 20 00             ld  de,$020           ; offset to row 1 column 0 - left of  centre of the 3d view.
1881+ 92F6 CD FC 92             call do_draw_1
1882+ 92F9
1883+ 92F9 C3 7F 93             jp draw_0           ;now draw the 2nd level
1884+ 92FC
1885+ 92FC              do_draw_1:
1886+ 92FC
1887+ 92FC 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
1888+ 92FF 19                   add  hl,de
1889+ 9300
1890+ 9300
1891+ 9300              ; draw left half then right half of the display.
1892+ 9300
1893+ 9300 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1894+ 9302                                              ; 0 is not counted so loops 12 times
1895+ 9302 ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1896+ 9306 EB                   ex   de,hl              ; transfer de to hl.
1897+ 9307
1898+ 9307              ;       hl = furthest point in the maze
1899+ 9307              ;       de = d_file location to store byte to display
1900+ 9307
1901+ 9307 E5           loop15: push hl
1902+ 9308
1903+ 9308              ;see if we are at the north wall. If we dont, we get a left wall
1904+ 9308              ;drawn because we implicitly draw a wall if we are at the top
1905+ 9308
1906+ 9308              ;        ld a,(player_dir)
1907+ 9308              ;        cp 2                    ;r we looking south
1908+ 9308              ;        jp z,cont_7
1909+ 9308              ;        ld a,l
1910+ 9308              ;        cp 17
1911+ 9308              ;        jp c,do_wall1
1912+ 9308
1913+ 9308              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1914+ 9308
1915+ 9308 3A 28 FA             ld a,(maze_highbyte)
1916+ 930B BC                   cp h                    ;are we at the top part of the maze?
1917+ 930C CA 17 93             jp z,cont_7
1918+ 930F                                              ;if we are on a different maze boundary
1919+ 930F                                              ;then draw a maze wall as we are the top
1920+ 930F                                              ;or north wall but maze data has no
1921+ 930F                                              ;wall data.
1922+ 930F
1923+ 930F 3E 01                ld a,1
1924+ 9311 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1925+ 9312 C6 7F                add a,127               ;make sure we set a wall!
1926+ 9314 C3 2C 93             jp do_wall1             ;jump straight to making an end wall
1927+ 9317
1928+ 9317              ;#########################################################
1929+ 9317
1930+ 9317 7E           cont_7: ld a,(hl)
1931+ 9318 17                   rla
1932+ 9319 DA 2C 93             jp c,do_wall1            ;bit 7 (128)
1933+ 931C
1934+ 931C                     ; call do_no_wall1         ; otherwise draw no wall
1935+ 931C
1936+ 931C              go_back1:
1937+ 931C 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1938+ 931F 19                   add hl,de               ; holds current screen position
1939+ 9320 EB                   ex de,hl
1940+ 9321 E1                   pop hl
1941+ 9322 D5                   push de
1942+ 9323 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1943+ 9327 19                   add hl,de                ; go left 1 block in the maze
1944+ 9328 D1                   pop de
1945+ 9329 10 DC                djnz loop15
1946+ 932B
1947+ 932B              ;jp draw_0
1948+ 932B C9                   ret
1949+ 932C              ;now do the 2nd position
1950+ 932C
1951+ 932C
1952+ 932C
1953+ 932C              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1954+ 932C
1955+ 932C              do_wall1:
1956+ 932C                      ;check if bit 2 is set as thats an end
1957+ 932C                      ;and b must then be changed to 1 to stop drawing.
1958+ 932C
1959+ 932C CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1960+ 932E 28 02                jr z,draw_12
1961+ 9330 06 01                ld b,1                  ;set b so we exit on return
1962+ 9332
1963+ 9332              ;draw the corridor bit to the left (1 column)
1964+ 9332              draw_12:
1965+ 9332 C5                   push bc
1966+ 9333 D5                   push de                 ;save our display pointer
1967+ 9334 06 16                ld b,22                  ;block is 22 blocks high
1968+ 9336 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1969+ 9339 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1970+ 933B 12           loop16: ld   (de),a             ; insert thepart of the wall.
1971+ 933C 13                   inc de
1972+ 933D 12                   ld (de),a               ;put grey side to our right
1973+ 933E                      ;inc de
1974+ 933E                      ;ld (de),a               ;put grey side to our right
1975+ 933E                      ;inc de
1976+ 933E                      ;ld (de),a               ;put grey side to our right
1977+ 933E                      ;inc de
1978+ 933E                      ;ld (de),a               ;put grey side to our right
1979+ 933E                      ;dec de
1980+ 933E                      ;dec de
1981+ 933E                      ;dec de
1982+ 933E 1B                   dec de
1983+ 933F EB                   ex de,hl
1984+ 9340 19                   add  hl,de              ; advance to the next row of the display file.
1985+ 9341 EB                   ex de,hl
1986+ 9342 10 F7                djnz loop16             ;do this 3 times
1987+ 9344
1988+ 9344                      ;now draw the blank face to the right of the block
1989+ 9344                      ;create first column of right face characters
1990+ 9344 D1                   pop de                  ;back to our original position
1991+ 9345                      ;inc de
1992+ 9345                      ;inc de
1993+ 9345                      ;inc de                  ;move ahead 4 spaces in the display (right)
1994+ 9345 13                   inc de
1995+ 9346 13                   inc de
1996+ 9347 EB                   ex  de,hl
1997+ 9348 11 21 00             ld de,$0021
1998+ 934B
1999+ 934B              ;now draw the face we see on our left as we walk forward
2000+ 934B 06 04                ld b,4                  ; for 8 face columns to draw to draw
2001+ 934D 22 13 FA             ld (var5),hl
2002+ 9350 3E 15                ld a,21                 ; for 14 blocks high per column
2003+ 9352 32 04 FA             ld (var1),a
2004+ 9355
2005+ 9355              loop14b:
2006+ 9355 C5                   push bc
2007+ 9356 3A 04 FA             ld a,(var1)
2008+ 9359 47                   ld b,a
2009+ 935A 3E B3                ld a,_topcorner4
2010+ 935C 77                   ld (hl),a
2011+ 935D
2012+ 935D              loop14a:
2013+ 935D 19                   add hl,de
2014+ 935E 3E AF                ld  a,_black            ;triangle sloping to right bottom
2015+ 9360 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
2016+ 9361 10 FA                djnz loop14a
2017+ 9363
2018+ 9363                      ;ld  (hl),a
2019+ 9363 3E B0                ld  a,_topcorner1
2020+ 9365 77                   ld  (hl),a
2021+ 9366
2022+ 9366              ; now change the column count
2023+ 9366 3A 04 FA             ld a,(var1)
2024+ 9369 D6 02                sub 2
2025+ 936B 32 04 FA             ld (var1),a
2026+ 936E C1                   pop bc
2027+ 936F
2028+ 936F 2A 13 FA             ld hl,(var5)
2029+ 9372 23                   inc hl
2030+ 9373 11 21 00             ld de,$21
2031+ 9376 19                   add hl,de
2032+ 9377 22 13 FA             ld (var5),hl
2033+ 937A
2034+ 937A 10 D9                djnz loop14b
2035+ 937C
2036+ 937C C1                   pop bc
2037+ 937D 18 9D                jr go_back1              ; jump back to main loop
2038+ 937F
2039+ 937F              ;        jp draw_1               ;draw next layer
2040+ 937F
2041+ 937F              ; there is a wall so insert chequerboard for the wall face.
2042+ 937F
2043+ 937F              ;do_no_wall1:
2044+ 937F              ;        ret ; no wall so do nothing
2045+ 937F              ;        push de
2046+ 937F              ;        ld   a,_topwhitebottomchequer
2047+ 937F              ;        ld   (de),a                             ; insert the top of the wall face.
2048+ 937F              ;        ld   hl,$0021
2049+ 937F              ;        add  hl,de                              ; advance to the next row of the display file.
2050+ 937F              ;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
2051+ 937F              ;        pop de
2052+ 937F              ;        ret
2053+ 937F
2054+ 937F
2055+ 937F
2056+ 937F
2057+ 937F              ;#############################################
2058+ 937F              ; draw layer 0
2059+ 937F              ;#############################################
2060+ 937F
2061+ 937F              draw_0:
2062+ 937F              ;ret
2063+ 937F
2064+ 937F
2065+ 937F              ; hl=maze location being drawn.
2066+ 937F              ; now determine what to draw for this section.
2067+ 937F
2068+ 937F
2069+ 937F 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
2070+ 9382
2071+ 9382 CD 77 8B             call load_de            ;get left and right and front jump into de reg
2072+ 9385
2073+ 9385 19                   add hl,de               ;jump backwards along the user view 1 space
2074+ 9386
2075+ 9386              ;move map pointer left to read the walls
2076+ 9386              ;;        ld de,(left)
2077+ 9386              ;;        add hl,de
2078+ 9386
2079+ 9386
2080+ 9386
2081+ 9386              ;;        ld (furthest_point),hl ;re save it
2082+ 9386
2083+ 9386              ;        ld de,$ffff             ;to move the display position -1
2084+ 9386              ;        ld (var4),de
2085+ 9386
2086+ 9386 ED 5B 0B FA          ld de,(left)
2087+ 938A
2088+ 938A              ;we need to move pointer 1 to the left for wall checking
2089+ 938A 19                   add hl,de
2090+ 938B 22 15 FA             ld (var6),hl
2091+ 938E
2092+ 938E ED 53 0F FA          ld (var3),de
2093+ 9392 11 00 00             ld  de,$00              ;offset to row0 column 0 - left of  centre of the 3d view.
2094+ 9395                                              ;1 column of left face to draw
2095+ 9395                  ;    call do_draw_0
2096+ 9395
2097+ 9395
2098+ 9395              do_draw_0:
2099+ 9395
2100+ 9395 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
2101+ 9398 19                   add  hl,de
2102+ 9399
2103+ 9399
2104+ 9399              ; draw left half then right half of the display.
2105+ 9399
2106+ 9399 06 01                ld b,1                 ; count for 2 blocks left or right of display file
2107+ 939B ED 5B 15 FA          ld de,(var6)           ; 0 is not counted so loops 12 times
2108+ 939F                     ; ld   de,(furthest_point); retrieve the maze location.
2109+ 939F EB                   ex   de,hl              ; transfer de to hl.
2110+ 93A0
2111+ 93A0              ;       hl = furthest point in the maze
2112+ 93A0              ;       de = d_file location to store byte to display
2113+ 93A0
2114+ 93A0              loop17: ;push hl
2115+ 93A0
2116+ 93A0
2117+ 93A0              ;check if we are at the north wall
2118+ 93A0
2119+ 93A0              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
2120+ 93A0
2121+ 93A0 3A 28 FA             ld a,(maze_highbyte)
2122+ 93A3 BC                   cp h                    ;are we at the top part of the maze?
2123+ 93A4 CA AF 93             jp z,cont_4
2124+ 93A7                                              ;if we are on a different maze boundary
2125+ 93A7                                              ;then draw a maze wall as we are the top
2126+ 93A7                                              ;or north wall but maze data has no
2127+ 93A7                                              ;wall data.
2128+ 93A7
2129+ 93A7 3E 01                ld a,1
2130+ 93A9 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
2131+ 93AA C6 7F                add a,127               ;make sure we set a wall!
2132+ 93AC C3 BD 93             jp draw_13             ;jump straight to making an end wall
2133+ 93AF
2134+ 93AF              ;##########################################
2135+ 93AF
2136+ 93AF 7E           cont_4: ld a,(hl)
2137+ 93B0 17                   rla
2138+ 93B1 DA B5 93             jp c,do_wall0            ;bit 7 (128)
2139+ 93B4
2140+ 93B4 C9                   ret
2141+ 93B5
2142+ 93B5
2143+ 93B5
2144+ 93B5              do_wall0:
2145+ 93B5                      ;check if bit 2 is set as thats an end
2146+ 93B5                      ;and b must then be changed to 1 to stop drawing.
2147+ 93B5
2148+ 93B5 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
2149+ 93B7 DA BD 93             jp c,draw_13
2150+ 93BA
2151+ 93BA C3 D6 93             jp draw_brick_l         ; otherwise draw no wall
2152+ 93BD
2153+ 93BD              ;we need to draw 1 vertical line from pos 1,1 to show
2154+ 93BD              ;the side of the block.
2155+ 93BD
2156+ 93BD              ;draw the sidewall brick pattern
2157+ 93BD              draw_13:
2158+ 93BD 3E B3                ld a,_topcorner4
2159+ 93BF 12                   ld (de),a
2160+ 93C0 21 21 00             ld hl,$21                ;jp to next line below
2161+ 93C3 19                   add hl,de
2162+ 93C4 EB                   ex de,hl
2163+ 93C5
2164+ 93C5 06 16                ld b,22                  ;block is 24 blocks high
2165+ 93C7 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
2166+ 93CA 3E AF                ld a,_black            ;wall on sides facing us;
2167+ 93CC 12           loop18: ld (de),a             ; insert the part of the wall.
2168+ 93CD EB                   ex de,hl
2169+ 93CE 19                   add  hl,de              ; advance to the next row of the display file.
2170+ 93CF EB                   ex de,hl
2171+ 93D0 10 FA                djnz loop18
2172+ 93D2
2173+ 93D2 3E B0                ld a,_topcorner1
2174+ 93D4 12                   ld (de),a
2175+ 93D5 C9                   ret
2176+ 93D6
2177+ 93D6              draw_brick_l:
2178+ 93D6 21 21 00             ld hl,$21                ;jp to next line below
2179+ 93D9 19                   add hl,de
2180+ 93DA EB                   ex de,hl
2181+ 93DB
2182+ 93DB 06 16                ld b,22                  ;block is 24 blocks high
2183+ 93DD 21 21 00             ld hl,$021
2184+ 93E0                                         ;load with 32 to jump to line below us
2185+ 93E0 3E B8                ld a,_hugewall;_largewall            ;wall on sides facing us;
2186+ 93E2              loop18l:
2187+ 93E2 12                   ld (de),a             ; insert the part of the wall.
2188+ 93E3 EB                   ex de,hl
2189+ 93E4 19                   add  hl,de              ; advance to the next row of the display file.
2190+ 93E5 EB                   ex de,hl
2191+ 93E6 10 FA                djnz loop18l
2192+ 93E8
2193+ 93E8 C9                   ret
2194+ 93E9
# file closed: src/4-rd3dmazeV6.asm
 419  93E9                  INCLUDE "5-rd3dmazeV6.asm" ; draw wall in front of player+setup right part of screen
# file opened: src/5-rd3dmazeV6.asm
   1+ 93E9
   2+ 93E9
   3+ 93E9              ;#############################################
   4+ 93E9              ;original code to draw maze FRONT walls here
   5+ 93E9              ;#############################################
   6+ 93E9
   7+ 93E9
   8+ 93E9              ; ############################
   9+ 93E9              ; draw wall in front of player
  10+ 93E9              ; ############################
  11+ 93E9
  12+ 93E9              ; a wall has been found directly in front of the player within visible range and so a wall face must be drawn centred within the view.
  13+ 93E9              ; the wall face is one character wider than it is high.
  14+ 93E9
  15+ 93E9              draw_front_view:
  16+ 93E9
  17+ 93E9              ;        ld a,(depth)            ;find out how far we can see - will never be higher than 6
  18+ 93E9 3A 02 FA             ld a, (maxview)
  19+ 93EC FE 06                cp 6
  20+ 93EE C8                   ret z				               ;too far away so return doing nothing
  21+ 93EF FE 05        	    cp 5
  22+ 93F1 C8                   ret z
  23+ 93F2 C2 FF 93             jp nz,set4
  24+ 93F5 0E 0D                ld c,13;12
  25+ 93F7 3E B4        		ld a,_smallwall			      ;this is the character to draw (brick pattern)
  26+ 93F9 32 04 FA     		ld (var1),a
  27+ 93FC C3 42 94             jp draw_wall
  28+ 93FF FE 04        set4:   cp 4
  29+ 9401 C2 0E 94             jp nz,set3
  30+ 9404 0E 0B                ld c,11
  31+ 9406 3E B4        		ld a,_smallwall 			     ;this is the character to draw (brick pattern)
  32+ 9408 32 04 FA     		ld (var1),a
  33+ 940B C3 42 94             jp draw_wall
  34+ 940E FE 03        set3:   cp 3
  35+ 9410 C2 1D 94             jp nz,set2
  36+ 9413 0E 0A                ld c,10
  37+ 9415 3E B7        		ld a,_mediumwall_1			   ;this is the character to draw (brick pattern)
  38+ 9417 32 04 FA     		ld (var1),a
  39+ 941A C3 42 94             jp draw_wall
  40+ 941D FE 02        set2:   cp 2
  41+ 941F C2 2C 94             jp nz,set1
  42+ 9422 0E 08                ld c,8
  43+ 9424 3E B5        		ld a,_mediumwall			      ;this is the character to draw (brick pattern)
  44+ 9426 32 04 FA     		ld (var1),a
  45+ 9429 C3 42 94             jp draw_wall
  46+ 942C FE 01        set1:   cp 1
  47+ 942E C2 3B 94             jp nz,set0
  48+ 9431 0E 05                ld c,5
  49+ 9433 3E B6        		ld a,_largewall			      ;this is the character to draw (brick pattern)
  50+ 9435 32 04 FA     		ld (var1),a
  51+ 9438 C3 42 94             jp draw_wall
  52+ 943B              ;must be zero if we get here
  53+ 943B 0E 01        set0:   ld c,1
  54+ 943D 3E B8                ld a,_hugewall;_largewall
  55+ 943F 32 04 FA             ld (var1),a
  56+ 9442
  57+ 9442              draw_wall:
  58+ 9442              ;ld c,1 ;section from player
  59+ 9442
  60+ 9442 2A 55 81     l49f6:  ld   hl,(d_file)                        ; fetch the location of the display file.
  61+ 9445 11 21 00             ld   de,$0021                           ; each row is 33 characters wide.
  62+ 9448
  63+ 9448              ;        ld   bc,(l4085)                         ; fetch the details for the section: b=width of section, c=distance of section from player.
  64+ 9448 06 00                ld   b,$00
  65+ 944A 09                   add  hl,bc                              ; advance across the screen to the current distance of the wall.
  66+ 944B
  67+ 944B 3E 19                ld   a,$19                              ; the width of the view.
  68+ 944D 41                   ld   b,c                                ; fetch the distance.
  69+ 944E CB 20                sla  b                                  ; multiply the distance by 2 since the wall be spans to the left and right of the centre column of the view.
  70+ 9450 90                   sub  b                                  ; determine the width of the wall face.
  71+ 9451 47                   ld   b,a                                ; b=width of the wall face (it will be an odd number of characters).
  72+ 9452
  73+ 9452 D6 01                sub  $01                                ; determine the wall height (it will be an even number of characters).
  74+ 9454
  75+ 9454              ; enter a loop to draw each column of the wall face.
  76+ 9454
  77+ 9454 C5           l4a0d:  push bc                                 ; save the wall face width.
  78+ 9455 E5                   push hl                                 ; save the address within the display file.
  79+ 9456
  80+ 9456 41                   ld   b,c                                ; fetch the distance, which corresponds to the number of blank rows to show above the wall face.
  81+ 9457
  82+ 9457 36 20        l4a10:  ld   (hl),_space                        ; insert a space above the wall face.
  83+ 9459 19                   add  hl,de                              ; advance to the next row.
  84+ 945A 10 FB                djnz l4a10                              ; repeat for all rows above the wall face.
  85+ 945C
  86+ 945C 47                   ld   b,a                                ; fetch the wall height.
  87+ 945D
  88+ 945D F5           l4a16:  push af
  89+ 945E 3A 04 FA     		ld a,(var1)
  90+ 9461 77           		ld   (hl),a                             ; insert a wall face character into the display file.
  91+ 9462 F1                   pop af
  92+ 9463 19           		      add  hl,de                              ; advance to the next row.
  93+ 9464 10 F7                djnz l4a16                              ; repeat for all rows forming the height of the wall face.
  94+ 9466
  95+ 9466 41                   ld   b,c                                ; fetch the distance, which corresponds the the number of blank rows to show above the wall face.
  96+ 9467 05                   dec  b                                  ; there is one less blank row below the wall face than above it due to the status message row.
  97+ 9468 28 05                jr   z,l4a24                            ; jump if there are no rows below the wall to blank.
  98+ 946A
  99+ 946A 36 20        l4a1f:  ld   (hl),_space                        ; insert a space below the wall face.
 100+ 946C 19                   add  hl,de                              ; advance to the next row.
 101+ 946D 10 FB                djnz l4a1f                              ; repeat for all rows below the wall face.
 102+ 946F
 103+ 946F E1           l4a24:  pop  hl                                 ; retrieve the address within the display file.
 104+ 9470 23                   inc  hl                                 ; advance to the next column to the right.
 105+ 9471
 106+ 9471 C1                   pop  bc                                 ; retrieve the wall face width.
 107+ 9472 10 E0                djnz l4a0d                              ; repeat for all columns of the wall face.
 108+ 9474
 109+ 9474              ;call my_print
 110+ 9474 C9                   ret
 111+ 9475
 112+ 9475              ;#################################################################
 113+ 9475              ;#################################################################
 114+ 9475              ; draw maze end walls left and right of the player view
 115+ 9475              ;#################################################################
 116+ 9475              ;#################################################################
 117+ 9475
 118+ 9475              ;we will just copy parts of the front wall left and right on the screen
 119+ 9475              ;depending if theres a side wall or not. No side wall, do nothing!
 120+ 9475
 121+ 9475              draw_side_walls
 122+ 9475
 123+ 9475              ;1st we need to know if the front view is a side wallsurrounding the maze
 124+ 9475              ;this is $81 (129) if its a side wall
 125+ 9475
 126+ 9475              ;so we have an end wall here!
 127+ 9475
 128+ 9475              ;1st, check if maxdepth =4 or less. We do not want to draw anything for
 129+ 9475              ;depth 5 or 6
 130+ 9475
 131+ 9475 B7                   or a                    ;clear carry flag
 132+ 9476 3A 02 FA             ld a,(maxview)          ;how far we can see in front of us
 133+ 9479 FE 05                cp 5
 134+ 947B D0                   ret nc                  ;exit if its 5 or greater
 135+ 947C                                              ;carry set if <5
 136+ 947C
 137+ 947C              ;now check if maxview and depth are the same as this indicates a side wall
 138+ 947C              ;reg a already contains maxview
 139+ 947C              ;#        ld b,a
 140+ 947C              ;#        ld a,(depth)
 141+ 947C              ;#        sub b                   ;should be 0 if the same
 142+ 947C              ;#        ret nz                  ;exit if different
 143+ 947C
 144+ 947C              ;now we cheat :) we just keep copying lines of the wall left & right
 145+ 947C              ;untill we hit a non space in the display file!
 146+ 947C
 147+ 947C              ;reg a contains our depth
 148+ 947C              ;        ld a,(maxview)
 149+ 947C 3A 06 FA             ld a,(depth)
 150+ 947F
 151+ 947F FE 00                cp 0
 152+ 9481                      ;depth 1
 153+ 9481 CA 99 94             jp z,cp_wall_1          ;wall immediately in front of us
 154+ 9484 FE 01                cp 1
 155+ 9486                      ;depth 2
 156+ 9486 CA C3 94             jp z,cp_wall_2
 157+ 9489 FE 02                cp 2
 158+ 948B                      ;depth 3
 159+ 948B CA 0B 95             jp z,cp_wall_3
 160+ 948E FE 03                cp 3
 161+ 9490                      ;depth 4
 162+ 9490 CA 53 95             jp z,cp_wall_4
 163+ 9493 FE 04                cp 4
 164+ 9495                      ;depth 5
 165+ 9495 CA 9E 95             jp z,cp_wall_5
 166+ 9498 C9                   ret                     ;go back now
 167+ 9499
 168+ 9499              cp_wall_1:
 169+ 9499              ;do left side first - check for char A3 (black block for maze wall at a distance
 170+ 9499
 171+ 9499 21 4A C1             ld hl,$c14a             ;we should be 10 lines down(10,0)
 172+ 949C 7E                   ld a,(hl)               ;check our character
 173+ 949D FE 20                cp ' '                  ;should be space indicating nothing there
 174+ 949F
 175+ 949F CC B2 94             call  z,loop91
 176+ 94A2                       ;draw left half
 177+ 94A2
 178+ 94A2              ;now do the right side
 179+ 94A2 21 39 C0             ld hl,$c039             ;we should be 10 lines down(10,24)
 180+ 94A5 7E                   ld a,(hl)               ;check our character
 181+ 94A6 FE 20                cp ' '                  ;should be space indicating noting there
 182+ 94A8 C0                   ret nz                  ;exit if no space there
 183+ 94A9 21 39 C0             ld hl,$c039             ;top left face
 184+ 94AC              ;        ld de,$c038             ;1 line right of front wall
 185+ 94AC 06 16                ld b,22                 ;copy 22 lines
 186+ 94AE C3 B7 94             jp loop90               ;draw right side!
 187+ 94B1 C9                   ret                     ;exit altogether
 188+ 94B2
 189+ 94B2 21 21 C0     loop91: ld hl,$c021             ;top left face
 190+ 94B5              ;        ld de,$c022             ;1 line left
 191+ 94B5 06 16                ld b,22                 ;copy 22 lines
 192+ 94B7              loop90: ;ld a,(de)
 193+ 94B7 3E B8                ld a,_hugewall
 194+ 94B9 77                   ld (hl),a
 195+ 94BA D5                   push de
 196+ 94BB 11 21 00             ld de,33
 197+ 94BE 19                   add hl,de               ;go to next line
 198+ 94BF D1                   pop de
 199+ 94C0 10 F5                djnz loop90
 200+ 94C2 C9                   ret
 201+ 94C3
 202+ 94C3              cp_wall_2:
 203+ 94C3              ;do left side first - check for char ' ' showing nothing drawn there
 204+ 94C3
 205+ 94C3 21 A9 C0             ld hl,$c0a9             ;we should be at the top left of the face
 206+ 94C6 DD 21 A9 C0          ld ix,$c0a9
 207+ 94CA              ;        ld de,$c0ab             ;1 line left of our wall face
 208+ 94CA 11 1F FA             ld de,lr_wall
 209+ 94CD 3E B6                ld a,_largewall
 210+ 94CF 12                   ld (de),a
 211+ 94D0
 212+ 94D0 0E 05                ld c,5                  ;draw 5 columns to the border
 213+ 94D2 E5           loop80: push hl
 214+ 94D3 06 0E                ld b,14
 215+ 94D5 DD 7E 00             ld a,(ix+0)             ;check our character
 216+ 94D8 FE 20                cp ' '                  ;should be space indicating noting there
 217+ 94DA CC E6 95             call z,loop93
 218+ 94DD DD 2B                dec ix
 219+ 94DF E1                   pop hl
 220+ 94E0 2B                   dec hl                 ;move left 1 line in the display
 221+ 94E1 0D                   dec c
 222+ 94E2 C2 D2 94             jp nz,loop80            ;do this 5 times
 223+ 94E5
 224+ 94E5              ;now do the right side
 225+ 94E5 21 B9 C0             ld hl,$c0b9             ;we should be at the top right of the face
 226+ 94E8 DD 21 B9 C0          ld ix,$c0b9
 227+ 94EC               ;       ld de,$c0b8             ;1 line left of our wall face
 228+ 94EC 11 1F FA             ld de,lr_wall
 229+ 94EF 3E B6                ld a,_largewall
 230+ 94F1 12                   ld (de),a
 231+ 94F2
 232+ 94F2 0E 05                ld c,5                  ;draw 5 columns to the border
 233+ 94F4 E5           loop81: push hl
 234+ 94F5 06 0E                ld b,14
 235+ 94F7 DD 7E 00             ld a,(ix+0)             ;check our character
 236+ 94FA FE 20                cp ' '                  ;should be space indicating noting there
 237+ 94FC C2 02 95             jp nz,loop82            ;skip over if no space there
 238+ 94FF CC E6 95             call z,loop93
 239+ 9502 DD 23        loop82  inc ix
 240+ 9504                               ;do the next line
 241+ 9504 E1                   pop hl
 242+ 9505 23                   inc hl
 243+ 9506 0D                   dec c
 244+ 9507 C2 F4 94             jp nz,loop81
 245+ 950A C9                   ret                     ;exit routine totally
 246+ 950B
 247+ 950B              cp_wall_3:
 248+ 950B              ;do left side first - check for char ' ' showing nothing drawn there
 249+ 950B
 250+ 950B 21 0F C1             ld hl,$c10f             ;we should be at the top left of the face
 251+ 950E DD 21 0F C1          ld ix,$c10f
 252+ 9512              ;        ld de,$c110             ;1 line left of our wall face
 253+ 9512 11 1F FA             ld de,lr_wall
 254+ 9515 3E B5                ld a,_mediumwall
 255+ 9517 12                   ld (de),a
 256+ 9518
 257+ 9518 0E 08                ld c,8                  ;draw 8 columns to the border
 258+ 951A E5           loop83: push hl
 259+ 951B 06 08                ld b,8                 ;10 chars high
 260+ 951D DD 7E 00             ld a,(ix+0)             ;check our character
 261+ 9520 FE 20                cp ' '                  ;should be space indicating noting there
 262+ 9522 CC E6 95             call z,loop93
 263+ 9525 DD 2B                dec ix
 264+ 9527 E1                   pop hl
 265+ 9528 2B                   dec hl                 ;move left 1 line in the display
 266+ 9529 0D                   dec c
 267+ 952A C2 1A 95             jp nz,loop83            ;do this 5 times
 268+ 952D
 269+ 952D              ;now do the right side
 270+ 952D 21 19 C1             ld hl,$c119             ;we should be at the top right of the face
 271+ 9530 DD 21 19 C1          ld ix,$c119
 272+ 9534              ;        ld de,$c118             ;1 line left of our wall face
 273+ 9534 11 1F FA             ld de,lr_wall
 274+ 9537 3E B5                ld a,_mediumwall
 275+ 9539 12                   ld (de),a
 276+ 953A
 277+ 953A 0E 08                ld c,8                  ;draw 8 columns to the border
 278+ 953C E5           loop84: push hl
 279+ 953D 06 08                ld b,8                 ;8 chars high
 280+ 953F DD 7E 00             ld a,(ix+0)             ;check our character
 281+ 9542 FE 20                cp ' '                  ;should be space indicating noting there
 282+ 9544 C2 4A 95             jp nz,loop85            ;skip over if no space there
 283+ 9547 CC E6 95             call z,loop93
 284+ 954A DD 23        loop85: inc ix
 285+ 954C                               ;do the next line
 286+ 954C E1                   pop hl
 287+ 954D 23                   inc hl
 288+ 954E 0D                   dec c
 289+ 954F C2 3C 95             jp nz,loop84
 290+ 9552 C9                   ret                     ;exit routine totally
 291+ 9553
 292+ 9553              cp_wall_4:
 293+ 9553              ;do left side first - check for char ' ' showing nothing drawn there
 294+ 9553
 295+ 9553 21 53 C1             ld hl,$c153             ;we should be at the top left of the face
 296+ 9556 DD 21 53 C1          ld ix,$c153
 297+ 955A              ;
 298+ 955A 11 1F FA             ld de,lr_wall
 299+ 955D 3E B7                ld a,_mediumwall_1
 300+ 955F 12                   ld (de),a
 301+ 9560 11 54 C1             ld de,$c154             ;1 line left of our wall face
 302+ 9563 0E 0A                ld c,10                  ;draw 10 columns to the border
 303+ 9565 E5           loop86: push hl
 304+ 9566 06 04                ld b,4                  ;4 chars high
 305+ 9568 DD 7E 00             ld a,(ix+0)             ;check our character
 306+ 956B FE 20                cp ' '                  ;should be space indicating noting there
 307+ 956D CC E6 95             call z,loop93
 308+ 9570 DD 2B                dec ix
 309+ 9572 E1                   pop hl
 310+ 9573 2B                   dec hl                  ;move left 1 line in the display
 311+ 9574 0D                   dec c
 312+ 9575 C2 65 95             jp nz,loop86            ;do this 5 times
 313+ 9578
 314+ 9578              ;now do the right side
 315+ 9578 21 59 C1             ld hl,$c159             ;we should be at the top right of the face
 316+ 957B DD 21 59 C1          ld ix,$c159
 317+ 957F              ;        ld de,$c158             ;1 line left of our wall face
 318+ 957F 11 1F FA             ld de,lr_wall
 319+ 9582 3E B7                ld a,_mediumwall_1
 320+ 9584 12                   ld (de),a
 321+ 9585
 322+ 9585 0E 0A                ld c,10                  ;draw 10 columns to the border
 323+ 9587 E5           loop87: push hl
 324+ 9588 06 04                ld b,4                 ;4 chars high
 325+ 958A DD 7E 00             ld a,(ix+0)             ;check our character
 326+ 958D FE 20                cp ' '                  ;should be space indicating noting there
 327+ 958F C2 95 95             jp nz,loop88            ;skip over if no space there
 328+ 9592 CC E6 95             call z,loop93
 329+ 9595 DD 23        loop88: inc ix
 330+ 9597                               ;do the next line
 331+ 9597 E1                   pop hl
 332+ 9598 23                   inc hl
 333+ 9599 0D                   dec c
 334+ 959A C2 87 95             jp nz,loop87
 335+ 959D C9                   ret                     ;exit routine totally
 336+ 959E
 337+ 959E              cp_wall_5:
 338+ 959E              ;do left side first - check for char ' ' showing nothing drawn there
 339+ 959E
 340+ 959E 21 77 C1             ld hl,$c177             ;we should be at the top left of the face
 341+ 95A1 DD 21 77 C1          ld ix,$c177
 342+ 95A5              ;        ld de,$c176             ;1 line left of our wall face
 343+ 95A5 11 1F FA             ld de,lr_wall
 344+ 95A8 3E B4                ld a,_smallwall
 345+ 95AA 12                   ld (de),a
 346+ 95AB
 347+ 95AB 0E 0D                ld c,13                  ;draw 10 columns to the border
 348+ 95AD E5           loop89: push hl
 349+ 95AE 06 02                ld b,2                  ;4 chars high
 350+ 95B0 DD 7E 00             ld a,(ix+0)             ;check our character
 351+ 95B3 FE A2                cp _bottomblack         ;should be space indicating noting there
 352+ 95B5 CC E6 95             call z,loop93
 353+ 95B8 DD 2B                dec ix
 354+ 95BA E1                   pop hl
 355+ 95BB 2B                   dec hl                  ;move left 1 line in the display
 356+ 95BC 0D                   dec c
 357+ 95BD C2 AD 95             jp nz,loop89            ;do this 5 times
 358+ 95C0
 359+ 95C0              ;now do the right side
 360+ 95C0 21 75 C1             ld hl,$c175             ;we should be at the top right of the face
 361+ 95C3 DD 21 75 C1          ld ix,$c175
 362+ 95C7              ;        ld de,$c176             ;1 line left of our wall face
 363+ 95C7 11 1F FA             ld de,lr_wall
 364+ 95CA 3E B4                ld a,_smallwall
 365+ 95CC 12                   ld (de),a
 366+ 95CD
 367+ 95CD 0E 0F                ld c,15                  ;draw 10 columns to the border
 368+ 95CF E5           loop871:push hl
 369+ 95D0 06 02                ld b,2                  ;2 chars high
 370+ 95D2 DD 7E 00             ld a,(ix+0)             ;check our character
 371+ 95D5 FE A2                cp _bottomblack         ;should be space indicating noting there
 372+ 95D7 C2 DD 95             jp nz,loop881            ;skip over if no space there
 373+ 95DA CC E6 95             call z,loop93
 374+ 95DD DD 23        loop881:inc ix
 375+ 95DF                               ;do the next line
 376+ 95DF E1                   pop hl
 377+ 95E0 23                   inc hl
 378+ 95E1 0D                   dec c
 379+ 95E2 C2 CF 95             jp nz,loop871
 380+ 95E5 C9                   ret                     ;exit routine totally
 381+ 95E6
 382+ 95E6
 383+ 95E6              ;#######################################################
 384+ 95E6              ;This routine draws the end wall blocks left & right
 385+ 95E6              ;######################################################
 386+ 95E6
 387+ 95E6              ;it matches so draw a wall face by copying the existing one!
 388+ 95E6              loop93:; dec de                  ;go 1 line left
 389+ 95E6 1A           loop92: ld a,(de)
 390+ 95E7 77                   ld (hl),a
 391+ 95E8 D5                   push de
 392+ 95E9 11 21 00             ld de,33
 393+ 95EC 19                   add hl,de               ;go to next line
 394+ 95ED D1                   pop de
 395+ 95EE 10 F6                djnz loop92
 396+ 95F0
 397+ 95F0 C9                   ret
 398+ 95F1
 399+ 95F1              ;#################################################################
 400+ 95F1              ;#################################################################
 401+ 95F1              ;draw colours     ; go through char display file and paint colours
 402+ 95F1              ;#################################################################
 403+ 95F1              ;#################################################################
 404+ 95F1
 405+ 95F1
 406+ 95F1 28 00        wallcol       dw  40             ;bright red
 407+ 95F3              skycol        equ 80            ; grey paper, black ink
 408+ 95F3              floorcol      equ 98             ; brown paper, black ink
 409+ 95F3              ;corridcol     equ 112            ; yellow paper, black ink
 410+ 95F3 28           sky_floor     db  40            ;store current sky or floor colour
 411+ 95F4 00           wall_temp     db  0             ;temporary store for wall colour graduation
 412+ 95F5
 413+ 95F5              ; go through the display file at c000, check the character, change the colour
 414+ 95F5              ; if at row 26, start on next line at far left (0)
 415+ 95F5              ; do it again until you reach line 24 and column 25
 416+ 95F5
 417+ 95F5              ; display is at location c000
 418+ 95F5
 419+ 95F5 3E 50        draw_colours: ld a, skycol           ; set the sky colour
 420+ 95F7 32 F3 95                   ld (sky_floor),a
 421+ 95FA 97                         sub a                 ; make a zero
 422+ 95FB 32 0B FA                   ld (left),a
 423+ 95FE 01 0F 03                   ld bc,783             ; 768 attributes to fill
 424+ 9601 11 00 58                   ld de,22528;+32768   ; start of spectrum attributes
 425+ 9604 21 00 C0                   ld hl,$c000;a701      ; start of zx81 display file in memory
 426+ 9607
 427+ 9607 CD FA 96     here:         call set_wall_col     ;set the wall colour graduation colour
 428+ 960A CD 32 96                   call loop_1
 429+ 960D A7                         and a                 ;reset zero
 430+ 960E 23                         inc hl                ;current character memory we are checking
 431+ 960F 13                         inc de                ;current attribute location
 432+ 9610 0B                         dec bc                ;number of attribute cells to traverse
 433+ 9611 78                         ld a,b
 434+ 9612 FE 00                      cp 0
 435+ 9614 20 F1                      jr nz,here
 436+ 9616 79                         ld a,c
 437+ 9617 FE 00                      cp 0             ;dec on single reg affects flags
 438+ 9619
 439+ 9619 28 02                      jr z,lastcol     ;colour in the last block before exiting
 440+ 961B 18 EA                      jr here
 441+ 961D
 442+ 961D 3A F3 95     lastcol:      ld a,(sky_floor)   ; colour in the last square
 443+ 9620                                               ; plus last 7  squares
 444+ 9620 12                         ld(de),a
 445+ 9621 3E 70                      ld a,112
 446+ 9623 13                         inc de
 447+ 9624 12                         ld (de),a
 448+ 9625 13                         inc de
 449+ 9626 12                         ld (de),a
 450+ 9627 13                         inc de
 451+ 9628 12                         ld (de),a
 452+ 9629 13                         inc de
 453+ 962A 12                         ld (de),a
 454+ 962B 13                         inc de
 455+ 962C 12                         ld (de),a
 456+ 962D 13                         inc de
 457+ 962E 12                         ld (de),a
 458+ 962F 13                         inc de
 459+ 9630 12                         ld (de),a
 460+ 9631
 461+ 9631 C9                         ret
 462+ 9632
 463+ 9632              ;start checking chars and setting colours
 464+ 9632
 465+ 9632 7E           loop_1:        ld a, (hl)       ; get value at start of zx81 display file
 466+ 9633 FE B5                       cp _mediumwall            ; top left triangle
 467+ 9635 20 07                       jr nz, next1
 468+ 9637 3A F1 95                    ld a, (wallcol)
 469+ 963A 12                          ld (de),a        ; colour it if it matches
 470+ 963B C3 CB 96                    jp next_pos      ; go on to next char position
 471+ 963E
 472+ 963E FE AF        next1:         cp _black            ; top right triangle
 473+ 9640 20 06                       jr nz, next2
 474+ 9642 3E FE                       ld a, 254        ;black paper, black ink
 475+ 9644 12                          ld (de),a        ; colour it if it matches
 476+ 9645 C3 CB 96                    jp next_pos      ; go on to next char position
 477+ 9648
 478+ 9648 FE B3        next2:         cp _topcorner4           ; top left triangle
 479+ 964A 20 06                       jr nz, next3
 480+ 964C 3E 50                       ld a,skycol          ;paper cyan, ink 1
 481+ 964E 12                          ld (de),a        ; colour it if it matches
 482+ 964F C3 CB 96                    jp next_pos      ; go on to next char position
 483+ 9652
 484+ 9652 FE B0        next3:         cp _topcorner1            ; top left triangle
 485+ 9654 20 06                       jr nz, next4
 486+ 9656 3E 62                       ld a,floorcol
 487+ 9658 12                          ld (de),a        ; colour it if it matches
 488+ 9659 C3 CB 96                    jp next_pos      ; go on to next char position
 489+ 965C
 490+ 965C FE B6        next4:         cp _largewall            ; look for wall character
 491+ 965E 20 07                       jr nz, next5
 492+ 9660 3A F1 95                    ld a,  (wallcol)
 493+ 9663 12                          ld (de),a        ; colour it if it matches
 494+ 9664 C3 CB 96                    jp next_pos      ; go on to next char position
 495+ 9667
 496+ 9667 FE B4        next5:        cp _smallwall            ;was char 09 - lower middle of screen wall character bottom
 497+ 9669 20 07                      jr nz, next6
 498+ 966B 3A F1 95                   ld a,  (wallcol)
 499+ 966E 12                         ld (de),a
 500+ 966F C3 CB 96                   jp next_pos
 501+ 9672
 502+ 9672 FE B7        next6:        cp _mediumwall_1            ;was chr 10 - middle of screen upper wall character
 503+ 9674 20 07                      jr nz, next7
 504+ 9676 3A F1 95                   ld a, (wallcol)         ;
 505+ 9679 12                         ld (de),a
 506+ 967A C3 CB 96                   jp next_pos
 507+ 967D
 508+ 967D FE A9        next7:        cp _topleft5            ;was chr 10 - middle of screen upper wall character
 509+ 967F 20 06                      jr nz, next8
 510+ 9681 3E 50                      ld a, skycol         ;
 511+ 9683 12                         ld (de),a
 512+ 9684 C3 CB 96                   jp next_pos
 513+ 9687
 514+ 9687 FE B8        next8:        cp _hugewall
 515+ 9689 20 07                      jr nz, next9
 516+ 968B 3A F1 95                   ld a, (wallcol)         ;
 517+ 968E 12                         ld (de),a
 518+ 968F C3 CB 96                   jp next_pos
 519+ 9692
 520+ 9692 FE 8E        next9:        cp $8e            ;stretched wall 5
 521+ 9694 20 07                      jr nz, next10
 522+ 9696 3A F1 95                   ld a, (wallcol)         ;
 523+ 9699 12                         ld (de),a
 524+ 969A C3 CB 96                   jp next_pos
 525+ 969D
 526+ 969D FE 8D        next10:       cp $8d             ;stretched wall 5 more
 527+ 969F 20 0A                      jr nz, next11
 528+ 96A1 3A F1 95                   ld a, (wallcol)         ;
 529+ 96A4 12                         ld (de),a
 530+ 96A5 3A F1 95                   ld a, (wallcol)         ;
 531+ 96A8 C3 CB 96                   jp next_pos
 532+ 96AB
 533+ 96AB FE 8B        next11:       cp $8b             ;stretched wall 5 more
 534+ 96AD 20 0A                      jr nz, next12
 535+ 96AF 3A F1 95                   ld a, (wallcol)         ;
 536+ 96B2 12                         ld (de),a
 537+ 96B3 3A F1 95                   ld a, (wallcol)         ;
 538+ 96B6 C3 CB 96                   jp next_pos
 539+ 96B9
 540+ 96B9 FE 8C        next12:       cp $8c             ;stretched wall 5 more
 541+ 96BB 20 0A                      jr nz, next20
 542+ 96BD 3A F1 95                   ld a, (wallcol)         ;
 543+ 96C0 12                         ld (de),a
 544+ 96C1 3A F1 95                   ld a, (wallcol)         ;
 545+ 96C4 C3 CB 96                   jp next_pos
 546+ 96C7
 547+ 96C7              ;draw sky or floor colour as we found no matches above
 548+ 96C7
 549+ 96C7 3A F3 95     next20         ld a,(sky_floor) ;
 550+ 96CA 12                          ld (de),a        ; colour it if it matches
 551+ 96CB 3A 0B FA     next_pos:      ld a, (left)
 552+ 96CE 3C                          inc a
 553+ 96CF FE 19                       cp 25            ; are we at 24th column?
 554+ 96D1 32 0B FA                    ld (left),a
 555+ 96D4 C0                          ret nz           ; return if not
 556+ 96D5
 557+ 96D5              ;now do paper colour of score and nav git on right
 558+ 96D5                             ;now decrease bc by 7 & increase display pos by 7
 559+ 96D5                             ;to start of next line
 560+ 96D5 97                          sub a            ; zero a register
 561+ 96D6 32 0B FA                    ld (left),a      ; back to start
 562+ 96D9 3E 08                       ld a,8           ; 7 spaces to next line
 563+ 96DB 0B           loop_4:        dec bc           ;change ldir count
 564+ 96DC 23                          inc hl
 565+ 96DD 13                          inc de
 566+ 96DE F5                          push af
 567+ 96DF 3E 70                       ld a,112         ;yellow paper, ink 9
 568+ 96E1 12                          ld (de),a
 569+ 96E2 F1                          pop af
 570+ 96E3 A7                          and a           ;move screen print position
 571+ 96E4 3D                          dec a
 572+ 96E5 20 F4                       jr nz, loop_4
 573+ 96E7 1B                          dec de           ; get to start of spectrum line in the display
 574+ 96E8
 575+ 96E8                             ; check if we are below the middles of the display
 576+ 96E8                             ; so we change the 'white' colour to floor
 577+ 96E8 E5                          push hl
 578+ 96E9 D5                          push de
 579+ 96EA                            ; 22912 is the start of the floor level
 580+ 96EA                             ; de holds current position in spectrum display
 581+ 96EA
 582+ 96EA
 583+ 96EA 21 7F 59                    ld hl,22528+383        ;this for display at 22528 is 22911   ; start of first floor line
 584+ 96ED ED 52                       sbc hl,de        ;are we there yet?
 585+ 96EF C2 F7 96                    jp nz,exit2 ;was nz
 586+ 96F2 3E 62                       ld a,floorcol
 587+ 96F4 32 F3 95                    ld (sky_floor),a
 588+ 96F7 D1           exit2:         pop de
 589+ 96F8 E1                          pop hl
 590+ 96F9 C9                          ret
 591+ 96FA
 592+ 96FA
 593+ 96FA              set_wall_col:
 594+ 96FA                              ;set the wall colour graduation colour from light (top part) to dark(bottom part of wall) in 6 increments
 595+ 96FA                              ;de holds current attribute cell we are colouring in
 596+ 96FA E5                           push hl
 597+ 96FB D5                           push de
 598+ 96FC                              ;de holds current attribute cell we are colouring in
 599+ 96FC
 600+ 96FC 3E BC                        ld a,188
 601+ 96FE 21 00 58                     ld hl,22528     ;top of the display
 602+ 9701 B7 ED 52                     sub hl,de
 603+ 9704 20 05                        jr nz,setcol_1   ;check next quarter of display
 604+ 9706 32 F1 95                     ld (wallcol),a
 605+ 9709 18 49                        jr setcol_exit
 606+ 970B
 607+ 970B
 608+ 970B C6 02        setcol_1:       add a,2
 609+ 970D 21 80 58                     ld hl,22528+128    ;next 1/6 of the display
 610+ 9710 B7 ED 52                     sub hl,de
 611+ 9713 20 05                        jr nz,setcol_2   ;check next 1/6th of display
 612+ 9715 32 F1 95                     ld (wallcol),a
 613+ 9718 18 3A                        jr setcol_exit
 614+ 971A
 615+ 971A C6 02        setcol_2        add a,2
 616+ 971C 21 00 59                     ld hl,22528+256     ;next 1/6  down of the display
 617+ 971F B7 ED 52                     sub hl,de
 618+ 9722 20 05                        jr nz,setcol_3   ;check next 1/6th of display
 619+ 9724 32 F1 95                     ld (wallcol),a
 620+ 9727 18 2B                        jr setcol_exit
 621+ 9729
 622+ 9729 C6 02        setcol_3        add a,2
 623+ 972B 21 80 59                     ld hl,22528+384     ;    ;next 1/6 of the display
 624+ 972E B7 ED 52                     sub hl,de
 625+ 9731 20 05                        jr nz,setcol_4   ;check next 1/6th of display
 626+ 9733 32 F1 95                     ld (wallcol),a
 627+ 9736 18 1C                        jr setcol_exit
 628+ 9738
 629+ 9738 C6 02        setcol_4        add a,2
 630+ 973A 21 00 5A                     ld hl,22528+512    ;next 1/6 of the display
 631+ 973D B7 ED 52                     sub hl,de
 632+ 9740 20 05                        jr nz,setcol_5   ;check next 1/6th of display
 633+ 9742 32 F1 95                     ld (wallcol),a
 634+ 9745 18 0D                        jr setcol_exit
 635+ 9747
 636+ 9747 C6 02        setcol_5        add a,2
 637+ 9749 21 80 5A                     ld hl,22528+640     ;bottom 6th of the display
 638+ 974C B7 ED 52                     sub hl,de
 639+ 974F 20 03                        jr nz,setcol_exit   ;check next 1/6th of display
 640+ 9751 32 F1 95                     ld (wallcol),a
 641+ 9754
 642+ 9754 D1           setcol_exit:    pop de
 643+ 9755 E1                           pop hl
 644+ 9756 C9                           ret
 645+ 9757
 646+ 9757              ;#######################################################################
 647+ 9757              ;setup right hand side of the screen
 648+ 9757
 649+ 9757              draw_screen_right:
 650+ 9757
 651+ 9757 DD 21 F0 81                ld ix,message_border1       ;top border Message
 652+ 975B CD B8 81                   CALL print_message
 653+ 975E DD 21 FB 81                ld ix,message_get       ;"Get Out" Message
 654+ 9762 CD B8 81                   CALL print_message
 655+ 9765 DD 21 06 82                ld ix,message_out       ;"Get Out" Message
 656+ 9769 CD B8 81                   CALL print_message
 657+ 976C DD 21 11 82                ld ix,message_border4       ;top border Message
 658+ 9770 CD B8 81                   CALL print_message
 659+ 9773                            ;do some colouring around the 'get out' words
 660+ 9773 21 39 58                   ld hl,22585
 661+ 9776 3E 94                      ld a,148
 662+ 9778 77                         ld (hl),A
 663+ 9779 21 3F 58                   ld hl,22585+6
 664+ 977C 77                         ld (hl),a
 665+ 977D 21 59 58                   ld hl,22617
 666+ 9780 77                         ld (hl),a
 667+ 9781 21 5F 58                   ld hl,22617+6
 668+ 9784 77                         ld (hl),a
 669+ 9785                            ;print "level" words
 670+ 9785 DD 21 6A 82                ld ix,message_level       ;top border Message
 671+ 9789 CD B8 81                   CALL print_message
 672+ 978C              ;now print the level numbers
 673+ 978C DD 21 CF 97                ld ix,L00       ;top border Message
 674+ 9790 CD B8 81                   CALL print_message
 675+ 9793 DD 21 D6 97                ld ix,L01       ;top border Message
 676+ 9797 CD B8 81                   CALL print_message
 677+ 979A DD 21 DD 97                ld ix,L23      ;top border Message
 678+ 979E CD B8 81                   CALL print_message
 679+ 97A1 DD 21 E4 97                ld ix,L45        ;top border Message
 680+ 97A5 CD B8 81                   CALL print_message
 681+ 97A8 DD 21 EB 97                ld ix,L67       ;top border Message
 682+ 97AC CD B8 81                   CALL print_message
 683+ 97AF DD 21 F2 97                ld ix,L89       ;top border Message
 684+ 97B3 CD B8 81                   CALL print_message
 685+ 97B6 DD 21 F9 97                ld ix,L1011       ;top border Message
 686+ 97BA CD B8 81                   CALL print_message
 687+ 97BD DD 21 00 98                ld ix,L1213       ;top border Message
 688+ 97C1 CD B8 81                   CALL print_message
 689+ 97C4 DD 21 07 98                ld ix,L1415
 690+ 97C8 CD B8 81                   CALL print_message
 691+ 97CB CD 0E 98                   call set_floor_colour
 692+ 97CE C9                         ret
 693+ 97CF
 694+ 97CF 06 1B 86 20  L00           db 6,27,134,     " 0 ",$7f
 694+ 97D3 30 20 7F
 695+ 97D6 07 1B 86 20  L01           db 7,27,134,     " 1 ",$7f
 695+ 97DA 31 20 7F
 696+ 97DD 08 1B 86 32  L23           db 8,27,134,     "2 3",$7f
 696+ 97E1 20 33 7F
 697+ 97E4 09 1B 86 34  L45           db 9,27,134,     "4 5",$7f
 697+ 97E8 20 35 7F
 698+ 97EB 0A 1B 86 36  L67           db 10,27,134,    "6 7",$7f
 698+ 97EF 20 37 7F
 699+ 97F2 0B 1B 86 38  L89           db 11,27,134,    "8 9",$7f
 699+ 97F6 20 39 7F
 700+ 97F9 0C 1B 86 D7  L1011         db 12,27,134,$d7," ",$d8,$7f
 700+ 97FD 20 D8 7F
 701+ 9800 0D 1B 86 D9  L1213         db 13,27,134,$d9," ",$da,$7f
 701+ 9804 20 DA 7F
 702+ 9807 0E 1B 86 DB  L1415         db 14,27,134,$db," ",$dc,$7f
 702+ 980B 20 DC 7F
 703+ 980E
 704+ 980E              ;###################################################################
 705+ 980E
 706+ 980E              ;set floor colour on right of the display - shows what floor we are on
 707+ 980E
 708+ 980E              set_floor_colour:
 709+ 980E AF                   xor a               ;zero a reg
 710+ 980F 47                   ld b,a
 711+ 9810 2A 22 FA             ld hl,(cur_map)     ;get our current map
 712+ 9813 55                   ld d,l
 713+ 9814 15                   dec d               ;need to point 1 less
 714+ 9815 1E 02                ld e,2
 715+ 9817 ED 30                mul de              ;multiply our current map number by 2
 716+ 9819 21 24 98             ld hl,data_table
 717+ 981C 19                   add hl,de           ;should now be pointing to the correct place in the table
 718+ 981D 5E                   ld e,(hl)
 719+ 981E 23                   inc hl
 720+ 981F 56                   ld d,(hl)
 721+ 9820                      ;now colour it white on screen
 722+ 9820 3E 87                ld a,135
 723+ 9822 12                   ld (de),a
 724+ 9823 C9                   ret
 725+ 9824
 726+ 9824
 727+ 9824
 728+ 9824
 729+ 9824              data_table:
 730+ 9824 DC 58                dw  $58dc       ;23003-256    ;GND
 731+ 9826 FC 58                dw  $58fc       ;23004-224    ;1
 732+ 9828 1B 59                dw  $591b       ;23003-192    ;2
 733+ 982A 1D 59                dw  $591d       ;23005-192    ;3
 734+ 982C 3B 59                dw  $593b       ;23003-160    ;4
 735+ 982E 3D 59                dw  $593d       ;23005-160    ;5
 736+ 9830 5B 59                dw  $595b       ;23003-128    ;6
 737+ 9832 5D 59                dw  $595d       ;23005-128    ;7
 738+ 9834 7B 59                dw  $597b       ;23003-96    ;8
 739+ 9836 7D 59                dw  $597d       ;23005-96    ;9
 740+ 9838 9B 59                dw  $599b       ;23003-64    ;10
 741+ 983A 9D 59                dw  $599d       ;23005-64    ;11
 742+ 983C BB 59                dw  $59bb       ;23003-32    ;12
 743+ 983E BD 59                dw  $59bd       ;23005-32    ;13
 744+ 9840 DB 59                dw  $59db       ;23003       ;14
 745+ 9842 DD 59                dw  $59dd       ;23005       ;15
 746+ 9844              ;22528 to 23296
 747+ 9844
 748+ 9844
 749+ 9844
# file closed: src/5-rd3dmazeV6.asm
 420  9844                  INCLUDE "6-rd3dmazeV6.asm" ; draw right side of maze
# file opened: src/6-rd3dmazeV6.asm
   1+ 9844
   2+ 9844              ;############################################
   3+ 9844              ;############################################
   4+ 9844
   5+ 9844              ;draw section the right side of the screen
   6+ 9844
   7+ 9844              ;############################################
   8+ 9844              ;############################################
   9+ 9844
  10+ 9844              draw_right_side:
  11+ 9844
  12+ 9844 3A 06 FA                   ld a,(depth)
  13+ 9847 FE 06                      cp 6
  14+ 9849 CA 68 98                   jp z,draw_6r
  15+ 984C FE 05        do_5r:        cp 5
  16+ 984E CA 72 98                   jp z,draw_5r
  17+ 9851 FE 04                      cp 4
  18+ 9853 CA 2E 9A                   jp z,draw_4r
  19+ 9856 FE 03                      cp 3
  20+ 9858 CA 14 9C                   jp z,draw_3r
  21+ 985B FE 02                      cp 2
  22+ 985D CA 99 9D                   jp z,draw_2r
  23+ 9860 FE 01                      cp 1
  24+ 9862 CA 34 9E                   jp z,draw_1r
  25+ 9865 C3 CA 9E                   jp draw_0r
  26+ 9868              ;end of routine
  27+ 9868                        ;    ret
  28+ 9868
  29+ 9868              ;############################################
  30+ 9868              ;############################################
  31+ 9868
  32+ 9868              ;draw section 6 right - well, nothing to do atm!
  33+ 9868
  34+ 9868              ;############################################
  35+ 9868              ;############################################
  36+ 9868
  37+ 9868              draw_6r:
  38+ 9868              ;do nothing on screen as already done via left side draw
  39+ 9868              ;just incremement where we are in the maze view
  40+ 9868
  41+ 9868 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  42+ 986B CD 77 8B             call load_de            ;get left and right and front jump into de reg
  43+ 986E 19                   add hl,de               ;Additional add to simulate layer 6
  44+ 986F 22 25 FA             ld (furthest_point),hl ;re save it
  45+ 9872
  46+ 9872              ;############################################
  47+ 9872              ;############################################
  48+ 9872
  49+ 9872              ;draw section 5 right
  50+ 9872
  51+ 9872              ;############################################
  52+ 9872              ;############################################
  53+ 9872
  54+ 9872              draw_5r:
  55+ 9872
  56+ 9872              ;ret
  57+ 9872              ; hl=maze location being drawn.
  58+ 9872              ; now determine what to draw for this section.
  59+ 9872
  60+ 9872 97                   sub a                   ;make 'a' zero
  61+ 9873 3D                   dec a                   ;make it 255 to show nothing to do
  62+ 9874 32 27 FA             ld (blockid),a          ;save it for wall drawing
  63+ 9877
  64+ 9877              ;first we need to decrement how far we can see to the layer
  65+ 9877              ;we are working on
  66+ 9877
  67+ 9877 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  68+ 987A CD 77 8B             call load_de            ;get left and right and front jump into de reg
  69+ 987D
  70+ 987D 19                   add hl,de               ;Additional add to simulate layer 6
  71+ 987E 22 25 FA             ld (furthest_point),hl ;re save it
  72+ 9881
  73+ 9881 11 01 00             ld de,$0001             ;to move the display position +1
  74+ 9884 ED 53 11 FA          ld (var4),de
  75+ 9888
  76+ 9888              ;move the maze location pointer 1 to the right - used for all
  77+ 9888              ;remaining blocks to test if there is a wall there or not.
  78+ 9888
  79+ 9888 ED 5B 0D FA          ld de,(right)
  80+ 988C 19                   add hl,de
  81+ 988D 22 15 FA             ld (var6),hl            ;right position in maze from our location
  82+ 9890
  83+ 9890 ED 53 0F FA          ld (var3),de            ;display position +1
  84+ 9894 11 79 01             ld   de,$0179           ; offset to row 11 column 10 - left of  centre of the 3d view.
  85+ 9897 CD A5 98             call do_draw_5r
  86+ 989A
  87+ 989A 97                   sub a                   ;make reg a zero
  88+ 989B 32 1E FA             ld (var10),a            ;used in the maze wall drawing at layer 5
  89+ 989E 3A 27 FA             ld a,(blockid)          ;get the right hand maze wall location
  90+ 98A1 3C                   inc a                   ;if blockid was 255 (UNUSED) its will now be zero
  91+ 98A2                                              ;so
  92+ 98A2 C3 2E 9A             jp draw_4r              ;now draw the 4th level
  93+ 98A5
  94+ 98A5              do_draw_5r:
  95+ 98A5
  96+ 98A5 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
  97+ 98A8 19                   add  hl,de
  98+ 98A9
  99+ 98A9
 100+ 98A9              ; draw right half of the display.
 101+ 98A9
 102+ 98A9 06 04                ld b,4                  ; count for 3 columns right of our position
 103+ 98AB ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
 104+ 98AF
 105+ 98AF              ;check if we are at the bottom right of the maze
 106+ 98AF              ;if so, there is no wall after position 255 so point us to
 107+ 98AF              ;position 240 and fake the wall!
 108+ 98AF              ;;;        ld a,e
 109+ 98AF              ;;;        cp 255
 110+ 98AF              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 111+ 98AF              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 112+ 98AF
 113+ 98AF
 114+ 98AF              ;now move the maze pointer right (+1) 1 position
 115+ 98AF              ;so we can read the type of walls to our left
 116+ 98AF
 117+ 98AF              ;cont_3:
 118+ 98AF              ;*         push hl
 119+ 98AF              ;*        ld hl,(left)
 120+ 98AF              ;*        add hl,de
 121+ 98AF              ;*        ex de,hl
 122+ 98AF              ;*        pop hl
 123+ 98AF
 124+ 98AF EB                   ex   de,hl              ; transfer de to hl.
 125+ 98B0
 126+ 98B0              ;       hl = furthest point in the maze
 127+ 98B0              ;       de = d_file location to store byte to display
 128+ 98B0
 129+ 98B0              ;we have to load the first plot position with a corner bit to show
 130+ 98B0              ;the end of the wall at the position we can see next to the center
 131+ 98B0              ;plot position on section 6
 132+ 98B0              ;then, while we draw the other blocks we can see we just want top and
 133+ 98B0              ;bottom blacks pointed so will use var1 and var 2 to hold the
 134+ 98B0              ;character block we need to print.
 135+ 98B0
 136+ 98B0              ;2020 - we dont need to do this as we are drawing
 137+ 98B0              ;a side wall and wont see the hashes!
 138+ 98B0
 139+ 98B0 3E B4                ld a,_smallwall;_topright5          ; load with top right char $a9
 140+ 98B2              ;        ld a,'#'
 141+ 98B2 32 04 FA             ld (var1),a             ;top of mwadd udg
 142+ 98B5              ;        inc a
 143+ 98B5              ;        inc a
 144+ 98B5              ;        ld a,_smallwall;_topright5          ; load with top right char $a9
 145+ 98B5
 146+ 98B5 32 05 FA             ld (var2),a             ;ld with bottom right wall udg char
 147+ 98B8
 148+ 98B8              loop8r:
 149+ 98B8 E5                   push hl
 150+ 98B9
 151+ 98B9              ;##############################################################################
 152+ 98B9              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 153+ 98B9
 154+ 98B9 3A 28 FA             ld a,(maze_highbyte)
 155+ 98BC BC                   cp h                    ;are we at the top part of the maze?
 156+ 98BD CA F0 98             jp z,cont_5a
 157+ 98C0                                              ;if we are on a different maze boundary
 158+ 98C0                                              ;then draw a maze wall as we are the top
 159+ 98C0                                              ;or north wall but maze data has no
 160+ 98C0                                              ;wall data.
 161+ 98C0                                              ;wall data.
 162+ 98C0              ;4 = 1st left wall
 163+ 98C0              ;3 = 2nd left wall
 164+ 98C0              ;2 = 3rd left wall
 165+ 98C0              ;1 = 4th left wall
 166+ 98C0
 167+ 98C0 78                   ld a,b                  ;our current wall counter
 168+ 98C1 FE 04                cp 4
 169+ 98C3 C2 CE 98             jp nz,b5_1                 ;its not wall 4
 170+ 98C6 3E 01                ld a,1
 171+ 98C8 47                   ld b,a
 172+ 98C9 C6 80                add a,128               ;make sure we set a wall!
 173+ 98CB C3 26 99             jp  do_wall5a          ;jump straight to making an end wall
 174+ 98CE
 175+ 98CE FE 03        b5_1:   cp 3
 176+ 98D0 C2 DB 98             jp nz,b5_2             ;its not wall 3
 177+ 98D3 3E 01                ld a,1
 178+ 98D5 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 179+ 98D6 C6 80                add a,128               ;make sure we set a wall!
 180+ 98D8 C3 4D 99             jp do_2ndwall_r        ;draw the 2nd block to the left
 181+ 98DB
 182+ 98DB FE 02        b5_2:   cp 2
 183+ 98DD C2 E8 98             jp nz,b5_3             ;its not wall 3
 184+ 98E0 3E 01                ld a,1
 185+ 98E2 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 186+ 98E3 C6 80                add a,128               ;make sure we set a wall!
 187+ 98E5 C3 95 99             jp do_3rdwall_r       ;draw the 2nd block to the left
 188+ 98E8
 189+ 98E8              ;a must = 1 if we get here.
 190+ 98E8 3E 01        b5_3:   ld a,1
 191+ 98EA 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 192+ 98EB C6 80                add a,128               ;make sure we set a wall!
 193+ 98ED C3 E2 99             jp do_4thwall_r         ;jump straight to making an end wall
 194+ 98F0
 195+ 98F0              ;*############################################################################
 196+ 98F0
 197+ 98F0              ;now zero out the end wall variable
 198+ 98F0              cont_5a
 199+ 98F0 97                   sub a                   ;zero a reg
 200+ 98F1 32 17 FA             ld (end_wall),a           ;save 0 in the end wall variable
 201+ 98F4
 202+ 98F4
 203+ 98F4              ;check we are at an outside maze wall
 204+ 98F4 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 205+ 98F5 FE 81                cp _mh                  ;maze wall block
 206+ 98F7 20 07                jr nz,cont10            ;its a wall block so need to draw the wall
 207+ 98F9 F5                   push af                 ;save which print location we are at
 208+ 98FA 3E 01                ld a,1                  ;for drawing the maze wall to the screen
 209+ 98FC 32 17 FA             ld (end_wall),a          ;edge
 210+ 98FF F1                   pop af
 211+ 9900              ;        ld b,1                  ;stop drawing more blocks as its an end wall
 212+ 9900
 213+ 9900 17           cont10: rla
 214+ 9901 DA 14 99             jp c,do_wall5r          ;bit 7 (128)
 215+ 9904
 216+ 9904              ;        call do_no_wall5r      ; otherwise draw no wall
 217+ 9904
 218+ 9904              go_back5r:
 219+ 9904 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 220+ 9907 19                   add hl,de               ; holds current screen position
 221+ 9908 EB                   ex de,hl
 222+ 9909 E1                   pop hl
 223+ 990A D5                   push de
 224+ 990B ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 225+ 990F 19                   add hl,de               ; go left 1 block in the maze
 226+ 9910 D1                   pop de
 227+ 9911 10 A5                djnz loop8r
 228+ 9913 C9                   ret
 229+ 9914
 230+ 9914
 231+ 9914              do_wall5r:
 232+ 9914
 233+ 9914              ;check if b=2 - if so we are not at a wall immediately next to our right
 234+ 9914              ;nor are we at an and wall. We are drawing the 2nd block to the right
 235+ 9914              ;b=3 for 3rd block to the right.
 236+ 9914
 237+ 9914 78                   ld a,b
 238+ 9915 D6 01                sub 1
 239+ 9917 CA E2 99             jp z,do_4thwall_r       ;draw the cnd block to the right
 240+ 991A
 241+ 991A 78                   ld a,b                  ;b is our loop count
 242+ 991B D6 02                sub 2                   ;check if a=2
 243+ 991D CA 95 99             jp z,do_3rdwall_r       ;draw the 2nd block to the right
 244+ 9920
 245+ 9920 78                   ld a,b
 246+ 9921 D6 03                sub 3
 247+ 9923 CA 4D 99             jp z,do_2ndwall_r       ;draw the cnd block to the right
 248+ 9926
 249+ 9926              ;b must = 4 if we get here
 250+ 9926
 251+ 9926              ;check if bit 2 is set as thats an end
 252+ 9926              ;and b must then be changed to 1 to stop drawing.
 253+ 9926
 254+ 9926              do_wall5a:
 255+ 9926 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 256+ 9928 28 04                jr z,draw8r
 257+ 992A
 258+ 992A 97                   sub a                  ;we Don't have an outside maze wall (end wall)
 259+ 992B 32 17 FA             ld (end_wall),a           ;save that we are NOT at an end wall
 260+ 992E
 261+ 992E D5           draw8r:  push de
 262+ 992F 3A 04 FA             ld a,(var1)           ;top of wall udg
 263+ 9932 12                   ld (de),a             ; insert the top of the wall.
 264+ 9933
 265+ 9933 13                   inc de
 266+ 9934 12                   ld (de),a             ; insert the top of the wall - 2nd right.
 267+ 9935 1B                   dec de
 268+ 9936              ;now check if we need to draw a black side on the right
 269+ 9936              ;by looking to the character to the right of the wall
 270+ 9936              ;and if there is not a wall already drawn, then draw a
 271+ 9936              ;black side
 272+ 9936
 273+ 9936 3E AA                ld a,_topright5         ;if not, draw the top left side
 274+ 9938 1B                   dec de                  ;move to the right of the bricks
 275+ 9939 12                   ld (de),a               ;draw a black and chevron side
 276+ 993A 13                   inc de                  ;go back 1 space again
 277+ 993B
 278+ 993B 21 21 00     _x1r:   ld   hl,$0021           ;jump to the next line below
 279+ 993E
 280+ 993E 19                   add  hl,de
 281+ 993F 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 282+ 9942 77                   ld   (hl),a             ; insert the bottom of the wall.
 283+ 9943 23                   inc hl
 284+ 9944 77                   ld   (hl),a             ; insert the top of the wall.
 285+ 9945 2B                   dec hl
 286+ 9946 2B                   dec hl                  ;look at the left block
 287+ 9947 3E AC                ld a,_bottomright5
 288+ 9949 77                   ld (hl),a
 289+ 994A
 290+ 994A D1           _x2r:   pop de
 291+ 994B
 292+ 994B
 293+ 994B 18 B7                jr go_back5r              ; jump back to main loop
 294+ 994D
 295+ 994D
 296+ 994D              ;************************************
 297+ 994D
 298+ 994D              ;draw the wall for 2nd right layer
 299+ 994D
 300+ 994D              ;***********************************
 301+ 994D
 302+ 994D              do_2ndwall_r:
 303+ 994D
 304+ 994D D5                   push de                 ;save the current acreen position
 305+ 994E              ;1st check if theres a wall where we need to draw the black side
 306+ 994E 1A                   ld a,(de)
 307+ 994F FE B4                cp _smallwall
 308+ 9951 CA 57 99             jp z,miss5              ;theres a wall drawn already so do not
 309+ 9954                                              ;draw any black sides & jump over
 310+ 9954
 311+ 9954 3E 91                ld   a,$91;b9              ;top right section 3 (1)
 312+ 9956 12                   ld   (de),a             ; insert the top of the wall.
 313+ 9957
 314+ 9957              ;now draw a red wall to the right of section 2
 315+ 9957 13           miss5:  inc de
 316+ 9958 3E B4                ld a,_smallwall
 317+ 995A 12                   ld (de),a
 318+ 995B 13                   inc de
 319+ 995C 12                   ld (de),a               ;draw 2nd one (4 wide)
 320+ 995D 13                   inc de
 321+ 995E 12                   ld (de),a               ;draw 3rd one (4 wide)
 322+ 995F              ;        inc de
 323+ 995F              ;        ld (de),a               ;draw 4th one (4 wide)
 324+ 995F
 325+ 995F               ;       dec de
 326+ 995F 1B                   dec de
 327+ 9960 1B                   dec de
 328+ 9961 1B                   dec de
 329+ 9962
 330+ 9962              ;now check if we need to draw a black side on the right
 331+ 9962              ;by looking to the character to the right of the wall
 332+ 9962              ;and if there is not a wall already drawn, then draw a
 333+ 9962              ;black side
 334+ 9962
 335+ 9962 1B                   dec de                  ;jump left 1 char in the display
 336+ 9963 1A                   ld a,(de)               ;read whats there
 337+ 9964 13                   inc de                  ;put our pointer back to the original position
 338+ 9965 FE B4                cp _smallwall           ;is it a wall
 339+ 9967 CA 6F 99             jp z,_x1r_2               ;if yes, do NOT draw a black side.
 340+ 996A 3E 90                ld a,$90             ;draw top right side
 341+ 996C 1B                   dec de
 342+ 996D 12                   ld (de),a               ;draw middle top bit
 343+ 996E 13                   inc de
 344+ 996F
 345+ 996F              ;top line done
 346+ 996F
 347+ 996F              ;now do the bottom line underneath
 348+ 996F
 349+ 996F              ;REMEMBER - 1 block is 2 8 bit squares at the section
 350+ 996F              _x1r_2
 351+ 996F 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 352+ 9972 19                   add  hl,de
 353+ 9973
 354+ 9973              ;1st check if theres a wall where we need to draw the black side
 355+ 9973 7E                   ld a,(hl)
 356+ 9974 FE B4                cp _smallwall
 357+ 9976 CA 7C 99             jp z, miss51
 358+ 9979
 359+ 9979 3E 94                ld a,$94                ;draw our rightmost wall bottom.
 360+ 997B 77                   ld   (hl),a             ; insert the bottom of the wall.
 361+ 997C
 362+ 997C              ;now draw a red wall to the right of section 2
 363+ 997C 23           miss51: inc hl
 364+ 997D 3E B4                ld a,_smallwall
 365+ 997F 77                   ld (hl),a
 366+ 9980 23                   inc hl
 367+ 9981 77                   ld (hl),a
 368+ 9982 23                   inc hl
 369+ 9983 77                   ld (hl),a               ;draw 3rd one (3 wide)
 370+ 9984 2B                   dec hl
 371+ 9985 2B                   dec hl
 372+ 9986 2B                   dec hl
 373+ 9987
 374+ 9987              ;now check if we need to draw a black side on the left of the lower half wall
 375+ 9987              ;do this by checking if the next block is already a wall just like above
 376+ 9987
 377+ 9987 2B                   dec hl      ;look at the left block
 378+ 9988 7E                   ld a,(hl)
 379+ 9989 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 380+ 998B CA 91 99             jp z,_x2r_2
 381+ 998E 3E 93                ld a,$93            ;draw leftmost bottom
 382+ 9990 77                   ld (hl),a
 383+ 9991
 384+ 9991 D1           _x2r_2  pop de
 385+ 9992 C3 04 99             jp go_back5r              ; jump back to main loop
 386+ 9995
 387+ 9995              ;##########################################
 388+ 9995
 389+ 9995              ;draw the wall for 3rd right layer
 390+ 9995
 391+ 9995              ;##########################################
 392+ 9995
 393+ 9995              do_3rdwall_r:
 394+ 9995
 395+ 9995 D5                   push de                 ;save the current acreen position
 396+ 9996              ;1st check if theres a wall where we need to draw the black side
 397+ 9996 13                   inc de                  ;move our start location 3 spaces right
 398+ 9997 13                   inc de
 399+ 9998 13                   inc de
 400+ 9999
 401+ 9999              ;now draw a red wall to the right of section 2,  top half
 402+ 9999
 403+ 9999 3E B4                ld a,_smallwall;$8e
 404+ 999B 12                   ld (de),a
 405+ 999C 13                   inc de
 406+ 999D 12                   ld (de),a
 407+ 999E 13                   inc de
 408+ 999F 12                   ld (de),a
 409+ 99A0 13                   inc de
 410+ 99A1 12                   ld (de),a               ;draw 4th one (4 wide)
 411+ 99A2
 412+ 99A2 1B                   dec de                  ;move print position back for black wall
 413+ 99A3 1B                   dec de
 414+ 99A4 1B                   dec de
 415+ 99A5
 416+ 99A5              ;now check if we need to draw a black side on the right
 417+ 99A5              ;by looking to the character to the right of the wall
 418+ 99A5              ;and if there is not a wall already drawn, then draw a
 419+ 99A5              ;black side
 420+ 99A5
 421+ 99A5 1B                   dec de                  ;jump left 1 char in the display
 422+ 99A6 1A                   ld a,(de)               ;read whats there
 423+ 99A7 13                   inc de                  ;put our pointer back to the original position
 424+ 99A8 FE B4                cp _smallwall           ;is it a wall
 425+ 99AA CA BA 99             jp z,_x1r_3               ;if yes, do NOT draw a black side.
 426+ 99AD 3E B9                ld a,$b9             ;draw top right side
 427+ 99AF 1B                   dec de
 428+ 99B0 1B                   dec de
 429+ 99B1 1B                   dec de
 430+ 99B2 12                   ld (de),a
 431+ 99B3 13                   inc de
 432+ 99B4 3C                   inc a
 433+ 99B5 12                   ld (de),a
 434+ 99B6 3C                   inc a
 435+ 99B7 13                   inc de
 436+ 99B8 12                   ld (de),a
 437+ 99B9
 438+ 99B9 13                    inc de
 439+ 99BA                                              ;to wall start
 440+ 99BA
 441+ 99BA              ;top line done
 442+ 99BA
 443+ 99BA              ;now do the bottom line underneath
 444+ 99BA
 445+ 99BA              _x1r_3
 446+ 99BA 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 447+ 99BD 19                   add  hl,de
 448+ 99BE
 449+ 99BE 3E B4                ld a,_smallwall;$8e
 450+ 99C0 77                   ld (hl),a
 451+ 99C1 23                   inc hl
 452+ 99C2 77                   ld (hl),a
 453+ 99C3 23                   inc hl
 454+ 99C4 77                   ld (hl),a
 455+ 99C5 23                   inc hl
 456+ 99C6 77                   ld (hl),a
 457+ 99C7
 458+ 99C7 2B                   dec hl
 459+ 99C8 2B                   dec hl
 460+ 99C9 2B                   dec hl
 461+ 99CA
 462+ 99CA
 463+ 99CA              ;now check if we need to draw a black side on the left of the lower half wall
 464+ 99CA              ;do this by checking if the next block is already a wall just like above
 465+ 99CA
 466+ 99CA 2B                   dec hl      ;look at the left block
 467+ 99CB 7E                   ld a,(hl)
 468+ 99CC 23                   inc hl
 469+ 99CD FE B4                cp _smallwall           ;is there a bottom wall5 here?
 470+ 99CF CA DE 99             jp z,_x2r_3
 471+ 99D2 3E BD                ld a,$bd            ;draw leftmost bottom
 472+ 99D4 2B                   dec hl
 473+ 99D5 2B                   dec hl
 474+ 99D6 2B                   dec hl
 475+ 99D7
 476+ 99D7 77                   ld (hl),a
 477+ 99D8 23                   inc hl
 478+ 99D9 3C                   inc a
 479+ 99DA 77                   ld (hl),a
 480+ 99DB 23                   inc hl
 481+ 99DC 3C                   inc a
 482+ 99DD 77                   ld (hl),a
 483+ 99DE
 484+ 99DE D1           _x2r_3  pop de
 485+ 99DF C3 04 99             jp go_back5r              ; jump back to main loop
 486+ 99E2
 487+ 99E2              ;##########################################
 488+ 99E2
 489+ 99E2              ;draw the wall for 4th (and last!) right layer
 490+ 99E2
 491+ 99E2              ;##########################################
 492+ 99E2
 493+ 99E2              do_4thwall_r:
 494+ 99E2
 495+ 99E2              ;draw top half of wall
 496+ 99E2
 497+ 99E2 D5                   push de                 ;save the current acreen position
 498+ 99E3              ;1st check if theres a wall where we need to draw the black side
 499+ 99E3 13                   inc de
 500+ 99E4 13                   inc de
 501+ 99E5 13                   inc de
 502+ 99E6 13                   inc de
 503+ 99E7 13                   inc de
 504+ 99E8 13                   inc de
 505+ 99E9              ;now draw a red wall to the right of section 2,  top half
 506+ 99E9
 507+ 99E9 3E B4                ld a,_smallwall;$8d
 508+ 99EB 12                   ld (de),a
 509+ 99EC 13                   inc de
 510+ 99ED 12                   ld (de),a
 511+ 99EE
 512+ 99EE
 513+ 99EE 1B                   dec de                  ;move print position back for black wall
 514+ 99EF
 515+ 99EF              ;now check if we need to draw a black side on the right
 516+ 99EF              ;by looking to the character to the right of the wall
 517+ 99EF              ;and if there is not a wall already drawn, then draw a
 518+ 99EF              ;black side
 519+ 99EF
 520+ 99EF 1B                   dec de                  ;jump left 1 char in the display
 521+ 99F0 1A                   ld a,(de)               ;read whats there
 522+ 99F1 13                   inc de                  ;put our pointer back to the original position
 523+ 99F2 FE B4                cp _smallwall;$8e                 ;is it a wall
 524+ 99F4 CA 08 9A             jp z,_x1r_31               ;if yes, do NOT draw a black side.
 525+ 99F7 3E B9                ld a,$b9              ;draw top right side
 526+ 99F9 1B                   dec de
 527+ 99FA 1B                   dec de
 528+ 99FB 1B                   dec de
 529+ 99FC 1B                   dec de
 530+ 99FD 12                   ld (de),a           ;draw 4 black sides
 531+ 99FE 13                   inc de
 532+ 99FF 3C                   inc a
 533+ 9A00 12                   ld (de),a
 534+ 9A01 3C                   inc a
 535+ 9A02 13                   inc de
 536+ 9A03 12                   ld (de),a
 537+ 9A04 3C                   inc a
 538+ 9A05 13                   inc de
 539+ 9A06 12                   ld (de),a
 540+ 9A07
 541+ 9A07 13                   inc de              ;move to wall start
 542+ 9A08
 543+ 9A08
 544+ 9A08              ;top line done
 545+ 9A08
 546+ 9A08              ;now do the bottom line underneath
 547+ 9A08
 548+ 9A08              _x1r_31
 549+ 9A08 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 9A0B 19                   add  hl,de
 551+ 9A0C
 552+ 9A0C 3E B4                ld a,_smallwall;$8d
 553+ 9A0E 77                   ld (hl),a
 554+ 9A0F 23                   inc hl
 555+ 9A10 77                   ld (hl),a
 556+ 9A11
 557+ 9A11 2B                   dec hl
 558+ 9A12
 559+ 9A12
 560+ 9A12              ;now check if we need to draw a black side on the left of the lower half wall
 561+ 9A12              ;do this by checking if the next block is already a wall just like above
 562+ 9A12
 563+ 9A12 2B                   dec hl      ;look at the left block
 564+ 9A13 7E                   ld a,(hl)
 565+ 9A14 23                   inc hl
 566+ 9A15 FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 567+ 9A17 CA 2A 9A             jp z,_x2r_31
 568+ 9A1A
 569+ 9A1A 3E BD                ld a,$bd            ;draw leftmost bottom
 570+ 9A1C 2B                   dec hl
 571+ 9A1D 2B                   dec hl
 572+ 9A1E 2B                   dec hl
 573+ 9A1F 2B                   dec hl
 574+ 9A20
 575+ 9A20 77                   ld (hl),a
 576+ 9A21 23                   inc hl
 577+ 9A22 3C                   inc a
 578+ 9A23 77                   ld (hl),a
 579+ 9A24 23                   inc hl
 580+ 9A25 3C                   inc a
 581+ 9A26 77                   ld (hl),a
 582+ 9A27 23                   inc hl
 583+ 9A28 3C                   inc a
 584+ 9A29 77                   ld (hl),a
 585+ 9A2A
 586+ 9A2A D1           _x2r_31  pop de
 587+ 9A2B C3 04 99             jp go_back5r              ; jump back to main loop
 588+ 9A2E
 589+ 9A2E              ;############################################
 590+ 9A2E              ;############################################
 591+ 9A2E              ;draw layer 4 right
 592+ 9A2E              ;############################################
 593+ 9A2E              ;############################################
 594+ 9A2E
 595+ 9A2E              draw_4r
 596+ 9A2E
 597+ 9A2E
 598+ 9A2E              ; jump straight into sjasmplus debugger
 599+ 9A2E              ;        BREAK
 600+ 9A2E              ;        ret
 601+ 9A2E
 602+ 9A2E
 603+ 9A2E              ; hl=maze location being drawn.
 604+ 9A2E              ; now determine what to draw for this section.
 605+ 9A2E
 606+ 9A2E
 607+ 9A2E 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 608+ 9A31
 609+ 9A31 CD 77 8B             call load_de            ;get left and right and front jump into de reg
 610+ 9A34
 611+ 9A34 19                   add hl,de               ;jump backwards along the user view 1 space
 612+ 9A35 22 25 FA             ld (furthest_point),hl  ;load our last furthest point
 613+ 9A38
 614+ 9A38              ;we should also move our pointer left to read where the walls are.
 615+ 9A38              ;this will be from this point onwards as we can see the blocks more fully
 616+ 9A38
 617+ 9A38              ;        ld de,(right)
 618+ 9A38              ;        add hl,de               ;should be 1 place to the left now
 619+ 9A38              ;        ld (furthest_point),hl ;re save it
 620+ 9A38
 621+ 9A38 11 01 00             ld de,$0001 ;$0003             ;to move the printed position +3
 622+ 9A3B                                              ;not including black wall bit
 623+ 9A3B ED 53 11 FA          ld (var4),de
 624+ 9A3F
 625+ 9A3F
 626+ 9A3F              ;we need to move pointer 1 to the right for wall checking
 627+ 9A3F ED 5B 0D FA          ld de,(right)
 628+ 9A43 19                   add hl,de
 629+ 9A44 22 15 FA             ld (var6),hl
 630+ 9A47
 631+ 9A47 ED 53 0F FA          ld (var3),de
 632+ 9A4B 11 59 01             ld   de,$0159;159       ; offset to row 10 column 19 - right of  centre of the 3d view.
 633+ 9A4E CD 54 9A             call do_draw_4r
 634+ 9A51
 635+ 9A51
 636+ 9A51              ;ret
 637+ 9A51 C3 14 9C             jp draw_3r           ;now draw the 4th level
 638+ 9A54
 639+ 9A54              do_draw_4r:
 640+ 9A54
 641+ 9A54 2A 55 81             ld hl,(d_file)        ; fetch the location of the display file.
 642+ 9A57 19                   add hl,de
 643+ 9A58 06 04                ld b,4                 ; count for max of 4 blocks right of maze position
 644+ 9A5A                                              ; 0 is not counted so loops 3 times
 645+ 9A5A ED 5B 15 FA          ld de,(var6)
 646+ 9A5E EB                   ex de,hl              ; transfer de to hl.
 647+ 9A5F
 648+ 9A5F              loop9r:
 649+ 9A5F E5                   push hl
 650+ 9A60
 651+ 9A60              ;*#########################################
 652+ 9A60              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 653+ 9A60
 654+ 9A60 3A 28 FA             ld a,(maze_highbyte)
 655+ 9A63 BC                   cp h                    ;are we at the top part of the maze?
 656+ 9A64 CA 97 9A             jp z,cont_4a
 657+ 9A67                                              ;if we are on a different maze boundary
 658+ 9A67                                              ;then draw a maze wall as we are the top
 659+ 9A67                                              ;or north wall but maze data has no
 660+ 9A67                                              ;wall data.
 661+ 9A67              ;4 = 1st right wall
 662+ 9A67              ;3 = 2nd right wall
 663+ 9A67              ;2 = 3rd right wall
 664+ 9A67              ;1 = 4th right wall
 665+ 9A67
 666+ 9A67 78                   ld a,b                  ;our current wall counter
 667+ 9A68 FE 04                cp 4
 668+ 9A6A C2 75 9A             jp nz,b4                 ;its not wall 2
 669+ 9A6D 3E 01                ld a,1
 670+ 9A6F 47                   ld b,a
 671+ 9A70 C6 80                add a,128               ;make sure we set a wall!
 672+ 9A72 C3 C6 9A             jp draw_9r             ;jump straight to making an end wall
 673+ 9A75
 674+ 9A75 FE 03        b4:     cp 3
 675+ 9A77 C2 82 9A             jp nz,b4_1                 ;its not wall 2
 676+ 9A7A 3E 01                ld a,1
 677+ 9A7C 47                   ld b,a
 678+ 9A7D C6 80                add a,128               ;make sure we set a wall!
 679+ 9A7F C3 03 9B             jp draw_9r_2             ;jump straight to making an end wall
 680+ 9A82
 681+ 9A82 FE 02        b4_1:   cp 2
 682+ 9A84 C2 8F 9A             jp nz,b4_2                 ;its not wall 2
 683+ 9A87 3E 01                ld a,1
 684+ 9A89 47                   ld b,a
 685+ 9A8A C6 80                add a,128               ;make sure we set a wall!
 686+ 9A8C C3 73 9B             jp draw_9r_3             ;jump straight to making an end wall
 687+ 9A8F
 688+ 9A8F 3E 01        b4_2:   ld a,1
 689+ 9A91 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 690+ 9A92 C6 80                add a,128               ;make sure we set a wall!
 691+ 9A94 C3 D4 9B             jp draw_9r_4	       	;draw the 2nd wall to the right
 692+ 9A97
 693+ 9A97              ;*#########################################
 694+ 9A97              cont_4a:
 695+ 9A97 7E                   ld a,(hl)
 696+ 9A98 17                   rla
 697+ 9A99 DA AC 9A             jp c,do_wall4r            ;bit 7 (128)
 698+ 9A9C
 699+ 9A9C
 700+ 9A9C              go_back4r:
 701+ 9A9C 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 702+ 9A9F                                              ; holds current screen position
 703+ 9A9F 19                   add hl,de
 704+ 9AA0 EB                   ex de,hl
 705+ 9AA1 E1                   pop hl
 706+ 9AA2 D5                   push de
 707+ 9AA3 ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 708+ 9AA7 19                   add hl,de               ; move to the start of the next block to print
 709+ 9AA8                                              ;we need to move back 4 blocks
 710+ 9AA8                                              ;as the first block obscures the view
 711+ 9AA8                                              ;of the next 3 blocks.
 712+ 9AA8 D1                   pop de
 713+ 9AA9 10 B4                djnz loop9r
 714+ 9AAB C9                   ret
 715+ 9AAC              ;now do the 4th position
 716+ 9AAC
 717+ 9AAC              do_wall4r:
 718+ 9AAC              do_wall4a:
 719+ 9AAC
 720+ 9AAC              ;now draw the wall based on bc count
 721+ 9AAC
 722+ 9AAC              wall4_start:
 723+ 9AAC
 724+ 9AAC 78                   ld a,b
 725+ 9AAD D6 04                sub 4                   ;4 = 1st wall to the right
 726+ 9AAF CA C6 9A             jp z,draw_9r
 727+ 9AB2
 728+ 9AB2 78                   ld a,b
 729+ 9AB3 D6 03                sub 3                   ;3 = 2nd wall immediately to the right
 730+ 9AB5 CA 03 9B             jp z,draw_9r_2
 731+ 9AB8
 732+ 9AB8 78                   ld a,b
 733+ 9AB9 D6 02                sub 2                   ;2 = 3rd wall immediately to the right
 734+ 9ABB CA 73 9B             jp z,draw_9r_3
 735+ 9ABE
 736+ 9ABE 78                   ld a,b
 737+ 9ABF D6 01                sub 1                   ;1 = 4th wall immediately to the right
 738+ 9AC1 CA D4 9B             jp z,draw_9r_4
 739+ 9AC4
 740+ 9AC4 E1                   pop hl
 741+ 9AC5 C9                   ret
 742+ 9AC6
 743+ 9AC6
 744+ 9AC6              draw_9r:
 745+ 9AC6 C5                   push bc
 746+ 9AC7 D5                   push de                 ;save our display pointer
 747+ 9AC8 06 04                ld b,4                  ;block is 4 blocks high
 748+ 9ACA 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 749+ 9ACD 3E B7        loop10r:ld   a,_mediumwall_1      ;grey sides facing us
 750+ 9ACF 12                   ld   (de),a             ; insert thepart of the wall.
 751+ 9AD0 13                   inc de
 752+ 9AD1 12                   ld (de),a               ;put grey side to our right
 753+ 9AD2 13                   inc de
 754+ 9AD3 12                   ld (de),a
 755+ 9AD4 13                   inc de
 756+ 9AD5 12                   ld (de),a
 757+ 9AD6 1B                   dec de
 758+ 9AD7 1B                   dec de                  ;go left 1 again
 759+ 9AD8 1B                   dec de
 760+ 9AD9 EB                   ex de,hl
 761+ 9ADA 19                   add  hl,de              ; advance to the next row of the display file.
 762+ 9ADB EB                   ex de,hl
 763+ 9ADC 10 EF                djnz loop10r             ;do this 3 times
 764+ 9ADE
 765+ 9ADE                      ;now draw the blank face
 766+ 9ADE D1                   pop de                  ;back to our original position
 767+ 9ADF D5                   push de
 768+ 9AE0 1B                   dec de                  ;move left 1 space in the display
 769+ 9AE1
 770+ 9AE1              ;check if the char to our right is a wall block.
 771+ 9AE1              ;if so, do not draw a black face as we need to hide it or it will
 772+ 9AE1              ;ovewrite the already drawn block
 773+ 9AE1
 774+ 9AE1 1A                   ld a,(de)
 775+ 9AE2 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 776+ 9AE4 C2 EB 9A             jp nz,cont_1r            ;there is no block so draw black edge
 777+ 9AE7 D1                   pop de
 778+ 9AE8 C1                   pop bc
 779+ 9AE9 18 B1                jr go_back4r             ;otherwise quit this draw
 780+ 9AEB
 781+ 9AEB EB           cont_1r ex  de,hl
 782+ 9AEC 11 21 00             ld de,$0021
 783+ 9AEF 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
 784+ 9AF1 77                   ld  (hl),a
 785+ 9AF2 19                   add hl,de
 786+ 9AF3 3E AF                ld  a,_black
 787+ 9AF5 77                   ld  (hl),a
 788+ 9AF6 19                   add hl,de
 789+ 9AF7 3E AF                ld  a,_black
 790+ 9AF9 77                   ld  (hl),a
 791+ 9AFA 19                   add hl,de
 792+ 9AFB
 793+ 9AFB 77                   ld  (hl),a
 794+ 9AFC 3E B1                ld  a,_topcorner2
 795+ 9AFE 77                   ld  (hl),a
 796+ 9AFF D1                   pop de
 797+ 9B00 C1                   pop bc
 798+ 9B01 18 99                jr go_back4r              ; jump back to main loop
 799+ 9B03
 800+ 9B03              ;************************************
 801+ 9B03              ;*Draw the 2nd right block of section 4
 802+ 9B03              ;************************************
 803+ 9B03
 804+ 9B03              draw_9r_2:
 805+ 9B03 C5                   push bc
 806+ 9B04 21 03 00             ld hl,3                 ;move display 3 chars to the right
 807+ 9B07 19                   add hl,de
 808+ 9B08 EB                   ex de,hl
 809+ 9B09 D5                   push de
 810+ 9B0A
 811+ 9B0A              ;now draw the 2nd wall itself
 812+ 9B0A 06 04                ld b,4                  ;block is 4 blocks high
 813+ 9B0C 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 814+ 9B0F 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 815+ 9B11
 816+ 9B11              loop10r_2:
 817+ 9B11 12                   ld (de),a             ; insert thepart of the wall.
 818+ 9B12 13                   inc de
 819+ 9B13 12                   ld (de),a               ;put grey side to our right
 820+ 9B14 13                   inc de
 821+ 9B15 12                   ld (de),a
 822+ 9B16 13                   inc de
 823+ 9B17 12                   ld (de),a
 824+ 9B18 13                   inc de
 825+ 9B19 12                   ld (de),a
 826+ 9B1A 1B                   dec de
 827+ 9B1B 1B                   dec de
 828+ 9B1C 1B                   dec de
 829+ 9B1D 1B                   dec de                  ;go left 1 again
 830+ 9B1E EB                   ex de,hl
 831+ 9B1F 19                   add  hl,de              ; advance to the next row of the display file.
 832+ 9B20 EB                   ex de,hl
 833+ 9B21 10 EE                djnz loop10r_2             ;do this 3 times
 834+ 9B23
 835+ 9B23                      ;now draw the blank face
 836+ 9B23 D1                   pop de                  ;back to our original position
 837+ 9B24 D5                   push de
 838+ 9B25 1B                   dec de                  ;move left 1 space in the display
 839+ 9B26
 840+ 9B26              ;check if the char to our right is a wall block.
 841+ 9B26              ;if so, do not draw a black face as we need to hide it or it will
 842+ 9B26              ;ovewrite the already drawn block
 843+ 9B26
 844+ 9B26 1A                   ld a,(de)
 845+ 9B27 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 846+ 9B29 C2 31 9B             jp nz,cont_1r_2           ;there is no block so draw black edge
 847+ 9B2C D1                   pop de
 848+ 9B2D C1                   pop bc
 849+ 9B2E C3 9C 9A             jp go_back4r             ;otherwise quit this draw
 850+ 9B31
 851+ 9B31              cont_1r_2:
 852+ 9B31 EB                   ex  de,hl
 853+ 9B32 11 21 00             ld de,$0021
 854+ 9B35
 855+ 9B35              ;need to loop 2 times drawing 2 lots of 3 top
 856+ 9B35              ;& bottom chars- move down 1after 1st 3 top chars drawn
 857+ 9B35              ;
 858+ 9B35
 859+ 9B35 3E 02                ld a,2
 860+ 9B37 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 861+ 9B3A
 862+ 9B3A              ;loop for 2 black wall columns
 863+ 9B3A 3E 03                ld a,3                  ;column start height
 864+ 9B3C 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
 865+ 9B3F
 866+ 9B3F 06 03                ld b,3                  ;loop 3 times for 3 columns
 867+ 9B41 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 868+ 9B44 3E 91                ld a,$91
 869+ 9B46 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 870+ 9B49
 871+ 9B49              loop10br_2:
 872+ 9B49 C5                   push bc                 ;save count
 873+ 9B4A 3A 04 FA             ld a,(var1)             ;column height
 874+ 9B4D 47                   ld b,a                  ;holds the column height in chars
 875+ 9B4E 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 876+ 9B51 F5                   push af                 ;save a for bottom corners
 877+ 9B52 77                   ld  (hl),a
 878+ 9B53
 879+ 9B53              loop10ar_2:
 880+ 9B53 19                   add hl,de
 881+ 9B54 3E AF                ld  a,_black            ;black wall fill
 882+ 9B56 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 883+ 9B57 10 FA                djnz loop10ar_2
 884+ 9B59
 885+ 9B59 F1                   pop af                  ;retrivetop corner
 886+ 9B5A 3D                   dec a                   ;prep for next top corner
 887+ 9B5B 32 05 FA             ld (var2),a             ;re-save it for next corner
 888+ 9B5E C6 04                add a,4                 ;get the correct char to print
 889+ 9B60 77                   ld  (hl),a              ;draw the bottom of the wall
 890+ 9B61
 891+ 9B61                      ;now change column count
 892+ 9B61 3A 04 FA             ld a,(var1)
 893+ 9B64 C1                   pop bc
 894+ 9B65
 895+ 9B65 2A 13 FA             ld hl,(var5)
 896+ 9B68 2B                   dec hl                  ;move print position to the left
 897+ 9B69 22 13 FA             ld (var5),hl
 898+ 9B6C
 899+ 9B6C 10 DB                djnz loop10br_2
 900+ 9B6E
 901+ 9B6E              exit_1_2:
 902+ 9B6E D1                   pop de
 903+ 9B6F C1                   pop bc
 904+ 9B70 C3 9C 9A             jp go_back4r              ; jump back to main loop
 905+ 9B73
 906+ 9B73              ;#############################################
 907+ 9B73              ;*Draw the 3rd right block of section 4
 908+ 9B73              ;#############################################
 909+ 9B73
 910+ 9B73              draw_9r_3:
 911+ 9B73
 912+ 9B73 C5                   push bc
 913+ 9B74 D5                   push de                 ;save our display pointer
 914+ 9B75 06 04                ld b,4                  ;block is 4 blocks high
 915+ 9B77 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
 916+ 9B7A 11 62 C1             ld de,$C162             ;start of drawing
 917+ 9B7D
 918+ 9B7D              loop10r_3:
 919+ 9B7D 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 920+ 9B7F 12                   ld (de),a               ; insert thepart of the wall.
 921+ 9B80 EB                   ex de,hl
 922+ 9B81 19                   add  hl,de              ; advance to the next row of the display file.
 923+ 9B82 EB                   ex de,hl
 924+ 9B83 10 F8                djnz loop10r_3          ;do this 3 times
 925+ 9B85
 926+ 9B85                      ;now draw the blank face
 927+ 9B85 D1                   pop de                  ;back to our original position
 928+ 9B86 D5                   push de
 929+ 9B87
 930+ 9B87              ;check if the char to our right is a wall block.
 931+ 9B87              ;if so, do not draw a black face as we need to hide it or it will
 932+ 9B87              ;ovewrite the already drawn block
 933+ 9B87
 934+ 9B87
 935+ 9B87 3A 61 C1             ld a,($c161);(de)
 936+ 9B8A FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 937+ 9B8C C2 94 9B             jp nz,cont_1r_3            ;there is no block so draw black edge
 938+ 9B8F
 939+ 9B8F D1                   pop de
 940+ 9B90 C1                   pop bc
 941+ 9B91 C3 9C 9A             jp go_back4r             ;otherwise quit this draw
 942+ 9B94
 943+ 9B94              cont_1r_3:
 944+ 9B94 EB                   ex  de,hl
 945+ 9B95 11 21 00             ld de,$0021
 946+ 9B98 21 61 C1             ld hl,$c161
 947+ 9B9B
 948+ 9B9B              ;need to loop 2 times drawing 2 lots of 3 top
 949+ 9B9B              ;& bottom chars- move down 1after 1st 3 top chars drawn
 950+ 9B9B              ;
 951+ 9B9B
 952+ 9B9B              ;loop for 2 black wall columns
 953+ 9B9B 3E 03                ld a,3                  ;column start height
 954+ 9B9D 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 955+ 9BA0
 956+ 9BA0 06 05                ld b,5                  ;loop 5 times for 5 columns
 957+ 9BA2 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 958+ 9BA5 3E CD                ld a,$cd ;91
 959+ 9BA7 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 960+ 9BAA
 961+ 9BAA              loop10br_2a:
 962+ 9BAA C5                   push bc                 ;save count
 963+ 9BAB 3A 04 FA             ld a,(var1)             ;column height
 964+ 9BAE 47                   ld b,a                  ;holds the column height in chars
 965+ 9BAF 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 966+ 9BB2 F5                   push af                 ;save a for bottom corners
 967+ 9BB3 77                   ld  (hl),a
 968+ 9BB4
 969+ 9BB4              loop10ar_2a:
 970+ 9BB4 19                   add hl,de
 971+ 9BB5 3E AF                ld  a,_black            ;black wall fill
 972+ 9BB7 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 973+ 9BB8 10 FA                djnz loop10ar_2a
 974+ 9BBA
 975+ 9BBA F1                   pop af                  ;retrivetop corner
 976+ 9BBB 3D                   dec a                   ;prep for next top corner
 977+ 9BBC 32 05 FA             ld (var2),a             ;re-save it for next corner
 978+ 9BBF C6 06                add a,6                 ;get the correct char to print
 979+ 9BC1 77                   ld  (hl),a              ;draw the bottom of the wall
 980+ 9BC2
 981+ 9BC2                      ;now change column count
 982+ 9BC2 3A 04 FA             ld a,(var1)
 983+ 9BC5 C1                   pop bc
 984+ 9BC6
 985+ 9BC6 2A 13 FA             ld hl,(var5)
 986+ 9BC9 2B                   dec hl                  ;move print position to the left
 987+ 9BCA 22 13 FA             ld (var5),hl
 988+ 9BCD
 989+ 9BCD 10 DB                djnz loop10br_2a
 990+ 9BCF
 991+ 9BCF D1                   pop de
 992+ 9BD0 C1                   pop bc
 993+ 9BD1 C3 9C 9A             jp go_back4r              ; jump back to main loop
 994+ 9BD4
 995+ 9BD4              ;#############################################
 996+ 9BD4              ;*Draw the 4th RIGHT block of section 4
 997+ 9BD4              ;#############################################
 998+ 9BD4
 999+ 9BD4              ; we only need to draw up to 2 columns of black sides.
1000+ 9BD4
1001+ 9BD4              draw_9r_4:
1002+ 9BD4 C5                   push bc
1003+ 9BD5 D5                   push de                 ;save our display pointer
1004+ 9BD6
1005+ 9BD6              ;check if the char to our left is a wall block.
1006+ 9BD6              ;if so, do not draw a black face as we need to hide it or it will
1007+ 9BD6              ;ovewrite the already drawn block
1008+ 9BD6
1009+ 9BD6 21 62 C1             ld hl,$C18C+20-30-32              ;start of drawing
1010+ 9BD9 7E                   ld a,(hl)
1011+ 9BDA FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1012+ 9BDC C2 E4 9B             jp nz,cont_3r            ;there is no block so draw black edge
1013+ 9BDF
1014+ 9BDF D1                   pop de
1015+ 9BE0 C1                   pop bc
1016+ 9BE1 C3 9C 9A             jp go_back4r             ;otherwise quit this draw
1017+ 9BE4
1018+ 9BE4              cont_3r:
1019+ 9BE4 11 21 00             ld de,33                ;to jump to next line below
1020+ 9BE7 3E CA                ld a,$ca                ;top of the wall
1021+ 9BE9 E5                   push hl                 ;save for drawing 2nd black wall
1022+ 9BEA 77                   ld (hl),a               ;to cover up wall 5
1023+ 9BEB 19                   add hl,de               ;jump to next line
1024+ 9BEC 3E AF                ld a,_black
1025+ 9BEE 77                   ld (hl),a
1026+ 9BEF 19                   add hl,de
1027+ 9BF0 77                   ld (hl),a
1028+ 9BF1 19                   add hl,de
1029+ 9BF2 3E CF                ld a,$cf                ;draw bottom of the line
1030+ 9BF4 77                   ld (hl),a
1031+ 9BF5
1032+ 9BF5              ;now check if we need to cover wall 5 with a 2nd black line to the left
1033+ 9BF5              ;hl points to top of the 4 blocks
1034+ 9BF5 E1                   pop hl                  ;restore our pointer in char ram
1035+ 9BF6 2B                   dec hl                  ;go left 1 place
1036+ 9BF7 E5                   push hl
1037+ 9BF8 19                   add hl,de               ;now we are at the wall 5 top position
1038+ 9BF9 7E                   ld a,(hl)
1039+ 9BFA FE B4                cp _smallwall
1040+ 9BFC E1                   pop hl
1041+ 9BFD 20 0B                jr nz,exit3r
1042+ 9BFF              ;draw the second wall over section 5 wall
1043+ 9BFF 36 C9                ld (hl),$c9             ;top of the wall
1044+ 9C01 19                   add hl,de
1045+ 9C02 36 AF                ld (hl),_black
1046+ 9C04 19                   add hl,de
1047+ 9C05 36 AF                ld (hl),_black
1048+ 9C07 19                   add hl,de
1049+ 9C08 36 CE                ld (hl),$ce             ;bottom of the wall
1050+ 9C0A
1051+ 9C0A D1           exit3r:  pop de                  ;now exit
1052+ 9C0B C1                   pop bc
1053+ 9C0C C3 9C 9A             jp go_back4r
1054+ 9C0F
1055+ 9C0F
1056+ 9C0F              ;draw 2 black walls across 1 line
1057+ 9C0F              black_wall_2:
1058+ 9C0F 19                   add hl,de      ;jump 1 line below
1059+ 9C10 77                   ld (hl),a
1060+ 9C11 23                   inc hl
1061+ 9C12 77                   ld (hl),a
1062+ 9C13 C9                   ret
1063+ 9C14
1064+ 9C14
1065+ 9C14              ;#############################################
1066+ 9C14              ;#############################################
1067+ 9C14              ;# draw wall 3 right
1068+ 9C14              ;#############################################
1069+ 9C14              ;#############################################
1070+ 9C14
1071+ 9C14              draw_3r:
1072+ 9C14
1073+ 9C14              ; hl=maze location being drawn.
1074+ 9C14              ; now determine what to draw for this section.
1075+ 9C14
1076+ 9C14
1077+ 9C14 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1078+ 9C17
1079+ 9C17 CD 77 8B             call load_de            ;get left and right and front jump into de reg
1080+ 9C1A
1081+ 9C1A 19                   add hl,de               ;jump backwards along the user view 1 space
1082+ 9C1B 22 25 FA             ld (furthest_point),hl  ;re save it
1083+ 9C1E
1084+ 9C1E 11 01 00             ld de,$0001             ;to move the display position +1
1085+ 9C21 ED 53 11 FA          ld (var4),de
1086+ 9C25
1087+ 9C25 ED 5B 0D FA          ld de,(right)
1088+ 9C29
1089+ 9C29 19                   add hl,de
1090+ 9C2A 22 15 FA             ld (var6),hl
1091+ 9C2D                         ;save the maze position
1092+ 9C2D
1093+ 9C2D ED 53 0F FA          ld (var3),de
1094+ 9C31 11 19 01             ld de,$0119           ; offset right of  centre of the 3d view.
1095+ 9C34
1096+ 9C34 CD 3A 9C             call do_draw_3r
1097+ 9C37
1098+ 9C37
1099+ 9C37 C3 99 9D             jp draw_2r              ;now draw the 2nd level
1100+ 9C3A
1101+ 9C3A              do_draw_3r:
1102+ 9C3A
1103+ 9C3A 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
1104+ 9C3D 19                   add  hl,de
1105+ 9C3E
1106+ 9C3E
1107+ 9C3E              ; draw  right half of the display.
1108+ 9C3E
1109+ 9C3E 06 03                ld b,3                  ; count for 2 blocks left or right of display file
1110+ 9C40                                              ; 0 is not counted so loops 12 times
1111+ 9C40 ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
1112+ 9C44
1113+ 9C44 EB                   ex   de,hl              ; transfer de to hl.
1114+ 9C45
1115+ 9C45              ;       hl = furthest point in the maze
1116+ 9C45              ;       de = d_file location to store byte to display
1117+ 9C45
1118+ 9C45              loop11r:
1119+ 9C45 E5                   push hl
1120+ 9C46
1121+ 9C46              ;*#########################################
1122+ 9C46              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1123+ 9C46
1124+ 9C46 3A 28 FA             ld a,(maze_highbyte)
1125+ 9C49 BC                   cp h                    ;are we at the top part of the maze?
1126+ 9C4A CA 71 9C             jp z,cont_3a
1127+ 9C4D                                              ;if we are on a different maze boundary
1128+ 9C4D                                              ;then draw a maze wall as we are the top
1129+ 9C4D                                              ;or north wall but maze data has no
1130+ 9C4D                                              ;wall data.
1131+ 9C4D              ;3 = first right wall
1132+ 9C4D              ;2 = 2nd right wall
1133+ 9C4D              ;1 = 3rd right wall
1134+ 9C4D
1135+ 9C4D 78                   ld a,b                  ;our current wall counter
1136+ 9C4E D6 03                sub 3
1137+ 9C50 C2 5B 9C             jp nz,b3_1                 ;its not wall 2
1138+ 9C53 3E 01                ld a,1
1139+ 9C55 47                   ld b,a
1140+ 9C56 C6 80                add a,128               ;make sure we set a wall!
1141+ 9C58 C3 95 9C             jp draw_10r             ;jump straight to making an end wall
1142+ 9C5B
1143+ 9C5B 78           b3_1    ld a,b                  ;our current wall counter
1144+ 9C5C D6 02                sub 2
1145+ 9C5E C2 69 9C             jp nz,b3_2                 ;its not wall 2
1146+ 9C61 3E 01                ld a,1
1147+ 9C63 47                   ld b,a
1148+ 9C64 C6 80                add a,128               ;make sure we set a wall!
1149+ 9C66 C3 03 9D             jp draw_10r_2             ;jump straight to making an end wall
1150+ 9C69
1151+ 9C69
1152+ 9C69 3E 01        b3_2:   ld a,1
1153+ 9C6B 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1154+ 9C6C C6 80                add a,128               ;make sure we set a wall!
1155+ 9C6E C3 75 9D             jp draw_10r_3	       	;draw the 2nd wall to the right
1156+ 9C71
1157+ 9C71              ;*#########################################
1158+ 9C71              cont_3a:
1159+ 9C71 7E                   ld a,(hl)
1160+ 9C72 17                   rla
1161+ 9C73 DA 81 9C             jp c,do_wall3r            ;if bit 7=128 theres a wall
1162+ 9C76
1163+ 9C76
1164+ 9C76              go_back3r:
1165+ 9C76 E1                   pop hl
1166+ 9C77 D5                   push de
1167+ 9C78 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1168+ 9C7C 19                   add hl,de                ; go right 1 block in the maze
1169+ 9C7D D1                   pop de
1170+ 9C7E 10 C5                djnz loop11r
1171+ 9C80 C9                   ret
1172+ 9C81              ;now do the next maze position
1173+ 9C81
1174+ 9C81
1175+ 9C81              do_wall3r:
1176+ 9C81
1177+ 9C81                      ;check if bit 1 is set as thats an end wall
1178+ 9C81                      ;and b must then be changed to 1 to stop drawing.
1179+ 9C81
1180+ 9C81                      ;2020 draw layers according to how close to the middle
1181+ 9C81              ;         bit 1,a                 ; is this a side wall? (129 but we rla'd accumulator)
1182+ 9C81              ;         jr z,wall3_start
1183+ 9C81              ;         ld b,1                  ;it IS a sidewall so set b so we exit on return
1184+ 9C81
1185+ 9C81              ;**** Whats this for? Does it work!
1186+ 9C81              ;         ld a,(blockid)
1187+ 9C81              ;         cp 16
1188+ 9C81              ;         jp z,draw_10r          ;16 = a side wall
1189+ 9C81
1190+ 9C81              ;now draw the wall based on bc value
1191+ 9C81              wall3_start:
1192+ 9C81
1193+ 9C81
1194+ 9C81 78                  ld a,b			               ;b is the loop count i.e # of walls to draw
1195+ 9C82 D6 01               	sub 1			               ;3 = the wall imediately right
1196+ 9C84 CA 75 9D             jp z,draw_10r_3          ;draw an end wall if blockid=16
1197+ 9C87
1198+ 9C87 78                   ld a,b
1199+ 9C88 D6 03                sub 3
1200+ 9C8A CA 95 9C             jp z,draw_10r         		;draw the 1st wall to the right
1201+ 9C8D
1202+ 9C8D 78                   ld a,b
1203+ 9C8E D6 02                sub 2
1204+ 9C90 CA 03 9D             jp z,draw_10r_2	       	;draw the 2nd wall to the right
1205+ 9C93
1206+ 9C93 E1                   pop hl                  ;nothing to draw so return
1207+ 9C94 C9                   ret
1208+ 9C95
1209+ 9C95
1210+ 9C95              draw_10r:
1211+ 9C95 C5                    push bc                ;save loop count
1212+ 9C96 11 19 C1              ld de,$c119             ;start of print position
1213+ 9C99 D5                    push de                 ;save our display pointer
1214+ 9C9A
1215+ 9C9A 06 08                 ld b,8                  ;block is 8 blocks high
1216+ 9C9C 21 21 00              ld hl,$0021             ;load with 32 to jump to line below us
1217+ 9C9F 3E B5                 ld a, _mediumwall       ;wall on sides facing us
1218+ 9CA1 12           loop12r: ld (de),a               ; insert the part of the wall.
1219+ 9CA2 13                    inc de
1220+ 9CA3 12                    ld (de),a               ;put grey side to our right
1221+ 9CA4 13                    inc de
1222+ 9CA5 12                    ld (de),a               ;put grey side to our right
1223+ 9CA6 13                    inc de
1224+ 9CA7 12                    ld (de),a               ;put grey side to our right
1225+ 9CA8 13                    inc de
1226+ 9CA9 12                    ld (de),a               ;put grey side to our right
1227+ 9CAA 13                    inc de
1228+ 9CAB 12                    ld (de),a               ;put grey side to our right
1229+ 9CAC
1230+ 9CAC 13                    inc de
1231+ 9CAD 12                    ld (de),a
1232+ 9CAE 13                    inc de
1233+ 9CAF 12                    ld (de),a
1234+ 9CB0 1B                    dec de
1235+ 9CB1 1B                    dec de
1236+ 9CB2
1237+ 9CB2 1B                    dec de
1238+ 9CB3 1B                    dec de
1239+ 9CB4 1B                    dec de
1240+ 9CB5 1B                    dec de
1241+ 9CB6 1B                    dec de
1242+ 9CB7 EB                    ex de,hl
1243+ 9CB8 19                    add  hl,de              ; advance to the next row of the display file.
1244+ 9CB9 EB                    ex de,hl
1245+ 9CBA 10 E5                 djnz loop12r            ;do this 3 times
1246+ 9CBC
1247+ 9CBC              ;now draw the blank face to the leftt of the block
1248+ 9CBC              ;create first column of left face characters
1249+ 9CBC
1250+ 9CBC D1                    pop de                  ;back to our original position
1251+ 9CBD D5                    push de
1252+ 9CBE 1B                    dec de                  ;move ahead 1 space in the display (right)
1253+ 9CBF
1254+ 9CBF              ;check if the char to our left is a wall block.
1255+ 9CBF              ;if so, do not draw a black face as we need to hide it or it will
1256+ 9CBF              ;ovewrite the already drawn block
1257+ 9CBF
1258+ 9CBF 1A                    ld a,(de)
1259+ 9CC0 FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1260+ 9CC2 C2 C9 9C              jp nz,cont_2r            ;there is no block so draw black edge
1261+ 9CC5 D1                    pop de
1262+ 9CC6 C1                    pop bc
1263+ 9CC7 18 AD                 jr go_back3r             ;otherwise quit this draw
1264+ 9CC9
1265+ 9CC9
1266+ 9CC9 EB           cont_2r: ex  de,hl
1267+ 9CCA 11 21 00              ld de,$0021
1268+ 9CCD
1269+ 9CCD              ;loop for 2 columns
1270+ 9CCD
1271+ 9CCD 06 02                ld b,2                  ; loop 2 times for 2 columns
1272+ 9CCF 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1273+ 9CD2 3E 07                ld a,7
1274+ 9CD4 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1275+ 9CD7
1276+ 9CD7              loop12br:
1277+ 9CD7 C5                   push bc                 ;save count
1278+ 9CD8 3A 04 FA             ld a,(var1)
1279+ 9CDB 47                   ld b,a                  ;holds the column height in chars
1280+ 9CDC 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
1281+ 9CDE 77                   ld  (hl),a
1282+ 9CDF
1283+ 9CDF              loop12ar:                   ;we must start at5 to draw 4 face blocks on right
1284+ 9CDF 19                   add hl,de
1285+ 9CE0 3E AF                ld  a,_black      ;triangle sloping to right bottom
1286+ 9CE2 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1287+ 9CE3 10 FA                djnz loop12ar
1288+ 9CE5
1289+ 9CE5
1290+ 9CE5 3E B1                ld  a,_topcorner2
1291+ 9CE7 77                   ld  (hl),a
1292+ 9CE8
1293+ 9CE8                      ;now change column count
1294+ 9CE8 3A 04 FA             ld a,(var1)
1295+ 9CEB D6 02                sub 2                   ;subtract 2
1296+ 9CED 32 04 FA             ld (var1),a
1297+ 9CF0 C1                   pop bc
1298+ 9CF1
1299+ 9CF1 2A 13 FA             ld hl,(var5)
1300+ 9CF4 2B                   dec hl                  ;move print position to the left
1301+ 9CF5 11 21 00             ld de,$21               ;move top of next column down and across 1
1302+ 9CF8 19                   add hl,de
1303+ 9CF9 22 13 FA             ld (var5),hl
1304+ 9CFC
1305+ 9CFC 10 D9                djnz loop12br
1306+ 9CFE D1                   pop de
1307+ 9CFF C1                   pop bc
1308+ 9D00 C3 76 9C             jp go_back3r              ; jump back to main loop
1309+ 9D03
1310+ 9D03              ;**********************************
1311+ 9D03              ;     draw the 2nd right block
1312+ 9D03              ;***********************************
1313+ 9D03
1314+ 9D03              draw_10r_2:
1315+ 9D03
1316+ 9D03 C5                    push bc
1317+ 9D04 11 19 C1              ld de, $c119           ;start print position of wall
1318+ 9D07 D5                   push de
1319+ 9D08              ;dont draw a front wall as we never see it.
1320+ 9D08
1321+ 9D08 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1322+ 9D0B 19                   add hl,de
1323+ 9D0C EB                   ex de,hl
1324+ 9D0D              ;we do not need a front wall for this row as it is never seen.
1325+ 9D0D              ;below jp code can be removed :) Because a square block here
1326+ 9D0D              ;is 8 x 8
1327+ 9D0D
1328+ 9D0D 1B                    dec de                  ;move ahead 1 space in the display (right)
1329+ 9D0E
1330+ 9D0E              ;check if the char to our left is a wall block.
1331+ 9D0E              ;if so, do not draw a black face as we need to hide it or it will
1332+ 9D0E              ;ovewrite the already drawn block
1333+ 9D0E 1A                    ld a,(de)
1334+ 9D0F FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1335+ 9D11 C2 19 9D              jp nz,cont_2r_2            ;there is no block so draw black edge
1336+ 9D14 D1                    pop de
1337+ 9D15 C1                    pop bc
1338+ 9D16 C3 76 9C              jp go_back3r             ;otherwise quit this draw
1339+ 9D19
1340+ 9D19
1341+ 9D19              ;draw the black edge wall
1342+ 9D19
1343+ 9D19              cont_2r_2:
1344+ 9D19 EB                    ex  de,hl
1345+ 9D1A 11 21 00              ld de,$0021
1346+ 9D1D
1347+ 9D1D              ;need to loop 2 times drawing 2 lots of 3 top
1348+ 9D1D              ;& bottom chars- move down 1after 1st 3 top chars drawn
1349+ 9D1D              ;
1350+ 9D1D
1351+ 9D1D 3E 02                ld a,2
1352+ 9D1F 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1353+ 9D22
1354+ 9D22              ;loop for 3 black wall columns
1355+ 9D22 3E 07                ld a,7                  ;column start height
1356+ 9D24 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1357+ 9D27
1358+ 9D27 06 03        loop_x: ld b,3                  ;loop 3 times for 3 columns
1359+ 9D29 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1360+ 9D2C 3E 91                ld a,$91
1361+ 9D2E 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1362+ 9D31
1363+ 9D31              loop12br_2:
1364+ 9D31 C5                   push bc                 ;save count
1365+ 9D32 3A 04 FA             ld a,(var1)             ;column height
1366+ 9D35 47                   ld b,a                  ;holds the column height in chars
1367+ 9D36 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1368+ 9D39 F5                   push af                 ;save a for bottom corners
1369+ 9D3A 77                   ld  (hl),a
1370+ 9D3B
1371+ 9D3B              loop12ar_2:
1372+ 9D3B 19                   add hl,de
1373+ 9D3C 3E AF                ld  a,_black            ;black wall fill
1374+ 9D3E 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1375+ 9D3F 10 FA                djnz loop12ar_2
1376+ 9D41
1377+ 9D41 F1                   pop af                  ;retrivetop corner
1378+ 9D42 3D                   dec a                   ;prep for next top corner
1379+ 9D43 32 05 FA             ld (var2),a             ;re-save it for next corner
1380+ 9D46 C6 04                add a,4                 ;get the correct char to print
1381+ 9D48 77                   ld  (hl),a              ;draw the bottom of the wall
1382+ 9D49
1383+ 9D49                      ;now change column count
1384+ 9D49 3A 04 FA             ld a,(var1)
1385+ 9D4C C1                   pop bc
1386+ 9D4D
1387+ 9D4D 2A 13 FA             ld hl,(var5)
1388+ 9D50 2B                   dec hl                  ;move print position to the left
1389+ 9D51 22 13 FA             ld (var5),hl
1390+ 9D54
1391+ 9D54 10 DB                djnz loop12br_2
1392+ 9D56
1393+ 9D56              ;1st set of 3 top bits drawn
1394+ 9D56              ;now jump down the display 1 line
1395+ 9D56              ;then draw another 3 columns
1396+ 9D56
1397+ 9D56 3A 18 FA             ld a,(var7)             ;get our loop counter
1398+ 9D59 3D                   dec a
1399+ 9D5A 28 12                jr z,exit_1             ;exit after 2 loops
1400+ 9D5C 32 18 FA             ld (var7),a             ;save it
1401+ 9D5F 2A 13 FA             ld hl,(var5)
1402+ 9D62              ;get our last print position
1403+ 9D62                                              ;need to go to next line -1 char
1404+ 9D62 19                   add hl,de
1405+ 9D63                                              ; now move back in the display
1406+ 9D63                                              ;1 char
1407+ 9D63 22 13 FA             ld (var5),hl            ;re save it for use above
1408+ 9D66
1409+ 9D66 3E 05                ld a,5                  ;reduce black wall column height
1410+ 9D68 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1411+ 9D6B
1412+ 9D6B C3 27 9D             jp loop_x
1413+ 9D6E
1414+ 9D6E
1415+ 9D6E D1           exit_1: pop de
1416+ 9D6F C1                   pop bc
1417+ 9D70 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1418+ 9D72 C3 76 9C             jp go_back3r              ; jump back to main loop
1419+ 9D75
1420+ 9D75
1421+ 9D75              ;#############################################
1422+ 9D75              ;*Draw the 3rd RIGHT block of section3
1423+ 9D75              ;#############################################
1424+ 9D75
1425+ 9D75
1426+ 9D75              	; we only need to draw 2 columns of black sides.
1427+ 9D75                  ; if theres no brick pattern !
1428+ 9D75
1429+ 9D75              draw_10r_3:
1430+ 9D75 C5                   push bc
1431+ 9D76 D5                   push de                 ;save our display pointer
1432+ 9D77
1433+ 9D77 21 41 C1             ld hl,$C18C-66-30-3+24  ;start of drawing
1434+ 9D7A 7E                   ld a,(hl)               ;read what char is there
1435+ 9D7B FE B5                cp _mediumwall
1436+ 9D7D 20 05                jr nz,cont_1r_4        ;exit if a wall is already there
1437+ 9D7F D1                   pop de
1438+ 9D80 C1                   pop bc
1439+ 9D81 C3 76 9C             jp go_back3r             ;otherwise quit this draw
1440+ 9D84
1441+ 9D84              cont_1r_4:
1442+ 9D84
1443+ 9D84 3E C9                ld a,$c9
1444+ 9D86 77                   ld (hl),a
1445+ 9D87
1446+ 9D87 3E AF                ld a,_black
1447+ 9D89 11 21 00             ld de,33                ;1 line width
1448+ 9D8C
1449+ 9D8C CD 15 92             CALL black_wall         ;draw 4 black blocks
1450+ 9D8F
1451+ 9D8F 19                   add hl,de               ;jump to next line below
1452+ 9D90
1453+ 9D90
1454+ 9D90              ;top half done - so do bottom half - 2 blacks first
1455+ 9D90
1456+ 9D90              ;de already holds 32
1457+ 9D90
1458+ 9D90 3E CE                ld a,$ce
1459+ 9D92 77                   ld (hl),a
1460+ 9D93
1461+ 9D93 D1                   pop de
1462+ 9D94 C1                   pop bc
1463+ 9D95 C3 76 9C             jp go_back3r
1464+ 9D98
1465+ 9D98              ;draw 2 black walls across 1 line
1466+ 9D98              ;black_wall:
1467+ 9D98              ;        add hl,de      ;jump 1 line below
1468+ 9D98              ;        ld (hl),a
1469+ 9D98              ;        add hl,de      ;jump 1 line below
1470+ 9D98              ;        ld (hl),a
1471+ 9D98              ;        add hl,de      ;jump 1 line below
1472+ 9D98              ;        ld (hl),a
1473+ 9D98              ;        add hl,de      ;jump 1 line below
1474+ 9D98              ;        ld (hl),a
1475+ 9D98
1476+ 9D98 C9                   ret
1477+ 9D99
1478+ 9D99
1479+ 9D99
1480+ 9D99              ;#############################################
1481+ 9D99              ;#############################################
1482+ 9D99              ; draw  layer 2
1483+ 9D99              ;#############################################
1484+ 9D99              ;#############################################
1485+ 9D99
1486+ 9D99              draw_2r:
1487+ 9D99
1488+ 9D99
1489+ 9D99              ; hl=maze location being drawn.
1490+ 9D99              ; now determine what to draw for this section.
1491+ 9D99              test
1492+ 9D99
1493+ 9D99 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1494+ 9D9C
1495+ 9D9C CD 77 8B             call load_de            ;get left and right and front jump into de reg
1496+ 9D9F
1497+ 9D9F 19                   add hl,de               ;jump backwards along the user view 1 space
1498+ 9DA0 22 25 FA             ld (furthest_point),hl ;re save it
1499+ 9DA3
1500+ 9DA3 11 01 00             ld de,$0001             ;to move the display position +1
1501+ 9DA6 ED 53 11 FA          ld (var4),de
1502+ 9DAA
1503+ 9DAA ED 5B 0D FA          ld de,(right)
1504+ 9DAE
1505+ 9DAE              ;we need to move pointer 1 to the left for wall checking
1506+ 9DAE 19                   add hl,de
1507+ 9DAF 22 15 FA             ld (var6),hl
1508+ 9DB2
1509+ 9DB2 ED 53 0F FA          ld (var3),de
1510+ 9DB6 11 B9 00             ld  de,$0b9           ; offset to right of centre of the 3d view.
1511+ 9DB9 CD BF 9D             call do_draw_2r
1512+ 9DBC
1513+ 9DBC C3 34 9E             jp draw_1r           ;now draw the 2nd level
1514+ 9DBF
1515+ 9DBF              do_draw_2r:
1516+ 9DBF
1517+ 9DBF 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
1518+ 9DC2 19                   add  hl,de
1519+ 9DC3
1520+ 9DC3
1521+ 9DC3 06 01                ld b,1                 ; count for 1 blocks left or right of display file
1522+ 9DC5                                              ; 0 is not counted so loops 12 times
1523+ 9DC5 ED 5B 15 FA          ld de,(var6)
1524+ 9DC9
1525+ 9DC9 EB                   ex   de,hl              ; transfer de to hl.
1526+ 9DCA
1527+ 9DCA
1528+ 9DCA E5           loop14r: push hl
1529+ 9DCB
1530+ 9DCB              ;*#########################################
1531+ 9DCB              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1532+ 9DCB
1533+ 9DCB 3A 28 FA             ld a,(maze_highbyte)
1534+ 9DCE BC                   cp h                    ;are we at the top part of the maze?
1535+ 9DCF CA DA 9D             jp z,cont_2a
1536+ 9DD2                                              ;if we are on a different maze boundary
1537+ 9DD2                                              ;then draw a maze wall as we are the top
1538+ 9DD2                                              ;or north wall but maze data has no
1539+ 9DD2                                              ;wall data.
1540+ 9DD2
1541+ 9DD2 3E 01                ld a,1
1542+ 9DD4 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1543+ 9DD5 C6 7F                add a,127               ;make sure we set a wall!
1544+ 9DD7 C3 E1 9D             jp draw_11r             ;jump straight to making an end wall
1545+ 9DDA
1546+ 9DDA              ;*#########################################
1547+ 9DDA              cont_2a:
1548+ 9DDA 7E                   ld a,(hl)
1549+ 9DDB 17                   rla
1550+ 9DDC DA E1 9D             jp c,do_wall2r            ;bit 7 (128)
1551+ 9DDF
1552+ 9DDF
1553+ 9DDF              go_back2r:
1554+ 9DDF E1                   pop hl
1555+ 9DE0 C9                   ret
1556+ 9DE1              ;now do the 2nd position
1557+ 9DE1
1558+ 9DE1
1559+ 9DE1
1560+ 9DE1              do_wall2r:
1561+ 9DE1                      ;check if bit 2 is set as thats an end wall.
1562+ 9DE1                      ;and b must then be changed to 1 to stop drawing.
1563+ 9DE1              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1564+ 9DE1              ;        jr z,draw_11r
1565+ 9DE1              ;        ld b,1                  ;set b so we exit on return
1566+ 9DE1
1567+ 9DE1              ;?? 2020 do we need this??????
1568+ 9DE1              ;        ld a,(blockid)
1569+ 9DE1              ;        cp 16
1570+ 9DE1              ;        jp z,draw_11r           ;draw an endwall if blockid=16
1571+ 9DE1              ;        pop hl
1572+ 9DE1              ;        ret
1573+ 9DE1
1574+ 9DE1
1575+ 9DE1              draw_11r:
1576+ 9DE1              ;        push bc
1577+ 9DE1 D5                   push de                 ;save our display pointer
1578+ 9DE2 06 0E                ld b,14                  ;block is 14 blocks high
1579+ 9DE4 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1580+ 9DE7 3E B6                ld   a,_largewall            ;wall on sides facing us
1581+ 9DE9
1582+ 9DE9              ;draw 4 columns of bricks
1583+ 9DE9              loop13r:
1584+ 9DE9 12                   ld (de),a             ; insert the part of the wall.
1585+ 9DEA 13                   inc de
1586+ 9DEB 12                   ld (de),a               ;draw brick side
1587+ 9DEC 13                   inc de
1588+ 9DED 12                   ld (de),a
1589+ 9DEE 13                   inc de
1590+ 9DEF 12                   ld (de),a
1591+ 9DF0 13                   inc de
1592+ 9DF1 12                   ld (de),a
1593+ 9DF2 1B                   dec de
1594+ 9DF3 1B                   dec de
1595+ 9DF4 1B                   dec de
1596+ 9DF5 1B                   dec de
1597+ 9DF6 EB                   ex de,hl
1598+ 9DF7 19                   add  hl,de              ; advance to the next row of the display file.
1599+ 9DF8 EB                   ex de,hl
1600+ 9DF9 10 EE               djnz loop13r             ;do this 3 times
1601+ 9DFB
1602+ 9DFB
1603+ 9DFB
1604+ 9DFB                      ;now draw the blank face to the left of the block
1605+ 9DFB                      ;create first column of left face characters
1606+ 9DFB D1                   pop de                  ;back to our original position
1607+ 9DFC 1B                   dec de
1608+ 9DFD EB                   ex  de,hl
1609+ 9DFE 11 21 00             ld de,$0021
1610+ 9E01
1611+ 9E01 06 03                ld b,3                  ; for 4 face columns to draw to draw
1612+ 9E03 22 13 FA             ld (var5),hl
1613+ 9E06 3E 0D                ld a,13                 ; for 14 blocks high per column
1614+ 9E08 32 04 FA             ld (var1),a
1615+ 9E0B
1616+ 9E0B              ;draw the black sides
1617+ 9E0B              loop13br:
1618+ 9E0B C5                   push bc
1619+ 9E0C 3A 04 FA             ld a,(var1)
1620+ 9E0F 47                   ld b,a
1621+ 9E10 3E B2                ld a,_topcorner3
1622+ 9E12 77                   ld (hl),a
1623+ 9E13
1624+ 9E13              loop13ar:
1625+ 9E13 19                   add hl,de
1626+ 9E14 3E AF                ld  a,_black
1627+ 9E16 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1628+ 9E17 10 FA                djnz loop13ar
1629+ 9E19
1630+ 9E19 3E B1                ld  a,_topcorner2
1631+ 9E1B 77                   ld  (hl),a
1632+ 9E1C
1633+ 9E1C              ; now change the column count
1634+ 9E1C 3A 04 FA             ld a,(var1)
1635+ 9E1F D6 02                sub 2
1636+ 9E21 32 04 FA             ld (var1),a
1637+ 9E24 C1                   pop bc
1638+ 9E25
1639+ 9E25 2A 13 FA             ld hl,(var5)
1640+ 9E28 2B                   dec hl
1641+ 9E29 11 21 00             ld de,$21
1642+ 9E2C 19                   add hl,de
1643+ 9E2D 22 13 FA             ld (var5),hl
1644+ 9E30
1645+ 9E30 10 D9                djnz loop13br
1646+ 9E32
1647+ 9E32 18 AB                jr go_back2r              ; jump back to main loop
1648+ 9E34
1649+ 9E34
1650+ 9E34
1651+ 9E34              ;#############################################
1652+ 9E34              ;#############################################
1653+ 9E34              ; draw 1st layer right
1654+ 9E34              ;#############################################
1655+ 9E34              ;#############################################
1656+ 9E34
1657+ 9E34              draw_1r:
1658+ 9E34
1659+ 9E34              ; hl=maze location being drawn.
1660+ 9E34              ; now determine what to draw for this section.
1661+ 9E34
1662+ 9E34
1663+ 9E34 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1664+ 9E37
1665+ 9E37 CD 77 8B             call load_de            ;get left and right and front jump into de reg
1666+ 9E3A
1667+ 9E3A 19                   add hl,de               ;jump backwards along the user view 1 space
1668+ 9E3B 22 25 FA             ld (furthest_point),hl ;re save it
1669+ 9E3E
1670+ 9E3E 11 01 00             ld de,$0001             ;to move the display position +1
1671+ 9E41 ED 53 11 FA          ld (var4),de
1672+ 9E45
1673+ 9E45 ED 5B 0D FA          ld de,(right)
1674+ 9E49
1675+ 9E49              ;we need to move pointer 1 to the left for wall checking
1676+ 9E49 19                   add hl,de
1677+ 9E4A 22 15 FA             ld (var6),hl
1678+ 9E4D
1679+ 9E4D              ;        ld de,$0001             ;to move the display position +1
1680+ 9E4D ED 53 0F FA          ld (var3),de
1681+ 9E51 11 38 00             ld  de,$038           ; offset to row 1 column 0 - left of  centre of the 3d view.
1682+ 9E54 CD 5A 9E             call do_draw_1r
1683+ 9E57
1684+ 9E57
1685+ 9E57 C3 CA 9E             jp draw_0r           ;now draw the 2nd level
1686+ 9E5A
1687+ 9E5A              do_draw_1r:
1688+ 9E5A
1689+ 9E5A 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
1690+ 9E5D 19                   add  hl,de
1691+ 9E5E
1692+ 9E5E 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1693+ 9E60                                              ; 0 is not counted so loops 12 times
1694+ 9E60 ED 5B 15 FA          ld de,(var6)
1695+ 9E64 EB                   ex   de,hl              ; transfer de to hl.
1696+ 9E65
1697+ 9E65              ;       hl = furthest point in the maze
1698+ 9E65              ;       de = d_file location to store byte to display
1699+ 9E65
1700+ 9E65 E5           loop15r: push hl
1701+ 9E66
1702+ 9E66              ;*#########################################
1703+ 9E66              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1704+ 9E66
1705+ 9E66 3A 28 FA             ld a,(maze_highbyte)
1706+ 9E69 BC                   cp h                    ;are we at the top part of the maze?
1707+ 9E6A CA 75 9E             jp z,cont_1a
1708+ 9E6D                                              ;if we are on a different maze boundary
1709+ 9E6D                                              ;then draw a maze wall as we are the top
1710+ 9E6D                                              ;or north wall but maze data has no
1711+ 9E6D                                              ;wall data.
1712+ 9E6D
1713+ 9E6D 3E 01                ld a,1
1714+ 9E6F 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1715+ 9E70 C6 7F                add a,127               ;make sure we set a wall!
1716+ 9E72 C3 82 9E             jp draw_12r             ;jump straight to making an end wall
1717+ 9E75
1718+ 9E75              ;*#########################################
1719+ 9E75              cont_1a:
1720+ 9E75 7E                   ld a,(hl)
1721+ 9E76 17                   rla
1722+ 9E77 DA 7C 9E             jp c,do_wall1r            ;bit 7 (128)
1723+ 9E7A
1724+ 9E7A              go_back1r:
1725+ 9E7A E1                   pop hl
1726+ 9E7B C9                   ret
1727+ 9E7C
1728+ 9E7C              do_wall1r:
1729+ 9E7C                      ;check if bit 2 is set as thats an end
1730+ 9E7C                      ;and b must then be changed to 1 to stop drawing.
1731+ 9E7C
1732+ 9E7C CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1733+ 9E7E 28 02                jr z,draw_12r
1734+ 9E80 06 01                ld b,1                  ;set b so we exit on return
1735+ 9E82
1736+ 9E82              ;**** Whats this for? Does it work!
1737+ 9E82
1738+ 9E82              ;        ld a,(blockid)
1739+ 9E82              ;        cp 16
1740+ 9E82              ;        jp z,draw_12r           ;draw an end wall if blockid=16
1741+ 9E82              ;        pop hl
1742+ 9E82              ;        ret
1743+ 9E82
1744+ 9E82
1745+ 9E82              ;draw the corridor bit to the left (1 column)
1746+ 9E82              draw_12r:
1747+ 9E82 D5                   push de                 ;save our display pointer
1748+ 9E83 06 16                ld b,22                  ;block is 22 blocks high
1749+ 9E85 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1750+ 9E88 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1751+ 9E8A              loop16r:                        ; insert thepart of the wall.
1752+ 9E8A 13                   inc de
1753+ 9E8B 12                   ld (de),a               ;put grey side to our right
1754+ 9E8C 1B                   dec de
1755+ 9E8D EB                   ex de,hl
1756+ 9E8E 19                   add  hl,de              ; advance to the next row of the display file.
1757+ 9E8F EB                   ex de,hl
1758+ 9E90 10 F8                djnz loop16r             ;do this 3 times
1759+ 9E92
1760+ 9E92                      ;now draw the blank face to the right of the block
1761+ 9E92                      ;create first column of right face characters
1762+ 9E92 D1                   pop de                  ;back to our original position
1763+ 9E93 EB                   ex  de,hl
1764+ 9E94 11 21 00             ld de,$0021
1765+ 9E97
1766+ 9E97              ;now draw the face we see on our left as we walk forward
1767+ 9E97 06 04                ld b,4                  ; for 8 face columns to draw to draw
1768+ 9E99 22 13 FA             ld (var5),hl
1769+ 9E9C 3E 15                ld a,21                 ; for 14 blocks high per column
1770+ 9E9E 32 04 FA             ld (var1),a
1771+ 9EA1
1772+ 9EA1              loop14br:
1773+ 9EA1 C5                   push bc
1774+ 9EA2 3A 04 FA             ld a,(var1)
1775+ 9EA5 47                   ld b,a
1776+ 9EA6 3E B2                ld a,_topcorner3
1777+ 9EA8 77                   ld (hl),a
1778+ 9EA9
1779+ 9EA9              loop14ar:
1780+ 9EA9 19                   add hl,de
1781+ 9EAA 3E AF                ld  a,_black            ;triangle sloping to right bottom
1782+ 9EAC 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1783+ 9EAD 10 FA                djnz loop14ar
1784+ 9EAF
1785+ 9EAF 3E B1                ld  a,_topcorner2
1786+ 9EB1 77                   ld  (hl),a
1787+ 9EB2
1788+ 9EB2              ; now change the column count
1789+ 9EB2 3A 04 FA             ld a,(var1)
1790+ 9EB5 D6 02                sub 2
1791+ 9EB7 32 04 FA             ld (var1),a
1792+ 9EBA C1                   pop bc
1793+ 9EBB
1794+ 9EBB 2A 13 FA             ld hl,(var5)
1795+ 9EBE 2B                   dec hl
1796+ 9EBF 11 21 00             ld de,$21
1797+ 9EC2 19                   add hl,de
1798+ 9EC3 22 13 FA             ld (var5),hl
1799+ 9EC6
1800+ 9EC6 10 D9                djnz loop14br
1801+ 9EC8
1802+ 9EC8 18 B0                jr go_back1r              ; jump back to main loop
1803+ 9ECA
1804+ 9ECA
1805+ 9ECA              ;#############################################
1806+ 9ECA              ;#############################################
1807+ 9ECA              ; draw layer 0 right
1808+ 9ECA              ;#############################################
1809+ 9ECA              ;#############################################
1810+ 9ECA
1811+ 9ECA              draw_0r:
1812+ 9ECA              ;ret
1813+ 9ECA
1814+ 9ECA
1815+ 9ECA              ; hl=maze location being drawn.
1816+ 9ECA              ; now determine what to draw for this section.
1817+ 9ECA
1818+ 9ECA 2A 25 FA             ld   hl,(furthest_point); retrieve the maze location.
1819+ 9ECD
1820+ 9ECD CD 77 8B             call load_de
1821+ 9ED0
1822+ 9ED0              ;**think we can lose these 2 lines.
1823+ 9ED0                                  ;get left and right and front jump into de reg
1824+ 9ED0 19                   add  hl,de
1825+ 9ED1
1826+ 9ED1              ;need to move pointer right for wall checking
1827+ 9ED1 ED 5B 0D FA          ld de,(right)
1828+ 9ED5 19                   add hl,de
1829+ 9ED6 22 15 FA             ld (var6),hl
1830+ 9ED9
1831+ 9ED9 ED 53 0F FA          ld (var3),de
1832+ 9EDD 11 18 00             ld  de,$18              ;offset to row0 column 24 - left of  centre of the 3d view.
1833+ 9EE0                                              ;1 column of left face to draw
1834+ 9EE0              ;draw the wall
1835+ 9EE0 2A 55 81             ld   hl,(d_file)        ; fetch the location of the display file.
1836+ 9EE3 19                   add  hl,de
1837+ 9EE4
1838+ 9EE4
1839+ 9EE4 ED 5B 15 FA          ld   de,(var6)
1840+ 9EE8 EB                   ex   de,hl              ; transfer de to hl.
1841+ 9EE9
1842+ 9EE9
1843+ 9EE9              loop17r:
1844+ 9EE9
1845+ 9EE9              ;*#########################################
1846+ 9EE9              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1847+ 9EE9
1848+ 9EE9 3A 28 FA             ld a,(maze_highbyte)
1849+ 9EEC BC                   cp h                    ;are we at the top part of the maze?
1850+ 9EED CA F8 9E             jp z,cont_0a
1851+ 9EF0                                              ;if we are on a different maze boundary
1852+ 9EF0                                              ;then draw a maze wall as we are the top
1853+ 9EF0                                              ;or north wall but maze data has no
1854+ 9EF0                                              ;wall data.
1855+ 9EF0
1856+ 9EF0 3E 01                ld a,1
1857+ 9EF2 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1858+ 9EF3 C6 7F                add a,127               ;make sure we set a wall!
1859+ 9EF5 C3 06 9F             jp draw_13r             ;jump straight to making an end wall
1860+ 9EF8
1861+ 9EF8              ;*#########################################
1862+ 9EF8              cont_0a:
1863+ 9EF8 7E                   ld a,(hl)
1864+ 9EF9 17                   rla
1865+ 9EFA DA FE 9E             jp c,do_wall0r           ;bit 7 (128)
1866+ 9EFD C9                   ret
1867+ 9EFE
1868+ 9EFE
1869+ 9EFE              do_wall0r:
1870+ 9EFE                      ;check if bit 2 is set as thats an end wall
1871+ 9EFE                      ;and b must then be changed to 1 to stop drawing.
1872+ 9EFE
1873+ 9EFE CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1874+ 9F00 DA 06 9F             jp c,draw_13r          ;yes if bit 2 = 1
1875+ 9F03 C3 1D 9F             jp draw_wall0r           ;its a wall but not a side wall.
1876+ 9F06
1877+ 9F06
1878+ 9F06
1879+ 9F06
1880+ 9F06              ;we need to draw 1 vertical line from pos 1,1 to show
1881+ 9F06              ;the side of the block.
1882+ 9F06
1883+ 9F06              ;draw sidewall brick pattern
1884+ 9F06              draw_13r:
1885+ 9F06 3E B2                ld a,_topcorner3
1886+ 9F08 EB                   ex de,hl
1887+ 9F09
1888+ 9F09 77                   ld (hl),a
1889+ 9F0A 11 21 00             ld de,$21                ;jp to next line below
1890+ 9F0D 19                   add hl,de
1891+ 9F0E 06 16                ld b,22                  ;block is 22 blocks high
1892+ 9F10 11 21 00             ld de,$021           ;load with 32 to jump to line below us
1893+ 9F13 3E AF                ld a,_black            ;wall on sides facing us;
1894+ 9F15              loop18r:
1895+ 9F15 77                   ld (hl),a             ; insert the part of the wall.
1896+ 9F16 19                   add  hl,de              ; advance to the next row of the display file.
1897+ 9F17 10 FC                djnz loop18r
1898+ 9F19
1899+ 9F19              ;###this bit causes the direction indicator to fail
1900+ 9F19 3E B1                ld a,_topcorner2
1901+ 9F1B 77                   ld (hl),a
1902+ 9F1C C9                   ret                     ;return to main program
1903+ 9F1D
1904+ 9F1D              draw_wall0r:                     ;draw brick pattern only
1905+ 9F1D
1906+ 9F1D 11 21 00             ld de,$21                ;jp to next line below
1907+ 9F20 19                   add hl,de
1908+ 9F21                     ; ex de,hl
1909+ 9F21
1910+ 9F21 06 16                ld b,22                  ;block is 24 blocks high
1911+ 9F23 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
1912+ 9F26 3E B6                ld a,_largewall            ;wall on sides facing us;
1913+ 9F28              loop19r:
1914+ 9F28 77                   ld (hl),a             ; insert the part of the wall.
1915+ 9F29                     ; ex de,hl
1916+ 9F29 19                   add  hl,de              ; advance to the next row of the display file.
1917+ 9F2A                     ; ex de,hl
1918+ 9F2A 10 FC                djnz loop19r
1919+ 9F2C
1920+ 9F2C C9                   ret                     ;return to main program
1921+ 9F2D
# file closed: src/6-rd3dmazeV6.asm
 421  9F2D
 422  9F2D              ;#####################################################
 423  9F2D
 424  9F2D
 425  9F2D              ;###################################################
 426  9F2D              ; Get Keystroke Routine from Your Sinclair Magazine
 427  9F2D              ; From Your Sinclair #22 (Oct.1987)
 428  9F2D              ;###################################################
 429  9F2D
 430  9F2D
 431  9F2D              get_keys:
 432  9F2D               ;
 433  9F2D               ;      YS_KEYS
 434  9F2D               ;
 435  9F2D               ;A,HL,DE corrupt
 436  9F2D               ;B=0, key in C
 437  9F2D
 438  9F2D
 439  9F2D               ;Keyboard Scanning
 440  9F2D               ;by Pete Cooke
 441  9F2D               ;from Your Sinclair #22 (Oct.1987)
 442  9F2D
 443  9F2D               ;prog for Your Sinclair
 444  9F2D               ;
 445  9F2D               ;file for Hisoft GENS
 446  9F2D               ;assembler but should
 447  9F2D               ;be suitable for most
 448  9F2D               ;assemblers on the market
 449  9F2D               ;
 450  9F2D               ;Reads the keyboard
 451  9F2D               ;Returns with C
 452  9F2D               ;holding L/R/U/D/F
 453  9F2D               ;
 454  9F2D               ;bit 4,C left
 455  9F2D               ;bit 3,C right
 456  9F2D               ;bit 2,C up
 457  9F2D               ;bit 1,C down
 458  9F2D               ;bit 0,C fire
 459  9F2D               ;
 460  9F2D               ;bit set to 1 if pressed
 461  9F2D               ;
 462  9F2D               ;keys are chosen by
 463  9F2D               ;values in KEYTAB
 464  9F2D               ;
 465  9F2D 21 74 9F     readke  ld   hl,keytab
 466  9F30 01 00 05             ld   bc,$0500
 467  9F33               ;
 468  9F33               ;5 keys to read
 469  9F33               ;
 470  9F33 7E           read_1  ld   a,(hl)
 471  9F34 1F                   rra
 472  9F35 1F                   rra
 473  9F36 E6 1E                and  $1e
 474  9F38 5F                   ld   e,a
 475  9F39 16 00                ld   d,0
 476  9F3B               ;
 477  9F3B               ;2*the row number
 478  9F3B               ;
 479  9F3B 7E                   ld   a,(hl)
 480  9F3C 23                   inc  hl
 481  9F3D E5                   push hl
 482  9F3E               ;
 483  9F3E               ;save place in KEYTAB
 484  9F3E               ;
 485  9F3E 21 62 9F             ld   hl,keyadd
 486  9F41 19                   add  hl,de
 487  9F42 57                   ld   d,a
 488  9F43               ;
 489  9F43               ;index port addresses
 490  9F43               ;
 491  9F43 C5                   push bc
 492  9F44 4E                   ld   c,(hl)
 493  9F45 23                   inc  hl
 494  9F46 46                   ld   b,(hl)
 495  9F47 ED 78                in   a,(c)
 496  9F49 04                   inc  b
 497  9F4A 05                   dec  b
 498  9F4B 28 01                jr   z,read_2
 499  9F4D 2F                   cpl
 500  9F4E 5F           read_2  ld   e,a
 501  9F4F               ;
 502  9F4F               ;read the port
 503  9F4F               ;and flip bits if not
 504  9F4F               ;Kempston
 505  9F4F               ;
 506  9F4F C1                   pop  bc
 507  9F50 E1                   pop  hl
 508  9F51               ;
 509  9F51               ;and get back BC+HL
 510  9F51               ;
 511  9F51 7A                   ld   a,d
 512  9F52 E6 07                and  $07
 513  9F54 28 05                jr   z,read_4
 514  9F56               ;
 515  9F56 CB 1B        read_3  rr   e
 516  9F58 3D                   dec  a
 517  9F59 20 FB                jr   nz,read_3
 518  9F5B               ;
 519  9F5B               ;rotate L so bit needed
 520  9F5B               ;is in bit 0
 521  9F5B               ;
 522  9F5B CB 1B        read_4  rr   e
 523  9F5D CB 11                rl   c
 524  9F5F               ;
 525  9F5F               ;rotate the bit into C
 526  9F5F               ;
 527  9F5F 10 D2                djnz read_1
 528  9F61 C9                   ret
 529  9F62               ;
 530  9F62               ;exit B=0
 531  9F62               ;     C=keys
 532  9F62               ;
 533  9F62               ;A,HL,DE corrupt
 534  9F62               ;
 535  9F62               ;
 536  9F62               ;port addresses of
 537  9F62               ;the keyboard rows
 538  9F62               ;
 539  9F62 FE F7 FE FB  keyadd dw 63486,64510,65022,65278,61438,57342,49150,32766
 539  9F66 FE FD FE FE
 539  9F6A FE EF FE DF
 539  9F6E FE BF FE 7F
 540  9F72 1F 00                dw 31 ;*Kempston*
 541  9F74               ;
 542  9F74               ;
 543  9F74               ;KEYTAB holds the position
 544  9F74               ;of each key as
 545  9F74               ;1/2 row number*8 plus
 546  9F74               ;distance from the edge
 547  9F74               ;eg. P = 5*8+0
 548  9F74               ;    O = 5*8+1
 549  9F74               ;    Q = 1*8+0
 550  9F74               ;    4 = 0*8+3
 551  9F74               ;
 552  9F74 04 24 23 22  keytab db 0*8+4,4*8+4,4*8+3,4*8+2,4*8+0
 552  9F78 20
 553  9F79               ;           5      6     7      8   0
 554  9F79               ;;bit values: 1 = 0 fire
 555  9F79               ;             2 = 8 right
 556  9F79               ;             4 = 7 up
 557  9F79               ;             8 = 6 down
 558  9F79               ;            16 = 5 left
 559  9F79
 560  9F79              ; keytab db 5*8+1,5*8+0,2*8+1,3*8+2,7*8+0
 561  9F79               ;
 562  9F79               ;set for O,P,S,X,space
 563  9F79               ;
 564  9F79               ;for a Kempston joystick
 565  9F79               ;substitute
 566  9F79               ;
 567  9F79               ;       db 8*8+1,8*8+0,8*8+3,8*8+2,8*8+4
 568  9F79               ;
 569  9F79 00           end_k nop
 570  9F7A
 571  9F7A              ;##############################################
 572  9F7A              ;##############################################
 573  9F7A
 574  9F7A              ;set map - sets hl to start of map to draw
 575  9F7A              ;a holds the map number = 0 to 15
 576  9F7A
 577  9F7A              set_map:
 578  9F7A
 579  9F7A 21 00 A3             ld hl,map_0             ;start of map data 256 bytes each
 580  9F7D 32 22 FA             ld (cur_map),a          ;save our cur map
 581  9F80 22 23 FA             ld (map_start),hl
 582  9F83
 583  9F83 3D                   dec a
 584  9F84 3C                   inc a                   ;exit if its map 0
 585  9F85
 586  9F85 7C                   ld a,h
 587  9F86 32 28 FA             ld (maze_highbyte),a
 588  9F89 C8                   ret z       ;if a is 0, just return for map_0
 589  9F8A
 590  9F8A 3A 22 FA             ld a,(cur_map)
 591  9F8D 24           loop3   inc h                   ; times by 256
 592  9F8E 3D                   dec a
 593  9F8F 20 FC                jr nz, loop3
 594  9F91 22 23 FA             ld (map_start),hl
 595  9F94 7C                   ld a, h
 596  9F95 32 28 FA             ld (maze_highbyte),a
 597  9F98 C9                   ret
 598  9F99
 599  9F99              ;#################################################################
 600  9F99              ;Character screen reservation
 601  9F99                      org $c000
 602  C000 00 00 00...  char_screen:   block 768    ;view screen built here from characters
 603  C300
 604  C300 00 00 00...  attr_screen:   block 768    ;colours held here for door animation
 605  C600
 606  C600              ;################################################
 607  C600
 608  C600
 609  C600              ;reserved for the stack - 440 bytes
 610  C600              ;64046 to 64486 or 64511
 611  C600
 612  C600
 613  C600              ;##############################################
 614  C600              ; Alternate Character set
 615  C600              ;from https://www.jimblimey.com/blog/24-zx-spectrum-fonts/
 616  C600              ;##############################################
 617  C600              charset_1:
 618  C600 00 00 00 00    defb 0,0,0,0,0,0,0,0
 618  C604 00 00 00 00
 619  C608 10 38 38 38    defb 16,56,56,56,16,0,16,0
 619  C60C 10 00 10 00
 620  C610 66 33 33 00    defb 102,51,51,0,0,0,0,0
 620  C614 00 00 00 00
 621  C618 66 66 FF 66    defb 102,102,255,102,102,255,102,102
 621  C61C 66 FF 66 66
 622  C620 14 7E D4 7E    defb 20,126,212,126,149,126,20,0
 622  C624 95 7E 14 00
 623  C628 60 94 68 10    defb 96,148,104,16,44,82,140,0
 623  C62C 2C 52 8C 00
 624  C630 30 48 30 48    defb 48,72,48,72,142,140,120,0
 624  C634 8E 8C 78 00
 625  C638 0C 0C 18 00    defb 12,12,24,0,0,0,0,0
 625  C63C 00 00 00 00
 626  C640 01 02 04 04    defb 1,2,4,4,4,4,2,1
 626  C644 04 04 02 01
 627  C648 80 40 20 20    defb 128,64,32,32,32,32,64,128
 627  C64C 20 20 40 80
 628  C650 00 54 38 FE    defb 0,84,56,254,56,84,0,0
 628  C654 38 54 00 00
 629  C658 00 18 18 7E    defb 0,24,24,126,24,24,0,0
 629  C65C 18 18 00 00
 630  C660 00 00 00 00    defb 0,0,0,0,0,0,48,96
 630  C664 00 00 30 60
 631  C668 00 00 00 7E    defb 0,0,0,126,0,0,0,0
 631  C66C 00 00 00 00
 632  C670 00 00 00 00    defb 0,0,0,0,0,0,48,0
 632  C674 00 00 30 00
 633  C678 01 02 04 08    defb 1,2,4,8,16,32,64,128
 633  C67C 10 20 40 80
 634  C680 7C 86 8A 92    defb 124,134,138,146,162,194,124,0
 634  C684 A2 C2 7C 00
 635  C688 10 30 70 10    defb 16,48,112,16,16,16,124,0
 635  C68C 10 10 7C 00
 636  C690 78 84 08 30    defb 120,132,8,48,64,128,252,0
 636  C694 40 80 FC 00
 637  C698 78 84 04 38    defb 120,132,4,56,4,132,120,0
 637  C69C 04 84 78 00
 638  C6A0 80 44 48 48    defb 128,68,72,72,252,8,8,0
 638  C6A4 FC 08 08 00
 639  C6A8 FE 80 80 7C    defb 254,128,128,124,2,130,124,0
 639  C6AC 02 82 7C 00
 640  C6B0 7A 84 80 BC    defb 122,132,128,188,194,130,124,0
 640  C6B4 C2 82 7C 00
 641  C6B8 FE 84 08 10    defb 254,132,8,16,56,16,16,0
 641  C6BC 38 10 10 00
 642  C6C0 7C 82 7C 82    defb 124,130,124,130,130,130,124,0
 642  C6C4 82 82 7C 00
 643  C6C8 7C 82 86 7A    defb 124,130,134,122,2,130,124,0
 643  C6CC 02 82 7C 00
 644  C6D0 00 30 00 00    defb 0,48,0,0,0,48,0,0
 644  C6D4 00 30 00 00
 645  C6D8 00 30 00 00    defb 0,48,0,0,0,48,32,0
 645  C6DC 00 30 20 00
 646  C6E0 08 10 20 40    defb 8,16,32,64,32,16,8,0
 646  C6E4 20 10 08 00
 647  C6E8 00 00 7E 00    defb 0,0,126,0,126,0,0,0
 647  C6EC 7E 00 00 00
 648  C6F0 20 10 08 04    defb 32,16,8,4,8,16,32,0
 648  C6F4 08 10 20 00
 649  C6F8 7C 82 04 08    defb 124,130,4,8,16,0,16,0
 649  C6FC 10 00 10 00
 650  C700 7C 82 9A AA    defb 124,130,154,170,170,158,124,0
 650  C704 AA 9E 7C 00
 651  C708 F8 44 42 FE    defb 248,68,66,254,66,66,198,0
 651  C70C 42 42 C6 00
 652  C710 FC 42 42 FC    defb 252,66,66,252,66,66,252,0
 652  C714 42 42 FC 00
 653  C718 7A 84 80 80    defb 122,132,128,128,128,130,124,0
 653  C71C 80 82 7C 00
 654  C720 FC 42 42 42    defb 252,66,66,66,66,66,252,0
 654  C724 42 42 FC 00
 655  C728 FE 42 40 70    defb 254,66,64,112,192,66,254,0
 655  C72C C0 42 FE 00
 656  C730 FE 42 40 70    defb 254,66,64,112,192,64,224,0
 656  C734 C0 40 E0 00
 657  C738 7A 84 80 80    defb 122,132,128,128,156,130,126,2
 657  C73C 9C 82 7E 02
 658  C740 82 44 44 5E    defb 130,68,68,94,244,68,130,0
 658  C744 F4 44 82 00
 659  C748 10 08 08 08    defb 16,8,8,8,8,8,4,0
 659  C74C 08 08 04 00
 660  C750 7E 08 04 04    defb 126,8,4,4,4,132,120,0
 660  C754 04 84 78 00
 661  C758 CC 44 48 F0    defb 204,68,72,240,72,68,198,0
 661  C75C 48 44 C6 00
 662  C760 C0 40 40 40    defb 192,64,64,64,64,66,254,0
 662  C764 40 42 FE 00
 663  C768 C6 6A 5A 4A    defb 198,106,90,74,74,66,198,0
 663  C76C 4A 42 C6 00
 664  C770 CC 64 54 54    defb 204,100,84,84,84,84,204,0
 664  C774 54 54 CC 00
 665  C778 78 84 84 84    defb 120,132,132,132,132,132,120,0
 665  C77C 84 84 78 00
 666  C780 F8 44 44 F8    defb 248,68,68,248,64,64,224,0
 666  C784 40 40 E0 00
 667  C788 78 84 84 84    defb 120,132,132,132,132,140,125,2
 667  C78C 84 8C 7D 02
 668  C790 FC 42 42 FC    defb 252,66,66,252,66,66,198,0
 668  C794 42 42 C6 00
 669  C798 74 88 80 78    defb 116,136,128,120,4,132,120,0
 669  C79C 04 84 78 00
 670  C7A0 7C 54 10 10    defb 124,84,16,16,16,16,48,0
 670  C7A4 10 10 30 00
 671  C7A8 C6 44 44 82    defb 198,68,68,130,130,130,124,0
 671  C7AC 82 82 7C 00
 672  C7B0 CC 44 44 44    defb 204,68,68,68,68,40,16,0
 672  C7B4 44 28 10 00
 673  C7B8 C6 42 42 4A    defb 198,66,66,74,90,106,204,0
 673  C7BC 5A 6A CC 00
 674  C7C0 82 44 28 10    defb 130,68,40,16,40,68,130,0
 674  C7C4 28 44 82 00
 675  C7C8 CC 44 44 38    defb 204,68,68,56,16,16,48,0
 675  C7CC 10 10 30 00
 676  C7D0 FE 84 08 10    defb 254,132,8,16,32,66,254,0
 676  C7D4 20 42 FE 00
 677  C7D8 1C 10 10 10    defb 28,16,16,16,16,16,28,0
 677  C7DC 10 10 1C 00
 678  C7E0 80 40 20 10    defb 128,64,32,16,8,4,2,1
 678  C7E4 08 04 02 01
 679  C7E8 38 08 08 08    defb 56,8,8,8,8,8,56,0
 679  C7EC 08 08 38 00
 680  C7F0 00 00 10 38    defb 0,0,16,56,108,198,0,0
 680  C7F4 6C C6 00 00
 681  C7F8 00 00 00 00    defb 0,0,0,0,0,0,0,255
 681  C7FC 00 00 00 FF
 682  C800 30 30 18 00    defb 48,48,24,0,0,0,0,0
 682  C804 00 00 00 00
 683  C808 00 00 7A 04    defb 0,0,122,4,124,132,122,0
 683  C80C 7C 84 7A 00
 684  C810 80 40 40 5C    defb 128,64,64,92,98,66,188,0
 684  C814 62 42 BC 00
 685  C818 00 00 7A 84    defb 0,0,122,132,128,130,124,0
 685  C81C 80 82 7C 00
 686  C820 02 04 74 8C    defb 2,4,116,140,132,132,122,0
 686  C824 84 84 7A 00
 687  C828 00 00 BC 42    defb 0,0,188,66,124,64,62,0
 687  C82C 7C 40 3E 00
 688  C830 34 48 40 E0    defb 52,72,64,224,64,64,128,0
 688  C834 40 40 80 00
 689  C838 00 00 7A 84    defb 0,0,122,132,140,116,4,120
 689  C83C 8C 74 04 78
 690  C840 80 40 78 44    defb 128,64,120,68,68,68,136,0
 690  C844 44 44 88 00
 691  C848 10 00 10 08    defb 16,0,16,8,8,8,4,0
 691  C84C 08 08 04 00
 692  C850 00 10 00 10    defb 0,16,0,16,8,8,136,112
 692  C854 08 08 88 70
 693  C858 C0 40 48 50    defb 192,64,72,80,224,80,200,0
 693  C85C E0 50 C8 00
 694  C860 30 10 10 10    defb 48,16,16,16,16,16,56,0
 694  C864 10 10 38 00
 695  C868 00 00 AC 54    defb 0,0,172,84,84,68,204,0
 695  C86C 54 44 CC 00
 696  C870 00 00 B8 44    defb 0,0,184,68,68,68,204,0
 696  C874 44 44 CC 00
 697  C878 00 00 78 84    defb 0,0,120,132,132,132,120,0
 697  C87C 84 84 78 00
 698  C880 00 00 B8 44    defb 0,0,184,68,68,120,64,128
 698  C884 44 78 40 80
 699  C888 00 00 74 88    defb 0,0,116,136,136,120,4,2
 699  C88C 88 78 04 02
 700  C890 00 00 B0 48    defb 0,0,176,72,64,64,64,0
 700  C894 40 40 40 00
 701  C898 00 00 78 80    defb 0,0,120,128,112,8,240,0
 701  C89C 70 08 F0 00
 702  C8A0 00 20 10 7C    defb 0,32,16,124,16,16,8,0
 702  C8A4 10 10 08 00
 703  C8A8 00 00 90 48    defb 0,0,144,72,132,132,120,0
 703  C8AC 84 84 78 00
 704  C8B0 00 00 82 44    defb 0,0,130,68,68,40,16,0
 704  C8B4 44 28 10 00
 705  C8B8 00 00 84 42    defb 0,0,132,66,82,106,70,0
 705  C8BC 52 6A 46 00
 706  C8C0 00 00 88 50    defb 0,0,136,80,32,80,136,0
 706  C8C4 20 50 88 00
 707  C8C8 00 00 82 44    defb 0,0,130,68,68,60,4,120
 707  C8CC 44 3C 04 78
 708  C8D0 00 00 7C 88    defb 0,0,124,136,48,68,248,0
 708  C8D4 30 44 F8 00
 709  C8D8 0E 10 10 60    defb 14,16,16,96,16,16,14,0
 709  C8DC 10 10 0E 00
 710  C8E0 18 18 18 00    defb 24,24,24,0,24,24,24,0
 710  C8E4 18 18 18 00
 711  C8E8 E0 10 10 0C    defb 224,16,16,12,16,16,224,0
 711  C8EC 10 10 E0 00
 712  C8F0 00 00 70 9A    defb 0,0,112,154,12,0,0,0
 712  C8F4 0C 00 00 00
 713  C8F8 00 00 18 3C    defb 0,0,24,60,102,255,0,0
 713  C8FC 66 FF 00 00
 714  C900
 715  C900
 716  C900
 717  C900                  include 7-rd3dmazeV6.asm    ;the maze itself and other routines
# file opened: src/7-rd3dmazeV6.asm
   1+ C900              ;this is the maze data and colour exit routine
   2+ C900
   3+ C900              ;##########################################################
   4+ C900              ;maze data
   5+ C900
   6+ C900                      org $a300   ;41728
   7+ A300
   8+ A300              ;################################################################
   9+ A300              ; maze data
  10+ A300              ;################################################################
  11+ A300
  12+ A300              ; the maze lies on a page boundary, allowing the code to check only the low byte of its address.
  13+ A300              ; the maze is 18 positions north-to-south (rows 0 to 17) and 16 positions west-to-east (columns 0 to 15).
  14+ A300              ;
  15+ A300              ;    n
  16+ A300              ;    |
  17+ A300              ; w -+- e
  18+ A300              ;    |
  19+ A300              ;    s
  20+ A300              ;
  21+ A300              ; key: x=wall, space=passageway, e=exit.
  22+ A300
  23+ A300
  24+ A300                 ;   org 34288 ;($85F0) for maze start
  25+ A300
  26+ A300                     ; org 28928               ;$7100 256 byte boundary
  27+ A300
  28+ A300              ;#####################################################################################
  29+ A300              ;This is our 16 Maze's maze data = numbered 0 to 15
  30+ A300              ;#####################################################################################
  31+ A300
  32+ A300              ; maze constants
  33+ A300              ; --------------
  34+ A300              ; the code for the wall must have bit 7 set whereas the other codes must have bit 7 reset.
  35+ A300
  36+ A300              _mw     equ  128                 ; wall.
  37+ A300              _mp     equ  32                  ; passageway.
  38+ A300              ;_mr     equ  82                  ; rex.
  39+ A300              _me     equ  192   ;bin 11000000 ; exit.
  40+ A300              _sp     equ  32
  41+ A300              _mh     equ  129                 ;seperator or end wall
  42+ A300              _ms     equ  160   ;bin 10100000 ;switch
  43+ A300
  44+ A300
  45+ A300              ; _mh - outside wall
  46+ A300              ; _mw - inner maze wall
  47+ A300              ; _mp - space=passageway
  48+ A300              ; _me - exit door
  49+ A300              ; _ms - switch
  50+ A300              ; maze starts at 34288 on a 256 byte boundary
  51+ A300
  52+ A300              ;col  1    2     3    4    5   6    7   8    9    10   11   12   13   14   15   16
  53+ A300              map_0:
  54+ A300 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  54+ A304 20 20 20 20
  54+ A308 20 20 20 20
  54+ A30C 20 20 20 20
  55+ A310 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;2
  55+ A314 80 20 80 20
  55+ A318 80 20 80 20
  55+ A31C 80 20 80 20
  56+ A320 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  56+ A324 20 20 20 20
  56+ A328 20 20 20 20
  56+ A32C 20 20 20 20
  57+ A330 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;4
  57+ A334 80 20 80 20
  57+ A338 80 20 80 20
  57+ A33C 80 20 80 20
  58+ A340 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  58+ A344 20 20 20 20
  58+ A348 20 20 20 20
  58+ A34C 20 20 20 20
  59+ A350 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;6
  59+ A354 80 20 80 20
  59+ A358 80 20 80 20
  59+ A35C 80 20 80 20
  60+ A360 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  60+ A364 80 80 80 20
  60+ A368 20 20 20 20
  60+ A36C 20 20 20 20
  61+ A370 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;8
  61+ A374 80 20 20 20
  61+ A378 80 20 80 20
  61+ A37C 80 20 80 20
  62+ A380 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _me, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  62+ A384 20 20 C0 80
  62+ A388 20 20 20 20
  62+ A38C 20 20 20 20
  63+ A390 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;10
  63+ A394 80 20 80 20
  63+ A398 20 20 80 80
  63+ A39C 20 20 80 20
  64+ A3A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _me, _mw, _mp, _mp, _mp ;11
  64+ A3A4 20 20 20 20
  64+ A3A8 80 20 20 C0
  64+ A3AC 80 20 20 20
  65+ A3B0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;12
  65+ A3B4 80 20 80 20
  65+ A3B8 20 20 80 80
  65+ A3BC 20 20 80 20
  66+ A3C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  66+ A3C4 20 20 20 20
  66+ A3C8 20 20 20 20
  66+ A3CC 20 20 20 20
  67+ A3D0 81 20 C0 20   db _mh, _mp, _me, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;14
  67+ A3D4 80 20 80 20
  67+ A3D8 80 20 80 20
  67+ A3DC 80 20 80 20
  68+ A3E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  68+ A3E4 20 20 20 20
  68+ A3E8 20 20 20 20
  68+ A3EC 20 20 20 20
  69+ A3F0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;16
  69+ A3F4 80 20 80 20
  69+ A3F8 80 20 80 20
  69+ A3FC 80 20 80 20
  70+ A400
  71+ A400              map_1:
  72+ A400 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  72+ A404 20 20 20 20
  72+ A408 20 20 20 20
  72+ A40C 20 20 20 20
  73+ A410 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;2
  73+ A414 20 20 20 20
  73+ A418 20 80 20 20
  73+ A41C 20 20 20 20
  74+ A420 81 C0 20 80   db _mh, _me, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  74+ A424 20 80 80 80
  74+ A428 20 20 20 20
  74+ A42C 20 20 20 20
  75+ A430 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;4
  75+ A434 20 20 20 20
  75+ A438 20 80 20 20
  75+ A43C 20 20 20 20
  76+ A440 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  76+ A444 20 20 80 20
  76+ A448 20 20 20 20
  76+ A44C 20 20 20 20
  77+ A450 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  77+ A454 20 80 80 80
  77+ A458 20 80 20 20
  77+ A45C 20 20 20 20
  78+ A460 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  78+ A464 20 80 20 20
  78+ A468 20 20 20 20
  78+ A46C 20 20 20 20
  79+ A470 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mp, _me, _mw, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;8
  79+ A474 80 80 20 C0
  79+ A478 80 80 20 80
  79+ A47C 80 80 20 20
  80+ A480 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  80+ A484 80 80 20 80
  80+ A488 20 20 20 20
  80+ A48C 20 20 20 20
  81+ A490 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
  81+ A494 20 80 20 20
  81+ A498 20 80 20 20
  81+ A49C 20 20 20 20
  82+ A4A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
  82+ A4A4 20 20 80 20
  82+ A4A8 20 20 20 20
  82+ A4AC 20 20 20 20
  83+ A4B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;12
  83+ A4B4 20 20 20 20
  83+ A4B8 20 80 20 20
  83+ A4BC 20 20 20 20
  84+ A4C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  84+ A4C4 20 20 20 20
  84+ A4C8 20 20 20 20
  84+ A4CC 20 20 20 20
  85+ A4D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;14
  85+ A4D4 20 20 20 20
  85+ A4D8 20 80 20 20
  85+ A4DC 20 20 20 20
  86+ A4E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  86+ A4E4 20 20 20 20
  86+ A4E8 20 20 20 20
  86+ A4EC 20 20 20 20
  87+ A4F0 81 A0 20 20   db _mh, _ms, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;16
  87+ A4F4 20 20 20 20
  87+ A4F8 20 80 20 20
  87+ A4FC 20 20 20 20
  88+ A500
  89+ A500
  90+ A500              map_2:
  91+ A500 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  91+ A504 20 20 20 20
  91+ A508 20 20 20 20
  91+ A50C 20 20 20 20
  92+ A510 81 C0 20 80   db _mh, _me, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
  92+ A514 80 80 80 80
  92+ A518 80 20 20 20
  92+ A51C 20 20 20 20
  93+ A520 81 80 20 80   db _mh, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  93+ A524 20 20 20 20
  93+ A528 20 20 20 20
  93+ A52C 20 20 20 20
  94+ A530 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
  94+ A534 20 20 20 20
  94+ A538 20 20 20 20
  94+ A53C 20 20 20 20
  95+ A540 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  95+ A544 20 20 80 20
  95+ A548 20 20 20 20
  95+ A54C 20 20 20 20
  96+ A550 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  96+ A554 20 20 20 20
  96+ A558 20 80 20 20
  96+ A55C 20 20 20 20
  97+ A560 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  97+ A564 80 80 80 80
  97+ A568 20 20 20 20
  97+ A56C 20 20 20 20
  98+ A570 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
  98+ A574 20 20 80 20
  98+ A578 20 20 20 80
  98+ A57C 80 80 20 20
  99+ A580 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  99+ A584 20 C0 20 20
  99+ A588 20 20 20 20
  99+ A58C 20 20 20 20
 100+ A590 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 100+ A594 20 80 20 20
 100+ A598 20 80 20 20
 100+ A59C 20 20 20 20
 101+ A5A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 101+ A5A4 20 20 20 20
 101+ A5A8 80 20 20 20
 101+ A5AC 20 20 20 20
 102+ A5B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 102+ A5B4 20 20 20 20
 102+ A5B8 80 20 20 20
 102+ A5BC 20 20 20 20
 103+ A5C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 103+ A5C4 20 20 20 20
 103+ A5C8 20 20 20 20
 103+ A5CC 20 20 20 20
 104+ A5D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 104+ A5D4 20 20 20 20
 104+ A5D8 20 20 20 20
 104+ A5DC 20 20 20 20
 105+ A5E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 105+ A5E4 20 20 20 20
 105+ A5E8 20 20 20 20
 105+ A5EC 20 20 20 20
 106+ A5F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 106+ A5F4 20 20 20 20
 106+ A5F8 20 20 20 20
 106+ A5FC 20 20 20 20
 107+ A600
 108+ A600              map_3
 109+ A600 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 109+ A604 20 20 20 20
 109+ A608 20 20 20 20
 109+ A60C 20 20 20 20
 110+ A610 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 110+ A614 20 20 20 80
 110+ A618 20 20 20 20
 110+ A61C 20 20 20 20
 111+ A620 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 111+ A624 20 20 20 80
 111+ A628 20 20 20 20
 111+ A62C 20 20 20 20
 112+ A630 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;4
 112+ A634 20 20 20 80
 112+ A638 20 20 20 20
 112+ A63C 20 20 80 20
 113+ A640 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 113+ A644 20 20 20 20
 113+ A648 20 20 20 20
 113+ A64C 20 20 80 20
 114+ A650 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 114+ A654 20 20 20 80
 114+ A658 20 20 20 20
 114+ A65C 20 20 20 20
 115+ A660 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 115+ A664 20 20 20 20
 115+ A668 20 20 20 20
 115+ A66C 20 20 20 20
 116+ A670 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 116+ A674 20 20 20 80
 116+ A678 20 20 20 20
 116+ A67C 20 20 20 20
 117+ A680 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 117+ A684 20 20 20 20
 117+ A688 20 20 20 20
 117+ A68C 20 20 20 20
 118+ A690 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 118+ A694 80 80 20 80
 118+ A698 20 20 20 20
 118+ A69C 20 20 20 20
 119+ A6A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 119+ A6A4 20 20 80 20
 119+ A6A8 20 20 20 20
 119+ A6AC 20 20 20 20
 120+ A6B0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 120+ A6B4 20 C0 20 80
 120+ A6B8 20 20 20 20
 120+ A6BC 20 20 20 20
 121+ A6C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 121+ A6C4 20 20 20 20
 121+ A6C8 20 20 20 20
 121+ A6CC 20 20 20 20
 122+ A6D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 122+ A6D4 20 20 20 80
 122+ A6D8 20 20 20 20
 122+ A6DC 20 20 20 20
 123+ A6E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 123+ A6E4 20 20 20 80
 123+ A6E8 20 20 20 20
 123+ A6EC 20 20 20 20
 124+ A6F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 124+ A6F4 20 20 20 80
 124+ A6F8 20 20 20 20
 124+ A6FC 20 20 20 20
 125+ A700
 126+ A700              map_4:
 127+ A700 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 127+ A704 20 20 20 20
 127+ A708 20 20 20 20
 127+ A70C 20 20 20 20
 128+ A710 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;2
 128+ A714 80 80 80 80
 128+ A718 80 80 80 80
 128+ A71C 80 80 20 20
 129+ A720 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp ;3
 129+ A724 20 20 20 20
 129+ A728 20 20 20 80
 129+ A72C 20 80 20 20
 130+ A730 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp ;4
 130+ A734 20 20 20 20
 130+ A738 80 80 20 80
 130+ A73C 20 20 20 20
 131+ A740 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp ;5
 131+ A744 80 80 80 80
 131+ A748 20 80 20 80
 131+ A74C 20 80 20 20
 132+ A750 81 20 80 80   db _mh, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;6
 132+ A754 20 20 20 20
 132+ A758 20 80 20 80
 132+ A75C 80 80 20 20
 133+ A760 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;7
 133+ A764 20 20 80 80
 133+ A768 20 20 20 80
 133+ A76C 20 20 20 20
 134+ A770 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
 134+ A774 80 80 20 20
 134+ A778 20 20 20 80
 134+ A77C 80 80 20 20
 135+ A780 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 135+ A784 20 20 20 80
 135+ A788 20 80 80 80
 135+ A78C 80 80 80 20
 136+ A790 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 136+ A794 80 80 20 20
 136+ A798 20 80 20 20
 136+ A79C 20 20 20 20
 137+ A7A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp ;11
 137+ A7A4 20 20 80 20
 137+ A7A8 20 20 20 20
 137+ A7AC 20 80 80 20
 138+ A7B0 81 80 20 80   db _mh, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;12
 138+ A7B4 80 80 80 80
 138+ A7B8 80 80 80 80
 138+ A7BC 80 80 20 20
 139+ A7C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp ;13
 139+ A7C4 20 80 20 20
 139+ A7C8 80 20 20 20
 139+ A7CC 80 80 20 20
 140+ A7D0 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp ;14
 140+ A7D4 20 80 20 20
 140+ A7D8 20 20 20 20
 140+ A7DC 20 80 20 20
 141+ A7E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mp, _mp ;15
 141+ A7E4 20 80 80 80
 141+ A7E8 80 80 20 20
 141+ A7EC 80 80 20 20
 142+ A7F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 142+ A7F4 20 20 20 20
 142+ A7F8 20 20 20 20
 142+ A7FC 20 20 20 20
 143+ A800
 144+ A800              map_5:
 145+ A800 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 145+ A804 20 20 20 20
 145+ A808 20 20 20 20
 145+ A80C 20 20 20 20
 146+ A810 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;2
 146+ A814 80 80 80 20
 146+ A818 80 80 80 80
 146+ A81C 80 80 80 20
 147+ A820 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 147+ A824 20 20 20 20
 147+ A828 20 20 20 20
 147+ A82C 20 20 20 20
 148+ A830 81 20 C0 20   db _mh, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 148+ A834 20 20 20 20
 148+ A838 20 20 20 20
 148+ A83C 20 20 20 20
 149+ A840 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;5
 149+ A844 80 80 80 20
 149+ A848 80 80 80 80
 149+ A84C 80 80 80 20
 150+ A850 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 150+ A854 20 20 20 20
 150+ A858 20 20 20 20
 150+ A85C 20 20 20 20
 151+ A860 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 151+ A864 20 20 20 20
 151+ A868 20 20 20 20
 151+ A86C 20 20 20 20
 152+ A870 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 152+ A874 20 20 20 20
 152+ A878 20 20 20 20
 152+ A87C 20 20 20 20
 153+ A880 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 153+ A884 80 80 80 20
 153+ A888 80 80 80 80
 153+ A88C 80 80 80 20
 154+ A890 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;10
 154+ A894 20 20 20 20
 154+ A898 20 20 80 20
 154+ A89C 80 20 20 20
 155+ A8A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;11
 155+ A8A4 20 20 20 20
 155+ A8A8 20 80 20 20
 155+ A8AC 20 80 20 20
 156+ A8B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mw, _mp ;12
 156+ A8B4 20 20 20 20
 156+ A8B8 80 20 20 80
 156+ A8BC 20 20 80 20
 157+ A8C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;13
 157+ A8C4 20 20 20 80
 157+ A8C8 20 20 80 20
 157+ A8CC 80 20 20 20
 158+ A8D0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;14
 158+ A8D4 80 80 80 20
 158+ A8D8 20 80 20 20
 158+ A8DC 20 80 80 20
 159+ A8E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;15
 159+ A8E4 20 20 20 20
 159+ A8E8 80 80 80 80
 159+ A8EC 20 20 20 20
 160+ A8F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;16
 160+ A8F4 20 20 20 80
 160+ A8F8 80 80 80 80
 160+ A8FC 80 80 20 20
 161+ A900
 162+ A900              map_6:
 163+ A900 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 163+ A904 20 20 20 20
 163+ A908 20 20 20 20
 163+ A90C 20 20 20 20
 164+ A910 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mw, _mp ;2
 164+ A914 80 80 80 80
 164+ A918 80 80 20 20
 164+ A91C 80 80 80 20
 165+ A920 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;3
 165+ A924 80 20 20 20
 165+ A928 80 80 20 20
 165+ A92C 20 80 20 20
 166+ A930 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _ms, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;4
 166+ A934 80 20 A0 20
 166+ A938 80 80 80 80
 166+ A93C 80 80 20 20
 167+ A940 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;5
 167+ A944 80 20 80 20
 167+ A948 80 80 20 20
 167+ A94C 20 20 20 20
 168+ A950 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;6
 168+ A954 80 20 80 20
 168+ A958 20 80 20 20
 168+ A95C 20 80 80 20
 169+ A960 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;7
 169+ A964 20 20 20 20
 169+ A968 20 80 20 20
 169+ A96C 20 80 20 20
 170+ A970 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;8
 170+ A974 80 80 80 80
 170+ A978 20 80 80 80
 170+ A97C 80 80 80 20
 171+ A980 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 171+ A984 20 20 20 80
 171+ A988 20 20 20 20
 171+ A98C 20 20 20 20
 172+ A990 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mw, _mw, _mp ;10
 172+ A994 80 80 20 80
 172+ A998 20 80 80 20
 172+ A99C 80 80 80 20
 173+ A9A0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;11
 173+ A9A4 20 80 20 80
 173+ A9A8 20 20 80 20
 173+ A9AC 80 20 80 20
 174+ A9B0 81 20 80 20   db _mh, _mp, _mw, _mp, _me, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp ;12
 174+ A9B4 C0 80 20 80
 174+ A9B8 20 80 20 80
 174+ A9BC 20 20 80 20
 175+ A9C0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;13
 175+ A9C4 80 80 20 80
 175+ A9C8 20 80 20 20
 175+ A9CC 20 20 20 20
 176+ A9D0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;14
 176+ A9D4 20 20 20 80
 176+ A9D8 20 80 80 80
 176+ A9DC 20 20 20 20
 177+ A9E0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp ;15
 177+ A9E4 80 80 80 80
 177+ A9E8 20 80 80 80
 177+ A9EC 80 20 80 20
 178+ A9F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 178+ A9F4 20 20 20 20
 178+ A9F8 20 20 20 20
 178+ A9FC 20 20 20 20
 179+ AA00
 180+ AA00              map_7
 181+ AA00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 181+ AA04 20 20 20 20
 181+ AA08 20 20 20 20
 181+ AA0C 20 20 20 20
 182+ AA10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 182+ AA14 20 20 20 80
 182+ AA18 20 20 20 20
 182+ AA1C 20 20 20 20
 183+ AA20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 183+ AA24 20 20 20 80
 183+ AA28 20 20 20 20
 183+ AA2C 20 20 20 20
 184+ AA30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 184+ AA34 20 20 20 80
 184+ AA38 20 20 20 20
 184+ AA3C 20 20 20 20
 185+ AA40 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 185+ AA44 20 20 20 20
 185+ AA48 20 20 20 20
 185+ AA4C 20 20 80 20
 186+ AA50 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;6
 186+ AA54 20 20 20 20
 186+ AA58 20 20 20 20
 186+ AA5C 20 20 80 20
 187+ AA60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 187+ AA64 20 20 20 20
 187+ AA68 20 20 20 20
 187+ AA6C 20 20 20 20
 188+ AA70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 188+ AA74 20 20 20 20
 188+ AA78 20 20 20 20
 188+ AA7C 20 20 20 20
 189+ AA80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 189+ AA84 20 20 20 20
 189+ AA88 20 20 20 20
 189+ AA8C 20 20 20 20
 190+ AA90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;10
 190+ AA94 20 20 20 20
 190+ AA98 20 20 20 80
 190+ AA9C 20 20 20 20
 191+ AAA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 191+ AAA4 20 20 20 20
 191+ AAA8 20 20 20 20
 191+ AAAC 20 20 20 20
 192+ AAB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 192+ AAB4 20 20 20 20
 192+ AAB8 20 20 20 20
 192+ AABC 20 20 20 20
 193+ AAC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 193+ AAC4 20 20 20 20
 193+ AAC8 20 20 20 20
 193+ AACC 20 20 20 20
 194+ AAD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 194+ AAD4 20 20 20 20
 194+ AAD8 20 20 20 20
 194+ AADC 20 20 20 20
 195+ AAE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 195+ AAE4 20 20 20 20
 195+ AAE8 20 20 20 20
 195+ AAEC 20 20 20 20
 196+ AAF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 196+ AAF4 20 20 20 20
 196+ AAF8 20 20 20 20
 196+ AAFC 20 20 20 20
 197+ AB00
 198+ AB00              map_8:
 199+ AB00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 199+ AB04 20 20 20 20
 199+ AB08 20 20 20 20
 199+ AB0C 20 20 20 20
 200+ AB10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 200+ AB14 20 20 20 80
 200+ AB18 20 20 20 20
 200+ AB1C 20 20 20 20
 201+ AB20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 201+ AB24 20 20 20 80
 201+ AB28 20 20 20 20
 201+ AB2C 20 20 20 20
 202+ AB30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 202+ AB34 20 20 20 80
 202+ AB38 20 20 20 20
 202+ AB3C 20 20 20 20
 203+ AB40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 203+ AB44 20 20 20 20
 203+ AB48 20 20 20 20
 203+ AB4C 20 20 20 20
 204+ AB50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 204+ AB54 20 20 20 20
 204+ AB58 20 20 20 20
 204+ AB5C 20 20 20 20
 205+ AB60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 205+ AB64 20 20 20 20
 205+ AB68 20 20 20 20
 205+ AB6C 20 20 20 20
 206+ AB70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 206+ AB74 20 20 20 20
 206+ AB78 20 20 20 20
 206+ AB7C 20 20 20 20
 207+ AB80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 207+ AB84 20 20 20 20
 207+ AB88 20 20 20 20
 207+ AB8C 20 20 20 20
 208+ AB90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 208+ AB94 20 20 20 20
 208+ AB98 20 20 20 20
 208+ AB9C 20 20 20 20
 209+ ABA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 209+ ABA4 20 20 80 20
 209+ ABA8 20 20 20 20
 209+ ABAC 20 20 20 20
 210+ ABB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 210+ ABB4 20 20 20 80
 210+ ABB8 20 20 20 20
 210+ ABBC 20 20 20 20
 211+ ABC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 211+ ABC4 20 20 80 20
 211+ ABC8 20 20 20 20
 211+ ABCC 20 20 20 20
 212+ ABD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 212+ ABD4 20 20 20 20
 212+ ABD8 20 20 20 20
 212+ ABDC 20 20 20 20
 213+ ABE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 213+ ABE4 20 20 20 20
 213+ ABE8 20 20 20 20
 213+ ABEC 20 20 20 20
 214+ ABF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 214+ ABF4 20 20 20 20
 214+ ABF8 20 20 20 20
 214+ ABFC 20 20 20 20
 215+ AC00
 216+ AC00              map_9:
 217+ AC00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 217+ AC04 20 20 20 20
 217+ AC08 20 20 20 20
 217+ AC0C 20 20 20 20
 218+ AC10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 218+ AC14 20 20 20 20
 218+ AC18 20 20 20 20
 218+ AC1C 20 20 20 20
 219+ AC20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 219+ AC24 20 20 20 20
 219+ AC28 20 20 20 20
 219+ AC2C 20 20 20 20
 220+ AC30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 220+ AC34 20 20 20 20
 220+ AC38 20 20 20 20
 220+ AC3C 20 20 20 20
 221+ AC40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 221+ AC44 20 20 20 20
 221+ AC48 20 20 20 20
 221+ AC4C 20 20 20 20
 222+ AC50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 222+ AC54 20 20 20 20
 222+ AC58 20 20 20 20
 222+ AC5C 20 20 20 20
 223+ AC60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 223+ AC64 20 20 20 20
 223+ AC68 20 20 20 20
 223+ AC6C 20 20 20 20
 224+ AC70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 224+ AC74 20 20 20 20
 224+ AC78 20 20 20 20
 224+ AC7C 20 20 20 20
 225+ AC80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 225+ AC84 20 20 20 20
 225+ AC88 20 20 20 20
 225+ AC8C 20 20 20 20
 226+ AC90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 226+ AC94 20 20 20 20
 226+ AC98 20 20 20 20
 226+ AC9C 20 20 20 20
 227+ ACA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 227+ ACA4 20 20 20 20
 227+ ACA8 20 20 20 20
 227+ ACAC 20 20 20 20
 228+ ACB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 228+ ACB4 20 20 20 20
 228+ ACB8 20 20 20 20
 228+ ACBC 20 20 20 20
 229+ ACC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 229+ ACC4 20 20 20 20
 229+ ACC8 20 20 20 20
 229+ ACCC 20 20 20 20
 230+ ACD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 230+ ACD4 20 20 20 20
 230+ ACD8 20 20 20 20
 230+ ACDC 20 20 20 20
 231+ ACE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 231+ ACE4 20 20 20 20
 231+ ACE8 20 20 20 20
 231+ ACEC 20 20 20 20
 232+ ACF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 232+ ACF4 20 20 20 20
 232+ ACF8 20 20 20 20
 232+ ACFC 20 20 20 20
 233+ AD00
 234+ AD00              map_10:
 235+ AD00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 235+ AD04 20 20 20 20
 235+ AD08 20 20 20 20
 235+ AD0C 20 20 20 20
 236+ AD10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 236+ AD14 20 20 20 20
 236+ AD18 20 20 20 20
 236+ AD1C 20 20 20 20
 237+ AD20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 237+ AD24 20 20 20 20
 237+ AD28 20 20 20 20
 237+ AD2C 20 20 20 20
 238+ AD30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 238+ AD34 20 20 20 20
 238+ AD38 20 20 20 20
 238+ AD3C 20 20 20 20
 239+ AD40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 239+ AD44 20 20 20 20
 239+ AD48 20 20 20 20
 239+ AD4C 20 20 20 20
 240+ AD50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 240+ AD54 20 20 20 20
 240+ AD58 20 20 20 20
 240+ AD5C 20 20 20 20
 241+ AD60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 241+ AD64 20 20 20 20
 241+ AD68 20 20 20 20
 241+ AD6C 20 20 20 20
 242+ AD70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 242+ AD74 20 20 20 20
 242+ AD78 20 20 20 20
 242+ AD7C 20 20 20 20
 243+ AD80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 243+ AD84 20 20 20 20
 243+ AD88 20 20 20 20
 243+ AD8C 20 20 20 20
 244+ AD90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 244+ AD94 20 20 20 20
 244+ AD98 20 20 20 20
 244+ AD9C 20 20 20 20
 245+ ADA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 245+ ADA4 20 20 20 20
 245+ ADA8 20 20 20 20
 245+ ADAC 20 20 20 20
 246+ ADB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 246+ ADB4 20 20 20 20
 246+ ADB8 20 20 20 20
 246+ ADBC 20 20 20 20
 247+ ADC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 247+ ADC4 20 20 20 20
 247+ ADC8 20 20 20 20
 247+ ADCC 20 20 20 20
 248+ ADD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 248+ ADD4 20 20 20 20
 248+ ADD8 20 20 20 20
 248+ ADDC 20 20 20 20
 249+ ADE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 249+ ADE4 20 20 20 20
 249+ ADE8 20 20 20 20
 249+ ADEC 20 20 20 20
 250+ ADF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 250+ ADF4 20 20 20 20
 250+ ADF8 20 20 20 20
 250+ ADFC 20 20 20 20
 251+ AE00
 252+ AE00              map_11:
 253+ AE00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 253+ AE04 20 20 20 20
 253+ AE08 20 20 20 20
 253+ AE0C 20 20 20 20
 254+ AE10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 254+ AE14 20 20 20 20
 254+ AE18 20 20 20 20
 254+ AE1C 20 20 20 20
 255+ AE20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 255+ AE24 20 20 20 20
 255+ AE28 20 20 20 20
 255+ AE2C 20 20 20 20
 256+ AE30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 256+ AE34 20 20 20 20
 256+ AE38 20 20 20 20
 256+ AE3C 20 20 20 20
 257+ AE40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 257+ AE44 20 20 20 20
 257+ AE48 20 20 20 20
 257+ AE4C 20 20 20 20
 258+ AE50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 258+ AE54 20 20 20 20
 258+ AE58 20 20 20 20
 258+ AE5C 20 20 20 20
 259+ AE60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 259+ AE64 20 20 20 20
 259+ AE68 20 20 20 20
 259+ AE6C 20 20 20 20
 260+ AE70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 260+ AE74 20 20 20 20
 260+ AE78 20 20 20 20
 260+ AE7C 20 20 20 20
 261+ AE80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 261+ AE84 20 20 20 20
 261+ AE88 20 20 20 20
 261+ AE8C 20 20 20 20
 262+ AE90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 262+ AE94 20 20 20 20
 262+ AE98 20 20 20 20
 262+ AE9C 20 20 20 20
 263+ AEA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 263+ AEA4 20 20 20 20
 263+ AEA8 20 20 20 20
 263+ AEAC 20 20 20 20
 264+ AEB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 264+ AEB4 20 20 20 20
 264+ AEB8 20 20 20 20
 264+ AEBC 20 20 20 20
 265+ AEC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 265+ AEC4 20 20 20 20
 265+ AEC8 20 20 20 20
 265+ AECC 20 20 20 20
 266+ AED0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 266+ AED4 20 20 20 20
 266+ AED8 20 20 20 20
 266+ AEDC 20 20 20 20
 267+ AEE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 267+ AEE4 20 20 20 20
 267+ AEE8 20 20 20 20
 267+ AEEC 20 20 20 20
 268+ AEF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 268+ AEF4 20 20 20 20
 268+ AEF8 20 20 20 20
 268+ AEFC 20 20 20 20
 269+ AF00
 270+ AF00              map_12:
 271+ AF00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 271+ AF04 20 20 20 20
 271+ AF08 20 20 20 20
 271+ AF0C 20 20 20 20
 272+ AF10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 272+ AF14 20 20 20 20
 272+ AF18 20 20 20 20
 272+ AF1C 20 20 20 20
 273+ AF20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 273+ AF24 20 20 20 20
 273+ AF28 20 20 20 20
 273+ AF2C 20 20 20 20
 274+ AF30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 274+ AF34 20 20 20 20
 274+ AF38 20 20 20 20
 274+ AF3C 20 20 20 20
 275+ AF40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 275+ AF44 20 20 20 20
 275+ AF48 20 20 20 20
 275+ AF4C 20 20 20 20
 276+ AF50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 276+ AF54 20 20 20 20
 276+ AF58 20 20 20 20
 276+ AF5C 20 20 20 20
 277+ AF60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 277+ AF64 20 20 20 20
 277+ AF68 20 20 20 20
 277+ AF6C 20 20 20 20
 278+ AF70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 278+ AF74 20 20 20 20
 278+ AF78 20 20 20 20
 278+ AF7C 20 20 20 20
 279+ AF80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 279+ AF84 20 20 20 20
 279+ AF88 20 20 20 20
 279+ AF8C 20 20 20 20
 280+ AF90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 280+ AF94 20 20 20 20
 280+ AF98 20 20 20 20
 280+ AF9C 20 20 20 20
 281+ AFA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 281+ AFA4 20 20 20 20
 281+ AFA8 20 20 20 20
 281+ AFAC 20 20 20 20
 282+ AFB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 282+ AFB4 20 20 20 20
 282+ AFB8 20 20 20 20
 282+ AFBC 20 20 20 20
 283+ AFC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 283+ AFC4 20 20 20 20
 283+ AFC8 20 20 20 20
 283+ AFCC 20 20 20 20
 284+ AFD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 284+ AFD4 20 20 20 20
 284+ AFD8 20 20 20 20
 284+ AFDC 20 20 20 20
 285+ AFE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 285+ AFE4 20 20 20 20
 285+ AFE8 20 20 20 20
 285+ AFEC 20 20 20 20
 286+ AFF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 286+ AFF4 20 20 20 20
 286+ AFF8 20 20 20 20
 286+ AFFC 20 20 20 20
 287+ B000
 288+ B000              map_13:
 289+ B000 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 289+ B004 20 20 20 20
 289+ B008 20 20 20 20
 289+ B00C 20 20 20 20
 290+ B010 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 290+ B014 20 20 20 20
 290+ B018 20 20 20 20
 290+ B01C 20 20 20 20
 291+ B020 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 291+ B024 20 20 20 20
 291+ B028 20 20 20 20
 291+ B02C 20 20 20 20
 292+ B030 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 292+ B034 20 20 20 20
 292+ B038 20 20 20 20
 292+ B03C 20 20 20 20
 293+ B040 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 293+ B044 20 20 20 20
 293+ B048 20 20 20 20
 293+ B04C 20 20 20 20
 294+ B050 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 294+ B054 20 20 20 20
 294+ B058 20 20 20 20
 294+ B05C 20 20 20 20
 295+ B060 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 295+ B064 20 20 20 20
 295+ B068 20 20 20 20
 295+ B06C 20 20 20 20
 296+ B070 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 296+ B074 20 20 20 20
 296+ B078 20 20 20 20
 296+ B07C 20 20 20 20
 297+ B080 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 297+ B084 20 20 20 20
 297+ B088 20 20 20 20
 297+ B08C 20 20 20 20
 298+ B090 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 298+ B094 20 20 20 20
 298+ B098 20 20 20 20
 298+ B09C 20 20 20 20
 299+ B0A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 299+ B0A4 20 20 20 20
 299+ B0A8 20 20 20 20
 299+ B0AC 20 20 20 20
 300+ B0B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 300+ B0B4 20 20 20 20
 300+ B0B8 20 20 20 20
 300+ B0BC 20 20 20 20
 301+ B0C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 301+ B0C4 20 20 20 20
 301+ B0C8 20 20 20 20
 301+ B0CC 20 20 20 20
 302+ B0D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 302+ B0D4 20 20 20 20
 302+ B0D8 20 20 20 20
 302+ B0DC 20 20 20 20
 303+ B0E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 303+ B0E4 20 20 20 20
 303+ B0E8 20 20 20 20
 303+ B0EC 20 20 20 20
 304+ B0F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 304+ B0F4 20 20 20 20
 304+ B0F8 20 20 20 20
 304+ B0FC 20 20 20 20
 305+ B100
 306+ B100              map_14:
 307+ B100 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 307+ B104 20 20 20 20
 307+ B108 20 20 20 20
 307+ B10C 20 20 20 20
 308+ B110 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 308+ B114 20 20 20 20
 308+ B118 20 20 20 20
 308+ B11C 20 20 20 20
 309+ B120 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 309+ B124 20 20 20 20
 309+ B128 20 20 20 20
 309+ B12C 20 20 20 20
 310+ B130 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 310+ B134 20 20 20 20
 310+ B138 20 20 20 20
 310+ B13C 20 20 20 20
 311+ B140 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 311+ B144 20 20 20 20
 311+ B148 20 20 20 20
 311+ B14C 20 20 20 20
 312+ B150 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 312+ B154 20 20 20 20
 312+ B158 20 20 20 20
 312+ B15C 20 20 20 20
 313+ B160 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 313+ B164 20 20 20 20
 313+ B168 20 20 20 20
 313+ B16C 20 20 20 20
 314+ B170 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 314+ B174 20 20 20 20
 314+ B178 20 20 20 20
 314+ B17C 20 20 20 20
 315+ B180 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 315+ B184 20 20 20 20
 315+ B188 20 20 20 20
 315+ B18C 20 20 20 20
 316+ B190 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 316+ B194 20 20 20 20
 316+ B198 20 20 20 20
 316+ B19C 20 20 20 20
 317+ B1A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 317+ B1A4 20 20 20 20
 317+ B1A8 20 20 20 20
 317+ B1AC 20 20 20 20
 318+ B1B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 318+ B1B4 20 20 20 20
 318+ B1B8 20 20 20 20
 318+ B1BC 20 20 20 20
 319+ B1C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 319+ B1C4 20 20 20 20
 319+ B1C8 20 20 20 20
 319+ B1CC 20 20 20 20
 320+ B1D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 320+ B1D4 20 20 20 20
 320+ B1D8 20 20 20 20
 320+ B1DC 20 20 20 20
 321+ B1E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 321+ B1E4 20 20 20 20
 321+ B1E8 20 20 20 20
 321+ B1EC 20 20 20 20
 322+ B1F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 322+ B1F4 20 20 20 20
 322+ B1F8 20 20 20 20
 322+ B1FC 20 20 20 20
 323+ B200
 324+ B200              map_15:
 325+ B200 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 325+ B204 20 20 20 20
 325+ B208 20 20 20 20
 325+ B20C 20 20 20 20
 326+ B210 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 326+ B214 20 20 20 20
 326+ B218 20 20 20 20
 326+ B21C 20 20 20 20
 327+ B220 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 327+ B224 20 20 20 20
 327+ B228 20 20 20 20
 327+ B22C 20 20 20 20
 328+ B230 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 328+ B234 20 20 20 20
 328+ B238 20 20 20 20
 328+ B23C 20 20 20 20
 329+ B240 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 329+ B244 20 20 20 20
 329+ B248 20 20 20 20
 329+ B24C 20 20 20 20
 330+ B250 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 330+ B254 20 20 20 20
 330+ B258 20 20 20 20
 330+ B25C 20 20 20 20
 331+ B260 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 331+ B264 20 20 20 20
 331+ B268 20 20 20 20
 331+ B26C 20 20 20 20
 332+ B270 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 332+ B274 20 20 20 20
 332+ B278 20 20 20 20
 332+ B27C 20 20 20 20
 333+ B280 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 333+ B284 20 20 20 20
 333+ B288 20 20 20 20
 333+ B28C 20 20 20 20
 334+ B290 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 334+ B294 20 20 20 20
 334+ B298 20 20 20 20
 334+ B29C 20 20 20 20
 335+ B2A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 335+ B2A4 20 20 20 20
 335+ B2A8 20 20 20 20
 335+ B2AC 20 20 20 20
 336+ B2B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 336+ B2B4 20 20 20 20
 336+ B2B8 20 20 20 20
 336+ B2BC 20 20 20 20
 337+ B2C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 337+ B2C4 20 20 20 20
 337+ B2C8 20 20 20 20
 337+ B2CC 20 20 20 20
 338+ B2D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 338+ B2D4 20 20 20 20
 338+ B2D8 20 20 20 20
 338+ B2DC 20 20 20 20
 339+ B2E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 339+ B2E4 20 20 20 20
 339+ B2E8 20 20 20 20
 339+ B2EC 20 20 20 20
 340+ B2F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 340+ B2F4 20 20 20 20
 340+ B2F8 20 20 20 20
 340+ B2FC 20 20 20 20
 341+ B300
 342+ B300              ;map start positions
 343+ B300              ;map0
 344+ B300 00 00                dw  00
 345+ B302              ;map0
 346+ B302 00 00                dw  00
 347+ B304              ;map1
 348+ B304 00 00                dw  00
 349+ B306              ;map2
 350+ B306 00 00                dw  00
 351+ B308              ;map3
 352+ B308 00 00                dw  00
 353+ B30A              ;map4
 354+ B30A 00 00                dw  00
 355+ B30C              ;map5
 356+ B30C 00 00                dw  00
 357+ B30E              ;map6
 358+ B30E 00 00                dw  00
 359+ B310              ;map7
 360+ B310 00 00                dw  00
 361+ B312              ;map8
 362+ B312 00 00                dw  00
 363+ B314              ;map9
 364+ B314 00 00                dw  00
 365+ B316              ;map10
 366+ B316 00 00                dw  00
 367+ B318              ;map11
 368+ B318 00 00                dw  00
 369+ B31A              ;map12
 370+ B31A 00 00                dw  00
 371+ B31C              ;map13
 372+ B31C 00 00                dw  00
 373+ B31E              ;map14
 374+ B31E 00 00                dw  00
 375+ B320              ;map15
 376+ B320 00 00                dw  00
 377+ B322
 378+ B322 00                   nop
 379+ B323 00                   nop
 380+ B324 00                   nop
 381+ B325
 382+ B325
 383+ B325              ;##################################################################################
 384+ B325              ;door exit animation
 385+ B325              ;the idea here is that the following will happen when you reach the exit:-
 386+ B325              ;    0 turn off the buffer screen via reg $69
 387+ B325              ;    1 draw a black box growing ever bigger to fill the screen - thats exit_anim routine
 388+ B325              ;    2 leave that screen on show
 389+ B325              ;    3 point to the buffer screen
 390+ B325              ;    4 draw the first screen of the next level - unless its the last level (level 255 when you finish the game!)
 391+ B325              ;    5 copy the attributes to a place in memory - probably after the char screen at $c000
 392+ B325              ;    6 switch the buffer screen back on via reg $69
 393+ B325              ;    7 make all the buffer screen colours black
 394+ B325              ;    8 switch in the buffer screen
 395+ B325              ;    9 turn off the buffer screen because we want to see the colours materialise!
 396+ B325              ;    9 draw the colours back in from the copied colours earlier but from the outside in - new_maze_anim routine
 397+ B325              ;    10 go back to normal!
 398+ B325              ;
 399+ B325              ;
 400+ B325              exit_anim:
 401+ B325 DD 01                    BREAK
 402+ B327 ED 91 69 00              nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 403+ B32B                          ;set processor speed to max while we do behind the scenes work
 404+ B32B                         ; nextreg 7,3
 405+ B32B                          ;get our current screen memory map
 406+ B32B 3E 52                    ld a,$52
 407+ B32D CD 79 81                 call readnextreg
 408+ B330 32 0B B4                 ld (cur_screen),a   ;save it
 409+ B333 3E 69                    ld a,$69
 410+ B335 CD 79 81                 call readnextreg
 411+ B338 32 0C B4                 ld (cur_page),a   ;save it
 412+ B33B
 413+ B33B                          ;see if we are already showing the main ULA screen - ULABank will = $0A
 414+ B33B                         ; sub $0a
 415+ B33B                         ; jr z,cont_12        ;if yes, draw the exit
 416+ B33B                          ;its a no - so we need to redraw our screen in the alternate buffer memory which is page 10
 417+ B33B                          ;as page 14 is currently paged into view
 418+ B33B              ;redraw the existing screen to page 10 currently bufferred
 419+ B33B                         ; call redraw_screen
 420+ B33B
 421+ B33B              ;now we can draw our exit as normal
 422+ B33B                          ;page in our ULA screen
 423+ B33B                        ;  nextreg $52,10
 424+ B33B                        ;  ld a,10
 425+ B33B                        ;  ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 426+ B33B
 427+ B33B              ;            nextreg $69,0      ;turn off screen buffering so we write directly to the screen
 428+ B33B
 429+ B33B              cont_12:    ;nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 430+ B33B ED 91 07 00              nextreg 7,0
 431+ B33F CD 76 B3                 call do_exit_anim
 432+ B342 CD 42 81                 call pause
 433+ B345
 434+ B345              ;need to make the screen black, draw ink bits, copy colours to somewhere else then copy back
 435+ B345
 436+ B345                        ;  nextreg $69,64       ;turn ON screen buffering so we write directly to the ALTERNATE screen our new maze start
 437+ B345 CD 5D B3                 call redraw_screen
 438+ B348 CD 42 81                 call pause
 439+ B34B CD 42 81                 call pause
 440+ B34E CD 0D B4                 call new_maze_anim
 441+ B351 CD 42 81                 call pause
 442+ B354 CD 42 81                 call pause
 443+ B357                    ;      nextreg $52,10
 444+ B357 3E 0A                    ld a,10
 445+ B359 32 A1 81                 ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 446+ B35C
 447+ B35C              ;            call readnextreg
 448+ B35C               ;           ld a,(cur_screen)   ;get original screen
 449+ B35C               ;           xor 10^14       ; alternate between 10 and 14
 450+ B35C               ;           nextreg $52,a
 451+ B35C
 452+ B35C               ;           nextreg $69,64       ;turn on screen buffering so we write directly to the screen
 453+ B35C C9                       ret                 ;return to normal game
 454+ B35D              ;------------------------------------------------------------------------------------------
 455+ B35D              redraw_screen:
 456+ B35D CD 57 81                   call clear_char_screen    ;clear screen @c000
 457+ B360
 458+ B360 CD BF 8A                   call get_distance ; get distance we can see
 459+ B363                                              ; and save depth we can see
 460+ B363                            ; load de is done when getting the distance above
 461+ B363                            ; we need de to hold the jump value in the maze direction
 462+ B363                            ; we are looking
 463+ B363
 464+ B363 CD 46 8C                   call draw_left_side   ; start drawing the left side of the maze
 465+ B366
 466+ B366                            ;we need to repopulate var furthest_point
 467+ B366
 468+ B366 CD BF 8A                   call get_distance     ; get distance we can see
 469+ B369                                                  ; and set de accordingly
 470+ B369                                                  ; and save depth we can see
 471+ B369
 472+ B369 CD 44 98                   call draw_right_side  ; start drawing the right side of the maze
 473+ B36C
 474+ B36C CD E9 93                   call draw_front_view  ; draw wall in front of player
 475+ B36F
 476+ B36F                            ;check if we are at an end wall. If so, draw walls left
 477+ B36F                            ;and right to simulate the long outside edge wall
 478+ B36F
 479+ B36F CD 75 94                   call draw_side_walls
 480+ B372
 481+ B372                            ;draw screen at mem location 0000
 482+ B372                            ;my print used to print screen @c000 to 16384 inc udg's
 483+ B372 CD BA 89                   call my_print         ;copy to screen from c000
 484+ B375
 485+ B375                     ;       call draw_colours     ;colourise the display
 486+ B375
 487+ B375 C9                           ret
 488+ B376              ;end drawing the new screen
 489+ B376              ;----------------------------------------------------------------------------------
 490+ B376              do_exit_anim:
 491+ B376
 492+ B376              ;Original base code by David Saphier from Facebook May 2018
 493+ B376
 494+ B376 97                       sub a
 495+ B377 32 08 B4                 ld (in_out),a       ;indicate we are drawing out from the middle
 496+ B37A
 497+ B37A
 498+ B37A              ;reset the boxes to default
 499+ B37A              ; this must be the same as the size of the square to draw
 500+ B37A 3E 02                    ld a,2    ; reduce the size of the square to draw
 501+ B37C 32 09 B4                 ld (size1),a
 502+ B37F
 503+ B37F              ; this must equal the number of squares to draw
 504+ B37F 3E 02                    ld a,2  ;number of boxes to draw
 505+ B381 32 0A B4                 ld (num2draw1),a
 506+ B384
 507+ B384 21 6C 59                 ld hl,256+11+22528+65+32 ;start point - middle of the screen nearly!
 508+ B387
 509+ B387
 510+ B387 3E 00        d_box1:	    ld a,0              ;set colour
 511+ B389 CD AB B3                 call box1           ;draw the box
 512+ B38C                   ;       call FlipULABuffers_peter
 513+ B38C 11 E0 FF                	ld de,65504         ; 65504  (-32)
 514+ B38F
 515+ B38F 19                       add hl,de           ;next box to draw
 516+ B390 CD 42 81                 call pause
 517+ B393 CD 42 81                 call pause
 518+ B396
 519+ B396 3A 09 B4                 ld a,(size1)     ; increase the size of the square to draw
 520+ B399 3C                       inc a
 521+ B39A 3C                       inc a
 522+ B39B 32 09 B4                 ld (size1),a
 523+ B39E
 524+ B39E
 525+ B39E 3A 0A B4                 ld a,(num2draw1)  ;number of boxes to draw
 526+ B3A1 3C                       inc a
 527+ B3A2 32 0A B4                 ld (num2draw1),a
 528+ B3A5 FE 0E                    cp 14
 529+ B3A7 C2 87 B3                 jp nz, d_box1     ; exit when we get to 2 as routine fails after that.
 530+ B3AA
 531+ B3AA C9                       ret
 532+ B3AB
 533+ B3AB              ;davids code here amended by me....
 534+ B3AB              box1:
 535+ B3AB 3A 09 B4                 ld a,(size1)
 536+ B3AE 47                       ld b,a
 537+ B3AF
 538+ B3AF              ml11:
 539+ B3AF CD F0 B3     	call docol1
 540+ B3B2 77           	ld (hl),a
 541+ B3B3 23           	inc hl
 542+ B3B4 10 F9        	djnz ml11
 543+ B3B6 F5               push af
 544+ B3B7 3A 09 B4         ld a,(size1)
 545+ B3BA 3D               dec a
 546+ B3BB 47              	ld b,a
 547+ B3BC F1               pop af
 548+ B3BD 2B           	dec hl
 549+ B3BE
 550+ B3BE              ml21:
 551+ B3BE CD F0 B3     	call docol1
 552+ B3C1 11 20 00     	ld de,32     ;was 32
 553+ B3C4 19           	add hl,de
 554+ B3C5 77           	ld (hl),a
 555+ B3C6 10 F6        	djnz ml21
 556+ B3C8 F5               push af
 557+ B3C9 3A 09 B4         ld a,(size1)
 558+ B3CC 47              	ld b,a
 559+ B3CD F1               pop af
 560+ B3CE 2D           	dec l
 561+ B3CF
 562+ B3CF              ml31:
 563+ B3CF CD F0 B3     	call docol1
 564+ B3D2 77            	ld (hl),a
 565+ B3D3 2B            	dec hl
 566+ B3D4 10 F9         	djnz ml31
 567+ B3D6 F5               push af
 568+ B3D7 3A 09 B4         ld a,(size1)
 569+ B3DA 3D               dec a
 570+ B3DB 47              	ld b,a
 571+ B3DC F1               pop af
 572+ B3DD 2C            	inc l
 573+ B3DE
 574+ B3DE              ml41:
 575+ B3DE CD F0 B3     	call docol1
 576+ B3E1 11 E0 FF     	ld de,65504; was 65504  (-32)
 577+ B3E4 19           	add hl,de
 578+ B3E5 77           	ld (hl),a
 579+ B3E6 10 F6        	djnz ml41
 580+ B3E8 F5               push af
 581+ B3E9 3A 09 B4         ld a,(size1)
 582+ B3EC 3D                dec a
 583+ B3ED 47              	ld b,a
 584+ B3EE F1               pop af
 585+ B3EF C9           	ret
 586+ B3F0
 587+ B3F0              ;end of davids code...
 588+ B3F0
 589+ B3F0              ;set square colours
 590+ B3F0              docol1:
 591+ B3F0 3A 08 B4             ld a,(in_out)
 592+ B3F3 3D                   dec a                          ;check if a=0
 593+ B3F4 28 03                jr z,do_out
 594+ B3F6 3E F0                ld a,240
 595+ B3F8 C9                   ret
 596+ B3F9              do_out
 597+ B3F9 E5                   push hl
 598+ B3FA 2A 06 B4             ld hl,(fadein)
 599+ B3FD 7E                   ld a,(hl)
 600+ B3FE 23                   inc hl
 601+ B3FF 3E B4                ld a,180   ;test
 602+ B401 22 06 B4             ld (fadein),hl
 603+ B404 E1                   pop hl
 604+ B405 C9                   ret
 605+ B406
 606+ B406 00 00        fadein     dw 0   ;holds address of colours to fetch for screen colouring
 607+ B408 00           in_out:    db 0   ;1=draw inward, 0=draw outward
 608+ B409 02           size1:     db 2   ; size of square to draw ;double the number to draw
 609+ B40A 02           num2draw1: db 2   ;number of squares to draw
 610+ B40B 00           cur_screen db 0   ;hold the current screen in view for the exit screen
 611+ B40C 00           cur_page   db 0   ;hold the current screen thats paged in view for the exit screen
 612+ B40D
 613+ B40D              ;###########################################################################
 614+ B40D
 615+ B40D              new_maze_anim:
 616+ B40D              ;    nextreg $69,0
 617+ B40D              ; nextreg $52,10
 618+ B40D 3E 01                    ld a,1
 619+ B40F 32 08 B4                 ld (in_out),a       ;indicate we are drawing in to the middle
 620+ B412
 621+ B412              ;set hl yo point to screen colours to colour in
 622+ B412 21 00 00                 ld hl,0             ;ROM for now
 623+ B415 22 06 B4                 ld (fadein),hl
 624+ B418
 625+ B418
 626+ B418              ;reset the boxes to default
 627+ B418              ; this must be the same as the size of the square to draw
 628+ B418 3E 18                    ld a,24    ; reduce the size of the square to draw
 629+ B41A 32 09 B4                 ld (size1),a
 630+ B41D
 631+ B41D              ; this must equal the number of squares to draw
 632+ B41D 3E 0C                    ld a,12  ;number of boxes to draw
 633+ B41F 32 0A B4                 ld (num2draw1),a
 634+ B422
 635+ B422 21 01 58                 ld hl,22529;    22528+65-32-32 ;start point - middle of the screen nearly!
 636+ B425
 637+ B425
 638+ B425              d_box_1:
 639+ B425 CD AB B3                 call box1           ;draw the box
 640+ B428                        ;  call FlipULABuffers_peter
 641+ B428 11 22 00                	ld de,34
 642+ B42B
 643+ B42B 19                       add hl,de           ;next box to draw
 644+ B42C CD 42 81                 call pause
 645+ B42F CD 42 81                 call pause
 646+ B432
 647+ B432 3A 09 B4                 ld a,(size1)     ; increase the size of the square to draw
 648+ B435 3D                       dec a
 649+ B436 3D                       dec a
 650+ B437 32 09 B4                 ld (size1),a
 651+ B43A
 652+ B43A
 653+ B43A 3A 0A B4                 ld a,(num2draw1)  ;number of boxes to draw
 654+ B43D 3D                       dec a
 655+ B43E 32 0A B4                 ld (num2draw1),a
 656+ B441 FE 00                    cp 0
 657+ B443 C2 25 B4                 jp nz, d_box_1     ; exit when we get to 2 as routine fails after that.
 658+ B446
 659+ B446 C9                       ret
 660+ B447
 661+ B447
# file closed: src/7-rd3dmazeV6.asm
 718  B447
 719  B447              ;##############################################
 720  B447              ;misc data
 721  B447              ;various variables
 722  B447              ;udg charachter set
 723  B447              ;##############################################
 724  B447
 725  B447                      org 64000       ;fa00
 726  FA00
 727  FA00              ;variables
 728  FA00              ;-----------------------------------------------
 729  FA00
 730  FA00 00 00        player_pos: dw $0                  ; only when in the main game loop
 731  FA02                                             ; holds the low byte of the current insertion location when inserting a passageway into the maze.
 732  FA02
 733  FA02              ;l4083:  db 134               ; high byte of the maze location data
 734  FA02              ;l4084:  db 08                ; holds the desired length of the passageway beign inserted when constructing the maze.
 735  FA02 06           maxview: db 6                   ;holds how far we can see before
 736  FA03                                              ;hitting a wall
 737  FA03              ;l4085:  db $01               ; holds the passageway direction when inserting a passageway into the maze ($00=north, $01=west, $02=south, $03=east).
 738  FA03
 739  FA03 00           flags:  db 0                 ; flags:
 740  FA04                                           ;na   bit 7: 1=the player has been caught.
 741  FA04                                           ;na   bit 6: 1=the player has moved forwards.408a
 742  FA04                                           ;na   bit 5: 1=the player has not moved and so there is no need to redraw the view of the maze.
 743  FA04                                           ;na   bit 4: 1=the exit is visible.
 744  FA04                                           ;na   bit 3: 1=rex has moved.
 745  FA04                                           ;na   bit 2: 1=rex has moved into a new location.
 746  FA04                                           ;na   bit 1: 1=rex has his left foot forward, 0=rex has his right foot forward.
 747  FA04                                           ; bit 0: maxview used bit
 748  FA04
 749  FA04 00           var1:   db 0  ; used for printing
 750  FA05
 751  FA05 00           var2:   db 0  ; used for printing
 752  FA06
 753  FA06 00           depth:  db 0  ; stores our depth of field when we are looking
 754  FA07 00           l4086:  db 0
 755  FA08
 756  FA08              player_dir:
 757  FA08 00                   db 0  ;; only when in the main game loop
 758  FA09              de_count:
 759  FA09 00 00                dw 0  ;used to hold 2 bytes of reg de for maze locating info
 760  FA0B
 761  FA0B 00 00        left     dw 0000
 762  FA0D 00 00        right    dw 0000
 763  FA0F 00 00        var3     dw 0000     ;misc. used in drawing walls
 764  FA11 00 00        var4     dw 0000     ;misc. used in drawing walls
 765  FA13 00 00        var5     dw 0000     ;misc - used in drawing walls
 766  FA15 00 00        var6     dw 0000     ;stores current maze block check position
 767  FA17
 768  FA17 00           end_wall db 0        ;stores whether current wall being draw is
 769  FA18                                   ;an outside maze wall or not (as we want to treat
 770  FA18                                   ;this differnetly when drawn in future
 771  FA18 00 00        var7     dw 0        ;misc loop counter in walls
 772  FA1A 00 00        var8     dw 0        ;not used
 773  FA1C 00 00        var9     dw 0        ;not used
 774  FA1E 00           var10    db 0        ;used for maze wall drawing at depth 5
 775  FA1F 00           lr_wall  db 0        ;used for left and right wall drawing in draw_side_walls routine
 776  FA20 00 00        w5_start dw 0        ;not used
 777  FA22 00           cur_map  db 0        ;stores current map to draw or show
 778  FA23 00 00        map_start dw 0       ;tores the map start address
 779  FA25
 780  FA25 00 00        furthest_point dw 0 ;store the address of the furthest point
 781  FA27                                  ;we can see in the maze from our position.
 782  FA27 00           blockid  db 0        ;stores  block position of layer 5 for wall drawing
 783  FA28 71           maze_highbyte db $71 ;holds high byte of current maze in use
 784  FA29 00           map_show    db  0    ;tells is if we are already showing the map
 785  FA2A 00           show_exit       db 0 ;used to say whether to draw the full size exit door or not
 786  FA2B                                   ;0 = draw a closed exit door
 787  FA2B                                   ;1 = draw an open exit door
 788  FA2B 00           switch_pulled   db  0 ; 0 and 1 for on and off - default off
 789  FA2C 00 00        sp_store        dw  0   ;save and restore the SP
 790  FA2E
 791  FA2E              ;#############################################################
 792  FA2E              ;reserve 200 bytes for the stack - points here from BASIC
 793  FA2E              ;stack pointer lives here
 794  FA2E 00 00 00...  stack_p        block 200
 795  FAF6
 796  FAF6              ;stack pointer is at 64511
 797  FAF6
 798  FAF6              ;##############################################
 799  FAF6              ;udg charachter set starts at 64512
 800  FAF6              ;##############################################
 801  FAF6
 802  FAF6                      org 64512
 803  FC00
 804  FC00              ;##############################################
 805  FC00                    ;UDG Characher Defs
 806  FC00              ;##############################################
 807  FC00              _chars:
 808  FC00 48 4B 97 93   db	72,75,151,147,137,68,36,18      ;80	65080	;door wood effect 1
 808  FC04 89 44 24 12
 809  FC08 A8 44 A2 A9   db	168,68,162,169,41,66,148,164	;81	65088   ;door wood effect 2
 809  FC0C 29 42 94 A4
 810  FC10 11 2A 52 54   db	17,42,82,84,78,78,37,18  	    ;82	65096   ;door wood effect 3
 810  FC14 4E 4E 25 12
 811  FC18 28 48 A4 94   db	40,72,164,148,74,146,36,72  	;83	65104   ;door wood effect 4
 811  FC1C 4A 92 24 48
 812  FC20 34 34 34 F7   db	52,52,52,247,247,52,52,52     	;84	65112	;Door Barsvertical
 812  FC24 F7 34 34 34
 813  FC28 00 00 00 FF   db	0,0,0,255,255,0,0,0   	        ;85	65120   ;Door Bars Crossbars
 813  FC2C FF 00 00 00
 814  FC30 AC EC 6C 2C   db	172,236,108,44,44,46,47,45	    ;86	65128	;door bars left side
 814  FC34 2C 2E 2F 2D
 815  FC38 35 37 36 34   db	53,55,54,52,52,116,244,180	    ;87	65136	;door bars right side
 815  FC3C 34 74 F4 B4
 816  FC40              ;rest of door graphic chars are at $b9 onwards below
 817  FC40
 818  FC40 C0 F0 FC FF   db	192,240,252,255,255,252,240,192 ;88	65144   left hand triangle pointed
 818  FC44 FF FC F0 C0
 819  FC48 03 0F 3F FF   db	3,15,63,255,255,63,15,3         ;89	65152	right hand triangle pointed
 819  FC4C FF 3F 0F 03
 820  FC50 00 00 00 00   db	0,0,0,0,0,0,0,0	                ;8a	65160
 820  FC54 00 00 00 00
 821  FC58 FF 55 FF AF   db	255,85,255,175,255,95,255,255   ;8b	65168	upper wall 5 right bottom
 821  FC5C FF 5F FF FF
 822  FC60 FF D5 FF FA   db	255,213,255,250,255,253,255,255	;8c	upper wall 5 left bottom
 822  FC64 FF FD FF FF
 823  FC68
 824  FC68              ;extra layer 5 chars
 825  FC68 FF 3F F3 9F   db	255,63,243,159,244,47,249,143 	 ;8d	small wall stretched (layer 3)
 825  FC6C F4 2F F9 8F
 826  FC70 FF 8C FF 26   db	255,140,255,38,255,140,255,38 	 ;8e	small wall stretched (layer 3)
 826  FC74 FF 8C FF 26
 827  FC78
 828  FC78               ;Section 2 left and right UDG
 829  FC78 00 00 00 00   DB 0,0,0,0,0,3,31,255              ;8f 65200  top right Section 2 (1)
 829  FC7C 00 03 1F FF
 830  FC80 00 00 01 0F   DB 0,0,1,15,127,255,255,255        ;90 65208  top right Section 2 (2)
 830  FC84 7F FF FF FF
 831  FC88 07 3F FF FF   DB 7,63,255,255,255,255,255,255    ;91 65216  top right Section 2 (3)
 831  FC8C FF FF FF FF
 832  FC90
 833  FC90 FF 1F 03 00   DB 255,31,3,0,0,0,0,0              ;92 65224   bottom right Section 2 (1)
 833  FC94 00 00 00 00
 834  FC98 FF FF FF 7F   DB 255,255,255,127,15,1,0,0        ;93 65232   bottom right Section 2 (2)
 834  FC9C 0F 01 00 00
 835  FCA0 FF FF FF FF   DB 255,255,255,255,255,255,63,7    ;94 65240   bottom right Section 2 (3)
 835  FCA4 FF FF 3F 07
 836  FCA8
 837  FCA8 E0 FC FF FF   DB 224,252,255,255,255,255,255,255 ;95 65248   top left Section 2 (1)
 837  FCAC FF FF FF FF
 838  FCB0 00 00 80 F0   DB 0,0,128,240,254,255,255,255     ;96 65256   top left Section 2 (2)
 838  FCB4 FE FF FF FF
 839  FCB8 00 00 00 00   DB 0,0,0,0,0,192,248,255           ;97 65264   top left Section 2 (3)
 839  FCBC 00 C0 F8 FF
 840  FCC0
 841  FCC0 FF FF FF FF   DB 255,255,255,255,255,255,252,224 ;98 65272   bottom left Section 2 (1)
 841  FCC4 FF FF FC E0
 842  FCC8 FF FF FF FE   DB 255,255,255,254,240,128,0,0     ;99 65280   bottom left Section 2 (2)
 842  FCCC F0 80 00 00
 843  FCD0 FF F8 C0 00   DB 255,248,192,0,0,0,0,0           ;9a 65288   bottom left Section 2 (3)
 843  FCD4 00 00 00 00
 844  FCD8
 845  FCD8 80 C0 E0 F0   DB	128,192,224,240,245,250,245,250	;9b	65296	layer 5 left top
 845  FCDC F5 FA F5 FA
 846  FCE0 F5 FA F5 FA   DB	245,250,245,250,240,224,192,128	;9c	65304	layer 5 left bottom
 846  FCE4 F0 E0 C0 80
 847  FCE8 01 03 07 0F   DB	1,3,7,15,95,175,95,175         	;9d	65312   layer 5 right top
 847  FCEC 5F AF 5F AF
 848  FCF0 5F AF 5F AF   DB	95,175,95,175,15,7,3,1         	;9e	65320	layer 5 right bottom
 848  FCF4 0F 07 03 01
 849  FCF8 55 AA 55 AA   DB	85,170,85,170,85,170,85,170    	;9f	65328	chequer
 849  FCFC 55 AA 55 AA
 850  FD00 55 AA 55 AA   DB	85,170,85,170,0,0,0,0          	;a0	65336	top chequer
 850  FD04 00 00 00 00
 851  FD08 00 00 00 00   DB	0,0,0,0,85,170,85,170          	;a1	65344	bottom chequer
 851  FD0C 55 AA 55 AA
 852  FD10 00 00 00 00   DB	0,0,0,0,255,255,255,255        	;a2	65352		bottom black
 852  FD14 FF FF FF FF
 853  FD18 FF FF FF FF   DB	255,255,255,255,0,0,0,0        	;a3	65360		top black
 853  FD1C 00 00 00 00
 854  FD20 FF 08 08 08   DB	255,8,8,8,255,128,128,255      	;a4	65368		brick pattern
 854  FD24 FF 80 80 FF
 855  FD28 99 C8 64 32   DB	153,200,100,50,25,140,206,171  	;a5	65376		top left brick diag
 855  FD2C 19 8C CE AB
 856  FD30 10 28 10 7C   DB	16,40,16,124,16,40,40,68       	;a6	65384		man
 856  FD34 10 28 28 44
 857  FD38 00 78 6B 7E   DB	0,120,107,126,124,104,120,0    	;a7	65392		switch
 857  FD3C 7C 68 78 00
 858  FD40 FF A5 FF A5   DB	255,165,255,165,165,255,165,255	;a8	65400		fancy square
 858  FD44 A5 FF A5 FF
 859  FD48 80 C0 E0 F0   DB	128,192,224,240,255,255,255,255	;a9	65408		top left 5
 859  FD4C FF FF FF FF
 860  FD50 01 03 07 0F   DB	1,3,7,15,255,255,255,255       	;aa	65416		top right 5
 860  FD54 FF FF FF FF
 861  FD58 FF FF FF FF   DB	255,255,255,255,240,224,192,128	;ab	65424		bot left  5
 861  FD5C F0 E0 C0 80
 862  FD60 FF FF FF FF   DB	255,255,255,255,15,7,3,1       	;ac	65432		bot right 5
 862  FD64 0F 07 03 01
 863  FD68 FF E5 FF FD   DB	255,229,255,253,253,255,255,255	;ad	65440		top right fancy
 863  FD6C FD FF FF FF
 864  FD70 FF A7 FF BF   DB	255,167,255,191,191,255,255,255	;ae	65448		top left fancy
 864  FD74 BF FF FF FF
 865  FD78 FF FF FF FF   DB	255,255,255,255,255,255,255,255	;af	65456		all black
 865  FD7C FF FF FF FF
 866  FD80 FF FE FC F8   DB	255,254,252,248,240,224,192,128	;b0	65464		top left triangle
 866  FD84 F0 E0 C0 80
 867  FD88 FF 7F 3F 1F   DB	255,127,63,31,15,7,3,1         	;b1	65472		top right triangle
 867  FD8C 0F 07 03 01
 868  FD90 01 03 07 0F   DB	1,3,7,15,31,63,127,255         	;b2	65480		bot right triangle
 868  FD94 1F 3F 7F FF
 869  FD98 80 C0 E0 F0   DB	128,192,224,240,248,252,254,255	;b3	65488		bot right triangle
 869  FD9C F8 FC FE FF
 870  FDA0
 871  FDA0 FF 55 FF AA   DB	255,85,255,170,255,85,255,170	;b4	65496		small wall
 871  FDA4 FF 55 FF AA
 872  FDA8 FF 88 88 FF   DB	255,136,136,255,162,162,255,128	;b5	65504		mediumwall
 872  FDAC A2 A2 FF 80
 873  FDB0 FF 88 88 88   DB	255,136,136,136,255,224,192,128	;b6	65512		largewall
 873  FDB4 FF E0 C0 80
 874  FDB8 FF AA FF AA   DB	255,170,255,170,255,170,255,170 ;b7	65520		mediumwall_1
 874  FDBC FF AA FF AA
 875  FDC0 FF 88 88 88   DB	255,136,136,136,255,128,128,128 ;b8	65528		hugewall
 875  FDC4 FF 80 80 80
 876  FDC8
 877  FDC8              ;layer 5 section 3 right TOP
 878  FDC8
 879  FDC8 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;b9 top right section 3 (4)
 879  FDCC FF FF FF FF
 880  FDD0 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;ba top right section 3 (3)
 880  FDD4 FF FF FF FF
 881  FDD8 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;bb top right section 3 (2)
 881  FDDC FF FF FF FF
 882  FDE0 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;bc top right section 3 (1)
 882  FDE4 FF FF FF FF
 883  FDE8
 884  FDE8              ;layer 5 section 3 right BOTTOM
 885  FDE8
 886  FDE8 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;bd top right section 3 (6)
 886  FDEC FF 00 00 00
 887  FDF0 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;be top right section 3 (6)
 887  FDF4 FF FF 00 00
 888  FDF8 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;bf top right section 3 (6)
 888  FDFC FF FF FF 00
 889  FE00 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c0 top right section 3 (6)
 889  FE04 FF FF FF FF
 890  FE08
 891  FE08              ;layer 5 section 3 left TOP TBD
 892  FE08
 893  FE08 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;c1 bottom right section 3 (5)
 893  FE0C FF 00 00 00
 894  FE10 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;c2 bottom right section 3 (6)
 894  FE14 FF FF 00 00
 895  FE18 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;c3 bottom right section 3 (6)
 895  FE1C FF FF FF 00
 896  FE20 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c4 bottom right section 3 (6)
 896  FE24 FF FF FF FF
 897  FE28
 898  FE28              ;layer 5 section 3 left BOTTOM TBD
 899  FE28
 900  FE28 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;c5 bottom right section 3 (5)
 900  FE2C FF FF FF FF
 901  FE30 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;c6 bottom right section 3 (6)
 901  FE34 FF FF FF FF
 902  FE38 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;c7 bottom right section 3 (6)
 902  FE3C FF FF FF FF
 903  FE40 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c8 bottom right section 3 (6)
 903  FE44 FF FF FF FF
 904  FE48
 905  FE48
 906  FE48              ;layer 5 section 4 right TOP
 907  FE48
 908  FE48 00 00 00 00   DB 0,0,0,0,0,0,0,255               ;c9 top right section 3 (4)
 908  FE4C 00 00 00 FF
 909  FE50 00 00 00 00   DB 0,0,0,0,0,0,255,255             ;ca top right section 3 (4)
 909  FE54 00 00 FF FF
 910  FE58 00 00 00 00   DB 0,0,0,0,255,255,255,255         ;cb top right section 3 (3)
 910  FE5C FF FF FF FF
 911  FE60 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;cc top right section 3 (2)
 911  FE64 FF FF FF FF
 912  FE68 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;cd top right section 3 (1)
 912  FE6C FF FF FF FF
 913  FE70
 914  FE70              ;layer 5 section 4 right BOTTOM
 915  FE70
 916  FE70 FF 00 00 00   db 255,0,0,0,0,0,0,0               ;ce top right section 3 (6)
 916  FE74 00 00 00 00
 917  FE78 FF FF 00 00   db 255,255,0,0,0,0,0,0             ;cf top right section 3 (6)
 917  FE7C 00 00 00 00
 918  FE80 FF FF FF FF   db 255,255,255,255,0,0,0,0         ;d0 top right section 3 (6)
 918  FE84 00 00 00 00
 919  FE88 FF FF FF FF   db 255,255,255,255,255,255,0,0     ;d1 top right section 3 (6)
 919  FE8C FF FF 00 00
 920  FE90 FF FF FF FF   db 255,255,255,255,255,255,255,0   ;d2 top right section 3 (6)
 920  FE94 FF FF FF 00
 921  FE98
 922  FE98
 923  FE98              ;Extra wall5
 924  FE98              ; db	249,63,243,159,244,47,249,143 	;c9	small wall stretched more
 925  FE98              ; db 255,15,255,31,255,15,255,15	   	;ca	small wall stretched
 926  FE98              ; db 240,15,224,31,224,15,112,15	   	;cb	small wall stretched
 927  FE98
 928  FE98              ;triangular door wood parts
 929  FE98 FF FF FE FB   db	255,255,254,251,249,228,228,146     ;d3	   ;door wood effect top corner 1 right side($80)
 929  FE9C F9 E4 E4 92
 930  FEA0 88 CB E7 F3   db	136,203,231,243,249,252,254,255	    ;d4	   ;door wood effect bottom corner 1 (80)
 930  FEA4 F9 FC FE FF
 931  FEA8 FF FE FE FC   db	255,254,254,252,254,238,229,146     ;d5	   ;door wood effect top corner 3 right side($82)
 931  FEAC FE EE E5 92
 932  FEB0 91 CA E2 F4   db	145,202,226,244,250,252,254,255    	;d6    ;door wood effect bottom corner 1 (82)
 932  FEB4 FA FC FE FF
 933  FEB8
 934  FEB8              ;additional characters for level numbers printed on right of display
 935  FEB8              ;single caracter 10,11,12,13,14,15
 936  FEB8 00 4C 52 52    db  0,76,82,82,82,82,76,0             ;d7
 936  FEBC 52 52 4C 00
 937  FEC0 00 48 48 48    db  0,72,72,72,72,72,72,0             ;d8
 937  FEC4 48 48 48 00
 938  FEC8 00 4C 52 42    db  0,76,82,66,68,72,94,0             ;d9
 938  FECC 44 48 5E 00
 939  FED0 00 4C 52 46    db  0,76,82,70,66,82,76,0             ;da
 939  FED4 42 52 4C 00
 940  FED8 00 42 46 4A    db  0,66,70,74,94,66,66,0             ;db
 940  FEDC 5E 42 42 00
 941  FEE0 00 4E 50 4C    db  0,78,80,76,66,82,76,0             ;dc
 941  FEE4 42 52 4C 00
 942  FEE8
 943  FEE8
 944  FEE8              ;END_PROGRAM
 945  FEE8
 946  FEE8
 947  FEE8              ;for SJASMPLUS
 948  FEE8              ;;
 949  FEE8              ;; Set up the Nex output
 950  FEE8              ;;
 951  FEE8
 952  FEE8                      ; This sets the name of the project, the start address,
 953  FEE8                      ; and the initial stack pointer.
 954  FEE8               ;       SAVENEX OPEN "3dmaze.nex";, start_game  ;, END_PROGRAM
 955  FEE8                      SAVEBIN "3dmaze.bin",32768,32767
 956  FEE8
 957  FEE8                      ; This asserts the minimum core version.  Set it to the core version
 958  FEE8                      ; you are developing on.
 959  FEE8              ;        SAVENEX CORE 2,0,0
 960  FEE8
 961  FEE8                      ; This sets the border colour while loading (in this case white),
 962  FEE8                      ; what to do with the file handle of the nex file when starting (0 =
 963  FEE8                      ; close file handle as we're not going to access the project.nex
 964  FEE8                      ; file after starting.  See sjasmplus documentation), whether
 965  FEE8                      ; we preserve the next registers (0 = no, we set to default), and
 966  FEE8                      ; whether we require the full 2MB expansion (0 = no we don't).
 967  FEE8              ;        SAVENEX CFG 7,0,0,0
 968  FEE8
 969  FEE8                      ; Generate the Nex file automatically based on which pages you use.
 970  FEE8              ;        SAVENEX AUTO
 971  FEE8
# file closed: src/rd3dmazeV6-sj.asm
