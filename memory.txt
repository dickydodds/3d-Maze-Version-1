# file opened: src/rd3dmazeV6-sj.asm
   1  0000              ; written by me, richard dodds (dickydodds.com) beginning may 2018
   2  0000
   3  0000              ; some useful info:-
   4  0000              ; the zx81 character based screen is drawn in memory and then copied to the spectrum screen.
   5  0000
   6  0000              ;2nd oct 2018 - layer 6 completed - can print udg and spectrum
   7  0000              ;             character set now.
   8  0000              ;20th oct 2018 - left side completed except for multiple blocks in
   9  0000              ;layer 2, 3 & 4
  10  0000              ;11th oct - left side done and colours added.
  11  0000              ;V3. 22 nov - left side properly fixed - had bugs on top and bottom of maze
  12  0000              ;V4 27 nov. Removed the maze generation code from Malcolm Evans
  13  0000              ;V6 - 20 June 2018 - fixed end wall distance. Started chopping into manageable chunks.
  14  0000              ;2019 - done a load of stuff!
  15  0000              ;Oct 2020 - moved to SJASMPlus and implemented backbuffer
  16  0000              ;Oct 19 2020 - added ULANext colours and removed maze printing routine that used ROM - implemented M/C one.
  17  0000              ;Nov 23rd 2020 - got switch graphics working.
  18  0000
  19  0000              ;For SJASMPLUS
  20  0000
  21  0000                      ; Allow the Next paging and instructions
  22  0000                      DEVICE ZXSPECTRUMNEXT
  23  0000
  24  0000                      ; Generate a map file for use with Cspect
  25  0000                      CSPECTMAP "project.map"
  26  0000
  27  0000
  28  0000                ;      INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
  29  0000                ;      INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
  30  0000
  31  0000
  32  0000              ;for info...
  33  0000              ;load "4-rd3dmazeV6.asm" ; draw left side of maze
  34  0000              ;load "5-rd3dmazeV6.asm" ; draw wall in front of player
  35  0000              ;load "6-rd3dmazeV6.asm" ; draw right side of maze
  36  0000
  37  0000
  38  0000              ;##################################################
  39  0000              ;##################################################
  40  0000              ;##################################################
  41  0000              ;##################################################
  42  0000              ;##################################################
  43  0000              ;#                                                #
  44  0000              ;#               main game loop here              #
  45  0000              ;#                                                #
  46  0000              ;##################################################
  47  0000              ;##################################################
  48  0000              ;##################################################
  49  0000              ;##################################################
  50  0000              ;##################################################
  51  0000
  52  0000              main:           org 32768
  53  8000
  54  8000                            ;  ld bc, $7ffd
  55  8000                            ;  in a,(c)
  56  8000
  57  8000              ;;; dont forget to create your character set on the next! ;;
  58  8000
  59  8000              ;set the player direction based on keypress
  60  8000              ; 0=north, 1=west, 2=south, 3=east
  61  8000
  62  8000 F3           start_game:    di       ;disable interrupts
  63  8001
  64  8001              ;first, clear the 2 ULA bank screens as they are at ROM location 0
  65  8001
  66  8001 ED 91 50 0A                NEXTREG $50,10
  67  8005 CD 8E 81                   CALL clsULA
  68  8008 ED 91 50 0E                NEXTREG $50,14
  69  800C CD 8E 81                   CALL clsULA
  70  800F
  71  800F              ;setup ULA Plus Palette
  72  800F
  73  800F CD 9F 82                   call Setup_palette
  74  8012
  75  8012              ; jump straight into sjasmplus debugger
  76  8012                    ;  BREAK
  77  8012
  78  8012              ;SET DEFAULT PLAYER POSITION AND DIRECTION
  79  8012              ; 0=north, 1=west, 2=south, 3=east
  80  8012 3E 02                      ld a,2            ;set default to be south
  81  8014 32 08 FA                   ld (player_dir),a
  82  8017
  83  8017                            ;make sure our exit door is closed
  84  8017 AF                         xor a                 ;reg a=0
  85  8018 32 2A FA                   ld (show_exit),a
  86  801B                            ;make sure our switch is up = 0 = not pulled
  87  801B 32 2B FA                   ld (switch_pulled),a
  88  801E
  89  801E              ;remember to set maze_highbyte for current maze
  90  801E
  91  801E              ;start on maze map 0
  92  801E              a_map:
  93  801E 3E 06                      ld a,6
  94  8020 CD B7 A2                   call set_map      ;set our map
  95  8023
  96  8023              ;              ld h,$71          ;set at maze 1 bottom maze
  97  8023 2E 01                      ld l,01              ;top left of maze
  98  8025
  99  8025 22 00 FA                   ld (player_pos),hl
 100  8028
 101  8028              main_loop:
 102  8028
 103  8028
 104  8028              ;set border to black - the beep sound makes it red so cant use this :(
 105  8028 0E FE                      ld c,254
 106  802A                          ;  ld a,39  ;black
 107  802A 3E 40                      ld a,64
 108  802C ED 79                      out (c),a
 109  802E              ;0=red
 110  802E              ;32=red
 111  802E              ;34 purple
 112  802E              ;64 = red
 113  802E              ;254 = off white
 114  802E              ;244 cyan
 115  802E              ;234 purple
 116  802E              ;224 red
 117  802E              ;214 whitish
 118  802E              ;204 cyan
 119  802E              ;203 purple
 120  802E
 121  802E              ;set CPU Speed
 122  802E                            ;set CPU Speed Mhz
 123  802E                            ;0 = 3.5
 124  802E                            ;1 = 7
 125  802E                            ;2 = 14
 126  802E                            ;4 = 28
 127  802E ED 91 07 01                nextreg 7,1
 128  8032
 129  8032                         ;   ;put standard printing back to black text & white paper
 130  8032                         ;   ld a,98
 131  8032                         ;   ld (att),a
 132  8032
 133  8032
 134  8032
 135  8032 CD 80 81                   call clear_char_screen    ;clear screen @c000
 136  8035
 137  8035 CD 93 8D                   call get_distance ; get distance we can see
 138  8038                                              ; and save depth we can see
 139  8038                            ; load de is done when getting the distance above
 140  8038                            ; we need de to hold the jump value in the maze direction
 141  8038                            ; we are looking
 142  8038
 143  8038 CD 67 8F                   call draw_left_side   ; start drawing the left side of the maze
 144  803B
 145  803B                            ;we need to repopulate var furthest_point
 146  803B
 147  803B CD 93 8D                   call get_distance     ; get distance we can see
 148  803E                                                  ; and set de accordingly
 149  803E                                                  ; and save depth we can see
 150  803E
 151  803E CD 80 9B                   call draw_right_side  ; start drawing the right side of the maze
 152  8041
 153  8041 CD 0A 97                   call draw_front_view  ; draw wall in front of player
 154  8044
 155  8044                            ;check if we are at an end wall. If so, draw walls left
 156  8044                            ;and right to simulate the long outside edge wall
 157  8044
 158  8044 CD 96 97                   call draw_side_walls
 159  8047
 160  8047                            ;draw screen at mem location 0000
 161  8047                            ;my print used to print screen @c000 to 16384 inc udg's
 162  8047 CD 8E 8C                   call my_print         ;copy to screen from c000
 163  804A
 164  804A                            ;we need to copy the colours to an alternate memory screen then copy them back to the main screen
 165  804A                            ;we do this because we use the alternate colour screen when we transition between levels
 166  804A CD 18 99                   call draw_colours     ;colourise the display but store at address 'attr_screen'
 167  804D
 168  804D CD 59 B4                   call copy_colours     ;copy colour map to screen
 169  8050
 170  8050                            ;make sure we point to our character set
 171  8050 21 00 C5                   ld hl,charset_1-256
 172  8053 22 36 8C                   ld (base),hl
 173  8056 CD E1 8C                   call compass          ; draw compass
 174  8059
 175  8059              ;------------------------------------------------------------------------
 176  8059                            ;see if we need to draw the door or switch
 177  8059 3E 01            ld a,1
 178  805B 32 2B FA         ld (switch_pulled),a
 179  805E
 180  805E CD CC 8E                   call draw_door        ;see if we need to draw a door
 181  8061 CD 1F 8F                   call draw_switch     ;see if we need to draw a switch
 182  8064              ;----------------------------------------------------------------------
 183  8064              ;setup right hand side of the screen
 184  8064 CD 93 9A                   call draw_screen_right
 185  8067
 186  8067                            ;do the walking sound
 187  8067 1E 0A        	          ld e,10		;10 for the walk sound
 188  8069 CD D6 A2                   call walk_sound
 189  806C
 190  806C                            ;now flip the screen into the visible screen
 191  806C CD CB 81                   call FlipULABuffers_peter
 192  806F
 193  806F
 194  806F
 195  806F              ;set CPU Speed
 196  806F                            ;set CPU Speed Mhz
 197  806F                            ;0 = 3.5
 198  806F                            ;1 = 7
 199  806F                            ;2 = 14
 200  806F                            ;4 = 28
 201  806F ED 91 07 00                nextreg 7,0
 202  8073
 203  8073              ;#######################################
 204  8073              ;now move based on keypress
 205  8073              ;#######################################
 206  8073
 207  8073              ;Now set our view direction based on keypress
 208  8073
 209  8073              ;c bit values: 1 = 0 fire
 210  8073               ;             2 = 5 right
 211  8073               ;             4 = 7 up (forward)
 212  8073               ;             8 = 6 down
 213  8073               ;            16 = 8 left
 214  8073
 215  8073
 216  8073              ;set the player direction based on keypress
 217  8073              ; 0=north, 1=west, 2=south, 3=east
 218  8073
 219  8073
 220  8073              ;######################################
 221  8073              ;speed of game set here
 222  8073              ;######################################
 223  8073
 224  8073 CD 6B 81                   call pause         ;slow down the game here
 225  8076
 226  8076              wait4key:
 227  8076 CD 69 A2                   call get_keys      ;keypress in C register
 228  8079 79                         ld a,c
 229  807A B7                         or a               ;clear flags
 230  807B CA 76 80                   jp z,wait4key      ;wait for a keypress b4 continuing
 231  807E
 232  807E                            ;check if its the map key and have we already pressed it
 233  807E 47                         ld b,a             ;save our key
 234  807F 3A 29 FA                   ld a,(map_show)    ;get our last pressed map key
 235  8082 90                         sub b              ;map key is 0 =1 in reg a
 236  8083                                               ;1= we are already showing the map, 0 says we are not
 237  8083 28 F1                      jr z,wait4key      ;zero flag set if map_show=1 so do nothing
 238  8085
 239  8085 AF                         xor a               ;make reg a zero
 240  8086 32 29 FA                   ld (map_show),a
 241  8089 78                         ld a,b              ;now carry on :)
 242  808A
 243  808A FE 20                      cp $20;16              ; 8 (right) pressed
 244  808C CA DE 80                   jp z,plus
 245  808F
 246  808F FE 01        key_x         cp 1;8               ;x pressed. (old) 8=6 (down) pressed
 247  8091 C2 AD 80                   jp nz, comp_4      ;carry on if not pressed otherwise return to BASIC
 248  8094 ED 91 43 0E                nextreg $43,$0E      ;turn off ulanext
 249  8098 ED 91 69 00                nextreg $69,0      ;turn off ula banking
 250  809C ED 91 50 FF                NEXTREG $50,$FF
 251  80A0 ED 91 52 0A                NEXTREG $52,$0A
 252  80A4 01 FD 7F                   ld bc,$7ffd
 253  80A7 3E FF                      ld a, $ff
 254  80A9 ED 79                      out (c),a
 255  80AB
 256  80AB                          ;  ld iy,$5c3a
 257  80AB FB                         ei
 258  80AC C9                         ret                ;return to BASIC
 259  80AD
 260  80AD FE 08        comp_4:       cp 8;4               ;7 (forward) pressed
 261  80AF CA F9 80                   jp z,move_forward
 262  80B2
 263  80B2 FE 04                      cp 4;2               ; 5 (left) pressed
 264  80B4 CA EB 80                   jp z,minus
 265  80B7
 266  80B7                            ;0 was pressed or we never get here!
 267  80B7 A8                         xor b             ;make b zero
 268  80B8 3A 29 FA                   ld a,(map_show)
 269  80BB 90 97                      sub b,a           ;exit if b=1 as we are already showing the map!
 270  80BD C2 76 80                   jp nz,wait4key
 271  80C0 3C                         inc a             ;a=1 to show we pressed 6 to show the map
 272  80C1 32 29 FA                   ld (map_show),a   ;save it
 273  80C4 E5                         push hl
 274  80C5
 275  80C5 32 29 FA                   ld (map_show),a   ;save that we have pressed 6 - reg a = 1
 276  80C8 3A CA 81                   ld a,(ULABank)
 277  80CB                       ;     NEXTREG $52,a    ;page in the proper ULA screen but dont display it unless
 278  80CB                                              ;already displayed.
 279  80CB CD 8E 81                   CALL clsULA       ;clear the hidden ULA Screen as it shows old data
 280  80CE CD 42 8B                   CALL DRAW_MAP
 281  80D1 CD AB 81                   call FlipULABuffers
 282  80D4 E1                         pop hl
 283  80D5
 284  80D5 C3 76 80                   jp wait4key
 285  80D8
 286  80D8 32 08 FA     go1:          ld (player_dir),a
 287  80DB C3 28 80                   jp main_loop      ;start again
 288  80DE
 289  80DE
 290  80DE              plus:
 291  80DE 3A 08 FA                   ld a,(player_dir)
 292  80E1 3C                         inc a
 293  80E2 FE 04                      cp 4          ;if its 4, make it 0 as it cant be >3
 294  80E4 C2 D8 80                   jp nz,go1     ;start game loop if its not 4
 295  80E7 97                         sub a         ;make it 0 (wraparound
 296  80E8 C3 D8 80                   jp go1
 297  80EB
 298  80EB 3A 08 FA     minus:        ld a,(player_dir)
 299  80EE 3D                         dec a
 300  80EF FE FF                      cp 255
 301  80F1 C2 D8 80                   jp nz,go1         ;continue game if not 0
 302  80F4 3E 03                      ld a,3            ;wraparound
 303  80F6 C3 D8 80                   jp go1
 304  80F9
 305  80F9
 306  80F9              ;how do i implement a less-than/greater-than test in assembly?
 307  80F9
 308  80F9              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
 309  80F9              ;a and the argument were equal, else if the carry is set the argument was greater,
 310  80F9              ;and finally, if neither is set, then reg 'a' must be greater
 311  80F9              ;(cp does nothing to the registers, only the f (flag) register is changed).
 312  80F9
 313  80F9              move_forward:
 314  80F9
 315  80F9              ;----------------------------------------------------------------------------
 316  80F9              ;1st, check if we are trying to enter an open exit door
 317  80F9              ;so, is the door open?
 318  80F9
 319  80F9              ; door will always face NORTH.
 320  80F9              ; show door type = 0 = front, 1 = side
 321  80F9
 322  80F9                         ;  ld (show_exit),a
 323  80F9                           ;are we facing south?
 324  80F9 3A 08 FA                  ld a,(player_dir)
 325  80FC D6 02                     sub 2                  ;2 = south
 326  80FE 20 23                     jr nz,cont_a           ;if not, just continue in the normal way
 327  8100
 328  8100 2A 00 FA                  ld hl,(player_pos)
 329  8103 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 330  8106 19                        add hl,de
 331  8107 7E                        ld a,(hl)
 332  8108 FE C0                     cp _me                 ;is it our DOOR block?
 333  810A 20 17                     jr nz,cont_a           ;if not, just continue in the normal way
 334  810C                           ;YES its a door - so exit through it - but only if we are looking south
 335  810C 3A 2B FA                  ld a,(switch_pulled)
 336  810F A7                        and a
 337  8110 28 11                     jr z,cont_a            ;if not, just continue in the normal way
 338  8112              ;Door is in front of us AND open so lets exit!
 339  8112
 340  8112                         ; reset the switch pulled back to off position
 341  8112 AF                       xor a
 342  8113 32 2B FA                 ld (switch_pulled),a
 343  8116
 344  8116              ;reset switch sound variable
 345  8116 32 2E FA                 ld (switch_sound ),a
 346  8119
 347  8119              ;need to set the player start position now.
 348  8119
 349  8119               ;           ld a,(cur_map)
 350  8119               ;           dec a               ;point to our next map
 351  8119               ;           call set_map      ;set our map
 352  8119               ;           ld l,01              ;top left of maze
 353  8119               ;           ld (player_pos),hl
 354  8119
 355  8119              ;draw exit animation
 356  8119                          ;we moved forward and overwrote the door so redraw it
 357  8119 ED 91 07 03              nextreg 7,3             ;set cpu speed to max
 358  811D                       ;   call draw_exit_door_open
 359  811D
 360  811D CD 23 B3                 call exit_anim
 361  8120
 362  8120 C3 28 80                 jp main_loop          ;jump to our next level
 363  8123              ;--------------------------------------------------------------------------------
 364  8123              cont_a:
 365  8123              ;1st, check if we are trying to flick the switch on
 366  8123              ;so, is the door open?
 367  8123
 368  8123              ; switch will always face NORTH.
 369  8123              ; show switch type = 0 = off, 1 = on
 370  8123
 371  8123                           ;are we facing south?
 372  8123 3A 08 FA                  ld a,(player_dir)
 373  8126 D6 02                     sub 2                  ;2 = south
 374  8128 20 17                     jr nz,cont_b           ;if not, just continue in the normal way
 375  812A
 376  812A 2A 00 FA                  ld hl,(player_pos)
 377  812D 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 378  8130 19                        add hl,de
 379  8131 7E                        ld a,(hl)
 380  8132 FE E0                     cp _ms                 ;is it our SWITCH block?
 381  8134 20 0B                     jr nz,cont_b           ;if not, just continue in the normal way
 382  8136                           ;YES its a switch - so mark it as switched on
 383  8136 3E 01                     ld a,1
 384  8138 32 2B FA                  ld (switch_pulled),a
 385  813B
 386  813B              ;draw switch
 387  813B CD 1F 8F                 call draw_switch      ;draw our switch
 388  813E C3 28 80                 jp main_loop          ;jump to our next level
 389  8141              ;--------------------------------------------------------------------------------
 390  8141
 391  8141 3A 02 FA     cont_b:       ld a,(maxview)         ;if our maximum view depth = 0 ie we are
 392  8144                                                  ;in front of a wall face
 393  8144                                                  ;then do nothing
 394  8144 3C                         inc a
 395  8145 3D                         dec a
 396  8146 CA 76 80                   jp z,wait4key
 397  8149
 398  8149 CD AA 8E                   call load_walk        ; get walk forward value to add
 399  814C 2A 00 FA                   ld hl,(player_pos)    ;get our current position
 400  814F 7C                         ld a,h                ;save our current H value for comparing later
 401  8150 19                         add hl,de              ;move our position forward in our view
 402  8151
 403  8151 BC                         cp h              ;have we crossed 256 byte boundry?
 404  8152 C2 28 80                   jp nz,main_loop   ;we have exited our boundry so dont
 405  8155                                              ;move our view anywhere.
 406  8155                            ;now test if l=0
 407  8155              ;              ld a,l
 408  8155 2C                         inc l
 409  8156 2D                         dec l             ;are we at position 0? Exit if yes and do nothing
 410  8157                            ;cp 0
 411  8157 CA 28 80                   jp z,main_loop   ;we are at location 0 in the maze, so, again do nothing
 412  815A                                              ;and just exit so we stay at position 1
 413  815A
 414  815A              ;;;;;;;;;;#########################
 415  815A                            ;now check if l=255 ;
 416  815A              ;              cp 255                ;are we at the bottom edge of the maze
 417  815A              ;              jp z,main_loop
 418  815A
 419  815A                            ;we ARE at the bottom row so DO NOT MOVE FORWARD
 420  815A 22 00 FA                   ld (player_pos),hl
 421  815D C3 28 80                   jp main_loop          ;continue to the game loop
 422  8160
 423  8160
 424  8160
 425  8160
 426  8160              ;we get here as we are not at the bottom of the maze.
 427  8160 FE 10        move_1:       cp 16                 ;are we at the top edge of the maze?
 428  8162 D2 28 80                   jp nc,main_loop
 429  8165 22 00 FA                   ld (player_pos),hl    ;save our new position
 430  8168
 431  8168              ;we are at the TOP of the maze so dont saaveour addition to HL
 432  8168 C3 28 80                   jp main_loop          ;continue to the game loop
 433  816B
 434  816B              ;##########################################################################
 435  816B              ;Pause routine for slowing down the game
 436  816B
 437  816B E5           pause:        push hl
 438  816C C5                         push bc
 439  816D 06 01                      ld b,1           ;delay loop
 440  816F              loop19:       ;halt             ;no interrupts!
 441  816F 21 10 27                   ld hl,10000
 442  8172 2B           abc:          dec hl
 443  8173 7C                         ld a,h
 444  8174 3D                         dec a
 445  8175                            ;dec h
 446  8175 20 FB                      jr nz,abc
 447  8177 05                         dec b
 448  8178 C2 6F 81                   jp nz,loop19
 449  817B C1                         pop bc
 450  817C E1                         pop hl
 451  817D C9                         ret
 452  817E              ;##########################################################################
 453  817E
 454  817E              ;load other programs
 455  817E
 456  817E              ;for SJASMPLUS
 457  817E
 458  817E                  INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
# file opened: src/1-rd3dmazeV6.asm
   1+ 817E
   2+ 817E              ;variables
   3+ 817E
   4+ 817E              chan_open: equ 5633
   5+ 817E              cl_line:   equ 3652 ; clear screen not changing print pos
   6+ 817E              print:     equ 8252 ; print text line
   7+ 817E              at         equ 22   ; the 'print 'at' directive
   8+ 817E              paper      equ $11  ; paper directive
   9+ 817E              ink        equ $10  ; ink directive
  10+ 817E              flash      equ $12  ; flash directive
  11+ 817E              bright     equ $13
  12+ 817E              over       equ $15
  13+ 817E              blue       equ $02
  14+ 817E              red        equ $00
  15+ 817E              magenta    equ $06
  16+ 817E              green      equ $80
  17+ 817E              cyan       equ $02
  18+ 817E              yellow     equ 26
  19+ 817E              white      equ 255
  20+ 817E              black      equ 253
  21+ 817E              ;rex_pos    equ 32904
  22+ 817E
  23+ 817E              udg_start  equ 63480+8 ;63488  ;= 1024 less than real address for the display printing routine
  24+ 817E
  25+ 817E
  26+ 817E              screen_add equ 16384
  27+ 817E              screen_atr equ screen_add + 6144
  28+ 817E              screen_bot equ 23659
  29+ 817E              screen_mem equ $c000   ;49152
  30+ 817E              df_cc      equ $5c84
  31+ 817E
  32+ 817E 00 C0        d_file   dw $c000    ;char display in memory at 49152
  33+ 8180
  34+ 8180
  35+ 8180              ;maze_highbyte           equ  $71  ;H value (of HL) of current maze being drawn
  36+ 8180              _hugewall               equ  $b8
  37+ 8180              _chequerboard           equ  $9f
  38+ 8180              _space                  equ  32
  39+ 8180              _bottomblack            equ  $a2
  40+ 8180              _topblack               equ  $a3
  41+ 8180              _topwhitebottomchequer  equ  $a1
  42+ 8180              _topchequerbottomwhite  equ  $a0
  43+ 8180              _topleftwhite           equ  39
  44+ 8180              _bottomleftwhite        equ  40
  45+ 8180              _toprightwhite          equ  41
  46+ 8180              _bottomrightwhite       equ  42
  47+ 8180              _black                  equ  $af
  48+ 8180              _topcorner1             equ  $b0  ;bottom corner left slope to righttop
  49+ 8180              _topcorner2             equ  $b1  ;left corner slope to right bottom from left
  50+ 8180              _topcorner3             equ  $b2  ;bottom corner slope to right top
  51+ 8180              _topcorner4             equ  $b3  ;top corner left slope to right bottom
  52+ 8180              _wall                   equ  $a4  ;wall pattern
  53+ 8180              _leftinnerwall          equ  $a5  ;diagonal brick pattern left
  54+ 8180              _topleft5               equ  $a9  ;next 4 are for far view on layer 5
  55+ 8180              _bottomleft5            equ  $ab  ;
  56+ 8180              _topright5              equ  $aa
  57+ 8180              _bottomright5           equ  $ac
  58+ 8180              _smallwall              equ  $b4  ;far away wall
  59+ 8180              _mediumwall             equ  $b5  ;middle wall
  60+ 8180              _mediumwall_1           equ  $b7  ;middle wall_1
  61+ 8180              _largewall              equ  $b6  ;close view wall
  62+ 8180              _layer5lefttop          equ  $9b  ;layer 5 top left chevron
  63+ 8180              _layer5leftbottom       equ  $9c  ;layer 5 bottom left chevron
  64+ 8180
  65+ 8180
  66+ 8180
  67+ 8180              ;*******  NO MORE CODE HERE PLEASE AS IT WILL SHIFT THE MEMORY UP ****************
  68+ 8180
  69+ 8180              ;################################################################
  70+ 8180              ; some routines here in the 1.5k before the maze data
  71+ 8180              ;################################################################
  72+ 8180
  73+ 8180              ;============================================
  74+ 8180              ;clear the character maze in memory
  75+ 8180              ;============================================
  76+ 8180
  77+ 8180              clear_char_screen:
  78+ 8180
  79+ 8180 21 00 C0             ld hl,$c000
  80+ 8183 01 16 03             ld bc,790;767
  81+ 8186 11 01 C0             ld de,$c001
  82+ 8189 36 20                ld (hl),32      ;space
  83+ 818B ED B0                ldir
  84+ 818D C9                   ret
  85+ 818E              ;################################################################
  86+ 818E              ;rom routine for cls of the 2 video pages
  87+ 818E              ;################################################################
  88+ 818E
  89+ 818E              clsULA:                 ;Clear Ula Buffer:
  90+ 818E 21 00 00         ld  hl,$0000
  91+ 8191 11 01 00         ld  de,$0001
  92+ 8194 01 00 18         ld  bc,$1800
  93+ 8197 75               ld  (hl),l
  94+ 8198 ED B0            ldir
  95+ 819A 36 F0            ld  (hl),240    ;black was $48    ; black paper, cyan ink
  96+ 819C 01 FF 02         ld  bc,$02FF
  97+ 819F ED B0            ldir
  98+ 81A1 C9               ret
  99+ 81A2
 100+ 81A2              ; ******************************************************************************
 101+ 81A2              ; from Mike Daily
 102+ 81A2              ; Function: Read a next register
 103+ 81A2              ; Out: a = register to read
 104+ 81A2              ; Out: a = value in register
 105+ 81A2
 106+ 81A2              ; call with reg value in reg a
 107+ 81A2              ; ******************************************************************************
 108+ 81A2              readnextreg:
 109+ 81A2 01 3B 24             ld bc,$243b ; select NEXT register
 110+ 81A5 ED 79                out (c),a
 111+ 81A7 04                   inc b ; $253b to access (read or write) value
 112+ 81A8 ED 78                in a,(c)
 113+ 81AA C9                   ret
 114+ 81AB              ;#################################################################################
 115+ 81AB              FlipULABuffers:
 116+ 81AB                              ; Flip ULA/Alt UA screen (double buffer ULA screen)
 117+ 81AB
 118+ 81AB                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 119+ 81AB
 120+ 81AB 3A CA 81                     ld      a,(ULABank)             ; Get screen to display this frame
 121+ 81AE FE 0A                        cp      10
 122+ 81B0 28 07                        jr      z,@DisplayAltULA
 123+ 81B2
 124+ 81B2 3E 40                        ld      a,64                    ; set CURRENT screen to Alternate ULA (bit 6
 125+ 81B4 06 0A                        ld      b,10                    ; set target screen to ULA
 126+ 81B6 C3 BC 81                     jp      @DisplayULA
 127+ 81B9
 128+ 81B9 06 0E        @DisplayAltULA: ld      b,14                    ; set target screen to Alternate ULA screen
 129+ 81BB AF                           xor     a                       ; zero the a reg
 130+ 81BC ED 92 69     @DisplayULA:    nextreg $69,a                   ; Select Timex/ULA screen to show
 131+ 81BF 78                           ld      a,b                     ; get bank to render to next frame
 132+ 81C0 32 CA 81                     ld      (ULABank),a             ; store it...
 133+ 81C3
 134+ 81C3              ; swap the ula bank we are writing out buffer screen to
 135+ 81C3              swap_bank:                          ;load bank 10 or 14 to location 0 to write to
 136+ 81C3 3A CA 81                     ld a,(ULABank)
 137+ 81C6 ED 92 52                     nextreg $52,a       ;was $50
 138+ 81C9 C9                           ret
 139+ 81CA
 140+ 81CA 0A           ULABank         defb 10   ;holds current ULA screen in use
 141+ 81CB              ;#################################################################################
 142+ 81CB
 143+ 81CB
 144+ 81CB
 145+ 81CB              ;##################################################################################
 146+ 81CB              FlipULABuffers_peter:     ; Flip ULA/Alt ULA screen (double buffer ULA screen)
 147+ 81CB                                        ; from Peter Ped Helcmanovsky on the Next Team
 148+ 81CB
 149+ 81CB 3A CA 81         ld a,(ULABank)  ; Get screen to display this frame
 150+ 81CE
 151+ 81CE                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 152+ 81CE                  ; its %0000'1110 vs %0000'1010 in binary, so extract bit2 and move it to bit6
 153+ 81CE
 154+ 81CE E6 04            and %0000'0100  ; $04 from A=14, $00 from A=10
 155+ 81D0 ED 23            swapnib         ; bit6 set from bit2
 156+ 81D2 ED 92 69         nextreg $69,a   ; Select Timex/ULA screen to show
 157+ 81D5
 158+ 81D5                  ; flip the drawing buffer mapped at $4000
 159+ 81D5 3A CA 81         ld a,(ULABank)
 160+ 81D8 EE 04            xor 10^14       ; alternate between 10 and 14
 161+ 81DA 32 CA 81         ld (ULABank),a
 162+ 81DD ED 92 52         nextreg $52,a   ; map the new "backbuffer" to $4000 (for next drawing)
 163+ 81E0 C9               ret
 164+ 81E1
 165+ 81E1              ;##################################################################################
 166+ 81E1
 167+ 81E1
 168+ 81E1
 169+ 81E1              ;##################################################################
 170+ 81E1              ;print a line of text on screen
 171+ 81E1              ;##################################################################
 172+ 81E1
 173+ 81E1              ; enter with IX pointing to the message
 174+ 81E1
 175+ 81E1              ;message format    row,col,colour,"message",end char
 176+ 81E1
 177+ 81E1              print_message:  ;make sure we point to our character set
 178+ 81E1 DD 46 00                     ld b,(ix)           ;row
 179+ 81E4 DD 23                        inc ix
 180+ 81E6 DD 4E 00                     ld c,(ix)           ;column
 181+ 81E9 DD 23                        inc ix
 182+ 81EB DD 7E 00                     ld a,(ix)           ;set attribute colour
 183+ 81EE 32 3A 8C                     ld (att),a
 184+ 81F1
 185+ 81F1
 186+ 81F1 CD 1C 8C                     call locate
 187+ 81F4 DD 23                        inc ix              ;point to characters to print
 188+ 81F6 21 00 C5     mesg_rept:      ld hl,charset_1-256 ; point to our character set
 189+ 81F9 22 36 8C                     ld (base),hl
 190+ 81FC DD 7E 00                     ld a,(ix)           ;load our character to print
 191+ 81FF
 192+ 81FF                              ;check if we are printing a UDG
 193+ 81FF                              ;we are currently pointing at the ram char set
 194+ 81FF CB 7F                        bit 7,a                 ;are we printing udg's?
 195+ 8201                                                      ;if bit 7=0 then zero test = false
 196+ 8201 28 09                        jr z,no_udg             ;exit if theres no graphic to print
 197+ 8203 D6 80                        sub $80                 ;point to the first character of udg's
 198+ 8205 11 00 FC                     ld de,_chars;           ;start of udg's in memory
 199+ 8208 ED 53 36 8C                  ld (base),de
 200+ 820C
 201+ 820C FE 7F        no_udg:         cp 127               ;check flags to see if a=zero
 202+ 820E C8                           ret z               ;quit when char = 0
 203+ 820F F5                           push af
 204+ 8210 CD 3E 8C                     call print1         ;print the message - auto increments the column
 205+ 8213 F1                           pop af
 206+ 8214 DD 23                        inc ix
 207+ 8216 20 DE                        jr nz,mesg_rept
 208+ 8218 C9                           ret
 209+ 8219
 210+ 8219              ;#################################################################
 211+ 8219
 212+ 8219
 213+ 8219
 214+ 8219
 215+ 8219              ;###############################################################
 216+ 8219              ;Message list
 217+ 8219              ;message format    row,col,colour,"message",end char
 218+ 8219
 219+ 8219 00 19 94 B0  message_border1:      db 0,25,148,$b0,$b1,$b0,$20,$b1,$b0,$b1,$7f
 219+ 821D B1 B0 20 B1
 219+ 8221 B0 B1 7F
 220+ 8224 01 19 57 88  message_get:          db 1,25,87,$88,"G E T",$89,$7f
 220+ 8228 47 20 45 20
 220+ 822C 54 89 7F
 221+ 822F 02 19 57 88  message_out:          db 2,25,87,$88,"O U T",$89,$7F
 221+ 8233 4F 20 55 20
 221+ 8237 54 89 7F
 222+ 823A 03 19 94 B3  message_border4:      db 3,25,148,$b3,$b2,$b3,$20,$b2,$b3,$b2,$7f
 222+ 823E B2 B3 20 B2
 222+ 8242 B3 B2 7F
 223+ 8245 17 02 3C 20  message_closed:       db 23,2,60," Go flick the switch ",$7F
 223+ 8249 47 6F 20 66
 223+ 824D 6C 69 63 6B
 223+ 8251 20 74 68 65
 223+ 8255 20 73 77 69
 223+ 8259 74 63 68 20
 223+ 825D 7F
 224+ 825E 17 01 48 20  message_switchon:     db 23,1,72," The Door is now Open! ",$7F
 224+ 8262 54 68 65 20
 224+ 8266 44 6F 6F 72
 224+ 826A 20 69 73 20
 224+ 826E 6E 6F 77 20
 224+ 8272 4F 70 65 6E
 224+ 8276 21 20 7F
 225+ 8279 17 01 64 20  message_leave:        db 23,1,100," Woohoo! Time to leave ",$7F
 225+ 827D 57 6F 6F 68
 225+ 8281 6F 6F 21 20
 225+ 8285 54 69 6D 65
 225+ 8289 20 74 6F 20
 225+ 828D 6C 65 61 76
 225+ 8291 65 20 7F
 226+ 8294 0F 19 57 20  message_level         db 15,25,87," LEVEL ",$7f
 226+ 8298 4C 45 56 45
 226+ 829C 4C 20 7F
 227+ 829F
 228+ 829F
 229+ 829F              ;##########################################################################
 230+ 829F              ;setup ULANext palette data - code from Matt Davies early version of Ed.s
 231+ 829F
 232+ 829F              Setup_palette:
 233+ 829F
 234+ 829F ED 91 43 01         nextreg $43,%00000001   ; Set ULANext palette ON
 235+ 82A3 ED 91 40 00         nextreg $40,%00000000    ; set index to 0 which = start of palette
 236+ 82A7 ED 91 42 01         nextreg $42,%00000001   ; Set 2 ink & 254 paper
 237+ 82AB
 238+ 82AB              ;poke in the pallete data
 239+ 82AB 21 B9 82             ld hl, .palette_data    ;get the start of .palette_data
 240+ 82AE 7E           .lp1    ld a, (hl)
 241+ 82AF FE 01                cp $01                   ;99 is the end of the data
 242+ 82B1 C8                   ret z                   ;exit if a=99
 243+ 82B2 ED 92 41             nextreg $41,a           ;this auto increments
 244+ 82B5 23                   inc hl
 245+ 82B6 C3 AE 82             jp .lp1
 246+ 82B9
 247+ 82B9              .palette_data:
 248+ 82B9              ;ink colours - only first 16 which are standard spectrum colours
 249+ 82B9
 250+ 82B9 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 250+ 82BD 4A CB 1B F9
 250+ 82C1 DF 00 07 E0
 250+ 82C5 E7 1F FC FE
 251+ 82C9 E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 251+ 82CD 24 49 92 B6
 251+ 82D1 FE DB 96 6E
 251+ 82D5 49 25 00 00
 252+ 82D9 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 252+ 82DD AD F1 FA FE
 252+ 82E1 F5 EC C8 84
 252+ 82E5 E8 EC F4 F8
 253+ 82E9 FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 253+ 82ED 31 0D 09 05
 253+ 82F1 05 0E 13 1B
 253+ 82F5 1F 9F FB F3
 254+ 82F9 C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 254+ 82FD 00 21 65 86
 254+ 8301 CB CA F2 E9
 254+ 8305 E4 C4 80 40
 255+ 8309 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 255+ 830D 00 00 00 00
 255+ 8311 00 00 00 00
 255+ 8315 00 00 00 00
 256+ 8319 00 00 00 00      db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 256+ 831D 00 00 00 00
 256+ 8321 00 00 00 00
 256+ 8325 00 00 00 00
 257+ 8329 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 257+ 832D 00 00 00 00
 257+ 8331 00 00 00 00
 257+ 8335 00 00
 258+ 8337
 259+ 8337 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 259+ 833B 4A CB 1B F9
 259+ 833F DF 00 07 E0
 259+ 8343 E7 1F FC FE
 260+ 8347 00 02 A0 36  	db $0, $2, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 260+ 834B 4A CB 1B F9
 260+ 834F DF 00 07 E0
 260+ 8353 E7 1F FC FE
 261+ 8357 E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 261+ 835B 24 49 92 B6
 261+ 835F FE DB 96 6E
 261+ 8363 49 25 00 00
 262+ 8367 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 262+ 836B AD F1 FA FE
 262+ 836F F5 EC C8 84
 262+ 8373 E8 EC F4 F8
 263+ 8377 FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 263+ 837B 31 0D 09 05
 263+ 837F 05 0E 13 1B
 263+ 8383 1F 9F FB F3
 264+ 8387 C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 264+ 838B 00 21 65 86
 264+ 838F CB CA F2 E9
 264+ 8393 E4 C4 80 40
 265+ 8397
 266+ 8397              ;these are the red wall graduations - 6 colours
 267+ 8397 C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $0, $0, $0, $0, $0, $7, $6, $4, $2, $0
 267+ 839B 40 20 00 00
 267+ 839F 00 00 00 07
 267+ 83A3 06 04 02 00
 268+ 83A7 C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $ff, $ff, $ff, $ff, $0, $0, $0, $0, $ff, $01
 268+ 83AB 40 20 FF FF
 268+ 83AF FF FF 00 00
 268+ 83B3 00 00 FF 01
 269+ 83B7
 270+ 83B7              palette_end:
 271+ 83B7              ;##################################################################################
 272+ 83B7
 273+ 83B7              draw_exit_door_closed:
 274+ 83B7                             ; exit_closed 20 lines of 17 chars
 275+ 83B7 06 14                        ld b,20
 276+ 83B9 21 27 84                     ld hl,exit_closed
 277+ 83BC C5           abcd:           push bc
 278+ 83BD E5                           push hl
 279+ 83BE E5 DD E1                     ld ix,hl        ;point to our data to print
 280+ 83C1 CD E1 81                     CALL print_message
 281+ 83C4 E1                           pop hl
 282+ 83C5 11 11 00                     ld de,17
 283+ 83C8 19                           add hl,de
 284+ 83C9 E5 DD E1                     ld ix,hl
 285+ 83CC C1                           pop bc
 286+ 83CD 10 ED                        djnz abcd
 286+ 83CF
 287+ 83CF              ;call the colouring routine
 288+ 83CF CD 03 84                     call colour_door
 289+ 83D2              ;print the middle bars again as we overote them above
 290+ 83D2 DD 21 E1 83                  ld ix,over1
 291+ 83D6 CD E1 81                     CALL print_message
 292+ 83D9 DD 21 F2 83                  ld ix,over2
 293+ 83DD CD E1 81                     CALL print_message
 294+ 83E0 C9                           ret
 295+ 83E1
 296+ 83E1 09 06 86 80  over1:          db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 296+ 83E5 81 80 81 80
 296+ 83E9 81 80 81 80
 296+ 83ED 81 80 81 80
 296+ 83F1 7F
 297+ 83F2 0A 06 84 82  over2:          db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 297+ 83F6 83 82 83 82
 297+ 83FA 83 82 83 82
 297+ 83FE 83 82 83 81
 297+ 8402 7F
 298+ 8403
 299+ 8403
 300+ 8403              ;this routine below will be used by the right wall closed door drawing routine as well as now
 301+ 8403              ;now colour the bars white ink - this will overwrite the 2 dark bars at line 7 and 8 - will sort later
 302+ 8403 21 A8 58     colour_door:    ld hl,22696         ;start of bar bit at the top of the door
 303+ 8406 11 20 00                     ld de,32            ;to jump 1 line down
 304+ 8409 3E 09                        ld a,9              ;draw 9 characters across
 305+ 840B 32 26 84                     ld (att_count),a
 306+ 840E 3E C7                        ld a,199
 307+ 8410 4F                           ld c,a              ;set colour to white ink, black paper
 308+ 8411 3E 10                        ld a,16             ;do 16 lines
 309+ 8413 E5           rept_5:         push hl
 310+ 8414 F5           rept_4:         push af
 311+ 8415 3A 26 84                     ld a,(att_count)    ;9
 312+ 8418 47                           ld b,a
 313+ 8419 F1                           pop af
 314+ 841A 71           rept_3:         ld (hl),c           ;set the attribute colour
 315+ 841B 23                           inc hl
 316+ 841C 10 FC                        djnz rept_3
 317+ 841E E1                           pop hl
 318+ 841F 19                           add hl,de           ;jump to next line below
 319+ 8420 E5                           push hl
 320+ 8421 3D                           dec a
 321+ 8422 20 F0                        jr nz,rept_4
 322+ 8424 E1                           pop hl
 323+ 8425 C9                           ret
 324+ 8426
 325+ 8426 09           att_count       db  9
 326+ 8427
 327+ 8427              ;###############################################################
 328+ 8427              ;door graphic
 329+ 8427              ;message format    row,col,colour,"message",end char (127 ($7f) )
 330+ 8427              exit_closed:    ;20 lines
 331+ 8427 03 06 88 80                  db 3,6,136, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 331+ 842B 81 80 81 80
 331+ 842F 81 80 81 80
 331+ 8433 81 80 81 80
 331+ 8437 7F
 332+ 8438 04 06 86 82                  db 4,6,134, $82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 332+ 843C 83 82 83 82
 332+ 8440 83 82 83 82
 332+ 8444 83 82 83 81
 332+ 8448 7F
 333+ 8449 05 06 84 80                  db 5,6,132, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 333+ 844D 81 84 84 84
 333+ 8451 84 84 84 84
 333+ 8455 84 84 81 80
 333+ 8459 7F
 334+ 845A 06 06 82 82                  db 6,6,130, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 334+ 845E 83 84 84 84
 334+ 8462 84 84 84 84
 334+ 8466 84 84 83 81
 334+ 846A 7F
 335+ 846B 07 06 80 80                  db 7,6,128, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 335+ 846F 81 84 84 84
 335+ 8473 84 84 84 84
 335+ 8477 84 84 81 80
 335+ 847B 7F
 336+ 847C 08 06 7E 82                  db 8,6,126, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 336+ 8480 83 84 84 84
 336+ 8484 84 84 84 84
 336+ 8488 84 84 83 81
 336+ 848C 7F
 337+ 848D 09 06 86 80                  db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 337+ 8491 81 80 81 80
 337+ 8495 81 80 81 80
 337+ 8499 81 80 81 80
 337+ 849D 7F
 338+ 849E 0A 06 84 82                  db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 338+ 84A2 83 82 83 82
 338+ 84A6 83 82 83 82
 338+ 84AA 83 82 83 81
 338+ 84AE 7F
 339+ 84AF 0B 06 82 80                  db 11,6,130,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 339+ 84B3 81 84 84 84
 339+ 84B7 84 84 84 84
 339+ 84BB 84 84 81 80
 339+ 84BF 7F
 340+ 84C0 0C 06 80 82                  db 12,6,128,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 340+ 84C4 83 84 84 84
 340+ 84C8 84 84 84 84
 340+ 84CC 84 84 83 81
 340+ 84D0 7F
 341+ 84D1 0D 06 7E 80                  db 13,6,126,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 341+ 84D5 81 84 84 84
 341+ 84D9 84 84 84 84
 341+ 84DD 84 84 81 80
 341+ 84E1 7F
 342+ 84E2 0E 06 86 82                  db 14,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 342+ 84E6 83 84 84 84
 342+ 84EA 84 84 84 84
 342+ 84EE 84 84 83 81
 342+ 84F2 7F
 343+ 84F3 0F 06 84 80                  db 15,6,132,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 343+ 84F7 81 84 84 84
 343+ 84FB 84 84 84 84
 343+ 84FF 84 84 81 80
 343+ 8503 7F
 344+ 8504 10 06 82 82                  db 16,6,130,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 344+ 8508 83 84 84 84
 344+ 850C 84 84 84 84
 344+ 8510 84 84 83 81
 344+ 8514 7F
 345+ 8515 11 06 80 80                  db 17,6,128,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 345+ 8519 81 84 84 84
 345+ 851D 84 84 84 84
 345+ 8521 84 84 81 80
 345+ 8525 7F
 346+ 8526 12 06 7E 82                  db 18,6,126,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 346+ 852A 83 84 84 84
 346+ 852E 84 84 84 84
 346+ 8532 84 84 83 81
 346+ 8536 7F
 347+ 8537 13 06 88 80                  db 19,6,136,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 347+ 853B 81 84 84 84
 347+ 853F 84 84 84 84
 347+ 8543 84 84 81 80
 347+ 8547 7F
 348+ 8548 14 06 86 82                  db 20,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 348+ 854C 83 84 84 84
 348+ 8550 84 84 84 84
 348+ 8554 84 84 83 81
 348+ 8558 7F
 349+ 8559 15 06 84 80                  db 21,6,132,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 349+ 855D 81 80 81 80
 349+ 8561 81 80 81 80
 349+ 8565 81 80 81 80
 349+ 8569 7F
 350+ 856A 16 06 82 82                  db 22,6,130,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 350+ 856E 83 82 83 82
 350+ 8572 83 82 83 82
 350+ 8576 83 82 83 81
 350+ 857A 7F
 351+ 857B              ;------------------------------------------------------------------------------------
 352+ 857B              draw_exit_door_open:
 353+ 857B                             ; exit_closed 20 lines of 17 chars
 354+ 857B 06 14                        ld b,20
 355+ 857D 21 A7 85                     ld hl,exit_open
 356+ 8580 C5           abcde:          push bc
 357+ 8581 E5                           push hl
 358+ 8582 E5 DD E1                     ld ix,hl        ;point to our data to print
 359+ 8585 CD E1 81                     CALL print_message
 360+ 8588 E1                           pop hl
 361+ 8589 11 11 00                     ld de,17
 362+ 858C 19                           add hl,de
 363+ 858D E5 DD E1                     ld ix,hl
 364+ 8590 C1                           pop bc
 365+ 8591 10 ED                        djnz abcde
 366+ 8593
 367+ 8593              ;now colour the attributes in the middle of the door to black paper, white text
 368+ 8593                              ;do white colour bars first
 369+ 8593 21 C9 58                     ld hl,22749-32+5+7     ;start of bar bit at the top of the door
 370+ 8596 11 20 00                     ld de,32            ;to jump 1 line down after each print
 371+ 8599 3E 07                        ld a,7              ;draw 1 attribute across
 372+ 859B 32 26 84                     ld (att_count),a
 373+ 859E 3E A5                        ld a,165           ; colour to print (199=white)
 374+ 85A0 4F                           ld c,a              ;set colour to white ink, black paper
 375+ 85A1 3E 0E                        ld a,14             ;do 15 lines
 376+ 85A3 CD 13 84                     call rept_5         ;colour our door correctly
 377+ 85A6 C9                           ret
 378+ 85A7
 379+ 85A7              exit_open:    ;20 lines
 380+ 85A7 03 06 BF B1                  db 3,6,191, $b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$7F
 380+ 85AB AF AF AF AF
 380+ 85AF AF AF AF AF
 380+ 85B3 AF AF AF B0
 380+ 85B7 7F
 381+ 85B8 04 06 BF 20                  db 4,6,191, $20,$b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$7F
 381+ 85BC B1 AF AF AF
 381+ 85C0 AF AF AF AF
 381+ 85C4 AF AF B0 20
 381+ 85C8 7F
 382+ 85C9 05 06 BF 20                  db 5,6,191, $20,$20,$b1,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$20,$7F
 382+ 85CD 20 B1 AF AF
 382+ 85D1 AF AF AF AF
 382+ 85D5 AF B0 20 20
 382+ 85D9 7F
 383+ 85DA 06 06 BE 20                  db 6,6,190, $20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 383+ 85DE 20 20 F1 F2
 383+ 85E2 F1 F2 F1 F2
 383+ 85E6 F1 20 20 20
 383+ 85EA 7F
 384+ 85EB 07 06 BE 20                  db 7,6,190, $20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 384+ 85EF 20 20 F2 F1
 384+ 85F3 F2 F1 F2 F1
 384+ 85F7 F2 20 20 20
 384+ 85FB 7F
 385+ 85FC 08 06 BE 20                  db 8,6,190, $20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 385+ 8600 20 20 F1 F2
 385+ 8604 F1 F2 F1 F2
 385+ 8608 F1 20 20 20
 385+ 860C 7F
 386+ 860D 09 06 BE 20                  db 9,6,190, $20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 386+ 8611 20 20 F2 F1
 386+ 8615 F2 F1 F2 F1
 386+ 8619 F2 20 20 20
 386+ 861D 7F
 387+ 861E 0A 06 BE 20                  db 10,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 387+ 8622 20 20 F1 F2
 387+ 8626 F1 F2 F1 F2
 387+ 862A F1 20 20 20
 387+ 862E 7F
 388+ 862F 0B 06 BE 20                  db 11,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 388+ 8633 20 20 F2 F1
 388+ 8637 F2 F1 F2 F1
 388+ 863B F2 20 20 20
 388+ 863F 7F
 389+ 8640 0C 06 BE 20                  db 12,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 389+ 8644 20 20 F1 F2
 389+ 8648 F1 F2 F1 F2
 389+ 864C F1 20 20 20
 389+ 8650 7F
 390+ 8651 0D 06 BE 20                  db 13,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 390+ 8655 20 20 F2 F1
 390+ 8659 F2 F1 F2 F1
 390+ 865D F2 20 20 20
 390+ 8661 7F
 391+ 8662 0E 06 BE 20                  db 14,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 391+ 8666 20 20 F1 F2
 391+ 866A F1 F2 F1 F2
 391+ 866E F1 20 20 20
 391+ 8672 7F
 392+ 8673 0F 06 BE 20                  db 15,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 392+ 8677 20 20 F2 F1
 392+ 867B F2 F1 F2 F1
 392+ 867F F2 20 20 20
 392+ 8683 7F
 393+ 8684 10 06 BE 20                  db 16,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 393+ 8688 20 20 F1 F2
 393+ 868C F1 F2 F1 F2
 393+ 8690 F1 20 20 20
 393+ 8694 7F
 394+ 8695 11 06 BE 20                  db 17,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 394+ 8699 20 20 F2 F1
 394+ 869D F2 F1 F2 F1
 394+ 86A1 F2 20 20 20
 394+ 86A5 7F
 395+ 86A6 12 06 BE 20                  db 18,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 395+ 86AA 20 20 F1 F2
 395+ 86AE F1 F2 F1 F2
 395+ 86B2 F1 20 20 20
 395+ 86B6 7F
 396+ 86B7 13 06 BE 20                  db 19,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 396+ 86BB 20 20 F2 F1
 396+ 86BF F2 F1 F2 F1
 396+ 86C3 F2 20 20 20
 396+ 86C7 7F
 397+ 86C8 14 06 BF 20                  db 20,6,191,$20,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$20,$7F
 397+ 86CC 20 B2 AF AF
 397+ 86D0 AF AF AF AF
 397+ 86D4 AF B3 20 20
 397+ 86D8 7F
 398+ 86D9 15 06 BF 20                  db 21,6,191,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$7F
 398+ 86DD B2 AF AF AF
 398+ 86E1 AF AF AF AF
 398+ 86E5 AF AF B3 20
 398+ 86E9 7F
 399+ 86EA 16 06 BF B2                  db 22,6,191,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$7F
 399+ 86EE AF AF AF AF
 399+ 86F2 AF AF AF AF
 399+ 86F6 AF AF AF B3
 399+ 86FA 7F
 400+ 86FB
 401+ 86FB              ;--------------------------------------------------------------------------------------
 402+ 86FB              draw_door_right_closed:
 403+ 86FB                             ; exit_closed 14 lines of 7 chars
 404+ 86FB 06 0D                        ld b,13
 405+ 86FD 21 78 87                     ld hl,right_door_closed
 406+ 8700 C5           abc_a:          push bc
 407+ 8701 E5                           push hl
 408+ 8702 E5 DD E1                     ld ix,hl        ;point to our data to print
 409+ 8705 CD E1 81                     CALL print_message
 410+ 8708 E1                           pop hl
 411+ 8709 11 07 00                     ld de,7
 412+ 870C 19                           add hl,de
 413+ 870D E5 DD E1                     ld ix,hl
 414+ 8710 C1                           pop bc
 415+ 8711 10 ED                        djnz abc_a
 416+ 8713
 417+ 8713              ;draw top angled bit of the door on right wall
 418+ 8713 DD 21 5F 87                  ld ix,top_right_1        ;point to our data to print
 419+ 8717 CD E1 81                     CALL print_message
 420+ 871A DD 21 64 87                  ld ix,top_right_2        ;point to our data to print
 421+ 871E CD E1 81                     CALL print_message
 422+ 8721 DD 21 6A 87                  ld ix,top_right_3        ;point to our data to print
 423+ 8725 CD E1 81                     CALL print_message
 424+ 8728 DD 21 71 87                  ld ix,top_right_4        ;point to our data to print
 425+ 872C CD E1 81                     CALL print_message
 426+ 872F
 427+ 872F              ;draw bottom angled bit of the door on right wall
 428+ 872F DD 21 CC 87                  ld ix,bot_right_1        ;point to our data to print
 429+ 8733 CD E1 81                     CALL print_message
 430+ 8736 DD 21 D3 87                  ld ix,bot_right_2        ;point to our data to print
 431+ 873A CD E1 81                     CALL print_message
 432+ 873D DD 21 DA 87                  ld ix,bot_right_3        ;point to our data to print
 433+ 8741 CD E1 81                     CALL print_message
 434+ 8744 DD 21 E0 87                  ld ix,bot_right_4        ;point to our data to print
 435+ 8748 CD E1 81                     CALL print_message
 436+ 874B                         ; BREAK
 437+ 874B              ;now colour the attributes correctly to look diagonal
 438+ 874B                              ;do white colour bars first
 439+ 874B 21 B6 58                     ld hl,22710         ;start of bar bit at the top of the door
 440+ 874E 11 20 00                     ld de,32            ;to jump 1 line down
 441+ 8751 3E 01                        ld a,1              ;draw 1 attribute across
 442+ 8753 32 26 84                     ld (att_count),a
 443+ 8756 3E C7                        ld a,199
 444+ 8758 4F                           ld c,a              ;set colour to white ink, black paper
 445+ 8759 3E 0E                        ld a,14             ;do 16 lines
 446+ 875B                             ; push hl
 447+ 875B CD 13 84                     call rept_5         ;colour our door correctly
 448+ 875E C9                           ret
 449+ 875F
 450+ 875F
 451+ 875F              ;top 2 parts of the door
 452+ 875F 02 17 88 D3  top_right_1:    db 2,23,136,         $d3,$7F
 452+ 8763 7F
 453+ 8764 03 16 88 D5  top_right_2:    db 3,22,136,     $d5,$80,$7F
 453+ 8768 80 7F
 454+ 876A 04 15 88 D3  top_right_3:    db 4,21,136, $d3,$83,$82,$7F
 454+ 876E 83 82 7F
 455+ 8771 05 15 88 80  top_right_4:    db 5,21,136, $80,$87,$80,$7F
 455+ 8775 87 80 7F
 456+ 8778              ;middle of the closed door
 457+ 8778              right_door_closed:      ;15 lines
 458+ 8778 06 15 82 82                  db 6,21,130, $82,$87,$82,$7F
 458+ 877C 87 82 7F
 459+ 877F 07 15 80 80                  db 7,21,128, $80,$87,$80,$7F
 459+ 8783 87 80 7F
 460+ 8786 08 15 7E 82                  db 8,21,126, $82,$87,$82,$7F
 460+ 878A 87 82 7F
 461+ 878D 09 15 88 80                  db 9,21,136, $80,$87,$80,$7F
 461+ 8791 87 80 7F
 462+ 8794 0A 15 86 82                  db 10,21,134,$82,$87,$82,$7F
 462+ 8798 87 82 7F
 463+ 879B 0B 15 84 80                  db 11,21,132,$80,$87,$80,$7F
 463+ 879F 87 80 7F
 464+ 87A2 0C 15 82 82                  db 12,21,130,$82,$87,$82,$7F
 464+ 87A6 87 82 7F
 465+ 87A9 0D 15 80 80                  db 13,21,128,$80,$87,$80,$7F
 465+ 87AD 87 80 7F
 466+ 87B0 0E 15 7E 82                  db 14,21,126,$82,$87,$82,$7F
 466+ 87B4 87 82 7F
 467+ 87B7 0F 15 88 80                  db 15,21,136,$80,$87,$80,$7F
 467+ 87BB 87 80 7F
 468+ 87BE 10 15 86 82                  db 16,21,134,$82,$87,$82,$7F
 468+ 87C2 87 82 7F
 469+ 87C5 11 15 84 80                  db 17,21,132,$80,$87,$80,$7F
 469+ 87C9 87 80 7F
 470+ 87CC              ;                db 18,21,130,$82,$87,$82,$7F
 471+ 87CC              ;bottom 2 parts of the door
 472+ 87CC 12 15 80 80  bot_right_1:    db 18,21,128, $80,$87,$80,$7F
 472+ 87D0 87 80 7F
 473+ 87D3 13 15 80 D4  bot_right_2:    db 19,21,128, $d4,$83,$82,$7F
 473+ 87D7 83 82 7F
 474+ 87DA 14 16 80 D6  bot_right_3:    db 20,22,128,     $d6,$80,$7F
 474+ 87DE 80 7F
 475+ 87E0 15 17 80 D4  bot_right_4:    db 21,23,128,         $d4,$7F
 475+ 87E4 7F
 476+ 87E5
 477+ 87E5              ;--------------------------------------------------------------------
 478+ 87E5              draw_door_right_open:
 479+ 87E5                             ; exit_closed 14 lines of 7 chars
 480+ 87E5 06 0D                        ld b,13
 481+ 87E7 21 3C 88                     ld hl,right_door_open
 482+ 87EA C5           abc_b:          push bc
 483+ 87EB E5                           push hl
 484+ 87EC E5 DD E1                     ld ix,hl        ;point to our data to print
 485+ 87EF CD E1 81                     CALL print_message
 486+ 87F2 E1                           pop hl
 487+ 87F3 11 07 00                     ld de,7
 488+ 87F6 19                           add hl,de
 489+ 87F7 E5 DD E1                     ld ix,hl
 490+ 87FA C1                           pop bc
 491+ 87FB 10 ED                        djnz abc_b
 492+ 87FD
 493+ 87FD              ;draw top angled bit of the door on right wall
 494+ 87FD DD 21 28 88                  ld ix,top_right_op2        ;point to our data to print
 495+ 8801 CD E1 81                     CALL print_message
 496+ 8804 DD 21 2E 88                  ld ix,top_right_op3        ;point to our data to print
 497+ 8808 CD E1 81                     CALL print_message
 498+ 880B DD 21 35 88                  ld ix,top_right_op4        ;point to our data to print
 499+ 880F CD E1 81                     CALL print_message
 500+ 8812
 501+ 8812              ;draw bottom angled bit of the door on right wall - basically, all spaces so floor colour is drawn
 502+ 8812 DD 21 97 88                  ld ix,bot_right_op1        ;point to our data to print
 503+ 8816 CD E1 81                     CALL print_message
 504+ 8819 DD 21 9E 88                  ld ix,bot_right_op2        ;point to our data to print
 505+ 881D CD E1 81                     CALL print_message
 506+ 8820 DD 21 A5 88                  ld ix,bot_right_op3        ;point to our data to print
 507+ 8824 CD E1 81                     CALL print_message
 508+ 8827
 509+ 8827 C9                           ret
 510+ 8828
 511+ 8828              ;top 2 parts of the door
 512+ 8828 03 16 C0 B0  top_right_op2:    db 3,22,192,     $b0,$7F,$7F;;$20,$7F
 512+ 882C 7F 7F
 513+ 882E 04 15 C0 B0  top_right_op3:    db 4,21,192, $b0,$20,$7F,$7F;$20,$7F
 513+ 8832 20 7F 7F
 514+ 8835 05 15 BC 20  top_right_op4:    db 5,21,188, $20,$20,$7F,$7F;$20,$7F
 514+ 8839 20 7F 7F
 515+ 883C              ;middle of the open door
 516+ 883C              right_door_open:      ;15 lines
 517+ 883C 06 15 BC 20                  db 6,21,188, $20,$20,$7F,$7F;$20,$7F
 517+ 8840 20 7F 7F
 518+ 8843 07 15 BC 20                  db 7,21,188, $20,$20,$7F,$7F;,$20,$7F
 518+ 8847 20 7F 7F
 519+ 884A 08 15 BC 20                  db 8,21,188, $20,$20,$7F,$7F;,$20,$7F
 519+ 884E 20 7F 7F
 520+ 8851 09 15 BC 20                  db 9,21,188, $20,$20,$7F,$7F;$20,$7F
 520+ 8855 20 7F 7F
 521+ 8858 0A 15 BC 20                  db 10,21,188,$20,$20,$7F,$7F;$20,$7F
 521+ 885C 20 7F 7F
 522+ 885F 0B 15 BC 20                  db 11,21,188,$20,$20,$7F,$7F;$20,$7F
 522+ 8863 20 7F 7F
 523+ 8866 0C 15 BC 20                  db 12,21,188,$20,$20,$7F,$7F;$20,$7F
 523+ 886A 20 7F 7F
 524+ 886D 0D 15 BC 20                  db 13,21,188,$20,$20,$7F,$7F;$20,$7F
 524+ 8871 20 7F 7F
 525+ 8874 0E 15 BC 20                  db 14,21,188,$20,$20,$7F,$7F;$20,$7F
 525+ 8878 20 7F 7F
 526+ 887B 0F 15 BC 20                  db 15,21,188,$20,$20,$7F,$7F;$20,$7F
 526+ 887F 20 7F 7F
 527+ 8882 10 15 BC 20                  db 16,21,188,$20,$20,$7F,$7F;$20,$7F
 527+ 8886 20 7F 7F
 528+ 8889 11 15 BC 20                  db 17,21,188,$20,$20,$7F,$7F;$20,$7F
 528+ 888D 20 7F 7F
 529+ 8890 12 15 BC 20                  db 18,21,188,$20,$20,$7F,$7F;$20,$7F
 529+ 8894 20 7F 7F
 530+ 8897
 531+ 8897              ;bottom 2 parts of the door
 532+ 8897 13 15 BC 20  bot_right_op1:    db 19,21,188, $20,$20,$7F,$7F;$20,$7F
 532+ 889B 20 7F 7F
 533+ 889E 14 15 62 20  bot_right_op2:    db 20,21,98, $20,$20,$7F,$7F;$20,$7F
 533+ 88A2 20 7F 7F
 534+ 88A5 15 16 62 20  bot_right_op3:    db 21,22,98,     $20,$7F,$7F;$20,$7F
 534+ 88A9 7F 7F
 535+ 88AB
 536+ 88AB              ;--------------------------------------------------------------------
 537+ 88AB              ;--------------------------------------------------------------------
 538+ 88AB              ;switch animation below - neds to be switched on
 539+ 88AB              ;--------------------------------------------------------------------
 540+ 88AB              ;--------------------------------------------------------------------
 541+ 88AB              ;switch_anim:
 542+ 88AB
 543+ 88AB              draw_switch_off:
 544+ 88AB                             ; exit_closed 13 lines of 5 chars
 545+ 88AB 06 0C                        ld b,12
 546+ 88AD 21 D7 88                     ld hl,switch_off_g      ;start of switch off graphic
 547+ 88B0 C5           abc_b1:          push bc
 548+ 88B1 E5                           push hl
 549+ 88B2 E5 DD E1                     ld ix,hl                ;point to our data to print
 550+ 88B5 CD E1 81                     CALL print_message
 551+ 88B8 E1                           pop hl
 552+ 88B9 11 07 00                     ld de,7                 ;each line is 9 chars long
 553+ 88BC 19                           add hl,de
 554+ 88BD E5 DD E1                     ld ix,hl
 555+ 88C0 C1                           pop bc
 556+ 88C1 10 ED                        djnz abc_b1
 557+ 88C3
 558+ 88C3              ;now colour the attributes to show switch is in the OFF position - colour it blue
 559+ 88C3                              ;do white colour bars first
 560+ 88C3 21 0C 59                     ld hl,22764+32   ;start of bar bit at the top of the door
 561+ 88C6 11 20 00                     ld de,32            ;to jump 1 line down after each print
 562+ 88C9 3E 01                        ld a,1              ;draw 1 attribute across
 563+ 88CB 32 26 84                     ld (att_count),a
 564+ 88CE 3E B8                        ld a,184            ; colour to print (199=white)
 565+ 88D0 4F                           ld c,a              ;set colour to white ink, black paper
 566+ 88D1 3E 04                        ld a,4             ;do 5 lines
 567+ 88D3 CD 13 84                     call rept_5         ;colour our door correctly
 568+ 88D6
 569+ 88D6 C9                           ret
 570+ 88D7
 571+ 88D7              ;switch in off position
 572+ 88D7              switch_off_g:      ;13 lines
 573+ 88D7 06 0B 9E DE                  db 6,11,158, $de,$dd,$e1,$7F
 573+ 88DB DD E1 7F
 574+ 88DE 07 0B 9E E0                  db 7,11,158, $e0," ",$e4,$7F
 574+ 88E2 20 E4 7F
 575+ 88E5 08 0B 9E E0                  db 8,11,158, $e0," ",$e4,$7F
 575+ 88E9 20 E4 7F
 576+ 88EC 09 0B 9E E0                  db 9,11,158, $e0," ",$e4,$7F
 576+ 88F0 20 E4 7F
 577+ 88F3 0A 0B 9E E0                  db 10,11,158,$e0," ",$e4,$7F
 577+ 88F7 20 E4 7F
 578+ 88FA 0B 0B 9E E0                  db 11,11,158,$e0," ",$e4,$7F
 578+ 88FE 20 E4 7F
 579+ 8901 0C 0B 9E E0                  db 12,11,158,$e0,"|",$e4,$7F
 579+ 8905 7C E4 7F
 580+ 8908 0D 0B 9E E0                  db 13,11,158,$e0,"|",$e4,$7F
 580+ 890C 7C E4 7F
 581+ 890F 0E 0B 9E E0                  db 14,11,158,$e0,"|",$e4,$7F
 581+ 8913 7C E4 7F
 582+ 8916 0F 0B 9E E0                  db 15,11,158,$e0,"|",$e4,$7F
 582+ 891A 7C E4 7F
 583+ 891D 10 0B 9E E0                  db 16,11,158,$e0," ",$e4,$7F
 583+ 8921 20 E4 7F
 584+ 8924 11 0B 9E DF                  db 17,11,158,$df,$e3,$e2,$7F
 584+ 8928 E3 E2 7F
 585+ 892B
 586+ 892B
 587+ 892B              ;--------------------------------------------------------------------
 588+ 892B
 589+ 892B              draw_switch_on:
 590+ 892B
 591+ 892B                             ; exit_closed 13 lines of 5 chars
 592+ 892B 06 0C                        ld b,12
 593+ 892D 21 66 89                     ld hl,switch_on_g      ;start of switch off graphic
 594+ 8930 C5           abc_b2:         push bc
 595+ 8931 E5                           push hl
 596+ 8932
 597+ 8932 E5 DD E1                     ld ix,hl                ;point to our data to print
 598+ 8935 CD E1 81                     CALL print_message
 599+ 8938
 600+ 8938 E1                           pop hl
 601+ 8939 11 07 00                     ld de,7                 ;each line is 9 chars long
 602+ 893C 19                           add hl,de
 603+ 893D E5 DD E1                     ld ix,hl
 604+ 8940 C1                           pop bc
 605+ 8941 10 ED                        djnz abc_b2
 606+ 8943
 607+ 8943              ;now colour the attributes to show switch is in the OFF position - colour it blue
 608+ 8943                              ;do white colour bars first
 609+ 8943 21 8C 59                     ld hl,22924;+32      ;start of bar bit at the top of the door
 610+ 8946 11 20 00                     ld de,32            ;to jump 1 line down after each print
 611+ 8949 3E 01                        ld a,1              ;draw 1 attribute across
 612+ 894B 32 26 84                     ld (att_count),a
 613+ 894E 3E 82                        ld a,130            ; colour to print (199=white)
 614+ 8950 4F                           ld c,a              ;set colour to white ink, black paper
 615+ 8951 3E 04                        ld a,4             ;do 5 lines
 616+ 8953 CD 13 84                     call rept_5         ;colour our door correctly
 617+ 8956
 618+ 8956                              ;check if the switch has pulled - if yes, dont play the sound again!
 619+ 8956 3A 2E FA                     ld a,(switch_sound )
 620+ 8959 3D                           dec a               ;check if a = 0. Will be 255 if not zero
 621+ 895A C8                           ret z
 622+ 895B                              ;do the switch on sound
 623+ 895B 1E 9B        	            ld e,155		;10 for the walk sound
 624+ 895D CD D6 A2                     call walk_sound
 625+ 8960 AF                           xor a
 626+ 8961 3C                           inc a
 627+ 8962 32 2E FA                     ld (switch_sound),a
 628+ 8965 C9                           ret
 629+ 8966
 630+ 8966              ;switch in off position
 631+ 8966              switch_on_g:      ;12 lines
 632+ 8966 06 0B 9E DE                  db 6,11,158, $de,$dd,$e1,$7F
 632+ 896A DD E1 7F
 633+ 896D 07 0B 9E E0                  db 7,11,158, $e0," ",$e4,$7F
 633+ 8971 20 E4 7F
 634+ 8974 08 0B 9E E0                  db 8,11,158, $e0,"|",$e4,$7F
 634+ 8978 7C E4 7F
 635+ 897B 09 0B 9E E0                  db 9,11,158, $e0,"|",$e4,$7F
 635+ 897F 7C E4 7F
 636+ 8982 0A 0B 9E E0                  db 10,11,158,$e0,"|",$e4,$7F
 636+ 8986 7C E4 7F
 637+ 8989 0B 0B 9E E0                  db 11,11,158,$e0,"|",$e4,$7F
 637+ 898D 7C E4 7F
 638+ 8990 0C 0B 9E E0                  db 12,11,158,$e0," ",$e4,$7F
 638+ 8994 20 E4 7F
 639+ 8997 0D 0B 9E E0                  db 13,11,158,$e0," ",$e4,$7F
 639+ 899B 20 E4 7F
 640+ 899E 0E 0B 9E E0                  db 14,11,158,$e0," ",$e4,$7F
 640+ 89A2 20 E4 7F
 641+ 89A5 0F 0B 9E E0                  db 15,11,158,$e0," ",$e4,$7F
 641+ 89A9 20 E4 7F
 642+ 89AC 10 0B 9E E0                  db 16,11,158,$e0," ",$e4,$7F
 642+ 89B0 20 E4 7F
 643+ 89B3 11 0B 9E DF                  db 17,11,158,$df,$e3,$e2,$7F
 643+ 89B7 E3 E2 7F
 644+ 89BA              ;-----------------------------------------------------------------------------------
 645+ 89BA
 646+ 89BA              draw_switch_right_off:
 647+ 89BA
 648+ 89BA                             ; exit_closed 14 lines of 7 chars
 649+ 89BA 06 06                        ld b,6
 650+ 89BC 21 39 8A                     ld hl,switch_right_off
 651+ 89BF C5           abc_b3:         push bc
 652+ 89C0 E5                           push hl
 653+ 89C1 E5 DD E1                     ld ix,hl        ;point to our data to print
 654+ 89C4 CD E1 81                     CALL print_message
 655+ 89C7 E1                           pop hl
 656+ 89C8 11 07 00                     ld de,7         ;7 chars to read
 657+ 89CB 19                           add hl,de
 658+ 89CC E5 DD E1                     ld ix,hl
 659+ 89CF C1                           pop bc
 660+ 89D0 10 ED                        djnz abc_b3
 661+ 89D2
 662+ 89D2              ;draw top angled bit of the door on right wall
 663+ 89D2 DD 21 1E 8A                  ld ix,top_right_1a        ;point to our data to print
 664+ 89D6 CD E1 81                     CALL print_message
 665+ 89D9 DD 21 24 8A                  ld ix,top_right_2a        ;point to our data to print
 666+ 89DD CD E1 81                     CALL print_message
 667+ 89E0 DD 21 2B 8A                  ld ix,top_right_3a        ;point to our data to print
 668+ 89E4 CD E1 81                     CALL print_message
 669+ 89E7 DD 21 32 8A                  ld ix,top_right_4a        ;point to our data to print
 670+ 89EB CD E1 81                     CALL print_message
 671+ 89EE
 672+ 89EE              ;draw bottom angled bit of the door on right wall
 673+ 89EE DD 21 63 8A                  ld ix,bot_right_1a        ;point to our data to print
 674+ 89F2 CD E1 81                     CALL print_message
 675+ 89F5 DD 21 6A 8A                  ld ix,bot_right_2a        ;point to our data to print
 676+ 89F9 CD E1 81                     CALL print_message
 677+ 89FC DD 21 71 8A                  ld ix,bot_right_3a        ;point to our data to print
 678+ 8A00 CD E1 81                     CALL print_message
 679+ 8A03 DD 21 78 8A                  ld ix,bot_right_4a        ;point to our data to print
 680+ 8A07 CD E1 81                     CALL print_message
 681+ 8A0A
 682+ 8A0A              ;now colour the attributes correctly to look diagonal
 683+ 8A0A                              ;do white colour bars first
 684+ 8A0A 21 16 59                     ld hl,22710 +96       ;start of bar bit at the top of the door
 685+ 8A0D 11 20 00                     ld de,32            ;to jump 1 line down
 686+ 8A10 3E 01                        ld a,1              ;draw 1 attribute across
 687+ 8A12 32 26 84                     ld (att_count),a
 688+ 8A15 3E B8                        ld a,184            ;set colour of switxch
 689+ 8A17 4F                           ld c,a              ;set colour to white ink, black paper
 690+ 8A18 3E 04                        ld a,4             ; # of lines to do
 691+ 8A1A CD 13 84                     call rept_5         ;colour our door correctly
 692+ 8A1D C9                           ret
 693+ 8A1E
 694+ 8A1E
 695+ 8A1E              ;top 2 parts of the switch
 696+ 8A1E 05 16 9E E5  top_right_1a:    db 5,22,158,    $e5,$e7,$7F
 696+ 8A22 E7 7F
 697+ 8A24 06 15 9E E5  top_right_2a:    db 6,21,158,$e5,$ea,$e8,$7F
 697+ 8A28 EA E8 7F
 698+ 8A2B 07 15 9E E6  top_right_3a:    db 7,21,158,$e6,$e9,$e4,$7F
 698+ 8A2F E9 E4 7F
 699+ 8A32 08 15 9E E0  top_right_4a:    db 8,21,158,$e0," ",$e4,$7F
 699+ 8A36 20 E4 7F
 700+ 8A39              ;middle of the OFF switch
 701+ 8A39              switch_right_off:
 702+ 8A39 09 15 9E E0                  db 9,21,158, $e0," ",$e4,$7F
 702+ 8A3D 20 E4 7F
 703+ 8A40 0A 15 9E E0                  db 10,21,158,$e0," ",$e4,$7F
 703+ 8A44 20 E4 7F
 704+ 8A47 0B 15 9E E0                  db 11,21,158,$e0," ",$e4,$7F
 704+ 8A4B 20 E4 7F
 705+ 8A4E 0C 15 9E E0                  db 12,21,158,$e0,"|",$e4,$7F
 705+ 8A52 7C E4 7F
 706+ 8A55 0D 15 9E E0                  db 13,21,158,$e0,"|",$e4,$7F
 706+ 8A59 7C E4 7F
 707+ 8A5C 0E 15 9E E0                  db 14,21,158,$e0,"|",$e4,$7F
 707+ 8A60 7C E4 7F
 708+ 8A63
 709+ 8A63              ;bottom 2 parts of the switch
 710+ 8A63 0F 15 9E E0  bot_right_1a:   db 15,21,158,$e0,"|",$e4,$7F
 710+ 8A67 7C E4 7F
 711+ 8A6A 10 15 9E EE  bot_right_2a:   db 16,21,158,$ee,$ef,$e4,$7F
 711+ 8A6E EF E4 7F
 712+ 8A71 11 15 9E EB  bot_right_3a:   db 17,21,158,$eb,$f0,$ed,$7F
 712+ 8A75 F0 ED 7F
 713+ 8A78 12 16 9E EB  bot_right_4a:   db 18,22,158,    $eb,$ec,$7F
 713+ 8A7C EC 7F
 714+ 8A7E
 715+ 8A7E              ;--------------------------------------------------------------------------------
 716+ 8A7E
 717+ 8A7E              draw_switch_right_on:
 718+ 8A7E
 719+ 8A7E 06 06                        ld b,6
 720+ 8A80 21 FD 8A                     ld hl,switch_right_on
 721+ 8A83 C5           abc_b4:         push bc
 722+ 8A84 E5                           push hl
 723+ 8A85 E5 DD E1                     ld ix,hl        ;point to our data to print
 724+ 8A88 CD E1 81                     CALL print_message
 725+ 8A8B              ;set border to flash
 726+ 8A8B                         ;   ld c,254
 727+ 8A8B                         ;   ld a,39       ;set a red border
 728+ 8A8B                         ;   out (c),a
 729+ 8A8B
 730+ 8A8B E1                           pop hl
 731+ 8A8C 11 07 00                     ld de,7         ;7 chars to read
 732+ 8A8F 19                           add hl,de
 733+ 8A90 E5 DD E1                     ld ix,hl
 734+ 8A93 C1                           pop bc
 735+ 8A94 10 ED                        djnz abc_b4
 736+ 8A96
 737+ 8A96              ;draw top angled bit of the door on right wall
 738+ 8A96 DD 21 E2 8A                  ld ix,top_right_1b        ;point to our data to print
 739+ 8A9A CD E1 81                     CALL print_message
 740+ 8A9D DD 21 E8 8A                  ld ix,top_right_2b        ;point to our data to print
 741+ 8AA1 CD E1 81                     CALL print_message
 742+ 8AA4 DD 21 EF 8A                  ld ix,top_right_3b        ;point to our data to print
 743+ 8AA8 CD E1 81                     CALL print_message
 744+ 8AAB DD 21 F6 8A                  ld ix,top_right_4b        ;point to our data to print
 745+ 8AAF CD E1 81                     CALL print_message
 746+ 8AB2
 747+ 8AB2              ;draw bottom angled bit of the door on right wall
 748+ 8AB2 DD 21 27 8B                  ld ix,bot_right_1b        ;point to our data to print
 749+ 8AB6 CD E1 81                     CALL print_message
 750+ 8AB9 DD 21 2E 8B                  ld ix,bot_right_2b        ;point to our data to print
 751+ 8ABD CD E1 81                     CALL print_message
 752+ 8AC0 DD 21 35 8B                  ld ix,bot_right_3b        ;point to our data to print
 753+ 8AC4 CD E1 81                     CALL print_message
 754+ 8AC7 DD 21 3C 8B                  ld ix,bot_right_4b        ;point to our data to print
 755+ 8ACB CD E1 81                     CALL print_message
 756+ 8ACE
 757+ 8ACE              ;now colour the attributes correctly to look diagonal
 758+ 8ACE                              ;do white colour bars first
 759+ 8ACE 21 96 59                     ld hl,22710 +96+96+32       ;start of bar bit at the top of the door
 760+ 8AD1 11 20 00                     ld de,32            ;to jump 1 line down
 761+ 8AD4 3E 01                        ld a,1              ;draw 1 attribute across
 762+ 8AD6 32 26 84                     ld (att_count),a
 763+ 8AD9 3E 82                        ld a,130            ;set colour of switxch
 764+ 8ADB 4F                           ld c,a              ;set colour to white ink, black paper
 765+ 8ADC 3E 04                        ld a,4             ; # of lines to do
 766+ 8ADE CD 13 84                     call rept_5         ;colour our door correctly
 767+ 8AE1 C9                           ret
 768+ 8AE2
 769+ 8AE2
 770+ 8AE2              ;top 2 parts of the switch
 771+ 8AE2 05 16 9E E5  top_right_1b:    db 5,22,158,    $e5,$e7,$7F
 771+ 8AE6 E7 7F
 772+ 8AE8 06 15 9E E5  top_right_2b:    db 6,21,158,$e5,$ea,$e8,$7F
 772+ 8AEC EA E8 7F
 773+ 8AEF 07 15 9E E6  top_right_3b:    db 7,21,158,$e6,$e9,$e4,$7F
 773+ 8AF3 E9 E4 7F
 774+ 8AF6 08 15 9E E0  top_right_4b:    db 8,21,158,$e0,"|",$e4,$7F
 774+ 8AFA 7C E4 7F
 775+ 8AFD              ;middle of the ON switch
 776+ 8AFD              switch_right_on:
 777+ 8AFD 09 15 9E E0                  db 9,21,158, $e0,"|",$e4,$7F
 777+ 8B01 7C E4 7F
 778+ 8B04 0A 15 9E E0                  db 10,21,158,$e0,"|",$e4,$7F
 778+ 8B08 7C E4 7F
 779+ 8B0B 0B 15 9E E0                  db 11,21,158,$e0,"|",$e4,$7F
 779+ 8B0F 7C E4 7F
 780+ 8B12 0C 15 9E E0                  db 12,21,158,$e0," ",$e4,$7F
 780+ 8B16 20 E4 7F
 781+ 8B19 0D 15 9E E0                  db 13,21,158,$e0," ",$e4,$7F
 781+ 8B1D 20 E4 7F
 782+ 8B20 0E 15 9E E0                  db 14,21,158,$e0," ",$e4,$7F
 782+ 8B24 20 E4 7F
 783+ 8B27
 784+ 8B27              ;bottom 2 parts of the switch
 785+ 8B27 0F 15 9E E0  bot_right_1b:   db 15,21,158,$e0," ",$e4,$7F
 785+ 8B2B 20 E4 7F
 786+ 8B2E 10 15 9E EE  bot_right_2b:   db 16,21,158,$ee,$ef,$e4,$7F
 786+ 8B32 EF E4 7F
 787+ 8B35 11 15 9E EB  bot_right_3b:   db 17,21,158,$eb,$f0,$ed,$7F
 787+ 8B39 F0 ED 7F
 788+ 8B3C 12 16 9E EB  bot_right_4b:   db 18,22,158,    $eb,$ec,$7F
 788+ 8B40 EC 7F
 789+ 8B42
 790+ 8B42
 791+ 8B42
 792+ 8B42
 793+ 8B42
 794+ 8B42
 795+ 8B42
 796+ 8B42
 797+ 8B42
# file closed: src/1-rd3dmazeV6.asm
 459  8B42                  INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
# file opened: src/2-rd3dmazeV6.asm
   1+ 8B42
   2+ 8B42              ;##############################################
   3+ 8B42              ;Draw the current map on screen
   4+ 8B42              ;##############################################
   5+ 8B42
   6+ 8B42                  ;    org $E000   ; 57344 - top 8k
   7+ 8B42
   8+ 8B42              ;max row=21, max column = 31
   9+ 8B42
  10+ 8B42              ;will need to change DF_CC position for sjasmplus
  11+ 8B42              DRAW_MAP:
  12+ 8B42                      ;set max speed!
  13+ 8B42 ED 91 07 03          nextreg 7,3
  14+ 8B46
  15+ 8B46                      ;set our colours
  16+ 8B46 3E B2                ld a,178            ;red
  17+ 8B48 32 12 99             ld (wallcol),a
  18+ 8B4B
  19+ 8B4B              ;first draw a top wall line
  20+ 8B4B 3E 11                ld a,17          ;draw 16 wall chars
  21+ 8B4D 01 04 02             ld bc,$0204      ;print at 2,4;
  22+ 8B50 CD F9 8B             call topbotline
  23+ 8B53
  24+ 8B53              ;now draw the map data
  25+ 8B53 01 04 03             ld bc,$0304      ;set row and column to 2,4
  26+ 8B56 2A 23 FA             ld hl,(map_start)
  27+ 8B59 22 18 FA             ld (var7),hl   ;save it
  28+ 8B5C              rep1:
  29+ 8B5C C5                   push bc
  30+ 8B5D CD 1C 8C             call locate
  31+ 8B60 C1                   pop bc           ;restore our counter
  32+ 8B61 C5                   push bc          ;resave it
  33+ 8B62
  34+ 8B62 CD A3 8B             call get_maze_data
  35+ 8B65 CD 3E 8C             call print1      ;print character
  36+ 8B68 C1                   pop bc
  37+ 8B69 0C                   inc c
  38+ 8B6A 79                   ld a,c
  39+ 8B6B D6 14                sub 20          ;just draw 16 characters (we start at loc 4)
  40+ 8B6D C2 5C 8B             jp nz,rep1
  41+ 8B70
  42+ 8B70              ;now draw a final wall at the end of the line
  43+ 8B70 C5                   push bc
  44+ 8B71 11 00 F8             ld de,udg_start  ;point to udg chars
  45+ 8B74 ED 53 36 8C          ld (base),de
  46+ 8B78 CD 1C 8C             call locate      ;set print position
  47+ 8B7B CD 22 9A             call set_wall_col   ;set our wall colour
  48+ 8B7E 3A 12 99             ld a,(wallcol)
  49+ 8B81 32 3A 8C             ld (att),a
  50+ 8B84 3E B4                ld a,_smallwall  ;draw wall char
  51+ 8B86 CD 3E 8C             call print1
  52+ 8B89 C1                   pop bc
  53+ 8B8A 78                   ld a,b
  54+ 8B8B FE 12                cp 18            ;draw 18 lines (starting at line 2)
  55+ 8B8D 28 05                jr z,ret2        ;exit after 18 lines
  56+ 8B8F 04                   inc b
  57+ 8B90 0E 04                ld c,4           ;start row from pos 4 again
  58+ 8B92 18 C8                jr rep1          ;start again
  59+ 8B94
  60+ 8B94              ;now draw a bottom line wall
  61+ 8B94 3E 11        ret2:   ld a,17          ;draw 16 wall chars
  62+ 8B96 01 04 13             ld bc,$1304      ;print at 2,4;
  63+ 8B99 CD F9 8B             call topbotline
  64+ 8B9C
  65+ 8B9C              ;put our char set back to normal!
  66+ 8B9C 21 00 C5             ld hl,charset_1-256
  67+ 8B9F 22 36 8C             ld (base),hl
  68+ 8BA2 C9                   ret
  69+ 8BA3
  70+ 8BA3              ;cycle through the maze drawing blocks, player, exit etc
  71+ 8BA3              get_maze_data:
  72+ 8BA3 2A 18 FA             ld hl,(var7)    ;get our current map position
  73+ 8BA6 3E 28                ld a,40         ;cyan paper, black ink
  74+ 8BA8 32 3A 8C             ld (att),a
  75+ 8BAB
  76+ 8BAB              ;set charset to non udg
  77+ 8BAB 11 00 C6             ld de,charset_1
  78+ 8BAE 15                   dec d
  79+ 8BAF ED 53 36 8C          ld (base),de    ;set char set start for ptint1 routine
  80+ 8BB3 7E                   ld a,(hl)       ;get our character to print
  81+ 8BB4 23                   inc hl           ;jump to next maze location
  82+ 8BB5 22 18 FA             ld (var7),hl
  83+ 8BB8 67                   ld h,a          ;save reg a - we dont need reg h anymore
  84+ 8BB9
  85+ 8BB9              ;Now check if its a player, a wall or an Exit or switch,
  86+ 8BB9 ED 5B 00 FA          ld de,(player_pos)      ;get player location
  87+ 8BBD 2D                   dec l                   ;put back hl as we inc'd it earlier
  88+ 8BBE 7B                   ld a,e                  ;go back 1 position as we already incremented it
  89+ 8BBF BD                   cp l
  90+ 8BC0 7C                   ld a,h             ;restore reg a for further compares
  91+ 8BC1 20 02                jr nz,go_1          ;no match for a player
  92+ 8BC3 3E A6                ld a,$a6           ;set a to  our little man character which is a graphic
  93+ 8BC5 FE 20        go_1:   cp ' '
  94+ 8BC7 C8                   ret z
  95+ 8BC8
  96+ 8BC8              ;its a graphic character - assume its a wall no matter what
  97+ 8BC8 67                   ld h,a             ;save reg a
  98+ 8BC9 3E 0A                ld a,10             ;yellow paper, black ink
  99+ 8BCB 32 3A 8C             ld (att),a         ;red ink, blue background
 100+ 8BCE 7C                   ld a,h
 101+ 8BCF
 102+ 8BCF
 103+ 8BCF              ;Now check if its a player, a wall or an Exit or switch
 104+ 8BCF 1E A6                ld e, $a6           ;our little man graphic
 105+ 8BD1 BB                   cp e
 106+ 8BD2 28 1B                jr z,go_on          ;do next check
 107+ 8BD4
 108+ 8BD4              ;check for an exit....
 109+ 8BD4 1E C0                ld e,_me            ;exit char = 192
 110+ 8BD6 7C                   ld a,h
 111+ 8BD7 BB                   cp e               ;needs to be a compare so a is left intact
 112+ 8BD8 3E A8                ld a,$a8            ;load exit character
 113+ 8BDA 28 13                jr z,go_on
 114+ 8BDC              ;
 115+ 8BDC              ;a7 check for a switch...
 116+ 8BDC 1E E0                ld e,_ms           ;exit char = 192
 117+ 8BDE 7C                   ld a,h
 118+ 8BDF BB                   cp e               ;needs to be a compare so a is left intact
 119+ 8BE0 3E A7                ld a,$a7            ;load exit character
 120+ 8BE2 28 0B                jr z,go_on
 121+ 8BE4
 122+ 8BE4              ;default to a wall....
 123+ 8BE4              carry_on1:
 124+ 8BE4 CD 22 9A             call set_wall_col   ;set our wall colour
 125+ 8BE7 3A 12 99             ld a,(wallcol)
 126+ 8BEA 32 3A 8C             ld (att),a         ;red ink, blue background
 127+ 8BED 3E B4                ld a,_smallwall         ;return wall char
 128+ 8BEF
 129+ 8BEF
 130+ 8BEF              go_on:
 131+ 8BEF D6 80                sub $80          ;subtract 128 to point to correct graphic char
 132+ 8BF1              ;set char set to udg's
 133+ 8BF1 11 00 FC             ld de,_chars;$fc00
 134+ 8BF4 ED 53 36 8C          ld (base),de
 135+ 8BF8 C9                   ret
 136+ 8BF9
 137+ 8BF9              topbotline:
 138+ 8BF9              ;draws a single line of 16 wall chars
 139+ 8BF9              ;set char set to udg's
 140+ 8BF9 11 00 FC             ld de,$fc00             ;point to udg's
 141+ 8BFC ED 53 36 8C          ld (base),de
 142+ 8C00
 143+ 8C00 F5           rep3:   push af
 144+ 8C01 CD 1C 8C             call locate             ;set print position
 145+ 8C04              ;set wall colour. Print 1 uses whats stored in (att)
 146+ 8C04 CD 22 9A             call set_wall_col   ;set our wall colour
 147+ 8C07 3A 12 99             ld a,(wallcol)
 148+ 8C0A 32 3A 8C             ld (att),a
 149+ 8C0D 3E B4                ld a,_smallwall
 150+ 8C0F D6 80                sub $80
 151+ 8C11 C5                   push bc
 152+ 8C12 CD 3E 8C             call print1      ;print the character
 153+ 8C15 C1                   pop bc
 154+ 8C16 0C                   inc c
 155+ 8C17 F1                   pop af
 156+ 8C18 3D                   dec a
 157+ 8C19 20 E5                jr nz,rep3        ;exit when a=0
 158+ 8C1B C9                   ret
 159+ 8C1C
 160+ 8C1C
 161+ 8C1C              ;==================================================
 162+ 8C1C              ;from advanced spectrum machine code book
 163+ 8C1C              ;==================================================
 164+ 8C1C
 165+ 8C1C              ;locate routine for use with print routine
 166+ 8C1C
 167+ 8C1C              ;   entry: b=line  c=column
 168+ 8C1C              ;   preserved = bc
 169+ 8C1C              ;   on exit -   hl = display file address
 170+ 8C1C              ;               de = attr address
 171+ 8C1C              ;               a  = attr (b,c)
 172+ 8C1C              ;   df_cc is altered
 173+ 8C1C
 174+ 8C1C
 175+ 8C1C
 176+ 8C1C                 ; BREAK
 177+ 8C1C 78           locate: ld a,b
 178+ 8C1D E6 18                and $18
 179+ 8C1F 67                   ld h,a
 180+ 8C20 CB F4                set 6,h
 181+ 8C22 0F                   rrca
 182+ 8C23 0F                   rrca
 183+ 8C24 0F                   rrca
 184+ 8C25 F6 58                or $58
 185+ 8C27 57                   ld d,a
 186+ 8C28 78                   ld a,b
 187+ 8C29 E6 07                and 7
 188+ 8C2B 0F                   rrca
 189+ 8C2C 0F                   rrca
 190+ 8C2D 0F                   rrca
 191+ 8C2E 81                   add a,c
 192+ 8C2F 6F                   ld l,a
 193+ 8C30 5F                   ld e,a
 194+ 8C31 1A                   ld a,(de)
 195+ 8C32 22 84 5C             ld (df_cc),hl
 196+ 8C35 C9                   ret
 197+ 8C36
 198+ 8C36              ;here is the new print routine
 199+ 8C36
 200+ 8C36              ;   entry: a=char code to be printed
 201+ 8C36              ;   preserved = c
 202+ 8C36              ;   exit -  b=0
 203+ 8C36              ;           de = attribute address
 204+ 8C36
 205+ 8C36              ; variable base is initialised to 3c00h = normal spectrum character set
 206+ 8C36              ; att is place immediately before mask so that
 207+ 8C36              ; the two can be accessed with one ld instuction
 208+ 8C36
 209+ 8C36 00 3C        base    dw $3c00 ; start of speccy characer set
 210+ 8C38 00 40        dfcc    dw $4000 ;start of spectrum screen mem
 211+ 8C3A              ;dfcc    dw $0000 ;start of spectrum screen mem slot 0
 212+ 8C3A 38 00        att     dw $38
 213+ 8C3C 00 00        mask    dw 0
 214+ 8C3E
 215+ 8C3E
 216+ 8C3E
 217+ 8C3E              print1: ; construct character data address
 218+ 8C3E
 219+ 8C3E
 220+ 8C3E 6F                   ld l,a
 221+ 8C3F 26 00                ld h,0
 222+ 8C41 29                   add hl,hl
 223+ 8C42 29                   add hl,hl
 224+ 8C43 29                   add hl,hl
 225+ 8C44 ED 5B 36 8C          ld de,(base)                ;char set data
 226+ 8C48 19                   add hl,de
 227+ 8C49
 228+ 8C49                      ; take display file address
 229+ 8C49 ED 5B 84 5C          ld de,(df_cc)
 230+ 8C4D 06 08                ld b,8
 231+ 8C4F
 232+ 8C4F                      ; print character row by row
 233+ 8C4F 7E           nxtrow: ld a,(hl)
 234+ 8C50 12                   ld (de),a
 235+ 8C51 23                   inc hl
 236+ 8C52 14                   inc d
 237+ 8C53 10 FA                djnz nxtrow
 238+ 8C55
 239+ 8C55                      ; construct attribute address
 240+ 8C55 7A                   ld a,d
 241+ 8C56 0F                   rrca
 242+ 8C57 0F                   rrca
 243+ 8C58 0F                   rrca
 244+ 8C59 3D                   dec a
 245+ 8C5A E6 03                and 3
 246+ 8C5C F6 58                or $58
 247+ 8C5E 57                   ld d,a
 248+ 8C5F 2A 3A 8C             ld hl,(att)    ; h=mask, l=attribute
 249+ 8C62
 250+ 8C62                      ; take old attribute
 251+ 8C62 1A                   ld a,(de)
 252+ 8C63
 253+ 8C63                      ; construct new one
 254+ 8C63 AD                   xor l
 255+ 8C64 A4                   and h
 256+ 8C65 AD                   xor l
 257+ 8C66
 258+ 8C66                      ; replace attribute
 259+ 8C66 12                   ld (de),a
 260+ 8C67
 261+ 8C67                      ; finally, set dfcc to next print position
 262+ 8C67 21 84 5C             ld hl,df_cc
 263+ 8C6A 34                   inc (hl)
 264+ 8C6B C0                   ret nz
 265+ 8C6C 23                   inc hl
 266+ 8C6D 7E                   ld a,(hl)
 267+ 8C6E C6 08                add a,8
 268+ 8C70 77                   ld (hl),a
 269+ 8C71 C9                   ret
 270+ 8C72
 271+ 8C72
 272+ 8C72              ; print routine - print screen at c000 to 16384
 273+ 8C72              ; uses locate routine
 274+ 8C72
 275+ 8C72              my_print_info:  ; set dfcc to line , column
 276+ 8C72
 277+ 8C72              ;1st, check if we are printing a udg
 278+ 8C72              ;reg a holds our character to print. udg's are char $90 onwards
 279+ 8C72
 280+ 8C72              ; the carry will be set if the cp argument > than a
 281+ 8C72
 282+ 8C72
 283+ 8C72              setbase:
 284+ 8C72 F5                   push af
 285+ 8C73 C5                   push bc
 286+ 8C74 E5                   push hl
 287+ 8C75              ;        ld a,$3c                ;point to spectrum rom
 288+ 8C75              ;        ld (base+1),a
 289+ 8C75              ;        sub a                   ; make zero
 290+ 8C75              ;        ld (base),a
 291+ 8C75
 292+ 8C75              ;point to our character set
 293+ 8C75 21 00 C6             ld hl,charset_1
 294+ 8C78 25                   dec h
 295+ 8C79 22 36 8C             ld (base),hl
 296+ 8C7C
 297+ 8C7C                      ;we are now pointing at the rom char set
 298+ 8C7C 0A                   ld a,(bc)               ;get our char to print
 299+ 8C7D               ;       nop ;or a
 300+ 8C7D CB 7F                bit 7,a                 ;are we printing udg's?
 301+ 8C7F                      ; bit 7=1 so zero =false
 302+ 8C7F 28 09                jr z,ret_1              ;exit if theres no graphic to print
 303+ 8C81 D6 80                sub $80                 ;point to the first character of udg's
 304+ 8C83 01 00 F8             ld bc,udg_start         ;start of udg's in memory
 305+ 8C86 ED 43 36 8C          ld (base),bc
 306+ 8C8A                      ;ld hl,(base)
 307+ 8C8A E1           ret_1   pop hl
 308+ 8C8B C1                   pop bc
 309+ 8C8C F1                   pop af
 310+ 8C8D
 311+ 8C8D C9                   ret
 312+ 8C8E
 313+ 8C8E              my_print:
 314+ 8C8E 06 00        lp4:    ld b,0
 315+ 8C90 0E 00                ld c,0
 316+ 8C92              ;        ld a,120
 317+ 8C92
 318+ 8C92              ;        ld (att),a
 319+ 8C92 CD 1C 8C             call locate ; set print pos and attribute
 320+ 8C95                      ;call cls - clear the screen
 321+ 8C95
 322+ 8C95                      ;loop 24 times
 323+ 8C95                      ;ld a,2
 324+ 8C95                      ;push af
 325+ 8C95
 326+ 8C95                      ; set base pointer to  character set
 327+ 8C95                      ; starts at space char code 0
 328+ 8C95                ;      ld hl,(base)
 329+ 8C95                      ;ld (base),hl
 330+ 8C95 97                   sub a
 331+ 8C96                    ;make reg a=0
 332+ 8C96 32 E0 8C             ld (lc),a   ;line counter
 333+ 8C99
 334+ 8C99                      ; remember, print1 preserves the c register
 335+ 8C99 01 FF BF             ld bc, $bfff ;c000  ; 1 less than display in memory
 336+ 8C9C 2E 00                ld l,0
 337+ 8C9E              lp3:
 338+ 8C9E
 339+ 8C9E C5                   push bc
 340+ 8C9F E5                   push hl
 341+ 8CA0 03                   inc bc
 342+ 8CA1 0A                   ld a,(bc)
 343+ 8CA2 CD 72 8C             call setbase ; set char set
 344+ 8CA5 3E F0                ld a,240
 345+ 8CA7 32 3A 8C             ld (att),a          ;set black ink and paper
 346+ 8CAA 0A                   ld a,(bc)           ;reload our character to print
 347+ 8CAB 2A 36 8C             ld hl,(base)
 348+ 8CAE
 349+ 8CAE              ;charset test
 350+ 8CAE 2A 00 C6             ld hl,(charset_1)
 351+ 8CB1
 352+ 8CB1 CD 3E 8C             call print1  ; print char in a
 353+ 8CB4 E1                   pop hl
 354+ 8CB5 C1                   pop bc
 355+ 8CB6
 356+ 8CB6 03                   inc bc
 357+ 8CB7 2C                   inc l
 358+ 8CB8 7D                   ld a,l
 359+ 8CB9 FE 19                cp 25       ; print 26 chars
 360+ 8CBB C2 9E 8C             jp nz,lp3
 361+ 8CBE
 362+ 8CBE C5                   push bc
 363+ 8CBF E1                   pop hl
 364+ 8CC0 16 00                ld d,0
 365+ 8CC2 1E 08                ld e,8
 366+ 8CC4 19                   add hl,de
 367+ 8CC5
 368+ 8CC5 E5                   push hl
 369+ 8CC6 C1                   pop bc
 370+ 8CC7 2E 00                ld l,0       ;start at 0 for the next line
 371+ 8CC9 3A E0 8C             ld a,(lc)
 372+ 8CCC 3C                   inc  a
 373+ 8CCD
 374+ 8CCD              ;we only draw the first 24 columns x 24 lines
 375+ 8CCD FE 18                cp 24      ; x lines to print
 376+ 8CCF
 377+ 8CCF C8                   ret z
 378+ 8CD0
 379+ 8CD0              ; reset position to next line. locate can do attributes too
 380+ 8CD0 D9                   exx
 381+ 8CD1 E5                   push hl
 382+ 8CD2 32 E0 8C             ld (lc),a  ; save counter
 383+ 8CD5 47                   ld b,a
 384+ 8CD6 0E 00                ld c,0
 385+ 8CD8 CD 1C 8C             call locate
 386+ 8CDB E1                   pop hl
 387+ 8CDC D9                   exx
 388+ 8CDD C3 9E 8C             jp lp3
 389+ 8CE0
 390+ 8CE0
 391+ 8CE0 00           lc      db 0
 392+ 8CE1
 393+ 8CE1
 394+ 8CE1              ;============================================
 395+ 8CE1              ; draw player direction text on screen
 396+ 8CE1              ;===========================================
 397+ 8CE1
 398+ 8CE1              ; loop 7 times for 7 lines
 399+ 8CE1              ; start at column 14
 400+ 8CE1              ; print 7 characters
 401+ 8CE1
 402+ 8CE1              compass:
 403+ 8CE1              ;first colour in the background - 7 lines starting at 17,25
 404+ 8CE1              ;              ld b,17           ;row 21
 405+ 8CE1              ;              ld c,25           ;col 25
 406+ 8CE1
 407+ 8CE1              ;loc_1:        push bc
 408+ 8CE1              ;              call locate    ;set print position
 409+ 8CE1              ;              pop bc
 410+ 8CE1              ;              ;de holds the attribute position
 411+ 8CE1              ;              ld a,151          ;set colour
 412+ 8CE1              ;              call colour1
 413+ 8CE1              ;              ld a,23
 414+ 8CE1              ;              sub b
 415+ 8CE1              ;              inc b
 416+ 8CE1              ;              jr nz,loc_1
 417+ 8CE1              ;              jr draw_compass
 418+ 8CE1
 419+ 8CE1              ;colour1:      ld l,7
 420+ 8CE1              ;colour2:      ld (de),a
 421+ 8CE1              ;              inc de
 422+ 8CE1              ;              dec l
 423+ 8CE1              ;              ret z
 424+ 8CE1              ;              jr colour2
 425+ 8CE1
 426+ 8CE1              ;now draw the compass
 427+ 8CE1 06 17        draw_compass: ld b,23           ;row 21
 428+ 8CE3 0E 19                      ld c,25           ;col 25
 429+ 8CE5
 430+ 8CE5 C5                         push bc
 431+ 8CE6 CD 10 8D                   call print_pos    ;set print position
 432+ 8CE9 C1                         pop bc
 433+ 8CEA
 434+ 8CEA              ; now print our characters
 435+ 8CEA 11 57 8D                   ld de,c_dat-1       ;data start
 436+ 8CED 1A           loop1:        ld a,(de)
 437+ 8CEE FE 78                      cp 'x';120            ; = "x" data end
 438+ 8CF0 CA 02 8D                   jp z,nxt_line
 439+ 8CF3 FE 46                      cp 'F';70             ; "F" finished so exit
 440+ 8CF5 CA 1B 8D                   jp z, do_exit
 441+ 8CF8
 442+ 8CF8 D5                         push de
 443+ 8CF9 C5                         push bc
 444+ 8CFA CD 3E 8C                   call print1       ; print the character
 445+ 8CFD C1                         pop bc
 446+ 8CFE D1                         pop de
 447+ 8CFF
 448+ 8CFF 1B                         dec de
 449+ 8D00 18 EB                      jr loop1
 450+ 8D02
 451+ 8D02 C5           nxt_line:     push bc
 452+ 8D03 D5                         push de
 453+ 8D04 0E 19                      ld c,25
 454+ 8D06 05                         dec b
 455+ 8D07 CD 10 8D                   call print_pos
 456+ 8D0A D1                         pop de
 457+ 8D0B C1                         pop bc
 458+ 8D0C 1B                         dec de
 459+ 8D0D 05                         dec b
 460+ 8D0E 18 DD                      jr loop1
 461+ 8D10
 462+ 8D10              ; set print position
 463+ 8D10 C5           print_pos:    push bc
 464+ 8D11 CD 1C 8C                   call locate
 465+ 8D14 3E A5                      ld a,165          ;set ink and paper colour
 466+ 8D16 32 3A 8C                   ld (att),a
 467+ 8D19 C1                         pop bc
 468+ 8D1A C9                         ret
 469+ 8D1B
 470+ 8D1B CD 58 8D     do_exit:  call show_dir     ; highlight player direction
 471+ 8D1E
 472+ 8D1E C9                         ret
 473+ 8D1F
 474+ 8D1F
 475+ 8D1F 46                   db "F"
 476+ 8D20              ;        db "x       "
 477+ 8D20 78 73 73 61          db "xssapmoC"
 477+ 8D24 70 6D 6F 43
 478+ 8D28 78 20 20 20          db "x       "
 478+ 8D2C 20 20 20 20
 479+ 8D30 78 20 20 20          db "x   N   "
 479+ 8D34 4E 20 20 20
 480+ 8D38 78 20 20 20          db "x   |   "
 480+ 8D3C 7C 20 20 20
 481+ 8D40 78 20 45 2D          db "x E-+-W "
 481+ 8D44 2B 2D 57 20
 482+ 8D48 78 20 20 20          db "x   |   "
 482+ 8D4C 7C 20 20 20
 483+ 8D50 78 20 20 20          db "x   S   "
 483+ 8D54 53 20 20 20
 484+ 8D58              c_dat:
 485+ 8D58
 486+ 8D58
 487+ 8D58              ;===========================================
 488+ 8D58              ; highlight player direction
 489+ 8D58              ;===========================================
 490+ 8D58
 491+ 8D58              ;l4085 holdsplayer view  direction
 492+ 8D58
 493+ 8D58              ;00= north, 01=west, 02=south, 03=east
 494+ 8D58
 495+ 8D58 3E A5        show_dir:     ld a,165;185             ;white txt, brown background
 496+ 8D5A              ;now clear the settings to none
 497+ 8D5A 21 FC 5A                   ld hl,23228+64       ;s
 498+ 8D5D 77                         ld (hl),a
 499+ 8D5E 21 BE 5A                   ld hl,23166+64       ;e
 500+ 8D61 77                         ld (hl),a
 501+ 8D62 21 BA 5A                   ld hl,23162+64       ;w
 502+ 8D65 77                         ld (hl),a
 503+ 8D66 21 7C 5A                   ld hl,23100+64       ;n
 504+ 8D69 77                         ld (hl),a
 505+ 8D6A
 506+ 8D6A
 507+ 8D6A              ;now colour the direction indicator
 508+ 8D6A
 509+ 8D6A 3A 08 FA                   ld a,(player_dir)
 510+ 8D6D FE 00                      cp 0              ;n
 511+ 8D6F C2 78 8D                   jp nz,c1
 512+ 8D72 21 7C 5A                   ld hl,23100+64       ;n
 513+ 8D75 C3 8F 8D                   jp poke_it
 514+ 8D78 FE 01        c1:           cp 1              ;w
 515+ 8D7A 20 06                      jr nz,c2
 516+ 8D7C 21 BA 5A                   ld hl,23162+64       ;w
 517+ 8D7F C3 8F 8D                   jp poke_it
 518+ 8D82 FE 02        c2:           cp 2              ;s
 519+ 8D84 20 06                      jr nz,c3
 520+ 8D86 21 FC 5A                   ld hl,23228+64       ;s
 521+ 8D89 C3 8F 8D                   jp poke_it
 522+ 8D8C              ;it must be east                ;e
 523+ 8D8C 21 BE 5A     c3            ld hl,23166+64       ;e
 524+ 8D8F
 525+ 8D8F 3E 96        poke_it:      ld a,150          ;cyan paper, black writing
 526+ 8D91 77                         ld(hl),a
 527+ 8D92 C9           q1:           ret
 528+ 8D93
# file closed: src/2-rd3dmazeV6.asm
 460  8D93                  INCLUDE "3-rd3dmazeV6.asm" ; check walls in front of player
# file opened: src/3-rd3dmazeV6.asm
   1+ 8D93
   2+ 8D93
   3+ 8D93              ;##################################################
   4+ 8D93              ; Start to draw the maze in memory
   5+ 8D93              ;##################################################
   6+ 8D93
   7+ 8D93              ;hl will hold the player location in the maze
   8+ 8D93
   9+ 8D93              ;now draw the maze position
  10+ 8D93
  11+ 8D93              ;1 get our location from player_pos 16 bit but only the low byte used
  12+ 8D93              ;  since our maze is max 256 bytes.
  13+ 8D93              ;2 get our direction from player_dir 0 - 3 only.
  14+ 8D93              ;  0=north
  15+ 8D93              ;  1=west
  16+ 8D93              ;  2=south
  17+ 8D93              ;  3=east
  18+ 8D93              ;3 work out how far away the wall is in front of our view-
  19+ 8D93              ;  if its greater or less that 6 blocks since thats the max depth
  20+ 8D93              ;  we will draw on screen (6 blocks)
  21+ 8D93              ;4 start drawing from the back to the front
  22+ 8D93              ;  so everything is overwritten (separate routine).
  23+ 8D93              ;
  24+ 8D93
  25+ 8D93
  26+ 8D93              ;screen is built in memory from c000 (49152) using characters
  27+ 8D93
  28+ 8D93              get_distance:
  29+ 8D93
  30+ 8D93 2A 00 FA                   ld hl,(player_pos)    ;get player location
  31+ 8D96
  32+ 8D96 3A 08 FA                   ld a,(player_dir)     ; get player direction
  33+ 8D99
  34+ 8D99
  35+ 8D99              ;00= north, 01=west, 02=south, 03=east
  36+ 8D99
  37+ 8D99              ;if 0 decrease by -16 n
  38+ 8D99              ;if 1 decrease by -1  w
  39+ 8D99              ;if 2 increase by +16 s
  40+ 8D99              ;if 3 increase by +1  e
  41+ 8D99
  42+ 8D99              ;when checking distance, if you are looking south and your current location
  43+ 8D99              ;is >240 then you are at the south wall.
  44+ 8D99
  45+ 8D99
  46+ 8D99              ;if you are at the top of the maze facing north, and you current location
  47+ 8D99              ; is <16 you are at the far north wall of the maze
  48+ 8D99
  49+ 8D99              ;for east amd west you can detect a wall is chr $80 except for 255 (bottom
  50+ 8D99              ; right) as the next  right location is outside the maze.
  51+ 8D99
  52+ 8D99              ; find out how far away we are from a wall
  53+ 8D99                      ;are we facing north?
  54+ 8D99 FE 00                      cp 0
  55+ 8D9B CA 43 8E                   jp z, north2
  56+ 8D9E FE 01                      cp 1
  57+ 8DA0 CA 3D 8E                   jp z, west2
  58+ 8DA3 FE 02                      cp 2
  59+ 8DA5 CA 49 8E                   jp z, south2
  60+ 8DA8                      ;it must be facing east if we get heret
  61+ 8DA8
  62+ 8DA8                      ;check if were at the bottom right hand corner (255)
  63+ 8DA8                      ;if so we implicitly have a wall.
  64+ 8DA8
  65+ 8DA8
  66+ 8DA8
  67+ 8DA8                      ;we are facing east
  68+ 8DA8 11 01 00                   ld de, $0001      ; (+1) to go to next line in front of us
  69+ 8DAB
  70+ 8DAB              ;clear maxview flag and data
  71+ 8DAB              check_dist:
  72+ 8DAB 3E 06                      ld a,6
  73+ 8DAD 32 02 FA                   ld (maxview),a
  74+ 8DB0 3A 03 FA                   ld a,(flags)
  75+ 8DB3 CB 87                      res 0,a
  76+ 8DB5 32 03 FA                   ld (flags),a
  77+ 8DB8
  78+ 8DB8 06 FF                      ld b,255            ;make accum 1 - counter
  79+ 8DBA
  80+ 8DBA              ;check if maxview set - if so, dont check for wall
  81+ 8DBA              ;in front of player anymore as there alreay is a wall set
  82+ 8DBA
  83+ 8DBA 3A 03 FA     loop2:        ld a,(flags)
  84+ 8DBD CB 47                      bit 0,a           ;if 1, then already set
  85+ 8DBF C2 E2 8D                   jp nz,check_mh
  86+ 8DC2
  87+ 8DC2 7E                         ld a,(hl)         ; this is the furthest point we can see
  88+ 8DC3 FE 80                      cp _mw ;=128      ;is it a wall here
  89+ 8DC5 28 0A                      jr z,j2
  90+ 8DC7
  91+ 8DC7              ;check for an exit wall and treat as if its a wall
  92+ 8DC7 FE C0                      cp _me
  93+ 8DC9 CA D1 8D                   jp z, j2   ;if no wall check for end wall
  94+ 8DCC
  95+ 8DCC              ;check for an switch wall and treat as if its a wall
  96+ 8DCC FE E0                      cp _ms
  97+ 8DCE C2 E2 8D                   jp nz, check_mh   ;if no wall check for end wall
  98+ 8DD1
  99+ 8DD1 78           j2:           ld a,b            ;there is a wall if we get here
 100+ 8DD2                            ;is it 255? if so make it 0
 101+ 8DD2 3C                         inc a             ;if a=0, it was 255
 102+ 8DD3 CA D7 8D                   jp z,j1
 103+ 8DD6 3D                         dec a             ;put back to original value
 104+ 8DD7
 105+ 8DD7 32 02 FA     j1:           ld (maxview),a    ;save how far we can actually see
 106+ 8DDA 3A 03 FA                   ld a,(flags)
 107+ 8DDD CB C7                      set 0,a
 108+ 8DDF 32 03 FA                   ld (flags),a      ;set that we have set the flag
 109+ 8DE2
 110+ 8DE2
 111+ 8DE2 7E           check_mh:     ld a,(hl)
 112+ 8DE3 FE 81                      cp _mh ;=129      ; is it an end wall?
 113+ 8DE5 28 39                      jr z, end_loop    ; if yes, exit now
 114+ 8DE7 04                         inc b
 115+ 8DE8
 116+ 8DE8              ;check if we are at location 0 in the maze - if so do nothing
 117+ 8DE8 7D                         ld a,l
 118+ 8DE9 3C                         inc a
 119+ 8DEA 3D                         dec a             ;zero flag set if = to zero
 120+ 8DEB CA 1D 8E                   jp z,end_loop2
 121+ 8DEE
 122+ 8DEE              ;##########################################################
 123+ 8DEE
 124+ 8DEE              ;now check if we are at the top end of the maze or the bottom
 125+ 8DEE              ;end of the maze as there are no blocks to check for there.
 126+ 8DEE              ;do bottom end first.
 127+ 8DEE
 128+ 8DEE
 129+ 8DEE 3A 08 FA                   ld a,(player_dir)
 130+ 8DF1 3D                         dec a                 ;is it 0 which = north
 131+ 8DF2 3C                         inc a
 132+ 8DF3 C2 01 8E                   jp nz,cont_6a          ;carry on if not at north wall
 133+ 8DF6
 134+ 8DF6                            ;are we trying to read data outside the 256 byte boundary?
 135+ 8DF6 7D                         ld a,l
 136+ 8DF7 FE 11                      cp 17
 137+ 8DF9 D2 14 8E                   jp nc,cont_9
 138+ 8DFC
 139+ 8DFC 19                         add hl,de         ;now jump to next location in front of us
 140+ 8DFD 78                         ld a,b            ;get our depth
 141+ 8DFE C3 20 8E                   jp end_loop       ;exit routine
 142+ 8E01
 143+ 8E01
 144+ 8E01 3A 08 FA     cont_6a       ld a,(player_dir)
 145+ 8E04 D6 02                      sub 2              ;are we facing south?
 146+ 8E06 C2 14 8E                   jp nz,cont_9        ;z means yes
 147+ 8E09
 148+ 8E09 7D                         ld a,l
 149+ 8E0A FE F0                      cp 240
 150+ 8E0C DA 14 8E                   jp c,cont_9      ;carry set if cp >a
 151+ 8E0F
 152+ 8E0F 19                         add hl,de         ;now jump to next location in front of us
 153+ 8E10 78                         ld a,b            ;get our depth
 154+ 8E11 C3 20 8E                   jp end_loop       ;exit routine
 155+ 8E14
 156+ 8E14
 157+ 8E14              ;###########################################################
 158+ 8E14
 159+ 8E14 78           cont_9        ld a,b
 160+ 8E15 FE 06                      cp 6              ;only do a max of 6 loops as
 161+ 8E17 19                         add hl,de         ;now jump to next location in front of
 162+ 8E18 20 A0                      jr nz,loop2
 163+ 8E1A C3 20 8E                   jp end_loop
 164+ 8E1D                      ;we have hit a wall or 6 loops
 165+ 8E1D
 166+ 8E1D 06 FF        end_loop2:    ld b,255          ;we are here as we are at the end wall
 167+ 8E1F                                              ;top and bottom of the maze so make our
 168+ 8E1F                                              ;depth 0
 169+ 8E1F 04           end_loop1:    inc b
 170+ 8E20
 171+ 8E20              end_loop:
 172+ 8E20              ;first check if we hit an end wall - our maxview flag will =0
 173+ 8E20 3A 03 FA                   ld a,(flags)
 174+ 8E23 CB 47                      bit 0,a
 175+ 8E25 C2 2C 8E                   jp nz,cont_8      ;continue on if not 0
 176+ 8E28 78                         ld a,b
 177+ 8E29 32 02 FA                   ld (maxview),a    ;if it is make maxview 0
 178+ 8E2C              cont_8:
 179+ 8E2C              ;check if b=255, if so, make it 0
 180+ 8E2C 04                         inc b
 181+ 8E2D CA 31 8E                   jp z,here1
 182+ 8E30 05                         dec b             ;put back original value
 183+ 8E31 78           here1:        ld a,b
 184+ 8E32 32 06 FA                   ld (depth),a         ; -save how far we can see
 185+ 8E35 ED 53 09 FA                ld (de_count),de     ;save the de value for adding / subtracting later
 186+ 8E39 22 25 FA                   ld (furthest_point),hl
 187+ 8E3C C9                         ret
 188+ 8E3D
 189+ 8E3D              west2:
 190+ 8E3D 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the left
 191+ 8E40 C3 AB 8D                   jp check_dist
 192+ 8E43
 193+ 8E43              north2:
 194+ 8E43 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind
 195+ 8E46 C3 AB 8D                   jp check_dist
 196+ 8E49              south2:
 197+ 8E49 11 10 00                   ld de, $0010      ; (+16) to go to next line to the left
 198+ 8E4C C3 AB 8D                   jp check_dist
 199+ 8E4F
 200+ 8E4F C9                         ret
 201+ 8E50
 202+ 8E50
 203+ 8E50              ;############################################
 204+ 8E50              ; ld de with the value to use to check the walls in front
 205+ 8E50              ; or the sides of the player
 206+ 8E50              ;############################################
 207+ 8E50
 208+ 8E50              ; reg a must contain the direction you want to look at
 209+ 8E50
 210+ 8E50              load_de:
 211+ 8E50 3A 08 FA                 ld a,(player_dir)     ; get player direction
 212+ 8E53              ; 00= north, 01=west, 02=south, 03=east
 213+ 8E53
 214+ 8E53              ;if 0 decrease by -16 n
 215+ 8E53              ;if 1 decrease by -1  w
 216+ 8E53              ;if 2 increase by +16 s
 217+ 8E53              ;if 3 increase by +1  e
 218+ 8E53
 219+ 8E53              ;when checking distance, if you are looking south and your current location
 220+ 8E53              ;is >240 then you are at the south wall.
 221+ 8E53
 222+ 8E53
 223+ 8E53              ;if you are at the top of the maze facing north, and you current location
 224+ 8E53              ; is <16 you are at the far north wall of the maze
 225+ 8E53
 226+ 8E53              ;for east and west you can detect a wall is $80 except for 255 (bottom
 227+ 8E53              ; right) as the next  right location is outside the maze.
 228+ 8E53
 229+ 8E53              ; find out how far away we are from a wall
 230+ 8E53                      ;are we facing north?
 231+ 8E53 FE 00                      cp 0
 232+ 8E55 C2 6A 8E                   jp nz,de_1
 233+ 8E58 11 FF FF                   ld de, $ffff  ; (-1) to go to the left of north
 234+ 8E5B ED 53 0B FA                ld (left),de
 235+ 8E5F 11 01 00                   ld de, $0001  ; (+1) to go to next line right  - north
 236+ 8E62 ED 53 0D FA                ld (right),de
 237+ 8E66 11 10 00                   ld de, $0010  ; (+16) to go to next line behind - north
 238+ 8E69 C9                         ret
 239+ 8E6A
 240+ 8E6A FE 01        de_1:         cp 1          ;west
 241+ 8E6C C2 81 8E                   jp nz,de_2
 242+ 8E6F 11 10 00                   ld de, $0010  ; (+16) to go to next line to the left - west
 243+ 8E72 ED 53 0B FA                ld (left),de
 244+ 8E76 11 F0 FF                   ld de, $fff0  ; (-16) to go to next line to the right - west
 245+ 8E79 ED 53 0D FA                ld (right),de
 246+ 8E7D 11 01 00                   ld de, $0001  ; (+1) to go to next line behind - west
 247+ 8E80 C9                         ret
 248+ 8E81
 249+ 8E81 FE 02        de_2:         cp 2          ; south
 250+ 8E83 C2 98 8E                   jp nz,de_3
 251+ 8E86 11 01 00                   ld de, $001  ; (+1) to go to next line to the left - south
 252+ 8E89 ED 53 0B FA                ld (left),de
 253+ 8E8D 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the right - south
 254+ 8E90 ED 53 0D FA                ld (right),de
 255+ 8E94 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind - south
 256+ 8E97 C9                         ret
 257+ 8E98
 258+ 8E98                            ;we must be facing east if we get here
 259+ 8E98 11 F0 FF     de_3:         ld de, $fff0      ; (-16) to go to next line left - east
 260+ 8E9B ED 53 0B FA                ld (left),de
 261+ 8E9F 11 10 00                   ld de, $0010      ; (+16) to go to next line right - east
 262+ 8EA2 ED 53 0D FA                ld (right),de
 263+ 8EA6 11 FF FF                   ld de, $ffff      ; (-1) to go to next line behind - east
 264+ 8EA9 C9                         ret
 265+ 8EAA
 266+ 8EAA
 267+ 8EAA              ;#######################################################
 268+ 8EAA              ;load walk - load de with the amount to jump in the maze
 269+ 8EAA              ;as we walk forward
 270+ 8EAA              ;#######################################################
 271+ 8EAA
 272+ 8EAA              load_walk:
 273+ 8EAA 3A 08 FA                   ld a,(player_dir)   ;find out which way we are looking
 274+ 8EAD
 275+ 8EAD                            ;are we facing north?
 276+ 8EAD FE 00                      cp 0
 277+ 8EAF C2 B6 8E                   jp nz,de1
 278+ 8EB2 11 F0 FF                   ld de, $fff0 ; (-16) to go to next line behind - north
 279+ 8EB5 C9                         ret
 280+ 8EB6
 281+ 8EB6 FE 01        de1:          cp 1          ;west
 282+ 8EB8 C2 BF 8E                   jp nz,de2
 283+ 8EBB 11 FF FF                   ld de, $ffff  ; (-1) to go to next line behind - west
 284+ 8EBE C9                         ret
 285+ 8EBF
 286+ 8EBF FE 02        de2:          cp 2          ; south
 287+ 8EC1 C2 C8 8E                   jp nz,de3
 288+ 8EC4 11 10 00                   ld de, $0010     ; (+16) to go to next line behind - south
 289+ 8EC7 C9                         ret
 290+ 8EC8
 291+ 8EC8                            ;we must be facing east if we get here
 292+ 8EC8 11 01 00     de3:          ld de, $0001      ; (+1) to go to next line behind - east
 293+ 8ECB C9                         ret
 294+ 8ECC
 295+ 8ECC
 296+ 8ECC
 297+ 8ECC              ;#################################################################################
 298+ 8ECC              ;DOOR & SWITCH DRAWING ROUTINES
 299+ 8ECC
 300+ 8ECC              ;#################################################################################
 301+ 8ECC              ;see if we need to draw an open or closed door
 302+ 8ECC
 303+ 8ECC              ; show door type = 0 = front, 1 = side
 304+ 8ECC
 305+ 8ECC              draw_door:   ;check to see if we need to show the exit door
 306+ 8ECC                           ;door will always face NORTH.
 307+ 8ECC AF                        xor a                  ;make reg a zero to say no door
 308+ 8ECD 32 2A FA                  ld (show_exit),a
 309+ 8ED0                           ;are we facing south?
 310+ 8ED0 3A 08 FA                  ld a,(player_dir)
 311+ 8ED3 D6 02                     sub 2                  ;2 = south
 312+ 8ED5 20 28                     jr nz,check_east      ;if not check if door is to our right hand side
 313+ 8ED7                           ;we must be facing south and be in front of the door
 314+ 8ED7                           ;dec a
 315+ 8ED7                           ;ld (show_exit),a
 316+ 8ED7 2A 00 FA                  ld hl,(player_pos)
 317+ 8EDA 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 318+ 8EDD 19                        add hl,de
 319+ 8EDE 7E                        ld a,(hl)
 320+ 8EDF FE C0                     cp _me                 ;is it our DOOR?
 321+ 8EE1 20 1C                     jr nz,check_east      ;if not check if door is to our right hand side
 322+ 8EE3                           ;YES its a door - so draw it - but only if we are looking south
 323+ 8EE3 3A 2B FA                  ld a,(switch_pulled)
 324+ 8EE6 A7                        and a
 325+ 8EE7 28 0B                     jr z,not_open
 326+ 8EE9 CD 7B 85                  call  draw_exit_door_open
 327+ 8EEC                           ;print the door message
 328+ 8EEC DD 21 79 82               ld ix,message_leave
 329+ 8EF0 CD E1 81                  CALL print_message
 330+ 8EF3 C9                        ret
 331+ 8EF4 CD B7 83     not_open:    call draw_exit_door_closed
 332+ 8EF7
 333+ 8EF7                           ;print the door message
 334+ 8EF7 DD 21 45 82               ld ix,message_closed        ;exit_closed
 335+ 8EFB CD E1 81                  CALL print_message
 336+ 8EFE C9                        ret
 337+ 8EFF
 338+ 8EFF              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 339+ 8EFF              check_east:
 340+ 8EFF                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 341+ 8EFF                           ; so we have to be facing EAST
 342+ 8EFF 3A 08 FA                  ld a,(player_dir)
 343+ 8F02 D6 03                     sub 3              ;EAST = 3
 344+ 8F04 C0                        ret nz             ;exit as theres no door to our right
 345+ 8F05
 346+ 8F05 2A 00 FA                  ld hl,(player_pos)
 347+ 8F08 23                        inc hl             ;move test point to 1 place in front of us
 348+ 8F09 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 349+ 8F0C 19                        add hl,de
 350+ 8F0D 7E                        ld a,(hl)
 351+ 8F0E FE C0                     cp _me             ;;is it our DOOR?
 352+ 8F10 C0                        ret nz
 353+ 8F11                           ;there IS a door and it will always face NORTH and be on our right
 354+ 8F11                           ;yes its our door - so draw it
 355+ 8F11
 356+ 8F11                           ;determine if its open or closed
 357+ 8F11 3A 2B FA                  ld a,(switch_pulled)
 358+ 8F14 A7                        and a
 359+ 8F15 20 04                     jr nz,_open           ;0=closed 1 = open
 360+ 8F17 CD FB 86                  call draw_door_right_closed
 361+ 8F1A C9                        ret
 362+ 8F1B CD E5 87     _open:       call draw_door_right_open
 363+ 8F1E C9                        ret
 364+ 8F1F
 365+ 8F1F              ;#########################################################################################
 366+ 8F1F              ;SWITCH Drawing Routine - I am being very lazy here and copying the code from the door
 367+ 8F1F              ;drawing as its the same thing to do for both the door and switch and  cant be bothered atm to
 368+ 8F1F              ;modify the dor routine and save bytes! (nov 2020)
 369+ 8F1F              ;-----------------------------------------------------------------------------------------
 370+ 8F1F
 371+ 8F1F              draw_switch:
 372+ 8F1F
 373+ 8F1F               ;check to see if we need to show the Switch
 374+ 8F1F                           ;switch will always face NORTH.
 375+ 8F1F                         ;  xor a                  ;make reg a zero to say no switch
 376+ 8F1F                         ;  ld (show_switch),a
 377+ 8F1F                           ;are we facing south?
 378+ 8F1F
 379+ 8F1F 3A 08 FA                  ld a,(player_dir)
 380+ 8F22 D6 02                     sub 2                  ;2 = south
 381+ 8F24 20 21                     jr nz,check_sw_east      ;if not check if switch is to our right hand side
 382+ 8F26 2A 00 FA                  ld hl,(player_pos)
 383+ 8F29 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 384+ 8F2C 19                        add hl,de
 385+ 8F2D 7E                        ld a,(hl)
 386+ 8F2E FE E0                     cp _ms                 ;is it our SWITCH?
 387+ 8F30 20 15                     jr nz,check_sw_east      ;if not check if the SWITCH is to our right hand side
 388+ 8F32                           ;YES its a switch - so draw it - but only if we are looking south
 389+ 8F32 3A 2B FA                  ld a,(switch_pulled)
 390+ 8F35 A7                        and a
 391+ 8F36 28 0B                     jr z,switch_off
 392+ 8F38 CD 2B 89                  call  draw_switch_on
 393+ 8F3B                           ;print the switch on message
 394+ 8F3B DD 21 5E 82               ld ix,message_switchon
 395+ 8F3F CD E1 81                  CALL print_message
 396+ 8F42 C9                        ret
 397+ 8F43
 398+ 8F43 CD AB 88     switch_off:  call draw_switch_off
 399+ 8F46 C9                        ret
 400+ 8F47
 401+ 8F47              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 402+ 8F47              check_sw_east:
 403+ 8F47                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 404+ 8F47                           ; so we have to be facing EAST
 405+ 8F47 3A 08 FA                  ld a,(player_dir)
 406+ 8F4A D6 03                     sub 3              ;EAST = 3
 407+ 8F4C C0                        ret nz             ;exit as theres no door to our right
 408+ 8F4D
 409+ 8F4D 2A 00 FA                  ld hl,(player_pos)
 410+ 8F50 23                        inc hl             ;move test point to 1 place in front of us
 411+ 8F51 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 412+ 8F54 19                        add hl,de
 413+ 8F55 7E                        ld a,(hl)
 414+ 8F56 FE E0                     cp _ms             ;;is it our DOOR?
 415+ 8F58 C0                        ret nz
 416+ 8F59                           ;there IS a door and it will always face NORTH and be on our right
 417+ 8F59                           ;yes its our door - so draw it
 418+ 8F59
 419+ 8F59                           ;determine if its open or closed
 420+ 8F59 3A 2B FA                  ld a,(switch_pulled)
 421+ 8F5C A7                        and a
 422+ 8F5D 20 04                     jr nz,open_a           ;0=closed 1 = open
 423+ 8F5F CD BA 89                  call draw_switch_right_off
 424+ 8F62 C9                        ret
 425+ 8F63 CD 7E 8A     open_a:      call draw_switch_right_on
 426+ 8F66 C9                        ret
 427+ 8F67
 428+ 8F67
 429+ 8F67
# file closed: src/3-rd3dmazeV6.asm
 461  8F67                  INCLUDE "4-rd3dmazeV6.asm" ; draw left side of maze
# file opened: src/4-rd3dmazeV6.asm
   1+ 8F67
   2+ 8F67              ;============================================
   3+ 8F67              ;start to draw the maze from current location
   4+ 8F67              ;============================================
   5+ 8F67
   6+ 8F67
   7+ 8F67              draw_left_side:
   8+ 8F67
   9+ 8F67
  10+ 8F67
  11+ 8F67              ;       (depth) will hold how far we can see - max 6 squares in front of our view
  12+ 8F67
  13+ 8F67              ;              ld hl,(player_pos)    ;get player position
  14+ 8F67
  15+ 8F67              ;              ld a,l
  16+ 8F67                      ; if l=255  we are at the bottom right hand corner facing east to a end wall
  17+ 8F67                      ; if l>240 we are at the south wall
  18+ 8F67                      ; if l<16 we are at the north wall
  19+ 8F67
  20+ 8F67
  21+ 8F67              ;how do i implement a less-than/greater-than test in assembly?
  22+ 8F67
  23+ 8F67              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
  24+ 8F67              ;a and the argument were equal, else if the carry is set the argument was greater,
  25+ 8F67              ;and finally, if neither is set, then a must be greater
  26+ 8F67              ;(cp does nothing to the registers, only the f (flag) register is changed).
  27+ 8F67
  28+ 8F67              ;we need to draw from the furthest distance so
  29+ 8F67              ;point hl to furthest position - only need to use l reg in the subtraction
  30+ 8F67              ;              ld a,l
  31+ 8F67              ;              sub a,b           ;will never be >255 or less than 1
  32+ 8F67              ;hl now points to furthest visible point in front of the player
  33+ 8F67
  34+ 8F67
  35+ 8F67              ;no matter what, always draw layer 6 view so theres always a wall in front of us
  36+ 8F67
  37+ 8F67              ;        ld   de,$C177
  38+ 8F67              ;        ld   a,_topblack
  39+ 8F67              ;;        ld   a,_topwhitebottomchequer
  40+ 8F67              ;        ld   (de),a                             ; insert the top of the wall face.
  41+ 8F67              ;        ld   hl,$0021
  42+ 8F67              ;        add  hl,de                              ; advance to the next row of the display file.
  43+ 8F67              ;        ld   (hl),_bottomblack        ; insert the bottom of the wall face.
  44+ 8F67              ;;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
  45+ 8F67
  46+ 8F67              ;draw a complete line of chequerboard to emulate seeing the outside
  47+ 8F67              ;maze wall regardless of what blocks are seen.
  48+ 8F67
  49+ 8F67 21 6A C1             ld hl,$c16A
  50+ 8F6A 11 6B C1             ld de,$C16b              ; offset to row 11, col 0
  51+ 8F6D 01 19 00             ld bc,25
  52+ 8F70                    ; ld (hl),_topwhitebottomchequer
  53+ 8F70 36 A2                ld (hl),_bottomblack        ; insert the bottom of the wall face.
  54+ 8F72
  55+ 8F72 ED B0                ldir
  56+ 8F74 21 8B C1             ld hl,$c18b
  57+ 8F77 11 8C C1             ld de,$C18c              ; offset to row 12, col 0
  58+ 8F7A 01 19 00             ld bc,25
  59+ 8F7D                    ; ld (hl),_topchequerbottomwhite
  60+ 8F7D 36 A3                ld (hl),_topblack        ; insert the bottom of the wall face.
  61+ 8F7F ED B0                ldir
  62+ 8F81
  63+ 8F81              ;now draw the rest of the left side
  64+ 8F81
  65+ 8F81 3A 06 FA                   ld a,(depth)
  66+ 8F84 FE 06                      cp 6
  67+ 8F86 CA A6 8F                   jp z,draw_6	;just draw end middle block perhaps??
  68+ 8F89 FE 05                      cp 5
  69+ 8F8B CA EA 8F                   jp z,draw_5	;only need to draw 3 block + 1 part
  70+ 8F8E FE 04                      cp 4
  71+ 8F90 CA 94 91                   jp z,draw_4	;only need to draw 2 block + 1 part
  72+ 8F93 FE 03                      cp 3
  73+ 8F95 CA AD 93                   jp z,draw_3	;only need to draw 1 block + 1 part
  74+ 8F98 FE 02                      cp 2
  75+ 8F9A CA 3F 95                   jp z,draw_2	;only need to draw 1 block
  76+ 8F9D FE 01                      cp 1
  77+ 8F9F CA F7 95                   jp z,draw_1	;only need to draw 1 block
  78+ 8FA2 C3 A0 96                   jp draw_0		;only need to draw edge blocks
  79+ 8FA5              ;end of routine
  80+ 8FA5 C9                         ret
  81+ 8FA6
  82+ 8FA6              draw_6:
  83+ 8FA6
  84+ 8FA6              draw_layer_6:
  85+ 8FA6
  86+ 8FA6
  87+ 8FA6              ;now draw the maze starting at the furthest point we can see
  88+ 8FA6              ; i.e. the middle of the display
  89+ 8FA6
  90+ 8FA6              ; draw section 6
  91+ 8FA6              ; --------------
  92+ 8FA6              ; hl=maze location being drawn.
  93+ 8FA6              ; now determine what to draw for this section.
  94+ 8FA6
  95+ 8FA6 2A 25 FA             ld hl,(furthest_point)
  96+ 8FA9 CD 50 8E             call load_de
  97+ 8FAC 19                   add hl,de
  98+ 8FAD 22 25 FA             ld (furthest_point),hl  ;increment for the next layer to draw
  99+ 8FB0
 100+ 8FB0 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
 101+ 8FB3 11 77 01             ld   de,$0177           ; offset to row 11 column 12 - the centre of the 3d view.
 102+ 8FB6 19                   add  hl,de
 103+ 8FB7 E5                   push hl                 ;save it
 104+ 8FB8
 105+ 8FB8 ED 5B 25 FA          ld   de,(furthest_point); retrieve the maze location.
 106+ 8FBC EB                   ex   de,hl              ; transfer de to hl.
 107+ 8FBD
 108+ 8FBD ED 5B 09 FA          ld de,(de_count)
 109+ 8FC1 19                   add hl,de               ;get the block in front of us from the maze.
 110+ 8FC2
 111+ 8FC2              loop6:
 112+ 8FC2
 113+ 8FC2 7E                   ld a,(hl)
 114+ 8FC3 17                   rla
 115+ 8FC4 DA CA 8F             jp c,do_wall            ;bit 7 (128)
 116+ 8FC7
 117+ 8FC7 C3 E0 8F             jp do_no_wall         ; otherwise draw no wall
 118+ 8FCA
 119+ 8FCA
 120+ 8FCA              do_wall:
 121+ 8FCA                      ;check if bit 2 is set as thats an end wall
 122+ 8FCA                      ;and b must then be changed to 1 to stop drawing more than 1 wall.
 123+ 8FCA 17                   rla                     ;rotate next bit into carry.
 124+ 8FCB D2 D4 8F             jp nc, draw7
 125+ 8FCE CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 126+ 8FD0 28 02                jr z,draw7
 127+ 8FD2 06 01                ld b,1                  ;set b so we exit on return
 128+ 8FD4
 129+ 8FD4 D1           draw7   pop de
 130+ 8FD5 3E A2                ld   a,_bottomblack
 131+ 8FD7 12                   ld   (de),a             ; insert the top of the wall.
 132+ 8FD8 21 21 00             ld   hl,$0021
 133+ 8FDB 19                   add  hl,de              ; advance to the next row of the display file.
 134+ 8FDC 36 A3                ld   (hl),_topblack     ; insert the bottom of the wall.
 135+ 8FDE 18 0A                jr draw_5              ; jump to draw layer 5
 136+ 8FE0
 137+ 8FE0              ; there is a wall so insert chequerboard for the wall face.
 138+ 8FE0
 139+ 8FE0              do_no_wall:
 140+ 8FE0 D1                   pop de
 141+ 8FE1                      ;push de
 142+ 8FE1 3E A2                ld   a,_bottomblack;_topwhitebottomchequer
 143+ 8FE3 12                   ld   (de),a                             ; insert the top of the wall face.
 144+ 8FE4 21 21 00             ld   hl,$0021
 145+ 8FE7 19                   add  hl,de                              ; advance to the next row of the display file.
 146+ 8FE8 36 A3                ld   (hl),_topblack;_topchequerbottomwhite        ; insert the bottom of the wall face.
 147+ 8FEA
 148+ 8FEA              ;now got to draw the 5th row of data
 149+ 8FEA
 150+ 8FEA
 151+ 8FEA              ;############################################
 152+ 8FEA              ;############################################
 153+ 8FEA              ;draw section 5 left
 154+ 8FEA              ;############################################
 155+ 8FEA              ;############################################
 156+ 8FEA
 157+ 8FEA              draw_5:
 158+ 8FEA              ;ret
 159+ 8FEA              ; hl=maze location being drawn.
 160+ 8FEA              ; now determine what to draw for this section.
 161+ 8FEA
 162+ 8FEA              ;first we need to decrement how far we can see to the layer
 163+ 8FEA              ;we are working on
 164+ 8FEA
 165+ 8FEA 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 166+ 8FED
 167+ 8FED CD 50 8E             call load_de            ;get left and right and front jump into de reg
 168+ 8FF0 19                   add hl,de               ;jump backwards along the user view 1 space
 169+ 8FF1
 170+ 8FF1 22 25 FA             ld (furthest_point),hl ;re save it
 171+ 8FF4
 172+ 8FF4 11 FF FF             ld de,$ffff             ;to move the display position -1
 173+ 8FF7 ED 53 11 FA          ld (var4),de
 174+ 8FFB
 175+ 8FFB ED 5B 0B FA          ld de,(left)
 176+ 8FFF
 177+ 8FFF              ;move the maze location pointer 1 to the left - used for all
 178+ 8FFF              ;remaining blocks to test if there is a wall there or not.
 179+ 8FFF
 180+ 8FFF 19                   add hl,de
 181+ 9000 22 15 FA             ld (var6),hl
 182+ 9003
 183+ 9003 ED 53 0F FA          ld (var3),de
 184+ 9007 11 75 01             ld   de,$0175           ; offset to row 11 column 10 - left of  centre of the 3d view.
 185+ 900A
 186+ 900A CD 10 90             call do_draw_5
 187+ 900D
 188+ 900D C3 94 91              jp draw_4               ;now draw the 4th level
 189+ 9010
 190+ 9010              do_draw_5:
 191+ 9010
 192+ 9010 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
 193+ 9013 19                   add  hl,de
 194+ 9014
 195+ 9014
 196+ 9014              ; draw left half then right half of the display.
 197+ 9014
 198+ 9014 06 04                ld b,4                ; count for 4 columns left  of maze
 199+ 9016
 200+ 9016 ED 5B 15 FA          ld de,(var6); retrieve the maze location.
 201+ 901A
 202+ 901A
 203+ 901A
 204+ 901A              ;check if we are at the bottom right of the maze
 205+ 901A              ;if so, there is no wall after position 255 so point us to
 206+ 901A              ;position 240 and fake the wall!
 207+ 901A              ;;;        ld a,e
 208+ 901A              ;;;        cp 255
 209+ 901A              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 210+ 901A              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 211+ 901A
 212+ 901A
 213+ 901A              ;now move the maze pointer left (-1) 1 position
 214+ 901A              ;so we can read the type of walls to our left
 215+ 901A
 216+ 901A              cont_3:
 217+ 901A              ;*         push hl
 218+ 901A              ;*        ld hl,(left)
 219+ 901A              ;*        add hl,de
 220+ 901A              ;*        ex de,hl
 221+ 901A              ;*        pop hl
 222+ 901A
 223+ 901A EB                   ex   de,hl              ; transfer de to hl.
 224+ 901B
 225+ 901B              ;       hl = furthest point in the maze
 226+ 901B              ;       de = d_file location to store byte to display
 227+ 901B
 228+ 901B              ;we have to load the first plot position with a corner bit to show
 229+ 901B              ;the end of the wall at the position we can see next to the center
 230+ 901B              ;plot position on section 6
 231+ 901B              ;then, while we draw the other blocks we can see we just want top and
 232+ 901B              ;bottom blacks pointed so will use var1 and var 2 to hold the
 233+ 901B              ;character block we need to print.
 234+ 901B
 235+ 901B
 236+ 901B 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 237+ 901D 32 04 FA             ld (var1),a
 238+ 9020 3C                   inc a
 239+ 9021 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 240+ 9023
 241+ 9023 32 05 FA             ld (var2),a             ;ld with bottom left char
 242+ 9026
 243+ 9026              loop8:
 244+ 9026 E5                   push hl
 245+ 9027
 246+ 9027
 247+ 9027              ;############################################################################
 248+ 9027              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 249+ 9027
 250+ 9027 3A 28 FA             ld a,(maze_highbyte)
 251+ 902A BC                   cp h                    ;are we at the top part of the maze?
 252+ 902B CA 5E 90             jp z,cont_1s
 253+ 902E                                              ;if we are on a different maze boundary
 254+ 902E                                              ;then draw a maze wall as we are the top
 255+ 902E                                              ;or north wall but maze data has no
 256+ 902E                                              ;wall data.
 257+ 902E              ;4 = 2nd left wall
 258+ 902E              ;3 = 2nd left wall
 259+ 902E              ;2 = 3rd left wall
 260+ 902E              ;1 = 4th left wall
 261+ 902E
 262+ 902E 78                   ld a,b                  ;our current wall counter
 263+ 902F FE 04                cp 4
 264+ 9031 C2 3C 90             jp nz,a5_1                 ;its not wall 4
 265+ 9034 3E 01                ld a,1
 266+ 9036 47                   ld b,a
 267+ 9037 C6 80                add a,128               ;make sure we set a wall!
 268+ 9039 C3 94 90             jp draw_5S             ;jump straight to making an end wall
 269+ 903C
 270+ 903C FE 03        a5_1:   cp 3
 271+ 903E C2 49 90             jp nz,a5_2             ;its not wall 3
 272+ 9041 3E 01                ld a,1
 273+ 9043 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 274+ 9044 C6 80                add a,128               ;make sure we set a wall!
 275+ 9046 C3 BB 90             jp do_2ndwall_l        ;draw the 2nd block to the left
 276+ 9049
 277+ 9049 FE 02        a5_2:   cp 2
 278+ 904B C2 56 90             jp nz,a5_3             ;its not wall 3
 279+ 904E 3E 01                ld a,1
 280+ 9050 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 281+ 9051 C6 80                add a,128               ;make sure we set a wall!
 282+ 9053 C3 FB 90             jp do_3rdwall_l       ;draw the 2nd block to the left
 283+ 9056
 284+ 9056              ;a must = 1 if we get here.
 285+ 9056 3E 01        a5_3:   ld a,1
 286+ 9058 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 287+ 9059 C6 80                add a,128               ;make sure we set a wall!
 288+ 905B C3 48 91             jp do_4thwall_l       ;draw the cnd block to the left
 289+ 905E
 290+ 905E              ;############################################################################
 291+ 905E
 292+ 905E              ;are we at a maze edge wall = clear flag?
 293+ 905E              cont_1s:
 294+ 905E 97                   sub a
 295+ 905F 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 296+ 9062
 297+ 9062
 298+ 9062 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 299+ 9063
 300+ 9063 FE 81                cp _mh                  ;maze_wall = 129
 301+ 9065 20 07                jr nz,cont9
 302+ 9067 F5                   push af
 303+ 9068 3E 01                ld a,1
 304+ 906A 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 305+ 906D F1                   pop af
 306+ 906E
 307+ 906E 17           cont9:  rla
 308+ 906F DA 82 90             jp c,do_wall5            ;bit 7 (128)
 309+ 9072
 310+ 9072
 311+ 9072              go_back5:
 312+ 9072 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 313+ 9075 19                   add hl,de               ; holds current screen position
 314+ 9076 EB                   ex de,hl
 315+ 9077 E1                   pop hl
 316+ 9078 D5                   push de
 317+ 9079 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 318+ 907D 19                   add hl,de                ; go left 1 block in the maze
 319+ 907E D1                   pop de
 320+ 907F 10 A5                djnz loop8
 321+ 9081 C9                   ret
 322+ 9082
 323+ 9082
 324+ 9082              ; there is not a wall so insert black to show that the location is too far away to see its detail.
 325+ 9082
 326+ 9082              do_wall5:
 327+ 9082
 328+ 9082              ;check if b=2 - if so we are not at a wall immediately next to our left
 329+ 9082              ;nor are we at an and wall. We are drawing the 2nd block to the left
 330+ 9082              ;b=3 for 3rd block to the left.
 331+ 9082
 332+ 9082 78                   ld a,b
 333+ 9083 D6 01                sub 1
 334+ 9085 CA 48 91             jp z,do_4thwall_l       ;draw the cnd block to the left
 335+ 9088
 336+ 9088 78                   ld a,b                  ;b is our loop count
 337+ 9089 D6 02                sub 2                   ;check if a=2
 338+ 908B CA FB 90             jp z,do_3rdwall_l       ;draw the 2nd block to the left
 339+ 908E
 340+ 908E 78                   ld a,b
 341+ 908F D6 03                sub 3
 342+ 9091 CA BB 90             jp z,do_2ndwall_l       ;draw the cnd block to the left
 343+ 9094
 344+ 9094
 345+ 9094
 346+ 9094              ;b must = 4 if we get here, so draw the first wall
 347+ 9094
 348+ 9094                        ;check if bit 2 is set as thats an end
 349+ 9094                      ;and b must then be changed to 1 to stop drawing.
 350+ 9094              draw_5S:
 351+ 9094 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 352+ 9096 28 04                jr z,draw8
 353+ 9098
 354+ 9098 97                   sub a                   ;we do NOT have an ouside maze wall
 355+ 9099 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 356+ 909C              ;b must be 1 if we get here!
 357+ 909C
 358+ 909C D5           draw8:  push de
 359+ 909D 3A 04 FA             ld   a,(var1)           ;holds _smallwall
 360+ 90A0 12                   ld   (de),a             ; insert the top of the wall.
 361+ 90A1
 362+ 90A1 1B                   dec de
 363+ 90A2 12                   ld   (de),a             ; insert the top of the wall.
 364+ 90A3 13                   inc de                  ;put plot position back to start of wall
 365+ 90A4
 366+ 90A4              ;now check if we need to draw a black side on the right
 367+ 90A4              ;by looking to the character to the right of the wall
 368+ 90A4              ;and if there is not a wall already drawn, then draw a
 369+ 90A4              ;black side
 370+ 90A4
 371+ 90A4 3E A9                ld a,_topleft5          ;draw the top left side
 372+ 90A6 13                   inc de                  ;jump ahead 1 char in the display
 373+ 90A7 12                   ld (de),a               ;draw a black and chevron side
 374+ 90A8 1B                   dec de                  ;go back 1 space again
 375+ 90A9
 376+ 90A9              ;NOW DO THE NEXT LINE BELOW
 377+ 90A9
 378+ 90A9              ;_x1:
 379+ 90A9 21 21 00             ld   hl,$0021           ;jump to the next line below
 380+ 90AC 19                   add  hl,de
 381+ 90AD 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 382+ 90B0 77                   ld   (hl),a             ; insert the bottom of the wall.
 383+ 90B1 2B                   dec hl
 384+ 90B2 77                   ld   (hl),a             ; insert the bottom of the wall.
 385+ 90B3 23                   inc hl
 386+ 90B4 23                   inc hl
 387+ 90B5 3E AB                ld a,_bottomleft5
 388+ 90B7 77                   ld (hl),a
 389+ 90B8
 390+ 90B8              ;_x2
 391+ 90B8 D1                    pop de
 392+ 90B9 18 B7                jr go_back5              ; jump back to main loop
 393+ 90BB
 394+ 90BB
 395+ 90BB              ;************************************
 396+ 90BB
 397+ 90BB              ;draw the wall for 2nd LEFT layer
 398+ 90BB
 399+ 90BB              ;***********************************
 400+ 90BB
 401+ 90BB              do_2ndwall_l:
 402+ 90BB
 403+ 90BB D5                   push de                 ;save the current acreen position
 404+ 90BC
 405+ 90BC              ;1st check if theres a wall where we need to draw the black side
 406+ 90BC
 407+ 90BC 1B                   dec de
 408+ 90BD 1B                   dec de                  ;move 3 place left to position us correctly
 409+ 90BE
 410+ 90BE              ;now draw a red wall to the right of section 2
 411+ 90BE 13                   inc de
 412+ 90BF 3E B4                ld a,_smallwall
 413+ 90C1 12                   ld (de),a
 414+ 90C2 1B                   dec de
 415+ 90C3 12                   ld (de),a               ;draw 2nd one (4 wide)
 416+ 90C4 1B                   dec de
 417+ 90C5 12                   ld (de),a               ;draw 3rd one (4 wide)
 418+ 90C6
 419+ 90C6 13                   inc de
 420+ 90C7 13                   inc de
 421+ 90C8 13                   inc de
 422+ 90C9                               ;put us back to our start position ready
 423+ 90C9                                              ;to start drawing the black side
 424+ 90C9
 425+ 90C9              ;now check if we need to draw a black side on the right
 426+ 90C9              ;by looking to the character to the right of the wall
 427+ 90C9              ;and if there is not a wall already drawn, then draw a
 428+ 90C9              ;black side
 429+ 90C9
 430+ 90C9 13                   inc de
 431+ 90CA 1A                   ld a,(de)               ;read whats there
 432+ 90CB FE B4                cp _smallwall           ;is it a wall
 433+ 90CD CA D7 90             jp z,_x1r_2_l           ;if yes, do NOT draw a black side.
 434+ 90D0 1B                   dec de
 435+ 90D1 3E 95                ld a,$95                ;draw top left side
 436+ 90D3 12                   ld (de),a               ;draw middle top bit
 437+ 90D4 3C                   inc a
 438+ 90D5 13                   inc de
 439+ 90D6 12                   ld (de),a               ;draw middle top bit
 440+ 90D7
 441+ 90D7
 442+ 90D7              ;top line done
 443+ 90D7
 444+ 90D7              ;now do the bottom line underneath
 445+ 90D7
 446+ 90D7              ;REMEMBER - 1 block is 2 8 bit squares at the section
 447+ 90D7              _x1r_2_l:
 448+ 90D7 1B                   dec de
 449+ 90D8 1B                   dec de
 450+ 90D9 1B                   dec de                  ;move left 3 places in the display
 451+ 90DA 21 21 00             ld  hl,$0021           ;jump to the next line below + 1 char right
 452+ 90DD 19                   add hl,de
 453+ 90DE
 454+ 90DE
 455+ 90DE              ;now draw a red wall to the right of section 2
 456+ 90DE 23                   inc hl
 457+ 90DF 3E B4                ld a,_smallwall
 458+ 90E1 77                   ld (hl),a
 459+ 90E2 2B                   dec hl
 460+ 90E3 77                   ld (hl),a
 461+ 90E4 2B                   dec hl
 462+ 90E5 77                   ld (hl),a               ;draw 3rd one (3 wide)
 463+ 90E6
 464+ 90E6 23                   inc hl
 465+ 90E7 23                   inc hl
 466+ 90E8 23                   inc hl
 467+ 90E9
 468+ 90E9              ;now check if we need to draw a black side on the left of the lower half wall
 469+ 90E9              ;do this by checking if the next block is already a wall just like above
 470+ 90E9
 471+ 90E9 23                   inc hl      ;look at the right block
 472+ 90EA 7E                   ld a,(hl)
 473+ 90EB FE B4                cp _smallwall           ;is there a bottom wall5 here?
 474+ 90ED CA F7 90             jp z,_x2r_2_l
 475+ 90F0 3E 98                ld a,$98            ;draw rightmost bottom
 476+ 90F2 2B                   dec hl
 477+ 90F3 77                   ld (hl),a
 478+ 90F4
 479+ 90F4 3C                  inc a
 480+ 90F5 23                   inc hl
 481+ 90F6 77                   ld (hl),a
 482+ 90F7
 483+ 90F7 D1           _x2r_2_l  pop de
 484+ 90F8 C3 72 90             jp go_back5              ; jump back to main loop
 485+ 90FB
 486+ 90FB              ;##########################################
 487+ 90FB
 488+ 90FB              ;draw the wall for 3rd LEFT layer
 489+ 90FB
 490+ 90FB              ;##########################################
 491+ 90FB
 492+ 90FB              do_3rdwall_l:
 493+ 90FB
 494+ 90FB D5                   push de                 ;save the current acreen position
 495+ 90FC              ;1st check if theres a wall where we need to draw the black side
 496+ 90FC
 497+ 90FC 1B                  dec de
 498+ 90FD 1B                   dec de
 499+ 90FE 1B                   dec de
 500+ 90FF 1B                   dec de
 501+ 9100 1B                   dec de
 502+ 9101 1B                   dec de
 503+ 9102
 504+ 9102
 505+ 9102              ;now draw a red wall to the left of section 2,  top half
 506+ 9102
 507+ 9102 3E B4                ld a,_smallwall;$8e                ;8e - 3rd wall graphic
 508+ 9104 12                   ld (de),a
 509+ 9105 13                   inc de
 510+ 9106 12                   ld (de),a
 511+ 9107 13                   inc de
 512+ 9108 12                   ld (de),a
 513+ 9109 13                   inc de
 514+ 910A 12                   ld (de),a               ;draw 4th one (4 wide)
 515+ 910B
 516+ 910B
 517+ 910B              ;now check if we need to draw a black side on the right
 518+ 910B              ;by looking to the character to the right of the wall
 519+ 910B              ;and if there is not a wall already drawn, then draw a
 520+ 910B              ;black side
 521+ 910B
 522+ 910B 13                   inc de
 523+ 910C 1A                   ld a,(de)               ;read whats there
 524+ 910D                     ; dec de                  ;put our pointer back to the original position
 525+ 910D FE B4                cp _smallwall           ;is it a wall
 526+ 910F CA 1F 91             jp z,_x1r_3l               ;if yes, do NOT draw a black side.
 527+ 9112 1B                   dec de
 528+ 9113 13                   inc de
 529+ 9114 13                   inc de
 530+ 9115 13                   inc de
 531+ 9116 3E C5                ld a,$c5             ;draw top right side
 532+ 9118 12                   ld (de),a
 533+ 9119 1B                   dec de
 534+ 911A 3C                   inc a
 535+ 911B 12                   ld (de),a
 536+ 911C 3C                   inc a
 537+ 911D 1B                   dec de
 538+ 911E 12                   ld (de),a
 539+ 911F
 540+ 911F              ;Top line done
 541+ 911F              ;now do the bottom line
 542+ 911F
 543+ 911F              _x1r_3l:
 544+ 911F 1B                   dec de
 545+ 9120 1B                   dec de
 546+ 9121 1B                   dec de
 547+ 9122 1B                   dec de
 548+ 9123
 549+ 9123 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 9126 19                   add  hl,de
 551+ 9127 3E B4                ld a,_smallwall;$8e
 552+ 9129 77                   ld (hl),a
 553+ 912A 23                   inc hl
 554+ 912B 77                   ld (hl),a
 555+ 912C 23                   inc hl
 556+ 912D 77                   ld (hl),a
 557+ 912E 23                   inc hl
 558+ 912F 77                   ld (hl),a
 559+ 9130
 560+ 9130 23                   inc hl
 561+ 9131
 562+ 9131
 563+ 9131              ;now check if we need to draw a black side on the left of the lower half wall
 564+ 9131              ;do this by checking if the next block is already a wall just like above
 565+ 9131
 566+ 9131 23                   inc hl      ;look at the right block
 567+ 9132 7E                   ld a,(hl)
 568+ 9133 2B                   dec hl
 569+ 9134 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 570+ 9136 CA 44 91             jp z,_x2r_3l
 571+ 9139 2B                   dec hl
 572+ 913A              ;inc hl
 573+ 913A 3E C3                ld a,$c3            ;draw leftmost bottom
 574+ 913C 23                   inc hl
 575+ 913D 77                   ld (hl),a
 576+ 913E 23                   inc hl
 577+ 913F 3D                   dec a
 578+ 9140 77                   ld (hl),a
 579+ 9141 23                   inc hl
 580+ 9142 3D                   dec a
 581+ 9143 77                   ld (hl),a
 582+ 9144
 583+ 9144 D1           _x2r_3l  pop de
 584+ 9145 C3 72 90             jp go_back5              ; jump back to main loop
 585+ 9148
 586+ 9148              ;##########################################
 587+ 9148
 588+ 9148              ;draw the wall for 4th (and last!) LEFT layer
 589+ 9148
 590+ 9148              ;##########################################
 591+ 9148
 592+ 9148              do_4thwall_l:
 593+ 9148
 594+ 9148              ;draw top half of wall
 595+ 9148
 596+ 9148 D5                   push de                 ;save the current acreen position
 597+ 9149              ;1st check if theres a wall where we need to draw the black side
 598+ 9149 1B                   dec de
 599+ 914A 1B                   dec de
 600+ 914B 1B                   dec de
 601+ 914C 1B                   dec de
 602+ 914D 1B                   dec de
 603+ 914E 1B                   dec de
 604+ 914F              ;now draw a red wall to the right of section 2,  top half
 605+ 914F
 606+ 914F 3E B4                ld a,_smallwall;$8d
 607+ 9151 12                   ld (de),a
 608+ 9152 1B                   dec de
 609+ 9153 12                   ld (de),a
 610+ 9154 13                   inc de                  ;move print position back for black wall
 611+ 9155
 612+ 9155              ;now check if we need to draw a black side on the right
 613+ 9155              ;by looking to the character to the right of the wall
 614+ 9155              ;and if there is not a wall already drawn, then draw a
 615+ 9155              ;black side
 616+ 9155
 617+ 9155 13                   inc de                  ;jump left 1 char in the display
 618+ 9156 1A                   ld a,(de)               ;read whats there
 619+ 9157 1B                   dec de                  ;put our pointer back to the original position
 620+ 9158 FE B4                cp _smallwall;$8e                 ;is it a wall
 621+ 915A CA 6E 91             jp z,_x1r_31_l               ;if yes, do NOT draw a black side.
 622+ 915D              ;        dec de
 623+ 915D 3E B9                ld a,$b9              ;draw top right side
 624+ 915F 13                   inc de
 625+ 9160 13                   inc de
 626+ 9161 13                   inc de
 627+ 9162 13                   inc de
 628+ 9163 12                   ld (de),a           ;draw 4 black sides
 629+ 9164 1B                   dec de
 630+ 9165 3C                   inc a
 631+ 9166 12                   ld (de),a
 632+ 9167 3C                   inc a
 633+ 9168 1B                   dec de
 634+ 9169 12                   ld (de),a
 635+ 916A 3C                   inc a
 636+ 916B 1B                   dec de
 637+ 916C 12                   ld (de),a
 638+ 916D
 639+ 916D 1B                   dec de              ;move to wall start
 640+ 916E
 641+ 916E
 642+ 916E              ;top line done
 643+ 916E
 644+ 916E              ;now do the bottom line underneath
 645+ 916E
 646+ 916E              _x1r_31_l
 647+ 916E 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 648+ 9171 19                   add  hl,de
 649+ 9172
 650+ 9172 3E B4                ld a,_smallwall;$8d
 651+ 9174 77                   ld (hl),a
 652+ 9175 2B                   dec hl
 653+ 9176 77                   ld (hl),a
 654+ 9177
 655+ 9177 23                   inc hl
 656+ 9178
 657+ 9178
 658+ 9178              ;now check if we need to draw a black side on the left of the lower half wall
 659+ 9178              ;do this by checking if the next block is already a wall just like above
 660+ 9178
 661+ 9178 23                   inc hl      ;look at the left block
 662+ 9179 7E                   ld a,(hl)
 663+ 917A 2B                   dec hl
 664+ 917B FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 665+ 917D CA 90 91             jp z,_x2r_31_l
 666+ 9180
 667+ 9180                   ;  dec hl
 668+ 9180 3E BD                ld a,$bd            ;draw leftmost bottom
 669+ 9182 23                   inc hl
 670+ 9183 23                   inc hl
 671+ 9184 23                   inc hl
 672+ 9185 23                   inc hl
 673+ 9186
 674+ 9186 77                   ld (hl),a
 675+ 9187 2B                   dec hl
 676+ 9188 3C                   inc a
 677+ 9189 77                   ld (hl),a
 678+ 918A 2B                   dec hl
 679+ 918B 3C                   inc a
 680+ 918C 77                   ld (hl),a
 681+ 918D 2B                   dec hl
 682+ 918E 3C                   inc a
 683+ 918F 77                   ld (hl),a
 684+ 9190
 685+ 9190 D1           _x2r_31_l  pop de
 686+ 9191 C3 72 90             jp go_back5              ; jump back to main loop
 687+ 9194
 688+ 9194
 689+ 9194              ;############################################
 690+ 9194              ;############################################
 691+ 9194              ;draw LEFT layer 4
 692+ 9194              ;############################################
 693+ 9194              ;############################################
 694+ 9194
 695+ 9194              draw_4
 696+ 9194
 697+ 9194              ; hl=maze location being drawn.
 698+ 9194              ; now determine what to draw for this section.
 699+ 9194
 700+ 9194
 701+ 9194 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 702+ 9197
 703+ 9197 CD 50 8E             call load_de            ;get left and right and front jump into de reg
 704+ 919A 19                   add hl,de               ;jump backwards along the user view 1 space
 705+ 919B 22 25 FA             ld (furthest_point),hl  ;re save it
 706+ 919E
 707+ 919E              ;we should also move our pointer left to read where the walls are.
 708+ 919E              ;this will be from this point onwards as we can see the blocks more fully
 709+ 919E
 710+ 919E 11 FF FF             ld de,$ffff              ;to move the printed position -3
 711+ 91A1 ED 53 11 FA          ld (var4),de            ;as block is 3 chars wide
 712+ 91A5
 713+ 91A5              ;we need to move pointer 1 to the left for wall checking
 714+ 91A5 ED 5B 0B FA          ld de,(left)
 715+ 91A9 19                   add hl,de
 716+ 91AA 22 15 FA             ld (var6),hl ;re save it
 717+ 91AD
 718+ 91AD
 719+ 91AD ED 53 0F FA          ld (var3),de
 720+ 91B1 11 51 01             ld de,$0151            ; offset to row 10 column 16 - left of  centre of the 3d view.
 721+ 91B4 CD BA 91             call do_draw_4
 722+ 91B7
 723+ 91B7
 724+ 91B7 C3 AD 93             jp draw_3              ;now draw the 4th level
 725+ 91BA
 726+ 91BA              do_draw_4:
 727+ 91BA
 728+ 91BA 2A 7E 81             ld hl,(d_file)         ; fetch the location of the display file.
 729+ 91BD 19                   add hl,de
 730+ 91BE 06 04                ld b,4                 ; count for 3 blocks left of display file
 731+ 91C0                                             ; 0 is not counted so loops 3 times
 732+ 91C0 ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
 733+ 91C4 EB                   ex de,hl
 734+ 91C5
 735+ 91C5              ;       hl = furthest point in the maze
 736+ 91C5              ;       de = d_file location to store byte to display
 737+ 91C5
 738+ 91C5              loop9:
 739+ 91C5 E5                   push hl
 740+ 91C6
 741+ 91C6              ;#############################################################################
 742+ 91C6              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 743+ 91C6
 744+ 91C6 3A 28 FA             ld a,(maze_highbyte)
 745+ 91C9 BC                   cp h                    ;are weoutside of our maze?
 746+ 91CA CA FD 91             jp z,cont_5
 747+ 91CD
 748+ 91CD                       ;if we are on a different maze boundary
 749+ 91CD                                              ;then draw a maze wall as we are the top
 750+ 91CD                                              ;or north wall but maze data has no
 751+ 91CD                                              ;wall data.
 752+ 91CD
 753+ 91CD              ;4 = 1st LEFT wall
 754+ 91CD              ;3 = 2nd LEFT wall
 755+ 91CD              ;2 = 3rd LEFT wall
 756+ 91CD              ;1 = 4th LEFT wall
 757+ 91CD
 758+ 91CD 78                   ld a,b                  ;our current wall counter
 759+ 91CE FE 04                cp 4
 760+ 91D0 C2 DB 91             jp nz,a4_1              ;its not a wall
 761+ 91D3 3E 01                ld a,1
 762+ 91D5 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 763+ 91D6 C6 80                add a,128               ;make sure we set a wall!
 764+ 91D8 C3 2C 92             jp draw_9               ;draw the 1st block to the left
 765+ 91DB
 766+ 91DB              ;        ld a,b
 767+ 91DB FE 03        a4_1:   cp 3
 768+ 91DD C2 E8 91             jp nz,a4_2              ;its not wall
 769+ 91E0 3E 01                ld a,1
 770+ 91E2 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 771+ 91E3 C6 80                add a,128               ;make sure we set a wall!
 772+ 91E5 C3 6C 92             jp draw_9_2L           ;draw the 2nd block to the left
 773+ 91E8
 774+ 91E8 FE 02        a4_2:   cp 2
 775+ 91EA C2 F5 91             jp nz,a4_3              ;its not wall
 776+ 91ED 3E 01                ld a,1
 777+ 91EF 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 778+ 91F0 C6 80                add a,128               ;make sure we set a wall!
 779+ 91F2 C3 DE 92             jp draw_9_3L           ;draw the 3rd block to the left
 780+ 91F5
 781+ 91F5              ;a must = 1 if we get here.
 782+ 91F5 3E 01        a4_3:   ld a,1
 783+ 91F7 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 784+ 91F8 C6 80                add a,128               ;make sure we set a wall!
 785+ 91FA C3 3D 93             jp draw_9_4L           ;draw the 4th block to the left
 786+ 91FD
 787+ 91FD              ;############################################################################
 788+ 91FD
 789+ 91FD
 790+ 91FD              ;now check if we are on the south wall and frig it to draw the
 791+ 91FD              ;walls we need.
 792+ 91FD              ;reg a already contains l
 793+ 91FD
 794+ 91FD              ;cont_4s:
 795+ 91FD
 796+ 91FD
 797+ 91FD              cont_5:
 798+ 91FD 7E                   ld a,(hl)
 799+ 91FE 17                   rla
 800+ 91FF DA 12 92             jp c,do_wall4            ;bit 7 (128)
 801+ 9202
 802+ 9202               ;       call do_no_wall4         ; otherwise draw no wall
 803+ 9202
 804+ 9202              go_back4:
 805+ 9202 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 806+ 9205 19                   add hl,de
 807+ 9206 EB                   ex de,hl
 808+ 9207 E1                   pop hl
 809+ 9208 D5                   push de
 810+ 9209 ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 811+ 920D 19                   add hl,de               ; move to the start of the next block to print
 812+ 920E                                              ;we need to move back 4 blocks
 813+ 920E                                              ;as the first block obscures the view
 814+ 920E                                              ;of the next 3 blocks.
 815+ 920E D1                   pop de
 816+ 920F 10 B4                djnz loop9
 817+ 9211 C9                   ret
 818+ 9212
 819+ 9212              do_wall4:
 820+ 9212
 821+ 9212              draw_4s:
 822+ 9212
 823+ 9212              ;Draw wall based on b count
 824+ 9212
 825+ 9212              wall4L_start:
 826+ 9212
 827+ 9212 78                   ld a,b
 828+ 9213 D6 01                sub 1                   ;4th wall  to the left
 829+ 9215 CA 3D 93             jp z,draw_9_4L
 830+ 9218
 831+ 9218 78                   ld a,b
 832+ 9219 D6 02                sub 2                   ;3rd wall to the left
 833+ 921B CA DE 92             jp z,draw_9_3L
 834+ 921E
 835+ 921E 78                   ld a,b
 836+ 921F D6 03                sub 3                   ;2nd wall immediately wall to the left
 837+ 9221 CA 6C 92             jp z,draw_9_2L
 838+ 9224
 839+ 9224 78                   ld a,b
 840+ 9225 D6 04                sub 4                   ;1st wall immediately wall to the left
 841+ 9227 CA 2C 92             jp z,draw_9
 842+ 922A
 843+ 922A E1                   pop hl
 844+ 922B C9                   ret
 845+ 922C
 846+ 922C              draw_9:
 847+ 922C C5                   push bc
 848+ 922D D5                   push de                 ;save our display pointer
 849+ 922E 06 04                ld b,4                  ;block is 4 blocks high
 850+ 9230 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 851+ 9233 1B                   dec de
 852+ 9234
 853+ 9234 3E B7        loop10: ld   a,_mediumwall_1      ;grey sides facing us
 854+ 9236 12                   ld (de),a               ; insert thepart of the wall.
 855+ 9237 13                   inc de
 856+ 9238 12                   ld (de),a               ;put grey side to our right
 857+ 9239 13                   inc de
 858+ 923A 12                   ld (de),a
 859+ 923B 13                   inc de
 860+ 923C 12                   ld (de),a
 861+ 923D 1B                   dec de
 862+ 923E 1B                   dec de
 863+ 923F 1B                   dec de                  ;go left 1 again
 864+ 9240 EB                   ex de,hl
 865+ 9241 19                   add  hl,de              ; advance to the next row of the display file.
 866+ 9242 EB                   ex de,hl
 867+ 9243 10 EF                djnz loop10             ;do this 3 times
 868+ 9245
 869+ 9245                      ;now draw the blank face
 870+ 9245 D1                   pop de                  ;back to our original position
 871+ 9246 D5                   push de
 872+ 9247 13                   inc de
 873+ 9248 13                   inc de                  ;move ahead 3 spaces in the display
 874+ 9249 13                   inc de
 875+ 924A              ;        inc de
 876+ 924A
 877+ 924A              ;check if the char to our right is a wall block.
 878+ 924A              ;if so, do not draw a black face as we need to hide it or it will
 879+ 924A              ;ovewrite the already drawn block
 880+ 924A
 881+ 924A 1A                   ld a,(de)
 882+ 924B FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 883+ 924D C2 54 92             jp nz,cont_1            ;there is no block so draw black edge
 884+ 9250 D1                   pop de
 885+ 9251 C1                   pop bc
 886+ 9252 18 AE                jr go_back4             ;otherwise quit this draw
 887+ 9254
 888+ 9254 EB           cont_1  ex  de,hl
 889+ 9255 11 21 00             ld de,$0021
 890+ 9258 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
 891+ 925A 77                   ld  (hl),a
 892+ 925B 19                   add hl,de
 893+ 925C 3E AF                ld  a,_black      ;triangle sloping to right bottom
 894+ 925E 77                   ld  (hl),a
 895+ 925F 19                   add hl,de
 896+ 9260 3E AF                ld  a,_black      ;triangle sloping to right bottom
 897+ 9262 77                   ld  (hl),a
 898+ 9263 19                   add hl,de
 899+ 9264
 900+ 9264 77                   ld  (hl),a
 901+ 9265 3E B0                ld  a,_topcorner1
 902+ 9267 77                   ld  (hl),a
 903+ 9268 D1                   pop de
 904+ 9269 C1                   pop bc
 905+ 926A 18 96                jr go_back4              ; jump back to main loop
 906+ 926C
 907+ 926C              ;************************************
 908+ 926C              ;*Draw the 2nd LEFT block of section 4
 909+ 926C              ;************************************
 910+ 926C
 911+ 926C              draw_9_2L:
 912+ 926C C5                   push bc
 913+ 926D 21 FF FF             ld hl,$ffff                 ;move start point (-1) `to correct position
 914+ 9270 19                   add hl,de
 915+ 9271 EB                   ex de,hl
 916+ 9272 D5                   push de
 917+ 9273
 918+ 9273              ;now draw the 2nd wall itself
 919+ 9273 06 04                ld b,4                  ;block is 4 blocks high
 920+ 9275 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 921+ 9278 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 922+ 927A
 923+ 927A              loop10r_2L:
 924+ 927A 12                   ld (de),a             ; insert thepart of the wall.
 925+ 927B 1B                   dec de
 926+ 927C 12                   ld (de),a               ;put grey side to our right
 927+ 927D 1B                   dec de
 928+ 927E 12                   ld (de),a
 929+ 927F 1B                   dec de
 930+ 9280 12                   ld (de),a
 931+ 9281 1B                   dec de
 932+ 9282 12                   ld (de),a
 933+ 9283 13                   inc de
 934+ 9284 13                   inc de
 935+ 9285 13                   inc de
 936+ 9286 13                   inc de                  ;go left 1 again
 937+ 9287 EB                   ex de,hl
 938+ 9288 19                   add  hl,de              ; advance to the next row of the display file.
 939+ 9289 EB                   ex de,hl
 940+ 928A 10 EE                djnz loop10r_2L             ;do this 3 times
 941+ 928C
 942+ 928C                      ;now draw the blank face
 943+ 928C D1                   pop de                  ;back to our original position
 944+ 928D D5                   push de
 945+ 928E 13                   inc de                  ;move left 3 space left in the display
 946+ 928F 13                   inc de
 947+ 9290 13                   inc de
 948+ 9291
 949+ 9291              ;check if the char to our right is a wall block.
 950+ 9291              ;if so, do not draw a black face as we need to hide it or it will
 951+ 9291              ;ovewrite the already drawn block
 952+ 9291
 953+ 9291 1A                   ld a,(de)
 954+ 9292 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 955+ 9294 C2 9C 92             jp nz,cont_1r_2L           ;there is no block so draw black edge
 956+ 9297 D1                   pop de
 957+ 9298 C1                   pop bc
 958+ 9299 C3 02 92             jp go_back4             ;otherwise quit this draw
 959+ 929C
 960+ 929C              cont_1r_2L:
 961+ 929C EB                   ex  de,hl
 962+ 929D 11 21 00             ld de,$0021
 963+ 92A0
 964+ 92A0              ;need to loop 2 times drawing 2 lots of 3 top
 965+ 92A0              ;& bottom chars- move down 1after 1st 3 top chars drawn
 966+ 92A0              ;
 967+ 92A0
 968+ 92A0 3E 02                ld a,2
 969+ 92A2 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 970+ 92A5
 971+ 92A5              ;loop for 2 black wall columns
 972+ 92A5 3E 03                ld a,3                  ;column start height
 973+ 92A7 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 974+ 92AA
 975+ 92AA 06 03                ld b,3                  ;loop 3 times for 3 columns
 976+ 92AC 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 977+ 92AF 3E 97                ld a,$97
 978+ 92B1 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 979+ 92B4
 980+ 92B4              loop10br_2L:
 981+ 92B4 C5                   push bc                 ;save count
 982+ 92B5 3A 04 FA             ld a,(var1)             ;column height
 983+ 92B8 47                   ld b,a                  ;holds the column height in chars
 984+ 92B9 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 985+ 92BC F5                   push af                 ;save a for bottom corners
 986+ 92BD 77                   ld  (hl),a
 987+ 92BE
 988+ 92BE              loop10ar_2L:
 989+ 92BE 19                   add hl,de
 990+ 92BF 3E AF                ld  a,_black            ;black wall fill
 991+ 92C1 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 992+ 92C2 10 FA                djnz loop10ar_2L
 993+ 92C4
 994+ 92C4 F1                   pop af                  ;retrivetop corner
 995+ 92C5 3D                   dec a                   ;prep for next top corner
 996+ 92C6 32 05 FA             ld (var2),a             ;re-save it for next corner
 997+ 92C9 C6 04                add a,4                 ;get the correct char to print
 998+ 92CB 77                   ld  (hl),a              ;draw the bottom of the wall
 999+ 92CC
1000+ 92CC                      ;now change column count
1001+ 92CC 3A 04 FA             ld a,(var1)
1002+ 92CF C1                   pop bc
1003+ 92D0
1004+ 92D0 2A 13 FA             ld hl,(var5)
1005+ 92D3 2B                   dec hl                  ;move print position to the left
1006+ 92D4 22 13 FA             ld (var5),hl
1007+ 92D7
1008+ 92D7 10 DB                djnz loop10br_2L
1009+ 92D9
1010+ 92D9 D1                   pop de
1011+ 92DA C1                   pop bc
1012+ 92DB C3 02 92             jp go_back4             ; jump back to main loop
1013+ 92DE
1014+ 92DE              ;#############################################
1015+ 92DE              ;*Draw the 3rd LEFT block of section 4
1016+ 92DE              ;#############################################
1017+ 92DE
1018+ 92DE              draw_9_3L:
1019+ 92DE C5                   push bc
1020+ 92DF D5                   push de                 ;save our display pointer
1021+ 92E0 06 04                ld b,4                  ;block is 4 blocks high
1022+ 92E2 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1023+ 92E5 11 4A C1             ld de,$C162-24              ;start of drawing
1024+ 92E8
1025+ 92E8              loop10r_3L:
1026+ 92E8 3E B7                ld a,_mediumwall_1      ;grey sides facing us
1027+ 92EA 12                   ld (de),a               ; insert thepart of the wall.
1028+ 92EB EB                   ex de,hl
1029+ 92EC 19                   add  hl,de              ; advance to the next row of the display file.
1030+ 92ED EB                   ex de,hl
1031+ 92EE 10 F8                djnz loop10r_3L             ;do this 3 times
1032+ 92F0
1033+ 92F0                      ;now draw the blank face
1034+ 92F0 D1                   pop de                  ;back to our original position
1035+ 92F1 D5                   push de
1036+ 92F2
1037+ 92F2              ;check if the char to our right is a wall block.
1038+ 92F2              ;if so, do not draw a black face as we need to hide it or it will
1039+ 92F2              ;ovewrite the already drawn block
1040+ 92F2
1041+ 92F2 1A                   ld a,(de)
1042+ 92F3 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1043+ 92F5 C2 FD 92             jp nz,cont_1r_3L            ;there is no block so draw black edge
1044+ 92F8
1045+ 92F8 D1                   pop de
1046+ 92F9 C1                   pop bc
1047+ 92FA C3 02 92             jp go_back4             ;otherwise quit this draw
1048+ 92FD
1049+ 92FD              cont_1r_3L:
1050+ 92FD EB                   ex de,hl
1051+ 92FE 11 21 00             ld de,$0021
1052+ 9301 21 4B C1             ld hl,$c161-22
1053+ 9304
1054+ 9304              ;need to loop 2 times drawing 2 lots of 3 top
1055+ 9304              ;& bottom chars- move down 1after 1st 3 top chars drawn
1056+ 9304              ;
1057+ 9304
1058+ 9304              ;loop for 5 black wall columns
1059+ 9304 3E 03                ld a,3                  ;column start height
1060+ 9306 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
1061+ 9309
1062+ 9309 06 05                ld b,5                  ;loop 5 times for 3 columns
1063+ 930B 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1064+ 930E 3E CD                ld a,$cd ;91
1065+ 9310 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1066+ 9313
1067+ 9313              loop10br_2aL:
1068+ 9313 C5                   push bc                 ;save count
1069+ 9314 3A 04 FA             ld a,(var1)             ;column height
1070+ 9317 47                   ld b,a                  ;holds the column height in chars
1071+ 9318 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1072+ 931B F5                   push af                 ;save a for bottom corners
1073+ 931C 77                   ld  (hl),a
1074+ 931D
1075+ 931D              loop10ar_2aL:
1076+ 931D 19                   add hl,de
1077+ 931E 3E AF                ld  a,_black            ;black wall fill
1078+ 9320 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1079+ 9321 10 FA                djnz loop10ar_2aL
1080+ 9323
1081+ 9323 F1                   pop af                  ;retrivetop corner
1082+ 9324 3D                   dec a                   ;prep for next top corner
1083+ 9325 32 05 FA             ld (var2),a             ;re-save it for next corner
1084+ 9328 C6 06                add a,6                 ;get the correct char to print
1085+ 932A 77                   ld  (hl),a              ;draw the bottom of the wall
1086+ 932B
1087+ 932B                      ;now change column count
1088+ 932B 3A 04 FA             ld a,(var1)
1089+ 932E C1                   pop bc
1090+ 932F
1091+ 932F 2A 13 FA             ld hl,(var5)
1092+ 9332 23                   inc hl                  ;move print position to the right
1093+ 9333 22 13 FA             ld (var5),hl
1094+ 9336
1095+ 9336 10 DB                djnz loop10br_2aL
1096+ 9338
1097+ 9338 D1                   pop de
1098+ 9339 C1                   pop bc
1099+ 933A C3 02 92             jp go_back4              ; jump back to main loop
1100+ 933D
1101+ 933D              ;#############################################
1102+ 933D              ;*Draw the 4th LEFT block of section 4
1103+ 933D              ;#############################################
1104+ 933D
1105+ 933D              ; we only need to draw 2 columns of black sides.
1106+ 933D
1107+ 933D              draw_9_4L:
1108+ 933D
1109+ 933D              ; we only need to draw up to 2 columns of black sides.
1110+ 933D
1111+ 933D
1112+ 933D C5                   push bc
1113+ 933E D5                   push de                 ;save our display pointer
1114+ 933F
1115+ 933F              ;check if the char to our left is a wall block.
1116+ 933F              ;if so, do not draw a black face as we need to hide it or it will
1117+ 933F              ;ovewrite the already drawn block
1118+ 933F
1119+ 933F 21 4A C1             ld hl,$C151-7              ;start of drawing
1120+ 9342 7E                   ld a,(hl)
1121+ 9343 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1122+ 9345 C2 4D 93             jp nz,cont_3L            ;there is no block so draw black edge
1123+ 9348
1124+ 9348 D1                   pop de
1125+ 9349 C1                   pop bc
1126+ 934A C3 02 92             jp go_back4             ;otherwise quit this draw
1127+ 934D
1128+ 934D              cont_3L:
1129+ 934D 11 21 00             ld de,33                ;to jump to next line below
1130+ 9350 3E CA                ld a,$ca                ;top of the wall
1131+ 9352 E5                   push hl                 ;save for drawing 2nd black wall
1132+ 9353 77                   ld (hl),a               ;to cover up wall 5
1133+ 9354 19                   add hl,de               ;jump to next line
1134+ 9355 3E AF                ld a,_black
1135+ 9357 77                   ld (hl),a
1136+ 9358 19                   add hl,de
1137+ 9359 77                   ld (hl),a
1138+ 935A 19                   add hl,de
1139+ 935B 3E CF                ld a,$cf                ;draw bottom of the line
1140+ 935D 77                   ld (hl),a
1141+ 935E
1142+ 935E              ;now check if we need to cover wall 5 with a 2nd black line to the left
1143+ 935E              ;hl points to top of the 4 blocks
1144+ 935E E1                   pop hl                  ;restore our pointer in char ram
1145+ 935F 23                   inc hl                  ;go left 1 place
1146+ 9360 E5                   push hl
1147+ 9361 19                   add hl,de               ;now we are at the wall 5 top position
1148+ 9362 7E                   ld a,(hl)
1149+ 9363 FE B4                cp _smallwall
1150+ 9365 E1                   pop hl
1151+ 9366 20 0B                jr nz,exit3L
1152+ 9368              ;draw the second wall over section 5 wall
1153+ 9368 36 C9                ld (hl),$c9             ;top of the wall
1154+ 936A 19                   add hl,de
1155+ 936B 36 AF                ld (hl),_black
1156+ 936D 19                   add hl,de
1157+ 936E 36 AF                ld (hl),_black
1158+ 9370 19                   add hl,de
1159+ 9371 36 CE                ld (hl),$ce             ;bottom of the wall
1160+ 9373
1161+ 9373 D1           exit3L:  pop de                  ;now exit
1162+ 9374 C1                   pop bc
1163+ 9375 C3 02 92             jp go_back4
1164+ 9378
1165+ 9378              ;###################################################
1166+ 9378              ;not needed down here
1167+ 9378
1168+ 9378 C5                   push bc
1169+ 9379 D5                   push de                 ;save our display pointer
1170+ 937A
1171+ 937A              ;check if the char to our right is a wall block.
1172+ 937A              ;if so, do not draw a black face as we need to hide it or it will
1173+ 937A              ;ovewrite the already drawn block
1174+ 937A
1175+ 937A 21 4A C1             ld hl,$C151-7              ;start of drawing
1176+ 937D 7E                   ld a,(hl)
1177+ 937E FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1178+ 9380 C2 88 93             jp nz,cont_3L_l            ;there is no block so draw black edge
1179+ 9383
1180+ 9383 D1                   pop de
1181+ 9384 C1                   pop bc
1182+ 9385 C3 02 92             jp go_back4             ;otherwise quit this draw
1183+ 9388
1184+ 9388              cont_3L_l:
1185+ 9388 06 04                ld b,4                  ;block is 4 blocks high
1186+ 938A 3E CA                ld a,$ca
1187+ 938C 77                   ld (hl),a
1188+ 938D 23                   inc hl
1189+ 938E 3D                   dec a
1190+ 938F 77                   ld (hl),a
1191+ 9390
1192+ 9390              ;need 2 black walls now!
1193+ 9390 3E AF                ld a,_black
1194+ 9392 11 21 00             ld de,33;34                ;1 line width
1195+ 9395
1196+ 9395 CD A8 93             CALL black_wall_1         ;draw 2 black blocks
1197+ 9398 13                   inc de                        ;jump to next line below
1198+ 9399
1199+ 9399 CD A8 93             CALL black_wall_1         ;draw 2 black blocks
1200+ 939C 19                   add hl,de               ;jump to next line below
1201+ 939D
1202+ 939D
1203+ 939D              ;top half done - so do bottom half - 2 blacks first
1204+ 939D
1205+ 939D              ;de already holds 34  -1 line plus 2 chars to the right
1206+ 939D
1207+ 939D 3E CE                ld a,$ce
1208+ 939F 77                   ld (hl),a
1209+ 93A0 2B                   dec hl
1210+ 93A1 3C                   inc a
1211+ 93A2 77                   ld (hl),a
1212+ 93A3
1213+ 93A3 D1                   pop de
1214+ 93A4 C1                   pop bc
1215+ 93A5 C3 02 92             jp go_back4
1216+ 93A8
1217+ 93A8              ;draw 2 black walls across 1 line
1218+ 93A8              black_wall_1:
1219+ 93A8 19                   add hl,de      ;jump 1 line below
1220+ 93A9 77                   ld (hl),a
1221+ 93AA 2B                   dec hl
1222+ 93AB 77                   ld (hl),a
1223+ 93AC C9                   ret
1224+ 93AD
1225+ 93AD
1226+ 93AD
1227+ 93AD              ;#############################################
1228+ 93AD              ;#############################################
1229+ 93AD              ;# draw LEFT wall 3
1230+ 93AD              ;#############################################
1231+ 93AD              ;#############################################
1232+ 93AD
1233+ 93AD              draw_3:
1234+ 93AD              ;ret
1235+ 93AD              ; hl=maze location being drawn.
1236+ 93AD              ; now determine what to draw for this section.
1237+ 93AD
1238+ 93AD
1239+ 93AD 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1240+ 93B0
1241+ 93B0 CD 50 8E             call load_de            ;get left and right and front jump into de reg
1242+ 93B3
1243+ 93B3 19                   add hl,de               ;jump backwards along the user view 1 space
1244+ 93B4 22 25 FA             ld (furthest_point),hl ;re save it
1245+ 93B7
1246+ 93B7 11 FF FF             ld de,$ffff             ;to move the display position -1
1247+ 93BA ED 53 11 FA          ld (var4),de
1248+ 93BE
1249+ 93BE ED 5B 0B FA          ld de,(left)            ;move our check position left -1
1250+ 93C2 19                   add hl,de
1251+ 93C3 22 15 FA             ld (var6),hl
1252+ 93C6
1253+ 93C6
1254+ 93C6 ED 53 0F FA          ld (var3),de
1255+ 93CA 11 0A 01             ld de,$10a;10b           ; offset to row 8 column5 - left of  centre of the 3d view.
1256+ 93CD
1257+ 93CD              ;2nd block starts at $109 and is 3 wall chars wide
1258+ 93CD CD D3 93             call do_draw_3
1259+ 93D0
1260+ 93D0 C3 3F 95             jp draw_2           ;now draw the 2nd level
1261+ 93D3
1262+ 93D3              do_draw_3:
1263+ 93D3
1264+ 93D3 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
1265+ 93D6 19                   add  hl,de
1266+ 93D7
1267+ 93D7
1268+ 93D7              ; draw left half of the display.
1269+ 93D7
1270+ 93D7 06 03                ld b,3                 ; count for 1 blocks left of display file
1271+ 93D9 ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
1272+ 93DD
1273+ 93DD
1274+ 93DD EB                   ex   de,hl              ; transfer de to hl.
1275+ 93DE
1276+ 93DE              ;       hl = furthest point in the maze
1277+ 93DE              ;       de = d_file location to store byte to display
1278+ 93DE
1279+ 93DE              loop11:
1280+ 93DE E5                   push hl
1281+ 93DF
1282+ 93DF              ;################################################################
1283+ 93DF
1284+ 93DF              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1285+ 93DF              ;and stop drrawing anything else.
1286+ 93DF
1287+ 93DF 3A 28 FA             ld a,(maze_highbyte)
1288+ 93E2 BC                   cp h                    ;are we at the top part of the maze?
1289+ 93E3 CA 0A 94             jp z,cont_3s
1290+ 93E6                                              ;if we are on a different maze boundary
1291+ 93E6                                              ;then draw a maze wall as we are the top
1292+ 93E6                                              ;or north wall but maze data has no
1293+ 93E6                                              ;wall data.
1294+ 93E6              ;see which wall we are at and draw the correct one before jumping out
1295+ 93E6              ;of the loop and stop drawing past the maze wall.
1296+ 93E6
1297+ 93E6              ;3 = first left wall
1298+ 93E6              ;2 = 2nd left wall
1299+ 93E6              ;1 = 4rd left wall
1300+ 93E6
1301+ 93E6 78                   ld a,b                  ;our current wall counter
1302+ 93E7 D6 03                sub 3
1303+ 93E9 C2 F4 93             jp nz,a3                 ;its not wall 1
1304+ 93EC 3E 01                ld a,1
1305+ 93EE 47                   ld b,a
1306+ 93EF C6 80                add a,128               ;make sure we set a wall!
1307+ 93F1 C3 2F 94             jp draw_10             ;jump straight to making an end wall
1308+ 93F4
1309+ 93F4
1310+ 93F4 78           a3:     ld a,b                  ;our current wall counter
1311+ 93F5 D6 02                sub 2
1312+ 93F7 C2 02 94             jp nz,a3_1                 ;its not wall 1
1313+ 93FA 3E 01                ld a,1
1314+ 93FC 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1315+ 93FD C6 80                add a,128               ;make sure we set a wall!
1316+ 93FF C3 A1 94             jp draw_10_2L	       	;draw the 2nd wall to the right
1317+ 9402
1318+ 9402 3E 01        a3_1:   ld a,1
1319+ 9404 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1320+ 9405 C6 80                add a,128               ;make sure we set a wall!
1321+ 9407 C3 13 95             jp draw_10_3L	       	;draw the 2nd wall to the right
1322+ 940A
1323+ 940A              ;################################################################
1324+ 940A
1325+ 940A
1326+ 940A              ;now check if we are on the south wall and frig it to draw the
1327+ 940A              ;walls we need.
1328+ 940A              ;reg a already contains l
1329+ 940A
1330+ 940A              cont_3s:
1331+ 940A              ;        ld a,l
1332+ 940A              ;        cp $FA  ;250
1333+ 940A              ;        jp nz,cont_6
1334+ 940A              ;        ld l,240                ;fake it that we are at
1335+ 940A              ;        jp draw_10             ;the south wall
1336+ 940A
1337+ 940A
1338+ 940A 7E           cont_6: ld a,(hl)
1339+ 940B 17                   rla
1340+ 940C DA 1B 94             jp c,do_wall3            ;bit 7 (128)
1341+ 940F
1342+ 940F                     ; call do_no_wall3         ; otherwise draw no wall
1343+ 940F
1344+ 940F              go_back3:
1345+ 940F                    ;  ld hl,(var4)            ;used for left and right drawing
1346+ 940F                    ;  add hl,de               ; holds current screen position
1347+ 940F                    ;  ex de,hl
1348+ 940F              ;we move the start position of block number 2 to the left of the display
1349+ 940F              ;and although we overwrite the next block, we can still do the
1350+ 940F              ;check to see if a block is already drawn.
1351+ 940F
1352+ 940F                      ;dec de                  ;move our start print position
1353+ 940F                      ;dec de                  ;of block 2 back 3 spaces in the
1354+ 940F 1B                   dec de ;only 1 space back  ;display file
1355+ 9410 E1                   pop hl
1356+ 9411 D5                   push de
1357+ 9412 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1358+ 9416 19                   add hl,de                ; go left 1 block in the maze
1359+ 9417 D1                   pop de
1360+ 9418 10 C4                djnz loop11
1361+ 941A C9                   ret
1362+ 941B              ;now do the 2nd position
1363+ 941B
1364+ 941B
1365+ 941B
1366+ 941B              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1367+ 941B
1368+ 941B              do_wall3:
1369+ 941B
1370+ 941B                      ;check if bit 2 is set as thats an end
1371+ 941B                      ;and b must then be changed to 1 to stop drawing.
1372+ 941B
1373+ 941B              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1374+ 941B              ;        jr z,draw_10
1375+ 941B              ;        ld b,1                  ;set b so we exit on return
1376+ 941B
1377+ 941B              ;now draw the wall based on bc value
1378+ 941B              ;wall3_start:
1379+ 941B
1380+ 941B
1381+ 941B 78                   ld a,b			               ;b is the loop count i.e # of walls to draw
1382+ 941C D6 03               	sub 3			               ;3 = the wall imediately right
1383+ 941E CA 2F 94             jp z,draw_10          ;draw an end wall if blockid=16
1384+ 9421
1385+ 9421 78                   ld a,b
1386+ 9422 D6 02                sub 2
1387+ 9424 CA A1 94             jp z,draw_10_2L         		;draw the 1st wall to the right
1388+ 9427
1389+ 9427 78                   ld a,b
1390+ 9428 D6 01                sub 1
1391+ 942A CA 13 95             jp z,draw_10_3L	       	;draw the 2nd wall to the right
1392+ 942D
1393+ 942D E1                   pop hl                  ;nothing to draw so return
1394+ 942E C9                   ret
1395+ 942F
1396+ 942F
1397+ 942F              draw_10:
1398+ 942F C5                   push bc
1399+ 9430 D5                   push de                 ;save our display pointer
1400+ 9431 1B                   dec de
1401+ 9432 1B                   dec de
1402+ 9433
1403+ 9433 06 08                ld b,8                  ;block is 8 blocks high
1404+ 9435 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1405+ 9438 3E B5                ld a, _mediumwall       ;wall on sides facing us
1406+ 943A 12           loop12: ld (de),a               ; insert the part of the wall.
1407+ 943B 13                   inc de
1408+ 943C 12                   ld (de),a               ; insert the part of the wall.
1409+ 943D 13                   inc de
1410+ 943E 12                   ld (de),a               ; insert the part of the wall.
1411+ 943F 13                   inc de
1412+ 9440 12                   ld (de),a               ; insert the part of the wall.
1413+ 9441 13                   inc de
1414+ 9442 12                   ld (de),a               ; insert the part of the wall.
1415+ 9443 13                   inc de
1416+ 9444 12                   ld (de),a               ; insert the part of the wall.
1417+ 9445 13                   inc de
1418+ 9446 12                   ld (de),a
1419+ 9447 13                   inc de
1420+ 9448 12                   ld (de),a
1421+ 9449 1B                   dec de
1422+ 944A 1B                   dec de
1423+ 944B 1B                   dec de
1424+ 944C 1B                   dec de
1425+ 944D 1B                   dec de
1426+ 944E 1B                   dec de
1427+ 944F 1B                   dec de
1428+ 9450 EB                   ex de,hl
1429+ 9451 19                   add  hl,de              ; advance to the next row of the display file.
1430+ 9452 EB                   ex de,hl
1431+ 9453 10 E5                djnz loop12             ;do this 3 times
1432+ 9455
1433+ 9455                      ;now draw the blank face to the right of the block
1434+ 9455                      ;create first column of right face characters
1435+ 9455 D1                   pop de                  ;back to our original position
1436+ 9456 D5                   push de
1437+ 9457 13                   inc de
1438+ 9458 13                   inc de
1439+ 9459 13                   inc de
1440+ 945A 13                   inc de                  ;move ahead 5 spaces in the display (right)
1441+ 945B 13                   inc de
1442+ 945C 13                   inc de
1443+ 945D
1444+ 945D                  ;    inc de
1445+ 945D                  ;    inc de
1446+ 945D                  ;    inc de
1447+ 945D              ;check if the char to our right is a wall block.
1448+ 945D              ;if so, do not draw a black face as we need to hide it or it will
1449+ 945D              ;ovewrite the already drawn block
1450+ 945D              ;jp cont_2
1451+ 945D 1A                   ld a,(de)
1452+ 945E FE B5                cp _mediumwall        ;is there an already drawn screen block here?
1453+ 9460 C2 67 94             jp nz,cont_2            ;there is no block so draw black edge
1454+ 9463 D1                   pop de
1455+ 9464 C1                   pop bc
1456+ 9465 18 A8                jr go_back3             ;otherwise quit this draw
1457+ 9467
1458+ 9467 EB           cont_2: ex  de,hl
1459+ 9468 11 21 00             ld de,$0021
1460+ 946B
1461+ 946B              ;loop for 2 columns
1462+ 946B
1463+ 946B 06 02                ld b,2                  ; loop 2 times for 2 columns
1464+ 946D 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1465+ 9470 3E 07                ld a,7
1466+ 9472 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1467+ 9475
1468+ 9475              loop12b:
1469+ 9475 C5                   push bc                 ;save count
1470+ 9476 3A 04 FA             ld a,(var1)
1471+ 9479 47                   ld b,a                  ;holds the column height in chars
1472+ 947A 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
1473+ 947C 77                   ld  (hl),a
1474+ 947D
1475+ 947D              loop12a:                   ;we must start at 5 to draw 4 face blocks on right
1476+ 947D 19                   add hl,de
1477+ 947E 3E AF                ld  a,_black      ;triangle sloping to right bottom
1478+ 9480 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1479+ 9481 10 FA                djnz loop12a
1480+ 9483
1481+ 9483
1482+ 9483 3E B0                ld  a,_topcorner1
1483+ 9485 77                   ld  (hl),a
1484+ 9486
1485+ 9486                      ;now change column count
1486+ 9486 3A 04 FA             ld a,(var1)
1487+ 9489 D6 02                sub 2                   ;subtract 2
1488+ 948B 32 04 FA             ld (var1),a
1489+ 948E C1                   pop bc
1490+ 948F
1491+ 948F 2A 13 FA             ld hl,(var5)
1492+ 9492 23                   inc hl                  ;move print position to the right
1493+ 9493 11 21 00             ld de,$21               ;move top of next column down and across 1
1494+ 9496 19                   add hl,de
1495+ 9497 22 13 FA             ld (var5),hl
1496+ 949A
1497+ 949A 10 D9                djnz loop12b
1498+ 949C D1                   pop de
1499+ 949D C1                   pop bc
1500+ 949E C3 0F 94             jp go_back3              ; jump back to main loop
1501+ 94A1
1502+ 94A1
1503+ 94A1              ;#############################################
1504+ 94A1              ;     draw the 2nd LEFT block
1505+ 94A1              ;#############################################
1506+ 94A1
1507+ 94A1              draw_10_2L:
1508+ 94A1
1509+ 94A1 C5                    push bc
1510+ 94A2 11 FF C0              ld de, $c110-17          ;start print position of wall
1511+ 94A5 D5                   push de
1512+ 94A6              ;dont draw a front wall as we never see it.
1513+ 94A6
1514+ 94A6 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1515+ 94A9 19                   add hl,de
1516+ 94AA EB                   ex de,hl
1517+ 94AB              ;we do not need a front wall for this row as it is never seen.
1518+ 94AB              ;below jp code can be removed :) Because a square block here
1519+ 94AB              ;is 8 x 8
1520+ 94AB
1521+ 94AB 13                   inc de                  ;move ahead 1 space in the display (right)
1522+ 94AC
1523+ 94AC              ;check if the char to our left is a wall block.
1524+ 94AC              ;if so, do not draw a black face as we need to hide it or it will
1525+ 94AC              ;ovewrite the already drawn block
1526+ 94AC 1A                    ld a,(de)
1527+ 94AD FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1528+ 94AF C2 B7 94              jp nz,cont_2r_2L            ;there is no block so draw black edge
1529+ 94B2 D1                    pop de
1530+ 94B3 C1                    pop bc
1531+ 94B4 C3 0F 94              jp go_back3             ;otherwise quit this draw
1532+ 94B7
1533+ 94B7
1534+ 94B7              ;draw the black edge wall
1535+ 94B7
1536+ 94B7              cont_2r_2L:
1537+ 94B7 EB                    ex  de,hl
1538+ 94B8 11 21 00              ld de,$0021
1539+ 94BB
1540+ 94BB              ;need to loop 2 times drawing 2 lots of 3 top
1541+ 94BB              ;& bottom chars- move down 1after 1st 3 top chars drawn
1542+ 94BB              ;
1543+ 94BB
1544+ 94BB 3E 02                ld a,2
1545+ 94BD 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1546+ 94C0
1547+ 94C0              ;loop for 3 black wall columns
1548+ 94C0 3E 07                ld a,7                  ;column start height
1549+ 94C2 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1550+ 94C5
1551+ 94C5 06 03        loop_xL:ld b,3                  ;loop 3 times for 3 columns
1552+ 94C7 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1553+ 94CA 3E 95                ld a,$95
1554+ 94CC 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1555+ 94CF
1556+ 94CF              loop12br_2L:
1557+ 94CF C5                   push bc                 ;save count
1558+ 94D0 3A 04 FA             ld a,(var1)             ;column height
1559+ 94D3 47                   ld b,a                  ;holds the column height in chars
1560+ 94D4 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1561+ 94D7 F5                   push af                 ;save a for bottom corners
1562+ 94D8 77                   ld  (hl),a
1563+ 94D9
1564+ 94D9              loop12ar_2L:
1565+ 94D9 19                   add hl,de
1566+ 94DA 3E AF                ld  a,_black            ;black wall fill
1567+ 94DC 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1568+ 94DD 10 FA                djnz loop12ar_2L
1569+ 94DF
1570+ 94DF F1                   pop af                  ;retrivetop corner
1571+ 94E0 3C                   inc a                   ;prep for next top corner
1572+ 94E1 32 05 FA             ld (var2),a             ;re-save it for next corner
1573+ 94E4 C6 02                add a,2;4                 ;get the correct char to print
1574+ 94E6 77                   ld  (hl),a              ;draw the bottom of the wall
1575+ 94E7
1576+ 94E7                      ;now change column count
1577+ 94E7 3A 04 FA             ld a,(var1)
1578+ 94EA C1                   pop bc
1579+ 94EB
1580+ 94EB 2A 13 FA             ld hl,(var5)
1581+ 94EE 23                   inc hl                  ;move print position to the left
1582+ 94EF 22 13 FA             ld (var5),hl
1583+ 94F2
1584+ 94F2 10 DB                djnz loop12br_2L
1585+ 94F4
1586+ 94F4              ;1st set of 3 top bits drawn
1587+ 94F4              ;now jump down the display 1 line
1588+ 94F4              ;then draw another 3 columns
1589+ 94F4
1590+ 94F4 3A 18 FA             ld a,(var7)             ;get our loop counter
1591+ 94F7 3D                   dec a
1592+ 94F8 28 12                jr z,exit_1L             ;exit after 2 loops
1593+ 94FA 32 18 FA             ld (var7),a             ;save it
1594+ 94FD 2A 13 FA             ld hl,(var5)
1595+ 9500              ;get our last print position
1596+ 9500                                              ;need to go to next line -1 char
1597+ 9500 19                   add hl,de
1598+ 9501                                              ; now move back in the display
1599+ 9501                                              ;1 char
1600+ 9501 22 13 FA             ld (var5),hl            ;re save it for use above
1601+ 9504
1602+ 9504 3E 05                ld a,5                  ;reduce black wall column height
1603+ 9506 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1604+ 9509
1605+ 9509 C3 C5 94             jp loop_xL
1606+ 950C
1607+ 950C
1608+ 950C D1           exit_1L: pop de
1609+ 950D C1                   pop bc
1610+ 950E 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1611+ 9510
1612+ 9510 C3 0F 94             jp go_back3              ; jump back to main loop
1613+ 9513
1614+ 9513              ;#############################################
1615+ 9513              ;*Draw the 3rd LEFT block of section3
1616+ 9513              ;#############################################
1617+ 9513
1618+ 9513              ; we only need to draw 2 columns of black sides.
1619+ 9513              ; if theres no brick pattern !
1620+ 9513
1621+ 9513              draw_10_3L:
1622+ 9513 C5                   push bc
1623+ 9514 D5                   push de                 ;save our display pointer
1624+ 9515
1625+ 9515 21 29 C1             ld hl,$C18C-66-30-3              ;start of drawing
1626+ 9518 7E                   ld a,(hl)               ;read what char is there
1627+ 9519 FE B5                cp _mediumwall
1628+ 951B 20 05                jr nz,cont_1r_4L        ;exit if a wall is already there
1629+ 951D D1                   pop de
1630+ 951E C1                   pop bc
1631+ 951F C3 02 92             jp go_back4             ;otherwise quit this draw
1632+ 9522
1633+ 9522              cont_1r_4L:
1634+ 9522
1635+ 9522 3E C9                ld a,$c9
1636+ 9524 77                   ld (hl),a
1637+ 9525
1638+ 9525 3E AF                ld a,_black
1639+ 9527 11 21 00             ld de,33                ;1 line width
1640+ 952A
1641+ 952A CD 36 95             CALL black_wall         ;draw 4 black blocks
1642+ 952D
1643+ 952D 19                   add hl,de               ;jump to next line below
1644+ 952E
1645+ 952E
1646+ 952E              ;top half done - so do bottom half - 2 blacks first
1647+ 952E
1648+ 952E              ;de already holds 32
1649+ 952E
1650+ 952E 3E CE                ld a,$ce
1651+ 9530 77                   ld (hl),a
1652+ 9531
1653+ 9531 D1                   pop de
1654+ 9532 C1                   pop bc
1655+ 9533 C3 0F 94             jp go_back3
1656+ 9536
1657+ 9536              ;draw 2 black walls across 1 line
1658+ 9536              black_wall:
1659+ 9536 19                   add hl,de      ;jump 1 line below
1660+ 9537 77                   ld (hl),a
1661+ 9538 19                   add hl,de      ;jump 1 line below
1662+ 9539 77                   ld (hl),a
1663+ 953A 19                   add hl,de      ;jump 1 line below
1664+ 953B 77                   ld (hl),a
1665+ 953C 19                   add hl,de      ;jump 1 line below
1666+ 953D 77                   ld (hl),a
1667+ 953E
1668+ 953E
1669+ 953E C9                   ret
1670+ 953F
1671+ 953F
1672+ 953F
1673+ 953F              ;#############################################
1674+ 953F              ;#############################################
1675+ 953F              ; draw 2nd layer
1676+ 953F              ;#############################################
1677+ 953F              ;#############################################
1678+ 953F
1679+ 953F              draw_2:
1680+ 953F              ;
1681+ 953F              ;ret
1682+ 953F              ; hl=maze location being drawn.
1683+ 953F              ; now determine what to draw for this section.
1684+ 953F
1685+ 953F
1686+ 953F 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1687+ 9542
1688+ 9542 CD 50 8E             call load_de            ;get left and right and front jump into de reg
1689+ 9545
1690+ 9545 19                   add hl,de               ;jump backwards along the user view 1 space
1691+ 9546 22 25 FA             ld (furthest_point),hl ;re save it
1692+ 9549
1693+ 9549 11 FF FF             ld de,$ffff             ;to move the display position -1
1694+ 954C ED 53 11 FA          ld (var4),de
1695+ 9550
1696+ 9550 ED 5B 0B FA          ld de,(left)
1697+ 9554
1698+ 9554              ;we need to move pointer 1 to the left for wall checking
1699+ 9554 19                   add hl,de
1700+ 9555 22 15 FA             ld (var6),hl ;re save it
1701+ 9558
1702+ 9558 ED 53 0F FA          ld (var3),de
1703+ 955C
1704+ 955C 11 A4 00             ld  de,$a4           ; offset to row10 column 7 - left of  centre of the 3d view.
1705+ 955F CD 65 95             call do_draw_2
1706+ 9562
1707+ 9562 C3 F7 95             jp draw_1           ;now draw the 2nd level
1708+ 9565
1709+ 9565              do_draw_2:
1710+ 9565
1711+ 9565 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
1712+ 9568 19                   add  hl,de
1713+ 9569
1714+ 9569
1715+ 9569              ; draw left half then right half of the display.
1716+ 9569
1717+ 9569 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1718+ 956B                                              ; 0 is not counted so loops 12 times
1719+ 956B ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1720+ 956F EB                   ex   de,hl              ; transfer de to hl.
1721+ 9570
1722+ 9570              ;       hl = furthest point in the maze
1723+ 9570              ;       de = d_file location to store byte to display
1724+ 9570
1725+ 9570 E5           loop14: push hl
1726+ 9571
1727+ 9571              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1728+ 9571
1729+ 9571 3A 28 FA             ld a,(maze_highbyte)
1730+ 9574 BC                   cp h                    ;are we at the top part of the maze?
1731+ 9575 CA 80 95             jp z,cont_2s
1732+ 9578                                              ;if we are on a different maze boundary
1733+ 9578                                              ;then draw a maze wall as we are the top
1734+ 9578                                              ;or north wall but maze data has no
1735+ 9578                                              ;wall data.
1736+ 9578
1737+ 9578 3E 01                ld a,1
1738+ 957A 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1739+ 957B C6 7F                add a,127               ;make sure we set a wall!
1740+ 957D C3 95 95             jp do_wall2             ;jump straight to making an end wall
1741+ 9580
1742+ 9580              ;*#########################################
1743+ 9580              cont_2s:
1744+ 9580 7E                   ld a,(hl)
1745+ 9581 17                   rla
1746+ 9582 DA 95 95             jp c,do_wall2            ;bit 7 (128)
1747+ 9585
1748+ 9585                     ; call do_no_wall2         ; otherwise draw no wall
1749+ 9585
1750+ 9585              go_back2:
1751+ 9585 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1752+ 9588 19                   add hl,de               ; holds current screen position
1753+ 9589 EB                   ex de,hl
1754+ 958A E1                   pop hl
1755+ 958B D5                   push de
1756+ 958C ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1757+ 9590 19                   add hl,de                ; go left 1 block in the maze
1758+ 9591 D1                   pop de
1759+ 9592 10 DC                djnz loop14
1760+ 9594 C9                   ret
1761+ 9595              ;now do the 2nd position
1762+ 9595
1763+ 9595
1764+ 9595              do_wall2:
1765+ 9595                      ;check if bit 2 is set as thats an end
1766+ 9595                      ;and b must then be changed to 1 to stop drawing.
1767+ 9595
1768+ 9595 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1769+ 9597 28 02                jr z,draw_11
1770+ 9599 06 01                ld b,1                  ;set b so we exit on return
1771+ 959B
1772+ 959B              draw_11:
1773+ 959B                                   ; draw the wall face bit
1774+ 959B C5                   push bc
1775+ 959C D5                   push de
1776+ 959D 13                   inc de
1777+ 959E                                     ;save our display pointer
1778+ 959E 06 0E                ld b,14                  ;block is 14 blocks high
1779+ 95A0 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1780+ 95A3 3E B6                ld   a,_largewall            ;wall on sides facing us
1781+ 95A5              loop13:
1782+ 95A5 12                   ld (de),a             ; insert the part of the wall.
1783+ 95A6 13                   inc de
1784+ 95A7 12                   ld (de),a               ;put grey side to our right
1785+ 95A8 13                   inc de
1786+ 95A9 12                   ld (de),a               ;put grey side to our right
1787+ 95AA 13                   inc de
1788+ 95AB 12                   ld (de),a               ;put grey side to our right
1789+ 95AC 13                   inc de
1790+ 95AD 12                   ld (de),a               ;put grey side to our right
1791+ 95AE 1B                   dec de
1792+ 95AF 1B                   dec de
1793+ 95B0 1B                   dec de
1794+ 95B1 1B                   dec de
1795+ 95B2 EB                   ex de,hl
1796+ 95B3 19                   add  hl,de              ; advance to the next row of the display file.
1797+ 95B4 EB                   ex de,hl
1798+ 95B5 10 EE                djnz loop13             ;do this 3 times
1799+ 95B7
1800+ 95B7                      ;now draw the blank face to the right of the block
1801+ 95B7                      ;create first column of right face characters
1802+ 95B7 D1                   pop de                  ;back to our original position
1803+ 95B8 13                   inc de
1804+ 95B9 13                   inc de
1805+ 95BA 13                   inc de                  ;move ahead 6 spaces in the display (right)
1806+ 95BB 13                   inc de
1807+ 95BC 13                   inc de
1808+ 95BD 13                   inc de
1809+ 95BE EB                   ex  de,hl
1810+ 95BF 11 21 00             ld de,$0021
1811+ 95C2
1812+ 95C2 06 03                ld b,3                  ; for 8 face columns to draw to draw
1813+ 95C4 22 13 FA             ld (var5),hl
1814+ 95C7 3E 0D                ld a,13                 ; for 14 blocks high per column
1815+ 95C9 32 04 FA             ld (var1),a
1816+ 95CC
1817+ 95CC              loop13b:
1818+ 95CC C5                   push bc
1819+ 95CD 3A 04 FA             ld a,(var1)
1820+ 95D0 47                   ld b,a
1821+ 95D1 3E B3                ld a,_topcorner4
1822+ 95D3 77                   ld (hl),a
1823+ 95D4
1824+ 95D4              loop13a:
1825+ 95D4 19                   add hl,de
1826+ 95D5 3E AF                ld  a,_black  ;leftinnerwall  ;black      ;triangle sloping to right bottom
1827+ 95D7 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1828+ 95D8 10 FA                djnz loop13a
1829+ 95DA
1830+ 95DA                      ;ld  (hl),a
1831+ 95DA 3E B0                ld  a,_topcorner1
1832+ 95DC 77                   ld  (hl),a
1833+ 95DD
1834+ 95DD              ; now change the column count
1835+ 95DD 3A 04 FA             ld a,(var1)
1836+ 95E0 D6 02                sub 2
1837+ 95E2 32 04 FA             ld (var1),a
1838+ 95E5 C1                   pop bc
1839+ 95E6
1840+ 95E6 2A 13 FA             ld hl,(var5)
1841+ 95E9 23                   inc hl
1842+ 95EA 11 21 00             ld de,$21
1843+ 95ED 19                   add hl,de
1844+ 95EE 22 13 FA             ld (var5),hl
1845+ 95F1
1846+ 95F1 10 D9                djnz loop13b
1847+ 95F3
1848+ 95F3 C1                   pop bc
1849+ 95F4 C3 85 95             jp go_back2              ; jump back to main loop
1850+ 95F7
1851+ 95F7
1852+ 95F7              ;#############################################
1853+ 95F7              ; draw 1st layer
1854+ 95F7              ;#############################################
1855+ 95F7
1856+ 95F7              draw_1:
1857+ 95F7
1858+ 95F7              ;ret
1859+ 95F7              ; hl=maze location being drawn.
1860+ 95F7              ; now determine what to draw for this section.
1861+ 95F7
1862+ 95F7
1863+ 95F7 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1864+ 95FA
1865+ 95FA CD 50 8E             call load_de            ;get left and right and front jump into de reg
1866+ 95FD
1867+ 95FD 19                   add hl,de               ;jump backwards along the user view 1 space
1868+ 95FE 22 25 FA             ld (furthest_point),hl ;re save it
1869+ 9601
1870+ 9601 11 FF FF             ld de,$ffff             ;to move the display position -1
1871+ 9604 ED 53 11 FA          ld (var4),de
1872+ 9608
1873+ 9608 ED 5B 0B FA          ld de,(left)
1874+ 960C
1875+ 960C              ;we need to move pointer 1 to the left for wall checking
1876+ 960C 19                   add hl,de
1877+ 960D 22 15 FA             ld (var6),hl
1878+ 9610
1879+ 9610 ED 53 0F FA          ld (var3),de
1880+ 9614 11 20 00             ld  de,$020           ; offset to row 1 column 0 - left of  centre of the 3d view.
1881+ 9617 CD 1D 96             call do_draw_1
1882+ 961A
1883+ 961A C3 A0 96             jp draw_0           ;now draw the 2nd level
1884+ 961D
1885+ 961D              do_draw_1:
1886+ 961D
1887+ 961D 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
1888+ 9620 19                   add  hl,de
1889+ 9621
1890+ 9621
1891+ 9621              ; draw left half then right half of the display.
1892+ 9621
1893+ 9621 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1894+ 9623                                              ; 0 is not counted so loops 12 times
1895+ 9623 ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1896+ 9627 EB                   ex   de,hl              ; transfer de to hl.
1897+ 9628
1898+ 9628              ;       hl = furthest point in the maze
1899+ 9628              ;       de = d_file location to store byte to display
1900+ 9628
1901+ 9628 E5           loop15: push hl
1902+ 9629
1903+ 9629              ;see if we are at the north wall. If we dont, we get a left wall
1904+ 9629              ;drawn because we implicitly draw a wall if we are at the top
1905+ 9629
1906+ 9629              ;        ld a,(player_dir)
1907+ 9629              ;        cp 2                    ;r we looking south
1908+ 9629              ;        jp z,cont_7
1909+ 9629              ;        ld a,l
1910+ 9629              ;        cp 17
1911+ 9629              ;        jp c,do_wall1
1912+ 9629
1913+ 9629              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1914+ 9629
1915+ 9629 3A 28 FA             ld a,(maze_highbyte)
1916+ 962C BC                   cp h                    ;are we at the top part of the maze?
1917+ 962D CA 38 96             jp z,cont_7
1918+ 9630                                              ;if we are on a different maze boundary
1919+ 9630                                              ;then draw a maze wall as we are the top
1920+ 9630                                              ;or north wall but maze data has no
1921+ 9630                                              ;wall data.
1922+ 9630
1923+ 9630 3E 01                ld a,1
1924+ 9632 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1925+ 9633 C6 7F                add a,127               ;make sure we set a wall!
1926+ 9635 C3 4D 96             jp do_wall1             ;jump straight to making an end wall
1927+ 9638
1928+ 9638              ;#########################################################
1929+ 9638
1930+ 9638 7E           cont_7: ld a,(hl)
1931+ 9639 17                   rla
1932+ 963A DA 4D 96             jp c,do_wall1            ;bit 7 (128)
1933+ 963D
1934+ 963D                     ; call do_no_wall1         ; otherwise draw no wall
1935+ 963D
1936+ 963D              go_back1:
1937+ 963D 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1938+ 9640 19                   add hl,de               ; holds current screen position
1939+ 9641 EB                   ex de,hl
1940+ 9642 E1                   pop hl
1941+ 9643 D5                   push de
1942+ 9644 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1943+ 9648 19                   add hl,de                ; go left 1 block in the maze
1944+ 9649 D1                   pop de
1945+ 964A 10 DC                djnz loop15
1946+ 964C
1947+ 964C              ;jp draw_0
1948+ 964C C9                   ret
1949+ 964D              ;now do the 2nd position
1950+ 964D
1951+ 964D
1952+ 964D
1953+ 964D              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1954+ 964D
1955+ 964D              do_wall1:
1956+ 964D                      ;check if bit 2 is set as thats an end
1957+ 964D                      ;and b must then be changed to 1 to stop drawing.
1958+ 964D
1959+ 964D CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1960+ 964F 28 02                jr z,draw_12
1961+ 9651 06 01                ld b,1                  ;set b so we exit on return
1962+ 9653
1963+ 9653              ;draw the corridor bit to the left (1 column)
1964+ 9653              draw_12:
1965+ 9653 C5                   push bc
1966+ 9654 D5                   push de                 ;save our display pointer
1967+ 9655 06 16                ld b,22                  ;block is 22 blocks high
1968+ 9657 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1969+ 965A 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1970+ 965C 12           loop16: ld   (de),a             ; insert thepart of the wall.
1971+ 965D 13                   inc de
1972+ 965E 12                   ld (de),a               ;put grey side to our right
1973+ 965F                      ;inc de
1974+ 965F                      ;ld (de),a               ;put grey side to our right
1975+ 965F                      ;inc de
1976+ 965F                      ;ld (de),a               ;put grey side to our right
1977+ 965F                      ;inc de
1978+ 965F                      ;ld (de),a               ;put grey side to our right
1979+ 965F                      ;dec de
1980+ 965F                      ;dec de
1981+ 965F                      ;dec de
1982+ 965F 1B                   dec de
1983+ 9660 EB                   ex de,hl
1984+ 9661 19                   add  hl,de              ; advance to the next row of the display file.
1985+ 9662 EB                   ex de,hl
1986+ 9663 10 F7                djnz loop16             ;do this 3 times
1987+ 9665
1988+ 9665                      ;now draw the blank face to the right of the block
1989+ 9665                      ;create first column of right face characters
1990+ 9665 D1                   pop de                  ;back to our original position
1991+ 9666                      ;inc de
1992+ 9666                      ;inc de
1993+ 9666                      ;inc de                  ;move ahead 4 spaces in the display (right)
1994+ 9666 13                   inc de
1995+ 9667 13                   inc de
1996+ 9668 EB                   ex  de,hl
1997+ 9669 11 21 00             ld de,$0021
1998+ 966C
1999+ 966C              ;now draw the face we see on our left as we walk forward
2000+ 966C 06 04                ld b,4                  ; for 8 face columns to draw to draw
2001+ 966E 22 13 FA             ld (var5),hl
2002+ 9671 3E 15                ld a,21                 ; for 14 blocks high per column
2003+ 9673 32 04 FA             ld (var1),a
2004+ 9676
2005+ 9676              loop14b:
2006+ 9676 C5                   push bc
2007+ 9677 3A 04 FA             ld a,(var1)
2008+ 967A 47                   ld b,a
2009+ 967B 3E B3                ld a,_topcorner4
2010+ 967D 77                   ld (hl),a
2011+ 967E
2012+ 967E              loop14a:
2013+ 967E 19                   add hl,de
2014+ 967F 3E AF                ld  a,_black            ;triangle sloping to right bottom
2015+ 9681 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
2016+ 9682 10 FA                djnz loop14a
2017+ 9684
2018+ 9684                      ;ld  (hl),a
2019+ 9684 3E B0                ld  a,_topcorner1
2020+ 9686 77                   ld  (hl),a
2021+ 9687
2022+ 9687              ; now change the column count
2023+ 9687 3A 04 FA             ld a,(var1)
2024+ 968A D6 02                sub 2
2025+ 968C 32 04 FA             ld (var1),a
2026+ 968F C1                   pop bc
2027+ 9690
2028+ 9690 2A 13 FA             ld hl,(var5)
2029+ 9693 23                   inc hl
2030+ 9694 11 21 00             ld de,$21
2031+ 9697 19                   add hl,de
2032+ 9698 22 13 FA             ld (var5),hl
2033+ 969B
2034+ 969B 10 D9                djnz loop14b
2035+ 969D
2036+ 969D C1                   pop bc
2037+ 969E 18 9D                jr go_back1              ; jump back to main loop
2038+ 96A0
2039+ 96A0              ;        jp draw_1               ;draw next layer
2040+ 96A0
2041+ 96A0              ; there is a wall so insert chequerboard for the wall face.
2042+ 96A0
2043+ 96A0              ;do_no_wall1:
2044+ 96A0              ;        ret ; no wall so do nothing
2045+ 96A0              ;        push de
2046+ 96A0              ;        ld   a,_topwhitebottomchequer
2047+ 96A0              ;        ld   (de),a                             ; insert the top of the wall face.
2048+ 96A0              ;        ld   hl,$0021
2049+ 96A0              ;        add  hl,de                              ; advance to the next row of the display file.
2050+ 96A0              ;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
2051+ 96A0              ;        pop de
2052+ 96A0              ;        ret
2053+ 96A0
2054+ 96A0
2055+ 96A0
2056+ 96A0
2057+ 96A0              ;#############################################
2058+ 96A0              ; draw layer 0
2059+ 96A0              ;#############################################
2060+ 96A0
2061+ 96A0              draw_0:
2062+ 96A0              ;ret
2063+ 96A0
2064+ 96A0
2065+ 96A0              ; hl=maze location being drawn.
2066+ 96A0              ; now determine what to draw for this section.
2067+ 96A0
2068+ 96A0
2069+ 96A0 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
2070+ 96A3
2071+ 96A3 CD 50 8E             call load_de            ;get left and right and front jump into de reg
2072+ 96A6
2073+ 96A6 19                   add hl,de               ;jump backwards along the user view 1 space
2074+ 96A7
2075+ 96A7              ;move map pointer left to read the walls
2076+ 96A7              ;;        ld de,(left)
2077+ 96A7              ;;        add hl,de
2078+ 96A7
2079+ 96A7
2080+ 96A7
2081+ 96A7              ;;        ld (furthest_point),hl ;re save it
2082+ 96A7
2083+ 96A7              ;        ld de,$ffff             ;to move the display position -1
2084+ 96A7              ;        ld (var4),de
2085+ 96A7
2086+ 96A7 ED 5B 0B FA          ld de,(left)
2087+ 96AB
2088+ 96AB              ;we need to move pointer 1 to the left for wall checking
2089+ 96AB 19                   add hl,de
2090+ 96AC 22 15 FA             ld (var6),hl
2091+ 96AF
2092+ 96AF ED 53 0F FA          ld (var3),de
2093+ 96B3 11 00 00             ld  de,$00              ;offset to row0 column 0 - left of  centre of the 3d view.
2094+ 96B6                                              ;1 column of left face to draw
2095+ 96B6                  ;    call do_draw_0
2096+ 96B6
2097+ 96B6
2098+ 96B6              do_draw_0:
2099+ 96B6
2100+ 96B6 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
2101+ 96B9 19                   add  hl,de
2102+ 96BA
2103+ 96BA
2104+ 96BA              ; draw left half then right half of the display.
2105+ 96BA
2106+ 96BA 06 01                ld b,1                 ; count for 2 blocks left or right of display file
2107+ 96BC ED 5B 15 FA          ld de,(var6)           ; 0 is not counted so loops 12 times
2108+ 96C0                     ; ld   de,(furthest_point); retrieve the maze location.
2109+ 96C0 EB                   ex   de,hl              ; transfer de to hl.
2110+ 96C1
2111+ 96C1              ;       hl = furthest point in the maze
2112+ 96C1              ;       de = d_file location to store byte to display
2113+ 96C1
2114+ 96C1              loop17: ;push hl
2115+ 96C1
2116+ 96C1
2117+ 96C1              ;check if we are at the north wall
2118+ 96C1
2119+ 96C1              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
2120+ 96C1
2121+ 96C1 3A 28 FA             ld a,(maze_highbyte)
2122+ 96C4 BC                   cp h                    ;are we at the top part of the maze?
2123+ 96C5 CA D0 96             jp z,cont_4
2124+ 96C8                                              ;if we are on a different maze boundary
2125+ 96C8                                              ;then draw a maze wall as we are the top
2126+ 96C8                                              ;or north wall but maze data has no
2127+ 96C8                                              ;wall data.
2128+ 96C8
2129+ 96C8 3E 01                ld a,1
2130+ 96CA 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
2131+ 96CB C6 7F                add a,127               ;make sure we set a wall!
2132+ 96CD C3 DE 96             jp draw_13             ;jump straight to making an end wall
2133+ 96D0
2134+ 96D0              ;##########################################
2135+ 96D0
2136+ 96D0 7E           cont_4: ld a,(hl)
2137+ 96D1 17                   rla
2138+ 96D2 DA D6 96             jp c,do_wall0            ;bit 7 (128)
2139+ 96D5
2140+ 96D5 C9                   ret
2141+ 96D6
2142+ 96D6
2143+ 96D6
2144+ 96D6              do_wall0:
2145+ 96D6                      ;check if bit 2 is set as thats an end
2146+ 96D6                      ;and b must then be changed to 1 to stop drawing.
2147+ 96D6
2148+ 96D6 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
2149+ 96D8 DA DE 96             jp c,draw_13
2150+ 96DB
2151+ 96DB C3 F7 96             jp draw_brick_l         ; otherwise draw no wall
2152+ 96DE
2153+ 96DE              ;we need to draw 1 vertical line from pos 1,1 to show
2154+ 96DE              ;the side of the block.
2155+ 96DE
2156+ 96DE              ;draw the sidewall brick pattern
2157+ 96DE              draw_13:
2158+ 96DE 3E B3                ld a,_topcorner4
2159+ 96E0 12                   ld (de),a
2160+ 96E1 21 21 00             ld hl,$21                ;jp to next line below
2161+ 96E4 19                   add hl,de
2162+ 96E5 EB                   ex de,hl
2163+ 96E6
2164+ 96E6 06 16                ld b,22                  ;block is 24 blocks high
2165+ 96E8 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
2166+ 96EB 3E AF                ld a,_black            ;wall on sides facing us;
2167+ 96ED 12           loop18: ld (de),a             ; insert the part of the wall.
2168+ 96EE EB                   ex de,hl
2169+ 96EF 19                   add  hl,de              ; advance to the next row of the display file.
2170+ 96F0 EB                   ex de,hl
2171+ 96F1 10 FA                djnz loop18
2172+ 96F3
2173+ 96F3 3E B0                ld a,_topcorner1
2174+ 96F5 12                   ld (de),a
2175+ 96F6 C9                   ret
2176+ 96F7
2177+ 96F7              draw_brick_l:
2178+ 96F7 21 21 00             ld hl,$21                ;jp to next line below
2179+ 96FA 19                   add hl,de
2180+ 96FB EB                   ex de,hl
2181+ 96FC
2182+ 96FC 06 16                ld b,22                  ;block is 24 blocks high
2183+ 96FE 21 21 00             ld hl,$021
2184+ 9701                                         ;load with 32 to jump to line below us
2185+ 9701 3E B8                ld a,_hugewall;_largewall            ;wall on sides facing us;
2186+ 9703              loop18l:
2187+ 9703 12                   ld (de),a             ; insert the part of the wall.
2188+ 9704 EB                   ex de,hl
2189+ 9705 19                   add  hl,de              ; advance to the next row of the display file.
2190+ 9706 EB                   ex de,hl
2191+ 9707 10 FA                djnz loop18l
2192+ 9709
2193+ 9709 C9                   ret
2194+ 970A
# file closed: src/4-rd3dmazeV6.asm
 462  970A                  INCLUDE "5-rd3dmazeV6.asm" ; draw wall in front of player+setup right part of screen
# file opened: src/5-rd3dmazeV6.asm
   1+ 970A
   2+ 970A
   3+ 970A              ;#############################################
   4+ 970A              ;original code to draw maze FRONT walls here from 3D Monster Maze
   5+ 970A              ;call it a homage ;)
   6+ 970A              ;#############################################
   7+ 970A
   8+ 970A
   9+ 970A              ; ############################
  10+ 970A              ; draw wall in front of player
  11+ 970A              ; ############################
  12+ 970A
  13+ 970A              ; a wall face must be drawn centred within the view.
  14+ 970A              ; the wall face is one character wider than it is high.
  15+ 970A
  16+ 970A              draw_front_view:
  17+ 970A
  18+ 970A              ;        ld a,(depth)            ;find out how far we can see - will never be higher than 6
  19+ 970A 3A 02 FA             ld a, (maxview)
  20+ 970D FE 06                cp 6
  21+ 970F C8                   ret z				               ;too far away so return doing nothing
  22+ 9710 FE 05        	    cp 5
  23+ 9712 C8                   ret z
  24+ 9713 C2 20 97             jp nz,set4
  25+ 9716 0E 0D                ld c,13;12
  26+ 9718 3E B4        		ld a,_smallwall			      ;this is the character to draw (brick pattern)
  27+ 971A 32 04 FA     		ld (var1),a
  28+ 971D C3 63 97             jp draw_wall
  29+ 9720 FE 04        set4:   cp 4
  30+ 9722 C2 2F 97             jp nz,set3
  31+ 9725 0E 0B                ld c,11
  32+ 9727 3E B4        		ld a,_smallwall 			     ;this is the character to draw (brick pattern)
  33+ 9729 32 04 FA     		ld (var1),a
  34+ 972C C3 63 97             jp draw_wall
  35+ 972F FE 03        set3:   cp 3
  36+ 9731 C2 3E 97             jp nz,set2
  37+ 9734 0E 0A                ld c,10
  38+ 9736 3E B7        		ld a,_mediumwall_1			   ;this is the character to draw (brick pattern)
  39+ 9738 32 04 FA     		ld (var1),a
  40+ 973B C3 63 97             jp draw_wall
  41+ 973E FE 02        set2:   cp 2
  42+ 9740 C2 4D 97             jp nz,set1
  43+ 9743 0E 08                ld c,8
  44+ 9745 3E B5        		ld a,_mediumwall			      ;this is the character to draw (brick pattern)
  45+ 9747 32 04 FA     		ld (var1),a
  46+ 974A C3 63 97             jp draw_wall
  47+ 974D FE 01        set1:   cp 1
  48+ 974F C2 5C 97             jp nz,set0
  49+ 9752 0E 05                ld c,5
  50+ 9754 3E B6        		ld a,_largewall			      ;this is the character to draw (brick pattern)
  51+ 9756 32 04 FA     		ld (var1),a
  52+ 9759 C3 63 97             jp draw_wall
  53+ 975C              ;must be zero if we get here
  54+ 975C 0E 01        set0:   ld c,1
  55+ 975E 3E B8                ld a,_hugewall;_largewall
  56+ 9760 32 04 FA             ld (var1),a
  57+ 9763
  58+ 9763              draw_wall:
  59+ 9763              ;ld c,1 ;section from player
  60+ 9763
  61+ 9763 2A 7E 81     l49f6:  ld   hl,(d_file)                        ; fetch the location of the display file.
  62+ 9766 11 21 00             ld   de,$0021                           ; each row is 33 characters wide.
  63+ 9769
  64+ 9769              ;        ld   bc,(l4085)                         ; fetch the details for the section: b=width of section, c=distance of section from player.
  65+ 9769 06 00                ld   b,$00
  66+ 976B 09                   add  hl,bc                              ; advance across the screen to the current distance of the wall.
  67+ 976C
  68+ 976C 3E 19                ld   a,$19                              ; the width of the view.
  69+ 976E 41                   ld   b,c                                ; fetch the distance.
  70+ 976F CB 20                sla  b                                  ; multiply the distance by 2 since the wall be spans to the left and right of the centre column of the view.
  71+ 9771 90                   sub  b                                  ; determine the width of the wall face.
  72+ 9772 47                   ld   b,a                                ; b=width of the wall face (it will be an odd number of characters).
  73+ 9773
  74+ 9773 D6 01                sub  $01                                ; determine the wall height (it will be an even number of characters).
  75+ 9775
  76+ 9775              ; enter a loop to draw each column of the wall face.
  77+ 9775
  78+ 9775 C5           l4a0d:  push bc                                 ; save the wall face width.
  79+ 9776 E5                   push hl                                 ; save the address within the display file.
  80+ 9777
  81+ 9777 41                   ld   b,c                                ; fetch the distance, which corresponds to the number of blank rows to show above the wall face.
  82+ 9778
  83+ 9778 36 20        l4a10:  ld   (hl),_space                        ; insert a space above the wall face.
  84+ 977A 19                   add  hl,de                              ; advance to the next row.
  85+ 977B 10 FB                djnz l4a10                              ; repeat for all rows above the wall face.
  86+ 977D
  87+ 977D 47                   ld   b,a                                ; fetch the wall height.
  88+ 977E
  89+ 977E F5           l4a16:  push af
  90+ 977F 3A 04 FA     		ld a,(var1)
  91+ 9782 77           		ld   (hl),a                             ; insert a wall face character into the display file.
  92+ 9783 F1                   pop af
  93+ 9784 19           		      add  hl,de                              ; advance to the next row.
  94+ 9785 10 F7                djnz l4a16                              ; repeat for all rows forming the height of the wall face.
  95+ 9787
  96+ 9787 41                   ld   b,c                                ; fetch the distance, which corresponds the the number of blank rows to show above the wall face.
  97+ 9788 05                   dec  b                                  ; there is one less blank row below the wall face than above it due to the status message row.
  98+ 9789 28 05                jr   z,l4a24                            ; jump if there are no rows below the wall to blank.
  99+ 978B
 100+ 978B 36 20        l4a1f:  ld   (hl),_space                        ; insert a space below the wall face.
 101+ 978D 19                   add  hl,de                              ; advance to the next row.
 102+ 978E 10 FB                djnz l4a1f                              ; repeat for all rows below the wall face.
 103+ 9790
 104+ 9790 E1           l4a24:  pop  hl                                 ; retrieve the address within the display file.
 105+ 9791 23                   inc  hl                                 ; advance to the next column to the right.
 106+ 9792
 107+ 9792 C1                   pop  bc                                 ; retrieve the wall face width.
 108+ 9793 10 E0                djnz l4a0d                              ; repeat for all columns of the wall face.
 109+ 9795
 110+ 9795              ;call my_print
 111+ 9795 C9                   ret
 112+ 9796
 113+ 9796              ;#################################################################
 114+ 9796              ;#################################################################
 115+ 9796              ; draw maze end walls left and right of the player view
 116+ 9796              ;#################################################################
 117+ 9796              ;#################################################################
 118+ 9796
 119+ 9796              ;we will just copy parts of the front wall left and right on the screen
 120+ 9796              ;depending if theres a side wall or not. No side wall, do nothing!
 121+ 9796
 122+ 9796              draw_side_walls
 123+ 9796
 124+ 9796              ;1st we need to know if the front view is a side wallsurrounding the maze
 125+ 9796              ;this is $81 (129) if its a side wall
 126+ 9796
 127+ 9796              ;so we have an end wall here!
 128+ 9796
 129+ 9796              ;1st, check if maxdepth =4 or less. We do not want to draw anything for
 130+ 9796              ;depth 5 or 6
 131+ 9796
 132+ 9796 B7                   or a                    ;clear carry flag
 133+ 9797 3A 02 FA             ld a,(maxview)          ;how far we can see in front of us
 134+ 979A FE 05                cp 5
 135+ 979C D0                   ret nc                  ;exit if its 5 or greater
 136+ 979D                                              ;carry set if <5
 137+ 979D
 138+ 979D              ;now check if maxview and depth are the same as this indicates a side wall
 139+ 979D              ;reg a already contains maxview
 140+ 979D              ;#        ld b,a
 141+ 979D              ;#        ld a,(depth)
 142+ 979D              ;#        sub b                   ;should be 0 if the same
 143+ 979D              ;#        ret nz                  ;exit if different
 144+ 979D
 145+ 979D              ;now we cheat :) we just keep copying lines of the wall left & right
 146+ 979D              ;untill we hit a non space in the display file!
 147+ 979D
 148+ 979D              ;reg a contains our depth
 149+ 979D              ;        ld a,(maxview)
 150+ 979D 3A 06 FA             ld a,(depth)
 151+ 97A0
 152+ 97A0 FE 00                cp 0
 153+ 97A2                      ;depth 1
 154+ 97A2 CA BA 97             jp z,cp_wall_1          ;wall immediately in front of us
 155+ 97A5 FE 01                cp 1
 156+ 97A7                      ;depth 2
 157+ 97A7 CA E4 97             jp z,cp_wall_2
 158+ 97AA FE 02                cp 2
 159+ 97AC                      ;depth 3
 160+ 97AC CA 2C 98             jp z,cp_wall_3
 161+ 97AF FE 03                cp 3
 162+ 97B1                      ;depth 4
 163+ 97B1 CA 74 98             jp z,cp_wall_4
 164+ 97B4 FE 04                cp 4
 165+ 97B6                      ;depth 5
 166+ 97B6 CA BF 98             jp z,cp_wall_5
 167+ 97B9 C9                   ret                     ;go back now
 168+ 97BA
 169+ 97BA              cp_wall_1:
 170+ 97BA              ;do left side first - check for char A3 (black block for maze wall at a distance
 171+ 97BA
 172+ 97BA 21 4A C1             ld hl,$c14a             ;we should be 10 lines down(10,0)
 173+ 97BD 7E                   ld a,(hl)               ;check our character
 174+ 97BE FE 20                cp ' '                  ;should be space indicating nothing there
 175+ 97C0
 176+ 97C0 CC D3 97             call  z,loop91
 177+ 97C3                       ;draw left half
 178+ 97C3
 179+ 97C3              ;now do the right side
 180+ 97C3 21 39 C0             ld hl,$c039             ;we should be 10 lines down(10,24)
 181+ 97C6 7E                   ld a,(hl)               ;check our character
 182+ 97C7 FE 20                cp ' '                  ;should be space indicating noting there
 183+ 97C9 C0                   ret nz                  ;exit if no space there
 184+ 97CA 21 39 C0             ld hl,$c039             ;top left face
 185+ 97CD              ;        ld de,$c038             ;1 line right of front wall
 186+ 97CD 06 16                ld b,22                 ;copy 22 lines
 187+ 97CF C3 D8 97             jp loop90               ;draw right side!
 188+ 97D2 C9                   ret                     ;exit altogether
 189+ 97D3
 190+ 97D3 21 21 C0     loop91: ld hl,$c021             ;top left face
 191+ 97D6              ;        ld de,$c022             ;1 line left
 192+ 97D6 06 16                ld b,22                 ;copy 22 lines
 193+ 97D8              loop90: ;ld a,(de)
 194+ 97D8 3E B8                ld a,_hugewall
 195+ 97DA 77                   ld (hl),a
 196+ 97DB D5                   push de
 197+ 97DC 11 21 00             ld de,33
 198+ 97DF 19                   add hl,de               ;go to next line
 199+ 97E0 D1                   pop de
 200+ 97E1 10 F5                djnz loop90
 201+ 97E3 C9                   ret
 202+ 97E4
 203+ 97E4              cp_wall_2:
 204+ 97E4              ;do left side first - check for char ' ' showing nothing drawn there
 205+ 97E4
 206+ 97E4 21 A9 C0             ld hl,$c0a9             ;we should be at the top left of the face
 207+ 97E7 DD 21 A9 C0          ld ix,$c0a9
 208+ 97EB              ;        ld de,$c0ab             ;1 line left of our wall face
 209+ 97EB 11 1F FA             ld de,lr_wall
 210+ 97EE 3E B6                ld a,_largewall
 211+ 97F0 12                   ld (de),a
 212+ 97F1
 213+ 97F1 0E 05                ld c,5                  ;draw 5 columns to the border
 214+ 97F3 E5           loop80: push hl
 215+ 97F4 06 0E                ld b,14
 216+ 97F6 DD 7E 00             ld a,(ix+0)             ;check our character
 217+ 97F9 FE 20                cp ' '                  ;should be space indicating noting there
 218+ 97FB CC 07 99             call z,loop93
 219+ 97FE DD 2B                dec ix
 220+ 9800 E1                   pop hl
 221+ 9801 2B                   dec hl                 ;move left 1 line in the display
 222+ 9802 0D                   dec c
 223+ 9803 C2 F3 97             jp nz,loop80            ;do this 5 times
 224+ 9806
 225+ 9806              ;now do the right side
 226+ 9806 21 B9 C0             ld hl,$c0b9             ;we should be at the top right of the face
 227+ 9809 DD 21 B9 C0          ld ix,$c0b9
 228+ 980D               ;       ld de,$c0b8             ;1 line left of our wall face
 229+ 980D 11 1F FA             ld de,lr_wall
 230+ 9810 3E B6                ld a,_largewall
 231+ 9812 12                   ld (de),a
 232+ 9813
 233+ 9813 0E 05                ld c,5                  ;draw 5 columns to the border
 234+ 9815 E5           loop81: push hl
 235+ 9816 06 0E                ld b,14
 236+ 9818 DD 7E 00             ld a,(ix+0)             ;check our character
 237+ 981B FE 20                cp ' '                  ;should be space indicating noting there
 238+ 981D C2 23 98             jp nz,loop82            ;skip over if no space there
 239+ 9820 CC 07 99             call z,loop93
 240+ 9823 DD 23        loop82  inc ix
 241+ 9825                               ;do the next line
 242+ 9825 E1                   pop hl
 243+ 9826 23                   inc hl
 244+ 9827 0D                   dec c
 245+ 9828 C2 15 98             jp nz,loop81
 246+ 982B C9                   ret                     ;exit routine totally
 247+ 982C
 248+ 982C              cp_wall_3:
 249+ 982C              ;do left side first - check for char ' ' showing nothing drawn there
 250+ 982C
 251+ 982C 21 0F C1             ld hl,$c10f             ;we should be at the top left of the face
 252+ 982F DD 21 0F C1          ld ix,$c10f
 253+ 9833              ;        ld de,$c110             ;1 line left of our wall face
 254+ 9833 11 1F FA             ld de,lr_wall
 255+ 9836 3E B5                ld a,_mediumwall
 256+ 9838 12                   ld (de),a
 257+ 9839
 258+ 9839 0E 08                ld c,8                  ;draw 8 columns to the border
 259+ 983B E5           loop83: push hl
 260+ 983C 06 08                ld b,8                 ;10 chars high
 261+ 983E DD 7E 00             ld a,(ix+0)             ;check our character
 262+ 9841 FE 20                cp ' '                  ;should be space indicating noting there
 263+ 9843 CC 07 99             call z,loop93
 264+ 9846 DD 2B                dec ix
 265+ 9848 E1                   pop hl
 266+ 9849 2B                   dec hl                 ;move left 1 line in the display
 267+ 984A 0D                   dec c
 268+ 984B C2 3B 98             jp nz,loop83            ;do this 5 times
 269+ 984E
 270+ 984E              ;now do the right side
 271+ 984E 21 19 C1             ld hl,$c119             ;we should be at the top right of the face
 272+ 9851 DD 21 19 C1          ld ix,$c119
 273+ 9855              ;        ld de,$c118             ;1 line left of our wall face
 274+ 9855 11 1F FA             ld de,lr_wall
 275+ 9858 3E B5                ld a,_mediumwall
 276+ 985A 12                   ld (de),a
 277+ 985B
 278+ 985B 0E 08                ld c,8                  ;draw 8 columns to the border
 279+ 985D E5           loop84: push hl
 280+ 985E 06 08                ld b,8                 ;8 chars high
 281+ 9860 DD 7E 00             ld a,(ix+0)             ;check our character
 282+ 9863 FE 20                cp ' '                  ;should be space indicating noting there
 283+ 9865 C2 6B 98             jp nz,loop85            ;skip over if no space there
 284+ 9868 CC 07 99             call z,loop93
 285+ 986B DD 23        loop85: inc ix
 286+ 986D                               ;do the next line
 287+ 986D E1                   pop hl
 288+ 986E 23                   inc hl
 289+ 986F 0D                   dec c
 290+ 9870 C2 5D 98             jp nz,loop84
 291+ 9873 C9                   ret                     ;exit routine totally
 292+ 9874
 293+ 9874              cp_wall_4:
 294+ 9874              ;do left side first - check for char ' ' showing nothing drawn there
 295+ 9874
 296+ 9874 21 53 C1             ld hl,$c153             ;we should be at the top left of the face
 297+ 9877 DD 21 53 C1          ld ix,$c153
 298+ 987B              ;
 299+ 987B 11 1F FA             ld de,lr_wall
 300+ 987E 3E B7                ld a,_mediumwall_1
 301+ 9880 12                   ld (de),a
 302+ 9881 11 54 C1             ld de,$c154             ;1 line left of our wall face
 303+ 9884 0E 0A                ld c,10                  ;draw 10 columns to the border
 304+ 9886 E5           loop86: push hl
 305+ 9887 06 04                ld b,4                  ;4 chars high
 306+ 9889 DD 7E 00             ld a,(ix+0)             ;check our character
 307+ 988C FE 20                cp ' '                  ;should be space indicating noting there
 308+ 988E CC 07 99             call z,loop93
 309+ 9891 DD 2B                dec ix
 310+ 9893 E1                   pop hl
 311+ 9894 2B                   dec hl                  ;move left 1 line in the display
 312+ 9895 0D                   dec c
 313+ 9896 C2 86 98             jp nz,loop86            ;do this 5 times
 314+ 9899
 315+ 9899              ;now do the right side
 316+ 9899 21 59 C1             ld hl,$c159             ;we should be at the top right of the face
 317+ 989C DD 21 59 C1          ld ix,$c159
 318+ 98A0              ;        ld de,$c158             ;1 line left of our wall face
 319+ 98A0 11 1F FA             ld de,lr_wall
 320+ 98A3 3E B7                ld a,_mediumwall_1
 321+ 98A5 12                   ld (de),a
 322+ 98A6
 323+ 98A6 0E 0A                ld c,10                  ;draw 10 columns to the border
 324+ 98A8 E5           loop87: push hl
 325+ 98A9 06 04                ld b,4                 ;4 chars high
 326+ 98AB DD 7E 00             ld a,(ix+0)             ;check our character
 327+ 98AE FE 20                cp ' '                  ;should be space indicating noting there
 328+ 98B0 C2 B6 98             jp nz,loop88            ;skip over if no space there
 329+ 98B3 CC 07 99             call z,loop93
 330+ 98B6 DD 23        loop88: inc ix
 331+ 98B8                               ;do the next line
 332+ 98B8 E1                   pop hl
 333+ 98B9 23                   inc hl
 334+ 98BA 0D                   dec c
 335+ 98BB C2 A8 98             jp nz,loop87
 336+ 98BE C9                   ret                     ;exit routine totally
 337+ 98BF
 338+ 98BF              cp_wall_5:
 339+ 98BF              ;do left side first - check for char ' ' showing nothing drawn there
 340+ 98BF
 341+ 98BF 21 77 C1             ld hl,$c177             ;we should be at the top left of the face
 342+ 98C2 DD 21 77 C1          ld ix,$c177
 343+ 98C6              ;        ld de,$c176             ;1 line left of our wall face
 344+ 98C6 11 1F FA             ld de,lr_wall
 345+ 98C9 3E B4                ld a,_smallwall
 346+ 98CB 12                   ld (de),a
 347+ 98CC
 348+ 98CC 0E 0D                ld c,13                  ;draw 10 columns to the border
 349+ 98CE E5           loop89: push hl
 350+ 98CF 06 02                ld b,2                  ;4 chars high
 351+ 98D1 DD 7E 00             ld a,(ix+0)             ;check our character
 352+ 98D4 FE A2                cp _bottomblack         ;should be space indicating noting there
 353+ 98D6 CC 07 99             call z,loop93
 354+ 98D9 DD 2B                dec ix
 355+ 98DB E1                   pop hl
 356+ 98DC 2B                   dec hl                  ;move left 1 line in the display
 357+ 98DD 0D                   dec c
 358+ 98DE C2 CE 98             jp nz,loop89            ;do this 5 times
 359+ 98E1
 360+ 98E1              ;now do the right side
 361+ 98E1 21 75 C1             ld hl,$c175             ;we should be at the top right of the face
 362+ 98E4 DD 21 75 C1          ld ix,$c175
 363+ 98E8              ;        ld de,$c176             ;1 line left of our wall face
 364+ 98E8 11 1F FA             ld de,lr_wall
 365+ 98EB 3E B4                ld a,_smallwall
 366+ 98ED 12                   ld (de),a
 367+ 98EE
 368+ 98EE 0E 0F                ld c,15                  ;draw 10 columns to the border
 369+ 98F0 E5           loop871:push hl
 370+ 98F1 06 02                ld b,2                  ;2 chars high
 371+ 98F3 DD 7E 00             ld a,(ix+0)             ;check our character
 372+ 98F6 FE A2                cp _bottomblack         ;should be space indicating noting there
 373+ 98F8 C2 FE 98             jp nz,loop881            ;skip over if no space there
 374+ 98FB CC 07 99             call z,loop93
 375+ 98FE DD 23        loop881:inc ix
 376+ 9900                               ;do the next line
 377+ 9900 E1                   pop hl
 378+ 9901 23                   inc hl
 379+ 9902 0D                   dec c
 380+ 9903 C2 F0 98             jp nz,loop871
 381+ 9906 C9                   ret                     ;exit routine totally
 382+ 9907
 383+ 9907
 384+ 9907              ;#######################################################
 385+ 9907              ;This routine draws the end wall blocks left & right
 386+ 9907              ;######################################################
 387+ 9907
 388+ 9907              ;it matches so draw a wall face by copying the existing one!
 389+ 9907              loop93:; dec de                  ;go 1 line left
 390+ 9907 1A           loop92: ld a,(de)
 391+ 9908 77                   ld (hl),a
 392+ 9909 D5                   push de
 393+ 990A 11 21 00             ld de,33
 394+ 990D 19                   add hl,de               ;go to next line
 395+ 990E D1                   pop de
 396+ 990F 10 F6                djnz loop92
 397+ 9911
 398+ 9911 C9                   ret
 399+ 9912
 400+ 9912              ;#################################################################
 401+ 9912              ;#################################################################
 402+ 9912              ;draw colours     ; go through char display file and paint colours
 403+ 9912              ;#################################################################
 404+ 9912              ;#################################################################
 405+ 9912
 406+ 9912
 407+ 9912 28 00        wallcol       dw  40             ;bright red
 408+ 9914              skycol        equ 80            ; grey paper, black ink
 409+ 9914              floorcol      equ 98             ; brown paper, black ink
 410+ 9914              ;corridcol     equ 112            ; yellow paper, black ink
 411+ 9914 28           sky_floor     db  40            ;store current sky or floor colour
 412+ 9915 00           wall_temp     db  0             ;temporary store for wall colour graduation
 413+ 9916 00 C3        scr_attr_add  dw $c300  ;22528          ;start of spectrum attributes after char screen or 22528 actual sceen
 414+ 9918
 415+ 9918              ; go through the display file at c000, check the character, change the colour
 416+ 9918              ; if at row 26, start on next line at far left (0)
 417+ 9918              ; do it again until you reach line 24 and column 25
 418+ 9918
 419+ 9918              ; built character display is at location c000
 420+ 9918
 421+ 9918 3E 50        draw_colours: ld a, skycol           ; set the sky colour
 422+ 991A 32 14 99                   ld (sky_floor),a
 423+ 991D 97                         sub a                 ; make a zero
 424+ 991E 32 0B FA                   ld (left),a
 425+ 9921 01 0F 03                   ld bc,783             ; 768 attributes to fill
 426+ 9924 ED 5B 16 99                ld de,(scr_attr_add)  ; start of spectrum attributes after char screen
 427+ 9928 21 00 C0                   ld hl,$c000           ; start of zx81 display file in memory
 428+ 992B
 429+ 992B CD 22 9A     here:         call set_wall_col     ;set the wall colour graduation colour
 430+ 992E CD 56 99                   call loop_1
 431+ 9931 A7                         and a                 ;reset zero
 432+ 9932 23                         inc hl                ;current character memory we are checking
 433+ 9933 13                         inc de                ;current attribute location
 434+ 9934 0B                         dec bc                ;number of attribute cells to traverse
 435+ 9935 78                         ld a,b
 436+ 9936 FE 00                      cp 0
 437+ 9938 20 F1                      jr nz,here
 438+ 993A 79                         ld a,c
 439+ 993B FE 00                      cp 0             ;dec on single reg affects flags
 440+ 993D
 441+ 993D 28 02                      jr z,lastcol     ;colour in the last block before exiting
 442+ 993F 18 EA                      jr here
 443+ 9941
 444+ 9941 3A 14 99     lastcol:      ld a,(sky_floor)   ; colour in the last square
 445+ 9944                                               ; plus last 7  squares
 446+ 9944 12                         ld(de),a
 447+ 9945 3E 70                      ld a,112
 448+ 9947 13                         inc de
 449+ 9948 12                         ld (de),a
 450+ 9949 13                         inc de
 451+ 994A 12                         ld (de),a
 452+ 994B 13                         inc de
 453+ 994C 12                         ld (de),a
 454+ 994D 13                         inc de
 455+ 994E 12                         ld (de),a
 456+ 994F 13                         inc de
 457+ 9950 12                         ld (de),a
 458+ 9951 13                         inc de
 459+ 9952 12                         ld (de),a
 460+ 9953 13                         inc de
 461+ 9954 12                         ld (de),a
 462+ 9955
 463+ 9955 C9                         ret
 464+ 9956
 465+ 9956              ;start checking chars and setting colours
 466+ 9956
 467+ 9956 7E           loop_1:        ld a, (hl)       ; get value at start of zx81 display file
 468+ 9957 FE B5                       cp _mediumwall            ; top left triangle
 469+ 9959 20 07                       jr nz, next1
 470+ 995B 3A 12 99                    ld a, (wallcol)
 471+ 995E 12                          ld (de),a        ; colour it if it matches
 472+ 995F C3 EF 99                    jp next_pos      ; go on to next char position
 473+ 9962
 474+ 9962 FE AF        next1:         cp _black            ; top right triangle
 475+ 9964 20 06                       jr nz, next2
 476+ 9966 3E FE                       ld a, 254        ;black paper, black ink
 477+ 9968 12                          ld (de),a        ; colour it if it matches
 478+ 9969 C3 EF 99                    jp next_pos      ; go on to next char position
 479+ 996C
 480+ 996C FE B3        next2:         cp _topcorner4           ; top left triangle
 481+ 996E 20 06                       jr nz, next3
 482+ 9970 3E 50                       ld a,skycol          ;paper cyan, ink 1
 483+ 9972 12                          ld (de),a        ; colour it if it matches
 484+ 9973 C3 EF 99                    jp next_pos      ; go on to next char position
 485+ 9976
 486+ 9976 FE B0        next3:         cp _topcorner1            ; top left triangle
 487+ 9978 20 06                       jr nz, next4
 488+ 997A 3E 62                       ld a,floorcol
 489+ 997C 12                          ld (de),a        ; colour it if it matches
 490+ 997D C3 EF 99                    jp next_pos      ; go on to next char position
 491+ 9980
 492+ 9980 FE B6        next4:         cp _largewall            ; look for wall character
 493+ 9982 20 07                       jr nz, next5
 494+ 9984 3A 12 99                    ld a,  (wallcol)
 495+ 9987 12                          ld (de),a        ; colour it if it matches
 496+ 9988 C3 EF 99                    jp next_pos      ; go on to next char position
 497+ 998B
 498+ 998B FE B4        next5:        cp _smallwall            ;was char 09 - lower middle of screen wall character bottom
 499+ 998D 20 07                      jr nz, next6
 500+ 998F 3A 12 99                   ld a,  (wallcol)
 501+ 9992 12                         ld (de),a
 502+ 9993 C3 EF 99                   jp next_pos
 503+ 9996
 504+ 9996 FE B7        next6:        cp _mediumwall_1            ;was chr 10 - middle of screen upper wall character
 505+ 9998 20 07                      jr nz, next7
 506+ 999A 3A 12 99                   ld a, (wallcol)         ;
 507+ 999D 12                         ld (de),a
 508+ 999E C3 EF 99                   jp next_pos
 509+ 99A1
 510+ 99A1 FE A9        next7:        cp _topleft5            ;was chr 10 - middle of screen upper wall character
 511+ 99A3 20 06                      jr nz, next8
 512+ 99A5 3E 50                      ld a, skycol         ;
 513+ 99A7 12                         ld (de),a
 514+ 99A8 C3 EF 99                   jp next_pos
 515+ 99AB
 516+ 99AB FE B8        next8:        cp _hugewall
 517+ 99AD 20 07                      jr nz, next9
 518+ 99AF 3A 12 99                   ld a, (wallcol)         ;
 519+ 99B2 12                         ld (de),a
 520+ 99B3 C3 EF 99                   jp next_pos
 521+ 99B6
 522+ 99B6 FE 8E        next9:        cp $8e            ;stretched wall 5
 523+ 99B8 20 07                      jr nz, next10
 524+ 99BA 3A 12 99                   ld a, (wallcol)         ;
 525+ 99BD 12                         ld (de),a
 526+ 99BE C3 EF 99                   jp next_pos
 527+ 99C1
 528+ 99C1 FE 8D        next10:       cp $8d             ;stretched wall 5 more
 529+ 99C3 20 0A                      jr nz, next11
 530+ 99C5 3A 12 99                   ld a, (wallcol)         ;
 531+ 99C8 12                         ld (de),a
 532+ 99C9 3A 12 99                   ld a, (wallcol)         ;
 533+ 99CC C3 EF 99                   jp next_pos
 534+ 99CF
 535+ 99CF FE 8B        next11:       cp $8b             ;stretched wall 5 more
 536+ 99D1 20 0A                      jr nz, next12
 537+ 99D3 3A 12 99                   ld a, (wallcol)         ;
 538+ 99D6 12                         ld (de),a
 539+ 99D7 3A 12 99                   ld a, (wallcol)         ;
 540+ 99DA C3 EF 99                   jp next_pos
 541+ 99DD
 542+ 99DD FE 8C        next12:       cp $8c             ;stretched wall 5 more
 543+ 99DF 20 0A                      jr nz, next20
 544+ 99E1 3A 12 99                   ld a, (wallcol)         ;
 545+ 99E4 12                         ld (de),a
 546+ 99E5 3A 12 99                   ld a, (wallcol)         ;
 547+ 99E8 C3 EF 99                   jp next_pos
 548+ 99EB
 549+ 99EB              ;draw sky or floor colour as we found no matches above
 550+ 99EB
 551+ 99EB 3A 14 99     next20         ld a,(sky_floor) ;
 552+ 99EE 12                          ld (de),a        ; colour it if it matches
 553+ 99EF 3A 0B FA     next_pos:      ld a, (left)
 554+ 99F2 3C                          inc a
 555+ 99F3 FE 19                       cp 25            ; are we at 24th column?
 556+ 99F5 32 0B FA                    ld (left),a
 557+ 99F8 C0                          ret nz           ; return if not
 558+ 99F9
 559+ 99F9              ;now do paper colour of score and nav git on right
 560+ 99F9                             ;now decrease bc by 7 & increase display pos by 7
 561+ 99F9                             ;to start of next line
 562+ 99F9 97                          sub a            ; zero a register
 563+ 99FA 32 0B FA                    ld (left),a      ; back to start
 564+ 99FD 3E 08                       ld a,8           ; 7 spaces to next line
 565+ 99FF 0B           loop_4:        dec bc           ;change ldir count
 566+ 9A00 23                          inc hl
 567+ 9A01 13                          inc de
 568+ 9A02 F5                          push af
 569+ 9A03 3E 70                       ld a,112         ;yellow paper, ink 9
 570+ 9A05 12                          ld (de),a
 571+ 9A06 F1                          pop af
 572+ 9A07 A7                          and a           ;move screen print position
 573+ 9A08 3D                          dec a
 574+ 9A09 20 F4                       jr nz, loop_4
 575+ 9A0B 1B                          dec de           ; get to start of spectrum line in the display
 576+ 9A0C
 577+ 9A0C                             ; check if we are below the middles of the display
 578+ 9A0C                             ; so we change the 'white' colour to floor
 579+ 9A0C E5                          push hl
 580+ 9A0D D5                          push de
 581+ 9A0E                            ; 22912 is the start of the floor level
 582+ 9A0E                             ; de holds current position in spectrum display
 583+ 9A0E
 584+ 9A0E
 585+ 9A0E 2A 16 99                    ld hl,(scr_attr_add)
 586+ 9A11 ED 34 7F 01                 add hl,383        ;this for display at 22528 is 22911   ; start of first floor line
 587+ 9A15 ED 52                       sbc hl,de        ;are we there yet?
 588+ 9A17 C2 1F 9A                    jp nz,exit2 ;was nz
 589+ 9A1A 3E 62                       ld a,floorcol
 590+ 9A1C 32 14 99                    ld (sky_floor),a
 591+ 9A1F D1           exit2:         pop de
 592+ 9A20 E1                          pop hl
 593+ 9A21 C9                          ret
 594+ 9A22
 595+ 9A22
 596+ 9A22              set_wall_col:
 597+ 9A22                              ;set the wall colour graduation colour from light (top part) to dark(bottom part of wall) in 6 increments
 598+ 9A22                              ;de holds current attribute cell we are colouring in
 599+ 9A22 E5                           push hl
 600+ 9A23 D5                           push de
 601+ 9A24                              ;de holds current attribute cell we are colouring in
 602+ 9A24
 603+ 9A24 3E BC                        ld a,188
 604+ 9A26 2A 16 99                     ld hl,(scr_attr_add)     ;top of the display
 605+ 9A29 B7 ED 52                     sub hl,de
 606+ 9A2C 20 05                        jr nz,setcol_1   ;check next quarter of display
 607+ 9A2E 32 12 99                     ld (wallcol),a
 608+ 9A31 18 5D                        jr setcol_exit
 609+ 9A33
 610+ 9A33
 611+ 9A33 C6 02        setcol_1:       add a,2
 612+ 9A35 2A 16 99                     ld hl,(scr_attr_add)
 613+ 9A38 ED 34 80 00                  add hl,128    ;next 1/6 of the display
 614+ 9A3C B7 ED 52                     sub hl,de
 615+ 9A3F 20 05                        jr nz,setcol_2   ;check next 1/6th of display
 616+ 9A41 32 12 99                     ld (wallcol),a
 617+ 9A44 18 4A                        jr setcol_exit
 618+ 9A46
 619+ 9A46 C6 02        setcol_2        add a,2
 620+ 9A48 2A 16 99                     ld hl,(scr_attr_add)
 621+ 9A4B ED 34 00 01                  add hl,256     ;next 1/6  down of the display
 622+ 9A4F B7 ED 52                     sub hl,de
 623+ 9A52 20 05                        jr nz,setcol_3   ;check next 1/6th of display
 624+ 9A54 32 12 99                     ld (wallcol),a
 625+ 9A57 18 37                        jr setcol_exit
 626+ 9A59
 627+ 9A59 C6 02        setcol_3        add a,2
 628+ 9A5B 2A 16 99                     ld hl,(scr_attr_add)
 629+ 9A5E ED 34 80 01                  add hl,384     ;    ;next 1/6 of the display
 630+ 9A62 B7 ED 52                     sub hl,de
 631+ 9A65 20 05                        jr nz,setcol_4   ;check next 1/6th of display
 632+ 9A67 32 12 99                     ld (wallcol),a
 633+ 9A6A 18 24                        jr setcol_exit
 634+ 9A6C
 635+ 9A6C C6 02        setcol_4        add a,2
 636+ 9A6E 2A 16 99                     ld hl,(scr_attr_add)
 637+ 9A71 ED 34 00 02                  add hl,512    ;next 1/6 of the display
 638+ 9A75 B7 ED 52                     sub hl,de
 639+ 9A78 20 05                        jr nz,setcol_5   ;check next 1/6th of display
 640+ 9A7A 32 12 99                     ld (wallcol),a
 641+ 9A7D 18 11                        jr setcol_exit
 642+ 9A7F
 643+ 9A7F C6 02        setcol_5        add a,2
 644+ 9A81 2A 16 99                     ld hl,(scr_attr_add)
 645+ 9A84 ED 34 80 02                  add hl,640     ;bottom 6th of the display
 646+ 9A88 B7 ED 52                     sub hl,de
 647+ 9A8B 20 03                        jr nz,setcol_exit   ;check next 1/6th of display
 648+ 9A8D 32 12 99                     ld (wallcol),a
 649+ 9A90
 650+ 9A90 D1           setcol_exit:    pop de
 651+ 9A91 E1                           pop hl
 652+ 9A92 C9                           ret
 653+ 9A93
 654+ 9A93              ;#######################################################################
 655+ 9A93              ;setup right hand side of the screen
 656+ 9A93
 657+ 9A93              draw_screen_right:
 658+ 9A93
 659+ 9A93 DD 21 19 82                ld ix,message_border1       ;top border Message
 660+ 9A97 CD E1 81                   CALL print_message
 661+ 9A9A DD 21 24 82                ld ix,message_get       ;"Get Out" Message
 662+ 9A9E CD E1 81                   CALL print_message
 663+ 9AA1 DD 21 2F 82                ld ix,message_out       ;"Get Out" Message
 664+ 9AA5 CD E1 81                   CALL print_message
 665+ 9AA8 DD 21 3A 82                ld ix,message_border4       ;top border Message
 666+ 9AAC CD E1 81                   CALL print_message
 667+ 9AAF                            ;do some colouring around the 'get out' words
 668+ 9AAF 21 39 58                   ld hl,22585
 669+ 9AB2 3E 94                      ld a,148
 670+ 9AB4 77                         ld (hl),A
 671+ 9AB5 21 3F 58                   ld hl,22585+6
 672+ 9AB8 77                         ld (hl),a
 673+ 9AB9 21 59 58                   ld hl,22617
 674+ 9ABC 77                         ld (hl),a
 675+ 9ABD 21 5F 58                   ld hl,22617+6
 676+ 9AC0 77                         ld (hl),a
 677+ 9AC1                            ;print "level" words
 678+ 9AC1 DD 21 94 82                ld ix,message_level       ;top border Message
 679+ 9AC5 CD E1 81                   CALL print_message
 680+ 9AC8              ;now print the level numbers
 681+ 9AC8 DD 21 0B 9B                ld ix,L00       ;top border Message
 682+ 9ACC CD E1 81                   CALL print_message
 683+ 9ACF DD 21 12 9B                ld ix,L01       ;top border Message
 684+ 9AD3 CD E1 81                   CALL print_message
 685+ 9AD6 DD 21 19 9B                ld ix,L23      ;top border Message
 686+ 9ADA CD E1 81                   CALL print_message
 687+ 9ADD DD 21 20 9B                ld ix,L45        ;top border Message
 688+ 9AE1 CD E1 81                   CALL print_message
 689+ 9AE4 DD 21 27 9B                ld ix,L67       ;top border Message
 690+ 9AE8 CD E1 81                   CALL print_message
 691+ 9AEB DD 21 2E 9B                ld ix,L89       ;top border Message
 692+ 9AEF CD E1 81                   CALL print_message
 693+ 9AF2 DD 21 35 9B                ld ix,L1011       ;top border Message
 694+ 9AF6 CD E1 81                   CALL print_message
 695+ 9AF9 DD 21 3C 9B                ld ix,L1213       ;top border Message
 696+ 9AFD CD E1 81                   CALL print_message
 697+ 9B00 DD 21 43 9B                ld ix,L1415
 698+ 9B04 CD E1 81                   CALL print_message
 699+ 9B07 CD 4A 9B                   call set_floor_colour
 700+ 9B0A C9                         ret
 701+ 9B0B
 702+ 9B0B 06 1B 86 20  L00           db 6,27,134,     " 0 ",$7f
 702+ 9B0F 30 20 7F
 703+ 9B12 07 1B 86 20  L01           db 7,27,134,     " 1 ",$7f
 703+ 9B16 31 20 7F
 704+ 9B19 08 1B 86 32  L23           db 8,27,134,     "2 3",$7f
 704+ 9B1D 20 33 7F
 705+ 9B20 09 1B 86 34  L45           db 9,27,134,     "4 5",$7f
 705+ 9B24 20 35 7F
 706+ 9B27 0A 1B 86 36  L67           db 10,27,134,    "6 7",$7f
 706+ 9B2B 20 37 7F
 707+ 9B2E 0B 1B 86 38  L89           db 11,27,134,    "8 9",$7f
 707+ 9B32 20 39 7F
 708+ 9B35 0C 1B 86 D7  L1011         db 12,27,134,$d7," ",$d8,$7f
 708+ 9B39 20 D8 7F
 709+ 9B3C 0D 1B 86 D9  L1213         db 13,27,134,$d9," ",$da,$7f
 709+ 9B40 20 DA 7F
 710+ 9B43 0E 1B 86 DB  L1415         db 14,27,134,$db," ",$dc,$7f
 710+ 9B47 20 DC 7F
 711+ 9B4A
 712+ 9B4A              ;###################################################################
 713+ 9B4A
 714+ 9B4A              ;set floor colour on right of the display - shows what floor we are on
 715+ 9B4A
 716+ 9B4A              set_floor_colour:
 717+ 9B4A AF                   xor a               ;zero a reg
 718+ 9B4B 47                   ld b,a
 719+ 9B4C 2A 22 FA             ld hl,(cur_map)     ;get our current map
 720+ 9B4F 55                   ld d,l
 721+ 9B50 15                   dec d               ;need to point 1 less
 722+ 9B51 1E 02                ld e,2
 723+ 9B53 ED 30                mul de              ;multiply our current map number by 2
 724+ 9B55 21 60 9B             ld hl,data_table
 725+ 9B58 19                   add hl,de           ;should now be pointing to the correct place in the table
 726+ 9B59 5E                   ld e,(hl)
 727+ 9B5A 23                   inc hl
 728+ 9B5B 56                   ld d,(hl)
 729+ 9B5C                      ;now colour it white on screen
 730+ 9B5C 3E 87                ld a,135
 731+ 9B5E 12                   ld (de),a
 732+ 9B5F C9                   ret
 733+ 9B60
 734+ 9B60
 735+ 9B60
 736+ 9B60
 737+ 9B60              data_table:
 738+ 9B60 DC 58                dw  $58dc       ;23003-256    ;GND
 739+ 9B62 FC 58                dw  $58fc       ;23004-224    ;1
 740+ 9B64 1B 59                dw  $591b       ;23003-192    ;2
 741+ 9B66 1D 59                dw  $591d       ;23005-192    ;3
 742+ 9B68 3B 59                dw  $593b       ;23003-160    ;4
 743+ 9B6A 3D 59                dw  $593d       ;23005-160    ;5
 744+ 9B6C 5B 59                dw  $595b       ;23003-128    ;6
 745+ 9B6E 5D 59                dw  $595d       ;23005-128    ;7
 746+ 9B70 7B 59                dw  $597b       ;23003-96    ;8
 747+ 9B72 7D 59                dw  $597d       ;23005-96    ;9
 748+ 9B74 9B 59                dw  $599b       ;23003-64    ;10
 749+ 9B76 9D 59                dw  $599d       ;23005-64    ;11
 750+ 9B78 BB 59                dw  $59bb       ;23003-32    ;12
 751+ 9B7A BD 59                dw  $59bd       ;23005-32    ;13
 752+ 9B7C DB 59                dw  $59db       ;23003       ;14
 753+ 9B7E DD 59                dw  $59dd       ;23005       ;15
 754+ 9B80              ;22528 to 23296
 755+ 9B80
 756+ 9B80
 757+ 9B80
# file closed: src/5-rd3dmazeV6.asm
 463  9B80                  INCLUDE "6-rd3dmazeV6.asm" ; draw right side of maze
# file opened: src/6-rd3dmazeV6.asm
   1+ 9B80
   2+ 9B80              ;############################################
   3+ 9B80              ;############################################
   4+ 9B80
   5+ 9B80              ;draw section the right side of the screen
   6+ 9B80
   7+ 9B80              ;############################################
   8+ 9B80              ;############################################
   9+ 9B80
  10+ 9B80              draw_right_side:
  11+ 9B80
  12+ 9B80 3A 06 FA                   ld a,(depth)
  13+ 9B83 FE 06                      cp 6
  14+ 9B85 CA A4 9B                   jp z,draw_6r
  15+ 9B88 FE 05        do_5r:        cp 5
  16+ 9B8A CA AE 9B                   jp z,draw_5r
  17+ 9B8D FE 04                      cp 4
  18+ 9B8F CA 6A 9D                   jp z,draw_4r
  19+ 9B92 FE 03                      cp 3
  20+ 9B94 CA 50 9F                   jp z,draw_3r
  21+ 9B97 FE 02                      cp 2
  22+ 9B99 CA D5 A0                   jp z,draw_2r
  23+ 9B9C FE 01                      cp 1
  24+ 9B9E CA 70 A1                   jp z,draw_1r
  25+ 9BA1 C3 06 A2                   jp draw_0r
  26+ 9BA4              ;end of routine
  27+ 9BA4                        ;    ret
  28+ 9BA4
  29+ 9BA4              ;############################################
  30+ 9BA4              ;############################################
  31+ 9BA4
  32+ 9BA4              ;draw section 6 right - well, nothing to do atm!
  33+ 9BA4
  34+ 9BA4              ;############################################
  35+ 9BA4              ;############################################
  36+ 9BA4
  37+ 9BA4              draw_6r:
  38+ 9BA4              ;do nothing on screen as already done via left side draw
  39+ 9BA4              ;just incremement where we are in the maze view
  40+ 9BA4
  41+ 9BA4 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  42+ 9BA7 CD 50 8E             call load_de            ;get left and right and front jump into de reg
  43+ 9BAA 19                   add hl,de               ;Additional add to simulate layer 6
  44+ 9BAB 22 25 FA             ld (furthest_point),hl ;re save it
  45+ 9BAE
  46+ 9BAE              ;############################################
  47+ 9BAE              ;############################################
  48+ 9BAE
  49+ 9BAE              ;draw section 5 right
  50+ 9BAE
  51+ 9BAE              ;############################################
  52+ 9BAE              ;############################################
  53+ 9BAE
  54+ 9BAE              draw_5r:
  55+ 9BAE
  56+ 9BAE              ;ret
  57+ 9BAE              ; hl=maze location being drawn.
  58+ 9BAE              ; now determine what to draw for this section.
  59+ 9BAE
  60+ 9BAE 97                   sub a                   ;make 'a' zero
  61+ 9BAF 3D                   dec a                   ;make it 255 to show nothing to do
  62+ 9BB0 32 27 FA             ld (blockid),a          ;save it for wall drawing
  63+ 9BB3
  64+ 9BB3              ;first we need to decrement how far we can see to the layer
  65+ 9BB3              ;we are working on
  66+ 9BB3
  67+ 9BB3 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  68+ 9BB6 CD 50 8E             call load_de            ;get left and right and front jump into de reg
  69+ 9BB9
  70+ 9BB9 19                   add hl,de               ;Additional add to simulate layer 6
  71+ 9BBA 22 25 FA             ld (furthest_point),hl ;re save it
  72+ 9BBD
  73+ 9BBD 11 01 00             ld de,$0001             ;to move the display position +1
  74+ 9BC0 ED 53 11 FA          ld (var4),de
  75+ 9BC4
  76+ 9BC4              ;move the maze location pointer 1 to the right - used for all
  77+ 9BC4              ;remaining blocks to test if there is a wall there or not.
  78+ 9BC4
  79+ 9BC4 ED 5B 0D FA          ld de,(right)
  80+ 9BC8 19                   add hl,de
  81+ 9BC9 22 15 FA             ld (var6),hl            ;right position in maze from our location
  82+ 9BCC
  83+ 9BCC ED 53 0F FA          ld (var3),de            ;display position +1
  84+ 9BD0 11 79 01             ld   de,$0179           ; offset to row 11 column 10 - left of  centre of the 3d view.
  85+ 9BD3 CD E1 9B             call do_draw_5r
  86+ 9BD6
  87+ 9BD6 97                   sub a                   ;make reg a zero
  88+ 9BD7 32 1E FA             ld (var10),a            ;used in the maze wall drawing at layer 5
  89+ 9BDA 3A 27 FA             ld a,(blockid)          ;get the right hand maze wall location
  90+ 9BDD 3C                   inc a                   ;if blockid was 255 (UNUSED) its will now be zero
  91+ 9BDE                                              ;so
  92+ 9BDE C3 6A 9D             jp draw_4r              ;now draw the 4th level
  93+ 9BE1
  94+ 9BE1              do_draw_5r:
  95+ 9BE1
  96+ 9BE1 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
  97+ 9BE4 19                   add  hl,de
  98+ 9BE5
  99+ 9BE5
 100+ 9BE5              ; draw right half of the display.
 101+ 9BE5
 102+ 9BE5 06 04                ld b,4                  ; count for 3 columns right of our position
 103+ 9BE7 ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
 104+ 9BEB
 105+ 9BEB              ;check if we are at the bottom right of the maze
 106+ 9BEB              ;if so, there is no wall after position 255 so point us to
 107+ 9BEB              ;position 240 and fake the wall!
 108+ 9BEB              ;;;        ld a,e
 109+ 9BEB              ;;;        cp 255
 110+ 9BEB              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 111+ 9BEB              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 112+ 9BEB
 113+ 9BEB
 114+ 9BEB              ;now move the maze pointer right (+1) 1 position
 115+ 9BEB              ;so we can read the type of walls to our left
 116+ 9BEB
 117+ 9BEB              ;cont_3:
 118+ 9BEB              ;*         push hl
 119+ 9BEB              ;*        ld hl,(left)
 120+ 9BEB              ;*        add hl,de
 121+ 9BEB              ;*        ex de,hl
 122+ 9BEB              ;*        pop hl
 123+ 9BEB
 124+ 9BEB EB                   ex   de,hl              ; transfer de to hl.
 125+ 9BEC
 126+ 9BEC              ;       hl = furthest point in the maze
 127+ 9BEC              ;       de = d_file location to store byte to display
 128+ 9BEC
 129+ 9BEC              ;we have to load the first plot position with a corner bit to show
 130+ 9BEC              ;the end of the wall at the position we can see next to the center
 131+ 9BEC              ;plot position on section 6
 132+ 9BEC              ;then, while we draw the other blocks we can see we just want top and
 133+ 9BEC              ;bottom blacks pointed so will use var1 and var 2 to hold the
 134+ 9BEC              ;character block we need to print.
 135+ 9BEC
 136+ 9BEC              ;2020 - we dont need to do this as we are drawing
 137+ 9BEC              ;a side wall and wont see the hashes!
 138+ 9BEC
 139+ 9BEC 3E B4                ld a,_smallwall;_topright5          ; load with top right char $a9
 140+ 9BEE              ;        ld a,'#'
 141+ 9BEE 32 04 FA             ld (var1),a             ;top of mwadd udg
 142+ 9BF1              ;        inc a
 143+ 9BF1              ;        inc a
 144+ 9BF1              ;        ld a,_smallwall;_topright5          ; load with top right char $a9
 145+ 9BF1
 146+ 9BF1 32 05 FA             ld (var2),a             ;ld with bottom right wall udg char
 147+ 9BF4
 148+ 9BF4              loop8r:
 149+ 9BF4 E5                   push hl
 150+ 9BF5
 151+ 9BF5              ;##############################################################################
 152+ 9BF5              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 153+ 9BF5
 154+ 9BF5 3A 28 FA             ld a,(maze_highbyte)
 155+ 9BF8 BC                   cp h                    ;are we at the top part of the maze?
 156+ 9BF9 CA 2C 9C             jp z,cont_5a
 157+ 9BFC                                              ;if we are on a different maze boundary
 158+ 9BFC                                              ;then draw a maze wall as we are the top
 159+ 9BFC                                              ;or north wall but maze data has no
 160+ 9BFC                                              ;wall data.
 161+ 9BFC                                              ;wall data.
 162+ 9BFC              ;4 = 1st left wall
 163+ 9BFC              ;3 = 2nd left wall
 164+ 9BFC              ;2 = 3rd left wall
 165+ 9BFC              ;1 = 4th left wall
 166+ 9BFC
 167+ 9BFC 78                   ld a,b                  ;our current wall counter
 168+ 9BFD FE 04                cp 4
 169+ 9BFF C2 0A 9C             jp nz,b5_1                 ;its not wall 4
 170+ 9C02 3E 01                ld a,1
 171+ 9C04 47                   ld b,a
 172+ 9C05 C6 80                add a,128               ;make sure we set a wall!
 173+ 9C07 C3 62 9C             jp  do_wall5a          ;jump straight to making an end wall
 174+ 9C0A
 175+ 9C0A FE 03        b5_1:   cp 3
 176+ 9C0C C2 17 9C             jp nz,b5_2             ;its not wall 3
 177+ 9C0F 3E 01                ld a,1
 178+ 9C11 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 179+ 9C12 C6 80                add a,128               ;make sure we set a wall!
 180+ 9C14 C3 89 9C             jp do_2ndwall_r        ;draw the 2nd block to the left
 181+ 9C17
 182+ 9C17 FE 02        b5_2:   cp 2
 183+ 9C19 C2 24 9C             jp nz,b5_3             ;its not wall 3
 184+ 9C1C 3E 01                ld a,1
 185+ 9C1E 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 186+ 9C1F C6 80                add a,128               ;make sure we set a wall!
 187+ 9C21 C3 D1 9C             jp do_3rdwall_r       ;draw the 2nd block to the left
 188+ 9C24
 189+ 9C24              ;a must = 1 if we get here.
 190+ 9C24 3E 01        b5_3:   ld a,1
 191+ 9C26 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 192+ 9C27 C6 80                add a,128               ;make sure we set a wall!
 193+ 9C29 C3 1E 9D             jp do_4thwall_r         ;jump straight to making an end wall
 194+ 9C2C
 195+ 9C2C              ;*############################################################################
 196+ 9C2C
 197+ 9C2C              ;now zero out the end wall variable
 198+ 9C2C              cont_5a
 199+ 9C2C 97                   sub a                   ;zero a reg
 200+ 9C2D 32 17 FA             ld (end_wall),a           ;save 0 in the end wall variable
 201+ 9C30
 202+ 9C30
 203+ 9C30              ;check we are at an outside maze wall
 204+ 9C30 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 205+ 9C31 FE 81                cp _mh                  ;maze wall block
 206+ 9C33 20 07                jr nz,cont10            ;its a wall block so need to draw the wall
 207+ 9C35 F5                   push af                 ;save which print location we are at
 208+ 9C36 3E 01                ld a,1                  ;for drawing the maze wall to the screen
 209+ 9C38 32 17 FA             ld (end_wall),a          ;edge
 210+ 9C3B F1                   pop af
 211+ 9C3C              ;        ld b,1                  ;stop drawing more blocks as its an end wall
 212+ 9C3C
 213+ 9C3C 17           cont10: rla
 214+ 9C3D DA 50 9C             jp c,do_wall5r          ;bit 7 (128)
 215+ 9C40
 216+ 9C40              ;        call do_no_wall5r      ; otherwise draw no wall
 217+ 9C40
 218+ 9C40              go_back5r:
 219+ 9C40 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 220+ 9C43 19                   add hl,de               ; holds current screen position
 221+ 9C44 EB                   ex de,hl
 222+ 9C45 E1                   pop hl
 223+ 9C46 D5                   push de
 224+ 9C47 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 225+ 9C4B 19                   add hl,de               ; go left 1 block in the maze
 226+ 9C4C D1                   pop de
 227+ 9C4D 10 A5                djnz loop8r
 228+ 9C4F C9                   ret
 229+ 9C50
 230+ 9C50
 231+ 9C50              do_wall5r:
 232+ 9C50
 233+ 9C50              ;check if b=2 - if so we are not at a wall immediately next to our right
 234+ 9C50              ;nor are we at an and wall. We are drawing the 2nd block to the right
 235+ 9C50              ;b=3 for 3rd block to the right.
 236+ 9C50
 237+ 9C50 78                   ld a,b
 238+ 9C51 D6 01                sub 1
 239+ 9C53 CA 1E 9D             jp z,do_4thwall_r       ;draw the cnd block to the right
 240+ 9C56
 241+ 9C56 78                   ld a,b                  ;b is our loop count
 242+ 9C57 D6 02                sub 2                   ;check if a=2
 243+ 9C59 CA D1 9C             jp z,do_3rdwall_r       ;draw the 2nd block to the right
 244+ 9C5C
 245+ 9C5C 78                   ld a,b
 246+ 9C5D D6 03                sub 3
 247+ 9C5F CA 89 9C             jp z,do_2ndwall_r       ;draw the cnd block to the right
 248+ 9C62
 249+ 9C62              ;b must = 4 if we get here
 250+ 9C62
 251+ 9C62              ;check if bit 2 is set as thats an end
 252+ 9C62              ;and b must then be changed to 1 to stop drawing.
 253+ 9C62
 254+ 9C62              do_wall5a:
 255+ 9C62 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 256+ 9C64 28 04                jr z,draw8r
 257+ 9C66
 258+ 9C66 97                   sub a                  ;we Don't have an outside maze wall (end wall)
 259+ 9C67 32 17 FA             ld (end_wall),a           ;save that we are NOT at an end wall
 260+ 9C6A
 261+ 9C6A D5           draw8r:  push de
 262+ 9C6B 3A 04 FA             ld a,(var1)           ;top of wall udg
 263+ 9C6E 12                   ld (de),a             ; insert the top of the wall.
 264+ 9C6F
 265+ 9C6F 13                   inc de
 266+ 9C70 12                   ld (de),a             ; insert the top of the wall - 2nd right.
 267+ 9C71 1B                   dec de
 268+ 9C72              ;now check if we need to draw a black side on the right
 269+ 9C72              ;by looking to the character to the right of the wall
 270+ 9C72              ;and if there is not a wall already drawn, then draw a
 271+ 9C72              ;black side
 272+ 9C72
 273+ 9C72 3E AA                ld a,_topright5         ;if not, draw the top left side
 274+ 9C74 1B                   dec de                  ;move to the right of the bricks
 275+ 9C75 12                   ld (de),a               ;draw a black and chevron side
 276+ 9C76 13                   inc de                  ;go back 1 space again
 277+ 9C77
 278+ 9C77 21 21 00     _x1r:   ld   hl,$0021           ;jump to the next line below
 279+ 9C7A
 280+ 9C7A 19                   add  hl,de
 281+ 9C7B 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 282+ 9C7E 77                   ld   (hl),a             ; insert the bottom of the wall.
 283+ 9C7F 23                   inc hl
 284+ 9C80 77                   ld   (hl),a             ; insert the top of the wall.
 285+ 9C81 2B                   dec hl
 286+ 9C82 2B                   dec hl                  ;look at the left block
 287+ 9C83 3E AC                ld a,_bottomright5
 288+ 9C85 77                   ld (hl),a
 289+ 9C86
 290+ 9C86 D1           _x2r:   pop de
 291+ 9C87
 292+ 9C87
 293+ 9C87 18 B7                jr go_back5r              ; jump back to main loop
 294+ 9C89
 295+ 9C89
 296+ 9C89              ;************************************
 297+ 9C89
 298+ 9C89              ;draw the wall for 2nd right layer
 299+ 9C89
 300+ 9C89              ;***********************************
 301+ 9C89
 302+ 9C89              do_2ndwall_r:
 303+ 9C89
 304+ 9C89 D5                   push de                 ;save the current acreen position
 305+ 9C8A              ;1st check if theres a wall where we need to draw the black side
 306+ 9C8A 1A                   ld a,(de)
 307+ 9C8B FE B4                cp _smallwall
 308+ 9C8D CA 93 9C             jp z,miss5              ;theres a wall drawn already so do not
 309+ 9C90                                              ;draw any black sides & jump over
 310+ 9C90
 311+ 9C90 3E 91                ld   a,$91;b9              ;top right section 3 (1)
 312+ 9C92 12                   ld   (de),a             ; insert the top of the wall.
 313+ 9C93
 314+ 9C93              ;now draw a red wall to the right of section 2
 315+ 9C93 13           miss5:  inc de
 316+ 9C94 3E B4                ld a,_smallwall
 317+ 9C96 12                   ld (de),a
 318+ 9C97 13                   inc de
 319+ 9C98 12                   ld (de),a               ;draw 2nd one (4 wide)
 320+ 9C99 13                   inc de
 321+ 9C9A 12                   ld (de),a               ;draw 3rd one (4 wide)
 322+ 9C9B              ;        inc de
 323+ 9C9B              ;        ld (de),a               ;draw 4th one (4 wide)
 324+ 9C9B
 325+ 9C9B               ;       dec de
 326+ 9C9B 1B                   dec de
 327+ 9C9C 1B                   dec de
 328+ 9C9D 1B                   dec de
 329+ 9C9E
 330+ 9C9E              ;now check if we need to draw a black side on the right
 331+ 9C9E              ;by looking to the character to the right of the wall
 332+ 9C9E              ;and if there is not a wall already drawn, then draw a
 333+ 9C9E              ;black side
 334+ 9C9E
 335+ 9C9E 1B                   dec de                  ;jump left 1 char in the display
 336+ 9C9F 1A                   ld a,(de)               ;read whats there
 337+ 9CA0 13                   inc de                  ;put our pointer back to the original position
 338+ 9CA1 FE B4                cp _smallwall           ;is it a wall
 339+ 9CA3 CA AB 9C             jp z,_x1r_2               ;if yes, do NOT draw a black side.
 340+ 9CA6 3E 90                ld a,$90             ;draw top right side
 341+ 9CA8 1B                   dec de
 342+ 9CA9 12                   ld (de),a               ;draw middle top bit
 343+ 9CAA 13                   inc de
 344+ 9CAB
 345+ 9CAB              ;top line done
 346+ 9CAB
 347+ 9CAB              ;now do the bottom line underneath
 348+ 9CAB
 349+ 9CAB              ;REMEMBER - 1 block is 2 8 bit squares at the section
 350+ 9CAB              _x1r_2
 351+ 9CAB 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 352+ 9CAE 19                   add  hl,de
 353+ 9CAF
 354+ 9CAF              ;1st check if theres a wall where we need to draw the black side
 355+ 9CAF 7E                   ld a,(hl)
 356+ 9CB0 FE B4                cp _smallwall
 357+ 9CB2 CA B8 9C             jp z, miss51
 358+ 9CB5
 359+ 9CB5 3E 94                ld a,$94                ;draw our rightmost wall bottom.
 360+ 9CB7 77                   ld   (hl),a             ; insert the bottom of the wall.
 361+ 9CB8
 362+ 9CB8              ;now draw a red wall to the right of section 2
 363+ 9CB8 23           miss51: inc hl
 364+ 9CB9 3E B4                ld a,_smallwall
 365+ 9CBB 77                   ld (hl),a
 366+ 9CBC 23                   inc hl
 367+ 9CBD 77                   ld (hl),a
 368+ 9CBE 23                   inc hl
 369+ 9CBF 77                   ld (hl),a               ;draw 3rd one (3 wide)
 370+ 9CC0 2B                   dec hl
 371+ 9CC1 2B                   dec hl
 372+ 9CC2 2B                   dec hl
 373+ 9CC3
 374+ 9CC3              ;now check if we need to draw a black side on the left of the lower half wall
 375+ 9CC3              ;do this by checking if the next block is already a wall just like above
 376+ 9CC3
 377+ 9CC3 2B                   dec hl      ;look at the left block
 378+ 9CC4 7E                   ld a,(hl)
 379+ 9CC5 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 380+ 9CC7 CA CD 9C             jp z,_x2r_2
 381+ 9CCA 3E 93                ld a,$93            ;draw leftmost bottom
 382+ 9CCC 77                   ld (hl),a
 383+ 9CCD
 384+ 9CCD D1           _x2r_2  pop de
 385+ 9CCE C3 40 9C             jp go_back5r              ; jump back to main loop
 386+ 9CD1
 387+ 9CD1              ;##########################################
 388+ 9CD1
 389+ 9CD1              ;draw the wall for 3rd right layer
 390+ 9CD1
 391+ 9CD1              ;##########################################
 392+ 9CD1
 393+ 9CD1              do_3rdwall_r:
 394+ 9CD1
 395+ 9CD1 D5                   push de                 ;save the current acreen position
 396+ 9CD2              ;1st check if theres a wall where we need to draw the black side
 397+ 9CD2 13                   inc de                  ;move our start location 3 spaces right
 398+ 9CD3 13                   inc de
 399+ 9CD4 13                   inc de
 400+ 9CD5
 401+ 9CD5              ;now draw a red wall to the right of section 2,  top half
 402+ 9CD5
 403+ 9CD5 3E B4                ld a,_smallwall;$8e
 404+ 9CD7 12                   ld (de),a
 405+ 9CD8 13                   inc de
 406+ 9CD9 12                   ld (de),a
 407+ 9CDA 13                   inc de
 408+ 9CDB 12                   ld (de),a
 409+ 9CDC 13                   inc de
 410+ 9CDD 12                   ld (de),a               ;draw 4th one (4 wide)
 411+ 9CDE
 412+ 9CDE 1B                   dec de                  ;move print position back for black wall
 413+ 9CDF 1B                   dec de
 414+ 9CE0 1B                   dec de
 415+ 9CE1
 416+ 9CE1              ;now check if we need to draw a black side on the right
 417+ 9CE1              ;by looking to the character to the right of the wall
 418+ 9CE1              ;and if there is not a wall already drawn, then draw a
 419+ 9CE1              ;black side
 420+ 9CE1
 421+ 9CE1 1B                   dec de                  ;jump left 1 char in the display
 422+ 9CE2 1A                   ld a,(de)               ;read whats there
 423+ 9CE3 13                   inc de                  ;put our pointer back to the original position
 424+ 9CE4 FE B4                cp _smallwall           ;is it a wall
 425+ 9CE6 CA F6 9C             jp z,_x1r_3               ;if yes, do NOT draw a black side.
 426+ 9CE9 3E B9                ld a,$b9             ;draw top right side
 427+ 9CEB 1B                   dec de
 428+ 9CEC 1B                   dec de
 429+ 9CED 1B                   dec de
 430+ 9CEE 12                   ld (de),a
 431+ 9CEF 13                   inc de
 432+ 9CF0 3C                   inc a
 433+ 9CF1 12                   ld (de),a
 434+ 9CF2 3C                   inc a
 435+ 9CF3 13                   inc de
 436+ 9CF4 12                   ld (de),a
 437+ 9CF5
 438+ 9CF5 13                    inc de
 439+ 9CF6                                              ;to wall start
 440+ 9CF6
 441+ 9CF6              ;top line done
 442+ 9CF6
 443+ 9CF6              ;now do the bottom line underneath
 444+ 9CF6
 445+ 9CF6              _x1r_3
 446+ 9CF6 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 447+ 9CF9 19                   add  hl,de
 448+ 9CFA
 449+ 9CFA 3E B4                ld a,_smallwall;$8e
 450+ 9CFC 77                   ld (hl),a
 451+ 9CFD 23                   inc hl
 452+ 9CFE 77                   ld (hl),a
 453+ 9CFF 23                   inc hl
 454+ 9D00 77                   ld (hl),a
 455+ 9D01 23                   inc hl
 456+ 9D02 77                   ld (hl),a
 457+ 9D03
 458+ 9D03 2B                   dec hl
 459+ 9D04 2B                   dec hl
 460+ 9D05 2B                   dec hl
 461+ 9D06
 462+ 9D06
 463+ 9D06              ;now check if we need to draw a black side on the left of the lower half wall
 464+ 9D06              ;do this by checking if the next block is already a wall just like above
 465+ 9D06
 466+ 9D06 2B                   dec hl      ;look at the left block
 467+ 9D07 7E                   ld a,(hl)
 468+ 9D08 23                   inc hl
 469+ 9D09 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 470+ 9D0B CA 1A 9D             jp z,_x2r_3
 471+ 9D0E 3E BD                ld a,$bd            ;draw leftmost bottom
 472+ 9D10 2B                   dec hl
 473+ 9D11 2B                   dec hl
 474+ 9D12 2B                   dec hl
 475+ 9D13
 476+ 9D13 77                   ld (hl),a
 477+ 9D14 23                   inc hl
 478+ 9D15 3C                   inc a
 479+ 9D16 77                   ld (hl),a
 480+ 9D17 23                   inc hl
 481+ 9D18 3C                   inc a
 482+ 9D19 77                   ld (hl),a
 483+ 9D1A
 484+ 9D1A D1           _x2r_3  pop de
 485+ 9D1B C3 40 9C             jp go_back5r              ; jump back to main loop
 486+ 9D1E
 487+ 9D1E              ;##########################################
 488+ 9D1E
 489+ 9D1E              ;draw the wall for 4th (and last!) right layer
 490+ 9D1E
 491+ 9D1E              ;##########################################
 492+ 9D1E
 493+ 9D1E              do_4thwall_r:
 494+ 9D1E
 495+ 9D1E              ;draw top half of wall
 496+ 9D1E
 497+ 9D1E D5                   push de                 ;save the current acreen position
 498+ 9D1F              ;1st check if theres a wall where we need to draw the black side
 499+ 9D1F 13                   inc de
 500+ 9D20 13                   inc de
 501+ 9D21 13                   inc de
 502+ 9D22 13                   inc de
 503+ 9D23 13                   inc de
 504+ 9D24 13                   inc de
 505+ 9D25              ;now draw a red wall to the right of section 2,  top half
 506+ 9D25
 507+ 9D25 3E B4                ld a,_smallwall;$8d
 508+ 9D27 12                   ld (de),a
 509+ 9D28 13                   inc de
 510+ 9D29 12                   ld (de),a
 511+ 9D2A
 512+ 9D2A
 513+ 9D2A 1B                   dec de                  ;move print position back for black wall
 514+ 9D2B
 515+ 9D2B              ;now check if we need to draw a black side on the right
 516+ 9D2B              ;by looking to the character to the right of the wall
 517+ 9D2B              ;and if there is not a wall already drawn, then draw a
 518+ 9D2B              ;black side
 519+ 9D2B
 520+ 9D2B 1B                   dec de                  ;jump left 1 char in the display
 521+ 9D2C 1A                   ld a,(de)               ;read whats there
 522+ 9D2D 13                   inc de                  ;put our pointer back to the original position
 523+ 9D2E FE B4                cp _smallwall;$8e                 ;is it a wall
 524+ 9D30 CA 44 9D             jp z,_x1r_31               ;if yes, do NOT draw a black side.
 525+ 9D33 3E B9                ld a,$b9              ;draw top right side
 526+ 9D35 1B                   dec de
 527+ 9D36 1B                   dec de
 528+ 9D37 1B                   dec de
 529+ 9D38 1B                   dec de
 530+ 9D39 12                   ld (de),a           ;draw 4 black sides
 531+ 9D3A 13                   inc de
 532+ 9D3B 3C                   inc a
 533+ 9D3C 12                   ld (de),a
 534+ 9D3D 3C                   inc a
 535+ 9D3E 13                   inc de
 536+ 9D3F 12                   ld (de),a
 537+ 9D40 3C                   inc a
 538+ 9D41 13                   inc de
 539+ 9D42 12                   ld (de),a
 540+ 9D43
 541+ 9D43 13                   inc de              ;move to wall start
 542+ 9D44
 543+ 9D44
 544+ 9D44              ;top line done
 545+ 9D44
 546+ 9D44              ;now do the bottom line underneath
 547+ 9D44
 548+ 9D44              _x1r_31
 549+ 9D44 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 9D47 19                   add  hl,de
 551+ 9D48
 552+ 9D48 3E B4                ld a,_smallwall;$8d
 553+ 9D4A 77                   ld (hl),a
 554+ 9D4B 23                   inc hl
 555+ 9D4C 77                   ld (hl),a
 556+ 9D4D
 557+ 9D4D 2B                   dec hl
 558+ 9D4E
 559+ 9D4E
 560+ 9D4E              ;now check if we need to draw a black side on the left of the lower half wall
 561+ 9D4E              ;do this by checking if the next block is already a wall just like above
 562+ 9D4E
 563+ 9D4E 2B                   dec hl      ;look at the left block
 564+ 9D4F 7E                   ld a,(hl)
 565+ 9D50 23                   inc hl
 566+ 9D51 FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 567+ 9D53 CA 66 9D             jp z,_x2r_31
 568+ 9D56
 569+ 9D56 3E BD                ld a,$bd            ;draw leftmost bottom
 570+ 9D58 2B                   dec hl
 571+ 9D59 2B                   dec hl
 572+ 9D5A 2B                   dec hl
 573+ 9D5B 2B                   dec hl
 574+ 9D5C
 575+ 9D5C 77                   ld (hl),a
 576+ 9D5D 23                   inc hl
 577+ 9D5E 3C                   inc a
 578+ 9D5F 77                   ld (hl),a
 579+ 9D60 23                   inc hl
 580+ 9D61 3C                   inc a
 581+ 9D62 77                   ld (hl),a
 582+ 9D63 23                   inc hl
 583+ 9D64 3C                   inc a
 584+ 9D65 77                   ld (hl),a
 585+ 9D66
 586+ 9D66 D1           _x2r_31  pop de
 587+ 9D67 C3 40 9C             jp go_back5r              ; jump back to main loop
 588+ 9D6A
 589+ 9D6A              ;############################################
 590+ 9D6A              ;############################################
 591+ 9D6A              ;draw layer 4 right
 592+ 9D6A              ;############################################
 593+ 9D6A              ;############################################
 594+ 9D6A
 595+ 9D6A              draw_4r
 596+ 9D6A
 597+ 9D6A
 598+ 9D6A              ; jump straight into sjasmplus debugger
 599+ 9D6A              ;        BREAK
 600+ 9D6A              ;        ret
 601+ 9D6A
 602+ 9D6A
 603+ 9D6A              ; hl=maze location being drawn.
 604+ 9D6A              ; now determine what to draw for this section.
 605+ 9D6A
 606+ 9D6A
 607+ 9D6A 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 608+ 9D6D
 609+ 9D6D CD 50 8E             call load_de            ;get left and right and front jump into de reg
 610+ 9D70
 611+ 9D70 19                   add hl,de               ;jump backwards along the user view 1 space
 612+ 9D71 22 25 FA             ld (furthest_point),hl  ;load our last furthest point
 613+ 9D74
 614+ 9D74              ;we should also move our pointer left to read where the walls are.
 615+ 9D74              ;this will be from this point onwards as we can see the blocks more fully
 616+ 9D74
 617+ 9D74              ;        ld de,(right)
 618+ 9D74              ;        add hl,de               ;should be 1 place to the left now
 619+ 9D74              ;        ld (furthest_point),hl ;re save it
 620+ 9D74
 621+ 9D74 11 01 00             ld de,$0001 ;$0003             ;to move the printed position +3
 622+ 9D77                                              ;not including black wall bit
 623+ 9D77 ED 53 11 FA          ld (var4),de
 624+ 9D7B
 625+ 9D7B
 626+ 9D7B              ;we need to move pointer 1 to the right for wall checking
 627+ 9D7B ED 5B 0D FA          ld de,(right)
 628+ 9D7F 19                   add hl,de
 629+ 9D80 22 15 FA             ld (var6),hl
 630+ 9D83
 631+ 9D83 ED 53 0F FA          ld (var3),de
 632+ 9D87 11 59 01             ld   de,$0159;159       ; offset to row 10 column 19 - right of  centre of the 3d view.
 633+ 9D8A CD 90 9D             call do_draw_4r
 634+ 9D8D
 635+ 9D8D
 636+ 9D8D              ;ret
 637+ 9D8D C3 50 9F             jp draw_3r           ;now draw the 4th level
 638+ 9D90
 639+ 9D90              do_draw_4r:
 640+ 9D90
 641+ 9D90 2A 7E 81             ld hl,(d_file)        ; fetch the location of the display file.
 642+ 9D93 19                   add hl,de
 643+ 9D94 06 04                ld b,4                 ; count for max of 4 blocks right of maze position
 644+ 9D96                                              ; 0 is not counted so loops 3 times
 645+ 9D96 ED 5B 15 FA          ld de,(var6)
 646+ 9D9A EB                   ex de,hl              ; transfer de to hl.
 647+ 9D9B
 648+ 9D9B              loop9r:
 649+ 9D9B E5                   push hl
 650+ 9D9C
 651+ 9D9C              ;*#########################################
 652+ 9D9C              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 653+ 9D9C
 654+ 9D9C 3A 28 FA             ld a,(maze_highbyte)
 655+ 9D9F BC                   cp h                    ;are we at the top part of the maze?
 656+ 9DA0 CA D3 9D             jp z,cont_4a
 657+ 9DA3                                              ;if we are on a different maze boundary
 658+ 9DA3                                              ;then draw a maze wall as we are the top
 659+ 9DA3                                              ;or north wall but maze data has no
 660+ 9DA3                                              ;wall data.
 661+ 9DA3              ;4 = 1st right wall
 662+ 9DA3              ;3 = 2nd right wall
 663+ 9DA3              ;2 = 3rd right wall
 664+ 9DA3              ;1 = 4th right wall
 665+ 9DA3
 666+ 9DA3 78                   ld a,b                  ;our current wall counter
 667+ 9DA4 FE 04                cp 4
 668+ 9DA6 C2 B1 9D             jp nz,b4                 ;its not wall 2
 669+ 9DA9 3E 01                ld a,1
 670+ 9DAB 47                   ld b,a
 671+ 9DAC C6 80                add a,128               ;make sure we set a wall!
 672+ 9DAE C3 02 9E             jp draw_9r             ;jump straight to making an end wall
 673+ 9DB1
 674+ 9DB1 FE 03        b4:     cp 3
 675+ 9DB3 C2 BE 9D             jp nz,b4_1                 ;its not wall 2
 676+ 9DB6 3E 01                ld a,1
 677+ 9DB8 47                   ld b,a
 678+ 9DB9 C6 80                add a,128               ;make sure we set a wall!
 679+ 9DBB C3 3F 9E             jp draw_9r_2             ;jump straight to making an end wall
 680+ 9DBE
 681+ 9DBE FE 02        b4_1:   cp 2
 682+ 9DC0 C2 CB 9D             jp nz,b4_2                 ;its not wall 2
 683+ 9DC3 3E 01                ld a,1
 684+ 9DC5 47                   ld b,a
 685+ 9DC6 C6 80                add a,128               ;make sure we set a wall!
 686+ 9DC8 C3 AF 9E             jp draw_9r_3             ;jump straight to making an end wall
 687+ 9DCB
 688+ 9DCB 3E 01        b4_2:   ld a,1
 689+ 9DCD 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 690+ 9DCE C6 80                add a,128               ;make sure we set a wall!
 691+ 9DD0 C3 10 9F             jp draw_9r_4	       	;draw the 2nd wall to the right
 692+ 9DD3
 693+ 9DD3              ;*#########################################
 694+ 9DD3              cont_4a:
 695+ 9DD3 7E                   ld a,(hl)
 696+ 9DD4 17                   rla
 697+ 9DD5 DA E8 9D             jp c,do_wall4r            ;bit 7 (128)
 698+ 9DD8
 699+ 9DD8
 700+ 9DD8              go_back4r:
 701+ 9DD8 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 702+ 9DDB                                              ; holds current screen position
 703+ 9DDB 19                   add hl,de
 704+ 9DDC EB                   ex de,hl
 705+ 9DDD E1                   pop hl
 706+ 9DDE D5                   push de
 707+ 9DDF ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 708+ 9DE3 19                   add hl,de               ; move to the start of the next block to print
 709+ 9DE4                                              ;we need to move back 4 blocks
 710+ 9DE4                                              ;as the first block obscures the view
 711+ 9DE4                                              ;of the next 3 blocks.
 712+ 9DE4 D1                   pop de
 713+ 9DE5 10 B4                djnz loop9r
 714+ 9DE7 C9                   ret
 715+ 9DE8              ;now do the 4th position
 716+ 9DE8
 717+ 9DE8              do_wall4r:
 718+ 9DE8              do_wall4a:
 719+ 9DE8
 720+ 9DE8              ;now draw the wall based on bc count
 721+ 9DE8
 722+ 9DE8              wall4_start:
 723+ 9DE8
 724+ 9DE8 78                   ld a,b
 725+ 9DE9 D6 04                sub 4                   ;4 = 1st wall to the right
 726+ 9DEB CA 02 9E             jp z,draw_9r
 727+ 9DEE
 728+ 9DEE 78                   ld a,b
 729+ 9DEF D6 03                sub 3                   ;3 = 2nd wall immediately to the right
 730+ 9DF1 CA 3F 9E             jp z,draw_9r_2
 731+ 9DF4
 732+ 9DF4 78                   ld a,b
 733+ 9DF5 D6 02                sub 2                   ;2 = 3rd wall immediately to the right
 734+ 9DF7 CA AF 9E             jp z,draw_9r_3
 735+ 9DFA
 736+ 9DFA 78                   ld a,b
 737+ 9DFB D6 01                sub 1                   ;1 = 4th wall immediately to the right
 738+ 9DFD CA 10 9F             jp z,draw_9r_4
 739+ 9E00
 740+ 9E00 E1                   pop hl
 741+ 9E01 C9                   ret
 742+ 9E02
 743+ 9E02
 744+ 9E02              draw_9r:
 745+ 9E02 C5                   push bc
 746+ 9E03 D5                   push de                 ;save our display pointer
 747+ 9E04 06 04                ld b,4                  ;block is 4 blocks high
 748+ 9E06 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 749+ 9E09 3E B7        loop10r:ld   a,_mediumwall_1      ;grey sides facing us
 750+ 9E0B 12                   ld   (de),a             ; insert thepart of the wall.
 751+ 9E0C 13                   inc de
 752+ 9E0D 12                   ld (de),a               ;put grey side to our right
 753+ 9E0E 13                   inc de
 754+ 9E0F 12                   ld (de),a
 755+ 9E10 13                   inc de
 756+ 9E11 12                   ld (de),a
 757+ 9E12 1B                   dec de
 758+ 9E13 1B                   dec de                  ;go left 1 again
 759+ 9E14 1B                   dec de
 760+ 9E15 EB                   ex de,hl
 761+ 9E16 19                   add  hl,de              ; advance to the next row of the display file.
 762+ 9E17 EB                   ex de,hl
 763+ 9E18 10 EF                djnz loop10r             ;do this 3 times
 764+ 9E1A
 765+ 9E1A                      ;now draw the blank face
 766+ 9E1A D1                   pop de                  ;back to our original position
 767+ 9E1B D5                   push de
 768+ 9E1C 1B                   dec de                  ;move left 1 space in the display
 769+ 9E1D
 770+ 9E1D              ;check if the char to our right is a wall block.
 771+ 9E1D              ;if so, do not draw a black face as we need to hide it or it will
 772+ 9E1D              ;ovewrite the already drawn block
 773+ 9E1D
 774+ 9E1D 1A                   ld a,(de)
 775+ 9E1E FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 776+ 9E20 C2 27 9E             jp nz,cont_1r            ;there is no block so draw black edge
 777+ 9E23 D1                   pop de
 778+ 9E24 C1                   pop bc
 779+ 9E25 18 B1                jr go_back4r             ;otherwise quit this draw
 780+ 9E27
 781+ 9E27 EB           cont_1r ex  de,hl
 782+ 9E28 11 21 00             ld de,$0021
 783+ 9E2B 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
 784+ 9E2D 77                   ld  (hl),a
 785+ 9E2E 19                   add hl,de
 786+ 9E2F 3E AF                ld  a,_black
 787+ 9E31 77                   ld  (hl),a
 788+ 9E32 19                   add hl,de
 789+ 9E33 3E AF                ld  a,_black
 790+ 9E35 77                   ld  (hl),a
 791+ 9E36 19                   add hl,de
 792+ 9E37
 793+ 9E37 77                   ld  (hl),a
 794+ 9E38 3E B1                ld  a,_topcorner2
 795+ 9E3A 77                   ld  (hl),a
 796+ 9E3B D1                   pop de
 797+ 9E3C C1                   pop bc
 798+ 9E3D 18 99                jr go_back4r              ; jump back to main loop
 799+ 9E3F
 800+ 9E3F              ;************************************
 801+ 9E3F              ;*Draw the 2nd right block of section 4
 802+ 9E3F              ;************************************
 803+ 9E3F
 804+ 9E3F              draw_9r_2:
 805+ 9E3F C5                   push bc
 806+ 9E40 21 03 00             ld hl,3                 ;move display 3 chars to the right
 807+ 9E43 19                   add hl,de
 808+ 9E44 EB                   ex de,hl
 809+ 9E45 D5                   push de
 810+ 9E46
 811+ 9E46              ;now draw the 2nd wall itself
 812+ 9E46 06 04                ld b,4                  ;block is 4 blocks high
 813+ 9E48 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 814+ 9E4B 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 815+ 9E4D
 816+ 9E4D              loop10r_2:
 817+ 9E4D 12                   ld (de),a             ; insert thepart of the wall.
 818+ 9E4E 13                   inc de
 819+ 9E4F 12                   ld (de),a               ;put grey side to our right
 820+ 9E50 13                   inc de
 821+ 9E51 12                   ld (de),a
 822+ 9E52 13                   inc de
 823+ 9E53 12                   ld (de),a
 824+ 9E54 13                   inc de
 825+ 9E55 12                   ld (de),a
 826+ 9E56 1B                   dec de
 827+ 9E57 1B                   dec de
 828+ 9E58 1B                   dec de
 829+ 9E59 1B                   dec de                  ;go left 1 again
 830+ 9E5A EB                   ex de,hl
 831+ 9E5B 19                   add  hl,de              ; advance to the next row of the display file.
 832+ 9E5C EB                   ex de,hl
 833+ 9E5D 10 EE                djnz loop10r_2             ;do this 3 times
 834+ 9E5F
 835+ 9E5F                      ;now draw the blank face
 836+ 9E5F D1                   pop de                  ;back to our original position
 837+ 9E60 D5                   push de
 838+ 9E61 1B                   dec de                  ;move left 1 space in the display
 839+ 9E62
 840+ 9E62              ;check if the char to our right is a wall block.
 841+ 9E62              ;if so, do not draw a black face as we need to hide it or it will
 842+ 9E62              ;ovewrite the already drawn block
 843+ 9E62
 844+ 9E62 1A                   ld a,(de)
 845+ 9E63 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 846+ 9E65 C2 6D 9E             jp nz,cont_1r_2           ;there is no block so draw black edge
 847+ 9E68 D1                   pop de
 848+ 9E69 C1                   pop bc
 849+ 9E6A C3 D8 9D             jp go_back4r             ;otherwise quit this draw
 850+ 9E6D
 851+ 9E6D              cont_1r_2:
 852+ 9E6D EB                   ex  de,hl
 853+ 9E6E 11 21 00             ld de,$0021
 854+ 9E71
 855+ 9E71              ;need to loop 2 times drawing 2 lots of 3 top
 856+ 9E71              ;& bottom chars- move down 1after 1st 3 top chars drawn
 857+ 9E71              ;
 858+ 9E71
 859+ 9E71 3E 02                ld a,2
 860+ 9E73 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 861+ 9E76
 862+ 9E76              ;loop for 2 black wall columns
 863+ 9E76 3E 03                ld a,3                  ;column start height
 864+ 9E78 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
 865+ 9E7B
 866+ 9E7B 06 03                ld b,3                  ;loop 3 times for 3 columns
 867+ 9E7D 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 868+ 9E80 3E 91                ld a,$91
 869+ 9E82 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 870+ 9E85
 871+ 9E85              loop10br_2:
 872+ 9E85 C5                   push bc                 ;save count
 873+ 9E86 3A 04 FA             ld a,(var1)             ;column height
 874+ 9E89 47                   ld b,a                  ;holds the column height in chars
 875+ 9E8A 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 876+ 9E8D F5                   push af                 ;save a for bottom corners
 877+ 9E8E 77                   ld  (hl),a
 878+ 9E8F
 879+ 9E8F              loop10ar_2:
 880+ 9E8F 19                   add hl,de
 881+ 9E90 3E AF                ld  a,_black            ;black wall fill
 882+ 9E92 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 883+ 9E93 10 FA                djnz loop10ar_2
 884+ 9E95
 885+ 9E95 F1                   pop af                  ;retrivetop corner
 886+ 9E96 3D                   dec a                   ;prep for next top corner
 887+ 9E97 32 05 FA             ld (var2),a             ;re-save it for next corner
 888+ 9E9A C6 04                add a,4                 ;get the correct char to print
 889+ 9E9C 77                   ld  (hl),a              ;draw the bottom of the wall
 890+ 9E9D
 891+ 9E9D                      ;now change column count
 892+ 9E9D 3A 04 FA             ld a,(var1)
 893+ 9EA0 C1                   pop bc
 894+ 9EA1
 895+ 9EA1 2A 13 FA             ld hl,(var5)
 896+ 9EA4 2B                   dec hl                  ;move print position to the left
 897+ 9EA5 22 13 FA             ld (var5),hl
 898+ 9EA8
 899+ 9EA8 10 DB                djnz loop10br_2
 900+ 9EAA
 901+ 9EAA              exit_1_2:
 902+ 9EAA D1                   pop de
 903+ 9EAB C1                   pop bc
 904+ 9EAC C3 D8 9D             jp go_back4r              ; jump back to main loop
 905+ 9EAF
 906+ 9EAF              ;#############################################
 907+ 9EAF              ;*Draw the 3rd right block of section 4
 908+ 9EAF              ;#############################################
 909+ 9EAF
 910+ 9EAF              draw_9r_3:
 911+ 9EAF
 912+ 9EAF C5                   push bc
 913+ 9EB0 D5                   push de                 ;save our display pointer
 914+ 9EB1 06 04                ld b,4                  ;block is 4 blocks high
 915+ 9EB3 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
 916+ 9EB6 11 62 C1             ld de,$C162             ;start of drawing
 917+ 9EB9
 918+ 9EB9              loop10r_3:
 919+ 9EB9 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 920+ 9EBB 12                   ld (de),a               ; insert thepart of the wall.
 921+ 9EBC EB                   ex de,hl
 922+ 9EBD 19                   add  hl,de              ; advance to the next row of the display file.
 923+ 9EBE EB                   ex de,hl
 924+ 9EBF 10 F8                djnz loop10r_3          ;do this 3 times
 925+ 9EC1
 926+ 9EC1                      ;now draw the blank face
 927+ 9EC1 D1                   pop de                  ;back to our original position
 928+ 9EC2 D5                   push de
 929+ 9EC3
 930+ 9EC3              ;check if the char to our right is a wall block.
 931+ 9EC3              ;if so, do not draw a black face as we need to hide it or it will
 932+ 9EC3              ;ovewrite the already drawn block
 933+ 9EC3
 934+ 9EC3
 935+ 9EC3 3A 61 C1             ld a,($c161);(de)
 936+ 9EC6 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 937+ 9EC8 C2 D0 9E             jp nz,cont_1r_3            ;there is no block so draw black edge
 938+ 9ECB
 939+ 9ECB D1                   pop de
 940+ 9ECC C1                   pop bc
 941+ 9ECD C3 D8 9D             jp go_back4r             ;otherwise quit this draw
 942+ 9ED0
 943+ 9ED0              cont_1r_3:
 944+ 9ED0 EB                   ex  de,hl
 945+ 9ED1 11 21 00             ld de,$0021
 946+ 9ED4 21 61 C1             ld hl,$c161
 947+ 9ED7
 948+ 9ED7              ;need to loop 2 times drawing 2 lots of 3 top
 949+ 9ED7              ;& bottom chars- move down 1after 1st 3 top chars drawn
 950+ 9ED7              ;
 951+ 9ED7
 952+ 9ED7              ;loop for 2 black wall columns
 953+ 9ED7 3E 03                ld a,3                  ;column start height
 954+ 9ED9 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 955+ 9EDC
 956+ 9EDC 06 05                ld b,5                  ;loop 5 times for 5 columns
 957+ 9EDE 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 958+ 9EE1 3E CD                ld a,$cd ;91
 959+ 9EE3 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 960+ 9EE6
 961+ 9EE6              loop10br_2a:
 962+ 9EE6 C5                   push bc                 ;save count
 963+ 9EE7 3A 04 FA             ld a,(var1)             ;column height
 964+ 9EEA 47                   ld b,a                  ;holds the column height in chars
 965+ 9EEB 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 966+ 9EEE F5                   push af                 ;save a for bottom corners
 967+ 9EEF 77                   ld  (hl),a
 968+ 9EF0
 969+ 9EF0              loop10ar_2a:
 970+ 9EF0 19                   add hl,de
 971+ 9EF1 3E AF                ld  a,_black            ;black wall fill
 972+ 9EF3 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 973+ 9EF4 10 FA                djnz loop10ar_2a
 974+ 9EF6
 975+ 9EF6 F1                   pop af                  ;retrivetop corner
 976+ 9EF7 3D                   dec a                   ;prep for next top corner
 977+ 9EF8 32 05 FA             ld (var2),a             ;re-save it for next corner
 978+ 9EFB C6 06                add a,6                 ;get the correct char to print
 979+ 9EFD 77                   ld  (hl),a              ;draw the bottom of the wall
 980+ 9EFE
 981+ 9EFE                      ;now change column count
 982+ 9EFE 3A 04 FA             ld a,(var1)
 983+ 9F01 C1                   pop bc
 984+ 9F02
 985+ 9F02 2A 13 FA             ld hl,(var5)
 986+ 9F05 2B                   dec hl                  ;move print position to the left
 987+ 9F06 22 13 FA             ld (var5),hl
 988+ 9F09
 989+ 9F09 10 DB                djnz loop10br_2a
 990+ 9F0B
 991+ 9F0B D1                   pop de
 992+ 9F0C C1                   pop bc
 993+ 9F0D C3 D8 9D             jp go_back4r              ; jump back to main loop
 994+ 9F10
 995+ 9F10              ;#############################################
 996+ 9F10              ;*Draw the 4th RIGHT block of section 4
 997+ 9F10              ;#############################################
 998+ 9F10
 999+ 9F10              ; we only need to draw up to 2 columns of black sides.
1000+ 9F10
1001+ 9F10              draw_9r_4:
1002+ 9F10 C5                   push bc
1003+ 9F11 D5                   push de                 ;save our display pointer
1004+ 9F12
1005+ 9F12              ;check if the char to our left is a wall block.
1006+ 9F12              ;if so, do not draw a black face as we need to hide it or it will
1007+ 9F12              ;ovewrite the already drawn block
1008+ 9F12
1009+ 9F12 21 62 C1             ld hl,$C18C+20-30-32              ;start of drawing
1010+ 9F15 7E                   ld a,(hl)
1011+ 9F16 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1012+ 9F18 C2 20 9F             jp nz,cont_3r            ;there is no block so draw black edge
1013+ 9F1B
1014+ 9F1B D1                   pop de
1015+ 9F1C C1                   pop bc
1016+ 9F1D C3 D8 9D             jp go_back4r             ;otherwise quit this draw
1017+ 9F20
1018+ 9F20              cont_3r:
1019+ 9F20 11 21 00             ld de,33                ;to jump to next line below
1020+ 9F23 3E CA                ld a,$ca                ;top of the wall
1021+ 9F25 E5                   push hl                 ;save for drawing 2nd black wall
1022+ 9F26 77                   ld (hl),a               ;to cover up wall 5
1023+ 9F27 19                   add hl,de               ;jump to next line
1024+ 9F28 3E AF                ld a,_black
1025+ 9F2A 77                   ld (hl),a
1026+ 9F2B 19                   add hl,de
1027+ 9F2C 77                   ld (hl),a
1028+ 9F2D 19                   add hl,de
1029+ 9F2E 3E CF                ld a,$cf                ;draw bottom of the line
1030+ 9F30 77                   ld (hl),a
1031+ 9F31
1032+ 9F31              ;now check if we need to cover wall 5 with a 2nd black line to the left
1033+ 9F31              ;hl points to top of the 4 blocks
1034+ 9F31 E1                   pop hl                  ;restore our pointer in char ram
1035+ 9F32 2B                   dec hl                  ;go left 1 place
1036+ 9F33 E5                   push hl
1037+ 9F34 19                   add hl,de               ;now we are at the wall 5 top position
1038+ 9F35 7E                   ld a,(hl)
1039+ 9F36 FE B4                cp _smallwall
1040+ 9F38 E1                   pop hl
1041+ 9F39 20 0B                jr nz,exit3r
1042+ 9F3B              ;draw the second wall over section 5 wall
1043+ 9F3B 36 C9                ld (hl),$c9             ;top of the wall
1044+ 9F3D 19                   add hl,de
1045+ 9F3E 36 AF                ld (hl),_black
1046+ 9F40 19                   add hl,de
1047+ 9F41 36 AF                ld (hl),_black
1048+ 9F43 19                   add hl,de
1049+ 9F44 36 CE                ld (hl),$ce             ;bottom of the wall
1050+ 9F46
1051+ 9F46 D1           exit3r:  pop de                  ;now exit
1052+ 9F47 C1                   pop bc
1053+ 9F48 C3 D8 9D             jp go_back4r
1054+ 9F4B
1055+ 9F4B
1056+ 9F4B              ;draw 2 black walls across 1 line
1057+ 9F4B              black_wall_2:
1058+ 9F4B 19                   add hl,de      ;jump 1 line below
1059+ 9F4C 77                   ld (hl),a
1060+ 9F4D 23                   inc hl
1061+ 9F4E 77                   ld (hl),a
1062+ 9F4F C9                   ret
1063+ 9F50
1064+ 9F50
1065+ 9F50              ;#############################################
1066+ 9F50              ;#############################################
1067+ 9F50              ;# draw wall 3 right
1068+ 9F50              ;#############################################
1069+ 9F50              ;#############################################
1070+ 9F50
1071+ 9F50              draw_3r:
1072+ 9F50
1073+ 9F50              ; hl=maze location being drawn.
1074+ 9F50              ; now determine what to draw for this section.
1075+ 9F50
1076+ 9F50
1077+ 9F50 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1078+ 9F53
1079+ 9F53 CD 50 8E             call load_de            ;get left and right and front jump into de reg
1080+ 9F56
1081+ 9F56 19                   add hl,de               ;jump backwards along the user view 1 space
1082+ 9F57 22 25 FA             ld (furthest_point),hl  ;re save it
1083+ 9F5A
1084+ 9F5A 11 01 00             ld de,$0001             ;to move the display position +1
1085+ 9F5D ED 53 11 FA          ld (var4),de
1086+ 9F61
1087+ 9F61 ED 5B 0D FA          ld de,(right)
1088+ 9F65
1089+ 9F65 19                   add hl,de
1090+ 9F66 22 15 FA             ld (var6),hl
1091+ 9F69                         ;save the maze position
1092+ 9F69
1093+ 9F69 ED 53 0F FA          ld (var3),de
1094+ 9F6D 11 19 01             ld de,$0119           ; offset right of  centre of the 3d view.
1095+ 9F70
1096+ 9F70 CD 76 9F             call do_draw_3r
1097+ 9F73
1098+ 9F73
1099+ 9F73 C3 D5 A0             jp draw_2r              ;now draw the 2nd level
1100+ 9F76
1101+ 9F76              do_draw_3r:
1102+ 9F76
1103+ 9F76 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
1104+ 9F79 19                   add  hl,de
1105+ 9F7A
1106+ 9F7A
1107+ 9F7A              ; draw  right half of the display.
1108+ 9F7A
1109+ 9F7A 06 03                ld b,3                  ; count for 2 blocks left or right of display file
1110+ 9F7C                                              ; 0 is not counted so loops 12 times
1111+ 9F7C ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
1112+ 9F80
1113+ 9F80 EB                   ex   de,hl              ; transfer de to hl.
1114+ 9F81
1115+ 9F81              ;       hl = furthest point in the maze
1116+ 9F81              ;       de = d_file location to store byte to display
1117+ 9F81
1118+ 9F81              loop11r:
1119+ 9F81 E5                   push hl
1120+ 9F82
1121+ 9F82              ;*#########################################
1122+ 9F82              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1123+ 9F82
1124+ 9F82 3A 28 FA             ld a,(maze_highbyte)
1125+ 9F85 BC                   cp h                    ;are we at the top part of the maze?
1126+ 9F86 CA AD 9F             jp z,cont_3a
1127+ 9F89                                              ;if we are on a different maze boundary
1128+ 9F89                                              ;then draw a maze wall as we are the top
1129+ 9F89                                              ;or north wall but maze data has no
1130+ 9F89                                              ;wall data.
1131+ 9F89              ;3 = first right wall
1132+ 9F89              ;2 = 2nd right wall
1133+ 9F89              ;1 = 3rd right wall
1134+ 9F89
1135+ 9F89 78                   ld a,b                  ;our current wall counter
1136+ 9F8A D6 03                sub 3
1137+ 9F8C C2 97 9F             jp nz,b3_1                 ;its not wall 2
1138+ 9F8F 3E 01                ld a,1
1139+ 9F91 47                   ld b,a
1140+ 9F92 C6 80                add a,128               ;make sure we set a wall!
1141+ 9F94 C3 D1 9F             jp draw_10r             ;jump straight to making an end wall
1142+ 9F97
1143+ 9F97 78           b3_1    ld a,b                  ;our current wall counter
1144+ 9F98 D6 02                sub 2
1145+ 9F9A C2 A5 9F             jp nz,b3_2                 ;its not wall 2
1146+ 9F9D 3E 01                ld a,1
1147+ 9F9F 47                   ld b,a
1148+ 9FA0 C6 80                add a,128               ;make sure we set a wall!
1149+ 9FA2 C3 3F A0             jp draw_10r_2             ;jump straight to making an end wall
1150+ 9FA5
1151+ 9FA5
1152+ 9FA5 3E 01        b3_2:   ld a,1
1153+ 9FA7 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1154+ 9FA8 C6 80                add a,128               ;make sure we set a wall!
1155+ 9FAA C3 B1 A0             jp draw_10r_3	       	;draw the 2nd wall to the right
1156+ 9FAD
1157+ 9FAD              ;*#########################################
1158+ 9FAD              cont_3a:
1159+ 9FAD 7E                   ld a,(hl)
1160+ 9FAE 17                   rla
1161+ 9FAF DA BD 9F             jp c,do_wall3r            ;if bit 7=128 theres a wall
1162+ 9FB2
1163+ 9FB2
1164+ 9FB2              go_back3r:
1165+ 9FB2 E1                   pop hl
1166+ 9FB3 D5                   push de
1167+ 9FB4 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1168+ 9FB8 19                   add hl,de                ; go right 1 block in the maze
1169+ 9FB9 D1                   pop de
1170+ 9FBA 10 C5                djnz loop11r
1171+ 9FBC C9                   ret
1172+ 9FBD              ;now do the next maze position
1173+ 9FBD
1174+ 9FBD
1175+ 9FBD              do_wall3r:
1176+ 9FBD
1177+ 9FBD                      ;check if bit 1 is set as thats an end wall
1178+ 9FBD                      ;and b must then be changed to 1 to stop drawing.
1179+ 9FBD
1180+ 9FBD                      ;2020 draw layers according to how close to the middle
1181+ 9FBD              ;         bit 1,a                 ; is this a side wall? (129 but we rla'd accumulator)
1182+ 9FBD              ;         jr z,wall3_start
1183+ 9FBD              ;         ld b,1                  ;it IS a sidewall so set b so we exit on return
1184+ 9FBD
1185+ 9FBD              ;**** Whats this for? Does it work!
1186+ 9FBD              ;         ld a,(blockid)
1187+ 9FBD              ;         cp 16
1188+ 9FBD              ;         jp z,draw_10r          ;16 = a side wall
1189+ 9FBD
1190+ 9FBD              ;now draw the wall based on bc value
1191+ 9FBD              wall3_start:
1192+ 9FBD
1193+ 9FBD
1194+ 9FBD 78                  ld a,b			               ;b is the loop count i.e # of walls to draw
1195+ 9FBE D6 01               	sub 1			               ;3 = the wall imediately right
1196+ 9FC0 CA B1 A0             jp z,draw_10r_3          ;draw an end wall if blockid=16
1197+ 9FC3
1198+ 9FC3 78                   ld a,b
1199+ 9FC4 D6 03                sub 3
1200+ 9FC6 CA D1 9F             jp z,draw_10r         		;draw the 1st wall to the right
1201+ 9FC9
1202+ 9FC9 78                   ld a,b
1203+ 9FCA D6 02                sub 2
1204+ 9FCC CA 3F A0             jp z,draw_10r_2	       	;draw the 2nd wall to the right
1205+ 9FCF
1206+ 9FCF E1                   pop hl                  ;nothing to draw so return
1207+ 9FD0 C9                   ret
1208+ 9FD1
1209+ 9FD1
1210+ 9FD1              draw_10r:
1211+ 9FD1 C5                    push bc                ;save loop count
1212+ 9FD2 11 19 C1              ld de,$c119             ;start of print position
1213+ 9FD5 D5                    push de                 ;save our display pointer
1214+ 9FD6
1215+ 9FD6 06 08                 ld b,8                  ;block is 8 blocks high
1216+ 9FD8 21 21 00              ld hl,$0021             ;load with 32 to jump to line below us
1217+ 9FDB 3E B5                 ld a, _mediumwall       ;wall on sides facing us
1218+ 9FDD 12           loop12r: ld (de),a               ; insert the part of the wall.
1219+ 9FDE 13                    inc de
1220+ 9FDF 12                    ld (de),a               ;put grey side to our right
1221+ 9FE0 13                    inc de
1222+ 9FE1 12                    ld (de),a               ;put grey side to our right
1223+ 9FE2 13                    inc de
1224+ 9FE3 12                    ld (de),a               ;put grey side to our right
1225+ 9FE4 13                    inc de
1226+ 9FE5 12                    ld (de),a               ;put grey side to our right
1227+ 9FE6 13                    inc de
1228+ 9FE7 12                    ld (de),a               ;put grey side to our right
1229+ 9FE8
1230+ 9FE8 13                    inc de
1231+ 9FE9 12                    ld (de),a
1232+ 9FEA 13                    inc de
1233+ 9FEB 12                    ld (de),a
1234+ 9FEC 1B                    dec de
1235+ 9FED 1B                    dec de
1236+ 9FEE
1237+ 9FEE 1B                    dec de
1238+ 9FEF 1B                    dec de
1239+ 9FF0 1B                    dec de
1240+ 9FF1 1B                    dec de
1241+ 9FF2 1B                    dec de
1242+ 9FF3 EB                    ex de,hl
1243+ 9FF4 19                    add  hl,de              ; advance to the next row of the display file.
1244+ 9FF5 EB                    ex de,hl
1245+ 9FF6 10 E5                 djnz loop12r            ;do this 3 times
1246+ 9FF8
1247+ 9FF8              ;now draw the blank face to the leftt of the block
1248+ 9FF8              ;create first column of left face characters
1249+ 9FF8
1250+ 9FF8 D1                    pop de                  ;back to our original position
1251+ 9FF9 D5                    push de
1252+ 9FFA 1B                    dec de                  ;move ahead 1 space in the display (right)
1253+ 9FFB
1254+ 9FFB              ;check if the char to our left is a wall block.
1255+ 9FFB              ;if so, do not draw a black face as we need to hide it or it will
1256+ 9FFB              ;ovewrite the already drawn block
1257+ 9FFB
1258+ 9FFB 1A                    ld a,(de)
1259+ 9FFC FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1260+ 9FFE C2 05 A0              jp nz,cont_2r            ;there is no block so draw black edge
1261+ A001 D1                    pop de
1262+ A002 C1                    pop bc
1263+ A003 18 AD                 jr go_back3r             ;otherwise quit this draw
1264+ A005
1265+ A005
1266+ A005 EB           cont_2r: ex  de,hl
1267+ A006 11 21 00              ld de,$0021
1268+ A009
1269+ A009              ;loop for 2 columns
1270+ A009
1271+ A009 06 02                ld b,2                  ; loop 2 times for 2 columns
1272+ A00B 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1273+ A00E 3E 07                ld a,7
1274+ A010 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1275+ A013
1276+ A013              loop12br:
1277+ A013 C5                   push bc                 ;save count
1278+ A014 3A 04 FA             ld a,(var1)
1279+ A017 47                   ld b,a                  ;holds the column height in chars
1280+ A018 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
1281+ A01A 77                   ld  (hl),a
1282+ A01B
1283+ A01B              loop12ar:                   ;we must start at5 to draw 4 face blocks on right
1284+ A01B 19                   add hl,de
1285+ A01C 3E AF                ld  a,_black      ;triangle sloping to right bottom
1286+ A01E 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1287+ A01F 10 FA                djnz loop12ar
1288+ A021
1289+ A021
1290+ A021 3E B1                ld  a,_topcorner2
1291+ A023 77                   ld  (hl),a
1292+ A024
1293+ A024                      ;now change column count
1294+ A024 3A 04 FA             ld a,(var1)
1295+ A027 D6 02                sub 2                   ;subtract 2
1296+ A029 32 04 FA             ld (var1),a
1297+ A02C C1                   pop bc
1298+ A02D
1299+ A02D 2A 13 FA             ld hl,(var5)
1300+ A030 2B                   dec hl                  ;move print position to the left
1301+ A031 11 21 00             ld de,$21               ;move top of next column down and across 1
1302+ A034 19                   add hl,de
1303+ A035 22 13 FA             ld (var5),hl
1304+ A038
1305+ A038 10 D9                djnz loop12br
1306+ A03A D1                   pop de
1307+ A03B C1                   pop bc
1308+ A03C C3 B2 9F             jp go_back3r              ; jump back to main loop
1309+ A03F
1310+ A03F              ;**********************************
1311+ A03F              ;     draw the 2nd right block
1312+ A03F              ;***********************************
1313+ A03F
1314+ A03F              draw_10r_2:
1315+ A03F
1316+ A03F C5                    push bc
1317+ A040 11 19 C1              ld de, $c119           ;start print position of wall
1318+ A043 D5                   push de
1319+ A044              ;dont draw a front wall as we never see it.
1320+ A044
1321+ A044 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1322+ A047 19                   add hl,de
1323+ A048 EB                   ex de,hl
1324+ A049              ;we do not need a front wall for this row as it is never seen.
1325+ A049              ;below jp code can be removed :) Because a square block here
1326+ A049              ;is 8 x 8
1327+ A049
1328+ A049 1B                    dec de                  ;move ahead 1 space in the display (right)
1329+ A04A
1330+ A04A              ;check if the char to our left is a wall block.
1331+ A04A              ;if so, do not draw a black face as we need to hide it or it will
1332+ A04A              ;ovewrite the already drawn block
1333+ A04A 1A                    ld a,(de)
1334+ A04B FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1335+ A04D C2 55 A0              jp nz,cont_2r_2            ;there is no block so draw black edge
1336+ A050 D1                    pop de
1337+ A051 C1                    pop bc
1338+ A052 C3 B2 9F              jp go_back3r             ;otherwise quit this draw
1339+ A055
1340+ A055
1341+ A055              ;draw the black edge wall
1342+ A055
1343+ A055              cont_2r_2:
1344+ A055 EB                    ex  de,hl
1345+ A056 11 21 00              ld de,$0021
1346+ A059
1347+ A059              ;need to loop 2 times drawing 2 lots of 3 top
1348+ A059              ;& bottom chars- move down 1after 1st 3 top chars drawn
1349+ A059              ;
1350+ A059
1351+ A059 3E 02                ld a,2
1352+ A05B 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1353+ A05E
1354+ A05E              ;loop for 3 black wall columns
1355+ A05E 3E 07                ld a,7                  ;column start height
1356+ A060 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1357+ A063
1358+ A063 06 03        loop_x: ld b,3                  ;loop 3 times for 3 columns
1359+ A065 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1360+ A068 3E 91                ld a,$91
1361+ A06A 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1362+ A06D
1363+ A06D              loop12br_2:
1364+ A06D C5                   push bc                 ;save count
1365+ A06E 3A 04 FA             ld a,(var1)             ;column height
1366+ A071 47                   ld b,a                  ;holds the column height in chars
1367+ A072 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1368+ A075 F5                   push af                 ;save a for bottom corners
1369+ A076 77                   ld  (hl),a
1370+ A077
1371+ A077              loop12ar_2:
1372+ A077 19                   add hl,de
1373+ A078 3E AF                ld  a,_black            ;black wall fill
1374+ A07A 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1375+ A07B 10 FA                djnz loop12ar_2
1376+ A07D
1377+ A07D F1                   pop af                  ;retrivetop corner
1378+ A07E 3D                   dec a                   ;prep for next top corner
1379+ A07F 32 05 FA             ld (var2),a             ;re-save it for next corner
1380+ A082 C6 04                add a,4                 ;get the correct char to print
1381+ A084 77                   ld  (hl),a              ;draw the bottom of the wall
1382+ A085
1383+ A085                      ;now change column count
1384+ A085 3A 04 FA             ld a,(var1)
1385+ A088 C1                   pop bc
1386+ A089
1387+ A089 2A 13 FA             ld hl,(var5)
1388+ A08C 2B                   dec hl                  ;move print position to the left
1389+ A08D 22 13 FA             ld (var5),hl
1390+ A090
1391+ A090 10 DB                djnz loop12br_2
1392+ A092
1393+ A092              ;1st set of 3 top bits drawn
1394+ A092              ;now jump down the display 1 line
1395+ A092              ;then draw another 3 columns
1396+ A092
1397+ A092 3A 18 FA             ld a,(var7)             ;get our loop counter
1398+ A095 3D                   dec a
1399+ A096 28 12                jr z,exit_1             ;exit after 2 loops
1400+ A098 32 18 FA             ld (var7),a             ;save it
1401+ A09B 2A 13 FA             ld hl,(var5)
1402+ A09E              ;get our last print position
1403+ A09E                                              ;need to go to next line -1 char
1404+ A09E 19                   add hl,de
1405+ A09F                                              ; now move back in the display
1406+ A09F                                              ;1 char
1407+ A09F 22 13 FA             ld (var5),hl            ;re save it for use above
1408+ A0A2
1409+ A0A2 3E 05                ld a,5                  ;reduce black wall column height
1410+ A0A4 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1411+ A0A7
1412+ A0A7 C3 63 A0             jp loop_x
1413+ A0AA
1414+ A0AA
1415+ A0AA D1           exit_1: pop de
1416+ A0AB C1                   pop bc
1417+ A0AC 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1418+ A0AE C3 B2 9F             jp go_back3r              ; jump back to main loop
1419+ A0B1
1420+ A0B1
1421+ A0B1              ;#############################################
1422+ A0B1              ;*Draw the 3rd RIGHT block of section3
1423+ A0B1              ;#############################################
1424+ A0B1
1425+ A0B1
1426+ A0B1              	; we only need to draw 2 columns of black sides.
1427+ A0B1                  ; if theres no brick pattern !
1428+ A0B1
1429+ A0B1              draw_10r_3:
1430+ A0B1 C5                   push bc
1431+ A0B2 D5                   push de                 ;save our display pointer
1432+ A0B3
1433+ A0B3 21 41 C1             ld hl,$C18C-66-30-3+24  ;start of drawing
1434+ A0B6 7E                   ld a,(hl)               ;read what char is there
1435+ A0B7 FE B5                cp _mediumwall
1436+ A0B9 20 05                jr nz,cont_1r_4        ;exit if a wall is already there
1437+ A0BB D1                   pop de
1438+ A0BC C1                   pop bc
1439+ A0BD C3 B2 9F             jp go_back3r             ;otherwise quit this draw
1440+ A0C0
1441+ A0C0              cont_1r_4:
1442+ A0C0
1443+ A0C0 3E C9                ld a,$c9
1444+ A0C2 77                   ld (hl),a
1445+ A0C3
1446+ A0C3 3E AF                ld a,_black
1447+ A0C5 11 21 00             ld de,33                ;1 line width
1448+ A0C8
1449+ A0C8 CD 36 95             CALL black_wall         ;draw 4 black blocks
1450+ A0CB
1451+ A0CB 19                   add hl,de               ;jump to next line below
1452+ A0CC
1453+ A0CC
1454+ A0CC              ;top half done - so do bottom half - 2 blacks first
1455+ A0CC
1456+ A0CC              ;de already holds 32
1457+ A0CC
1458+ A0CC 3E CE                ld a,$ce
1459+ A0CE 77                   ld (hl),a
1460+ A0CF
1461+ A0CF D1                   pop de
1462+ A0D0 C1                   pop bc
1463+ A0D1 C3 B2 9F             jp go_back3r
1464+ A0D4
1465+ A0D4              ;draw 2 black walls across 1 line
1466+ A0D4              ;black_wall:
1467+ A0D4              ;        add hl,de      ;jump 1 line below
1468+ A0D4              ;        ld (hl),a
1469+ A0D4              ;        add hl,de      ;jump 1 line below
1470+ A0D4              ;        ld (hl),a
1471+ A0D4              ;        add hl,de      ;jump 1 line below
1472+ A0D4              ;        ld (hl),a
1473+ A0D4              ;        add hl,de      ;jump 1 line below
1474+ A0D4              ;        ld (hl),a
1475+ A0D4
1476+ A0D4 C9                   ret
1477+ A0D5
1478+ A0D5
1479+ A0D5
1480+ A0D5              ;#############################################
1481+ A0D5              ;#############################################
1482+ A0D5              ; draw  layer 2
1483+ A0D5              ;#############################################
1484+ A0D5              ;#############################################
1485+ A0D5
1486+ A0D5              draw_2r:
1487+ A0D5
1488+ A0D5
1489+ A0D5              ; hl=maze location being drawn.
1490+ A0D5              ; now determine what to draw for this section.
1491+ A0D5              test
1492+ A0D5
1493+ A0D5 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1494+ A0D8
1495+ A0D8 CD 50 8E             call load_de            ;get left and right and front jump into de reg
1496+ A0DB
1497+ A0DB 19                   add hl,de               ;jump backwards along the user view 1 space
1498+ A0DC 22 25 FA             ld (furthest_point),hl ;re save it
1499+ A0DF
1500+ A0DF 11 01 00             ld de,$0001             ;to move the display position +1
1501+ A0E2 ED 53 11 FA          ld (var4),de
1502+ A0E6
1503+ A0E6 ED 5B 0D FA          ld de,(right)
1504+ A0EA
1505+ A0EA              ;we need to move pointer 1 to the left for wall checking
1506+ A0EA 19                   add hl,de
1507+ A0EB 22 15 FA             ld (var6),hl
1508+ A0EE
1509+ A0EE ED 53 0F FA          ld (var3),de
1510+ A0F2 11 B9 00             ld  de,$0b9           ; offset to right of centre of the 3d view.
1511+ A0F5 CD FB A0             call do_draw_2r
1512+ A0F8
1513+ A0F8 C3 70 A1             jp draw_1r           ;now draw the 2nd level
1514+ A0FB
1515+ A0FB              do_draw_2r:
1516+ A0FB
1517+ A0FB 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
1518+ A0FE 19                   add  hl,de
1519+ A0FF
1520+ A0FF
1521+ A0FF 06 01                ld b,1                 ; count for 1 blocks left or right of display file
1522+ A101                                              ; 0 is not counted so loops 12 times
1523+ A101 ED 5B 15 FA          ld de,(var6)
1524+ A105
1525+ A105 EB                   ex   de,hl              ; transfer de to hl.
1526+ A106
1527+ A106
1528+ A106 E5           loop14r: push hl
1529+ A107
1530+ A107              ;*#########################################
1531+ A107              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1532+ A107
1533+ A107 3A 28 FA             ld a,(maze_highbyte)
1534+ A10A BC                   cp h                    ;are we at the top part of the maze?
1535+ A10B CA 16 A1             jp z,cont_2a
1536+ A10E                                              ;if we are on a different maze boundary
1537+ A10E                                              ;then draw a maze wall as we are the top
1538+ A10E                                              ;or north wall but maze data has no
1539+ A10E                                              ;wall data.
1540+ A10E
1541+ A10E 3E 01                ld a,1
1542+ A110 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1543+ A111 C6 7F                add a,127               ;make sure we set a wall!
1544+ A113 C3 1D A1             jp draw_11r             ;jump straight to making an end wall
1545+ A116
1546+ A116              ;*#########################################
1547+ A116              cont_2a:
1548+ A116 7E                   ld a,(hl)
1549+ A117 17                   rla
1550+ A118 DA 1D A1             jp c,do_wall2r            ;bit 7 (128)
1551+ A11B
1552+ A11B
1553+ A11B              go_back2r:
1554+ A11B E1                   pop hl
1555+ A11C C9                   ret
1556+ A11D              ;now do the 2nd position
1557+ A11D
1558+ A11D
1559+ A11D
1560+ A11D              do_wall2r:
1561+ A11D                      ;check if bit 2 is set as thats an end wall.
1562+ A11D                      ;and b must then be changed to 1 to stop drawing.
1563+ A11D              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1564+ A11D              ;        jr z,draw_11r
1565+ A11D              ;        ld b,1                  ;set b so we exit on return
1566+ A11D
1567+ A11D              ;?? 2020 do we need this??????
1568+ A11D              ;        ld a,(blockid)
1569+ A11D              ;        cp 16
1570+ A11D              ;        jp z,draw_11r           ;draw an endwall if blockid=16
1571+ A11D              ;        pop hl
1572+ A11D              ;        ret
1573+ A11D
1574+ A11D
1575+ A11D              draw_11r:
1576+ A11D              ;        push bc
1577+ A11D D5                   push de                 ;save our display pointer
1578+ A11E 06 0E                ld b,14                  ;block is 14 blocks high
1579+ A120 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1580+ A123 3E B6                ld   a,_largewall            ;wall on sides facing us
1581+ A125
1582+ A125              ;draw 4 columns of bricks
1583+ A125              loop13r:
1584+ A125 12                   ld (de),a             ; insert the part of the wall.
1585+ A126 13                   inc de
1586+ A127 12                   ld (de),a               ;draw brick side
1587+ A128 13                   inc de
1588+ A129 12                   ld (de),a
1589+ A12A 13                   inc de
1590+ A12B 12                   ld (de),a
1591+ A12C 13                   inc de
1592+ A12D 12                   ld (de),a
1593+ A12E 1B                   dec de
1594+ A12F 1B                   dec de
1595+ A130 1B                   dec de
1596+ A131 1B                   dec de
1597+ A132 EB                   ex de,hl
1598+ A133 19                   add  hl,de              ; advance to the next row of the display file.
1599+ A134 EB                   ex de,hl
1600+ A135 10 EE               djnz loop13r             ;do this 3 times
1601+ A137
1602+ A137
1603+ A137
1604+ A137                      ;now draw the blank face to the left of the block
1605+ A137                      ;create first column of left face characters
1606+ A137 D1                   pop de                  ;back to our original position
1607+ A138 1B                   dec de
1608+ A139 EB                   ex  de,hl
1609+ A13A 11 21 00             ld de,$0021
1610+ A13D
1611+ A13D 06 03                ld b,3                  ; for 4 face columns to draw to draw
1612+ A13F 22 13 FA             ld (var5),hl
1613+ A142 3E 0D                ld a,13                 ; for 14 blocks high per column
1614+ A144 32 04 FA             ld (var1),a
1615+ A147
1616+ A147              ;draw the black sides
1617+ A147              loop13br:
1618+ A147 C5                   push bc
1619+ A148 3A 04 FA             ld a,(var1)
1620+ A14B 47                   ld b,a
1621+ A14C 3E B2                ld a,_topcorner3
1622+ A14E 77                   ld (hl),a
1623+ A14F
1624+ A14F              loop13ar:
1625+ A14F 19                   add hl,de
1626+ A150 3E AF                ld  a,_black
1627+ A152 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1628+ A153 10 FA                djnz loop13ar
1629+ A155
1630+ A155 3E B1                ld  a,_topcorner2
1631+ A157 77                   ld  (hl),a
1632+ A158
1633+ A158              ; now change the column count
1634+ A158 3A 04 FA             ld a,(var1)
1635+ A15B D6 02                sub 2
1636+ A15D 32 04 FA             ld (var1),a
1637+ A160 C1                   pop bc
1638+ A161
1639+ A161 2A 13 FA             ld hl,(var5)
1640+ A164 2B                   dec hl
1641+ A165 11 21 00             ld de,$21
1642+ A168 19                   add hl,de
1643+ A169 22 13 FA             ld (var5),hl
1644+ A16C
1645+ A16C 10 D9                djnz loop13br
1646+ A16E
1647+ A16E 18 AB                jr go_back2r              ; jump back to main loop
1648+ A170
1649+ A170
1650+ A170
1651+ A170              ;#############################################
1652+ A170              ;#############################################
1653+ A170              ; draw 1st layer right
1654+ A170              ;#############################################
1655+ A170              ;#############################################
1656+ A170
1657+ A170              draw_1r:
1658+ A170
1659+ A170              ; hl=maze location being drawn.
1660+ A170              ; now determine what to draw for this section.
1661+ A170
1662+ A170
1663+ A170 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1664+ A173
1665+ A173 CD 50 8E             call load_de            ;get left and right and front jump into de reg
1666+ A176
1667+ A176 19                   add hl,de               ;jump backwards along the user view 1 space
1668+ A177 22 25 FA             ld (furthest_point),hl ;re save it
1669+ A17A
1670+ A17A 11 01 00             ld de,$0001             ;to move the display position +1
1671+ A17D ED 53 11 FA          ld (var4),de
1672+ A181
1673+ A181 ED 5B 0D FA          ld de,(right)
1674+ A185
1675+ A185              ;we need to move pointer 1 to the left for wall checking
1676+ A185 19                   add hl,de
1677+ A186 22 15 FA             ld (var6),hl
1678+ A189
1679+ A189              ;        ld de,$0001             ;to move the display position +1
1680+ A189 ED 53 0F FA          ld (var3),de
1681+ A18D 11 38 00             ld  de,$038           ; offset to row 1 column 0 - left of  centre of the 3d view.
1682+ A190 CD 96 A1             call do_draw_1r
1683+ A193
1684+ A193
1685+ A193 C3 06 A2             jp draw_0r           ;now draw the 2nd level
1686+ A196
1687+ A196              do_draw_1r:
1688+ A196
1689+ A196 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
1690+ A199 19                   add  hl,de
1691+ A19A
1692+ A19A 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1693+ A19C                                              ; 0 is not counted so loops 12 times
1694+ A19C ED 5B 15 FA          ld de,(var6)
1695+ A1A0 EB                   ex   de,hl              ; transfer de to hl.
1696+ A1A1
1697+ A1A1              ;       hl = furthest point in the maze
1698+ A1A1              ;       de = d_file location to store byte to display
1699+ A1A1
1700+ A1A1 E5           loop15r: push hl
1701+ A1A2
1702+ A1A2              ;*#########################################
1703+ A1A2              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1704+ A1A2
1705+ A1A2 3A 28 FA             ld a,(maze_highbyte)
1706+ A1A5 BC                   cp h                    ;are we at the top part of the maze?
1707+ A1A6 CA B1 A1             jp z,cont_1a
1708+ A1A9                                              ;if we are on a different maze boundary
1709+ A1A9                                              ;then draw a maze wall as we are the top
1710+ A1A9                                              ;or north wall but maze data has no
1711+ A1A9                                              ;wall data.
1712+ A1A9
1713+ A1A9 3E 01                ld a,1
1714+ A1AB 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1715+ A1AC C6 7F                add a,127               ;make sure we set a wall!
1716+ A1AE C3 BE A1             jp draw_12r             ;jump straight to making an end wall
1717+ A1B1
1718+ A1B1              ;*#########################################
1719+ A1B1              cont_1a:
1720+ A1B1 7E                   ld a,(hl)
1721+ A1B2 17                   rla
1722+ A1B3 DA B8 A1             jp c,do_wall1r            ;bit 7 (128)
1723+ A1B6
1724+ A1B6              go_back1r:
1725+ A1B6 E1                   pop hl
1726+ A1B7 C9                   ret
1727+ A1B8
1728+ A1B8              do_wall1r:
1729+ A1B8                      ;check if bit 2 is set as thats an end
1730+ A1B8                      ;and b must then be changed to 1 to stop drawing.
1731+ A1B8
1732+ A1B8 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1733+ A1BA 28 02                jr z,draw_12r
1734+ A1BC 06 01                ld b,1                  ;set b so we exit on return
1735+ A1BE
1736+ A1BE              ;**** Whats this for? Does it work!
1737+ A1BE
1738+ A1BE              ;        ld a,(blockid)
1739+ A1BE              ;        cp 16
1740+ A1BE              ;        jp z,draw_12r           ;draw an end wall if blockid=16
1741+ A1BE              ;        pop hl
1742+ A1BE              ;        ret
1743+ A1BE
1744+ A1BE
1745+ A1BE              ;draw the corridor bit to the left (1 column)
1746+ A1BE              draw_12r:
1747+ A1BE D5                   push de                 ;save our display pointer
1748+ A1BF 06 16                ld b,22                  ;block is 22 blocks high
1749+ A1C1 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1750+ A1C4 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1751+ A1C6              loop16r:                        ; insert thepart of the wall.
1752+ A1C6 13                   inc de
1753+ A1C7 12                   ld (de),a               ;put grey side to our right
1754+ A1C8 1B                   dec de
1755+ A1C9 EB                   ex de,hl
1756+ A1CA 19                   add  hl,de              ; advance to the next row of the display file.
1757+ A1CB EB                   ex de,hl
1758+ A1CC 10 F8                djnz loop16r             ;do this 3 times
1759+ A1CE
1760+ A1CE                      ;now draw the blank face to the right of the block
1761+ A1CE                      ;create first column of right face characters
1762+ A1CE D1                   pop de                  ;back to our original position
1763+ A1CF EB                   ex  de,hl
1764+ A1D0 11 21 00             ld de,$0021
1765+ A1D3
1766+ A1D3              ;now draw the face we see on our left as we walk forward
1767+ A1D3 06 04                ld b,4                  ; for 8 face columns to draw to draw
1768+ A1D5 22 13 FA             ld (var5),hl
1769+ A1D8 3E 15                ld a,21                 ; for 14 blocks high per column
1770+ A1DA 32 04 FA             ld (var1),a
1771+ A1DD
1772+ A1DD              loop14br:
1773+ A1DD C5                   push bc
1774+ A1DE 3A 04 FA             ld a,(var1)
1775+ A1E1 47                   ld b,a
1776+ A1E2 3E B2                ld a,_topcorner3
1777+ A1E4 77                   ld (hl),a
1778+ A1E5
1779+ A1E5              loop14ar:
1780+ A1E5 19                   add hl,de
1781+ A1E6 3E AF                ld  a,_black            ;triangle sloping to right bottom
1782+ A1E8 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1783+ A1E9 10 FA                djnz loop14ar
1784+ A1EB
1785+ A1EB 3E B1                ld  a,_topcorner2
1786+ A1ED 77                   ld  (hl),a
1787+ A1EE
1788+ A1EE              ; now change the column count
1789+ A1EE 3A 04 FA             ld a,(var1)
1790+ A1F1 D6 02                sub 2
1791+ A1F3 32 04 FA             ld (var1),a
1792+ A1F6 C1                   pop bc
1793+ A1F7
1794+ A1F7 2A 13 FA             ld hl,(var5)
1795+ A1FA 2B                   dec hl
1796+ A1FB 11 21 00             ld de,$21
1797+ A1FE 19                   add hl,de
1798+ A1FF 22 13 FA             ld (var5),hl
1799+ A202
1800+ A202 10 D9                djnz loop14br
1801+ A204
1802+ A204 18 B0                jr go_back1r              ; jump back to main loop
1803+ A206
1804+ A206
1805+ A206              ;#############################################
1806+ A206              ;#############################################
1807+ A206              ; draw layer 0 right
1808+ A206              ;#############################################
1809+ A206              ;#############################################
1810+ A206
1811+ A206              draw_0r:
1812+ A206              ;ret
1813+ A206
1814+ A206
1815+ A206              ; hl=maze location being drawn.
1816+ A206              ; now determine what to draw for this section.
1817+ A206
1818+ A206 2A 25 FA             ld   hl,(furthest_point); retrieve the maze location.
1819+ A209
1820+ A209 CD 50 8E             call load_de
1821+ A20C
1822+ A20C              ;**think we can lose these 2 lines.
1823+ A20C                                  ;get left and right and front jump into de reg
1824+ A20C 19                   add  hl,de
1825+ A20D
1826+ A20D              ;need to move pointer right for wall checking
1827+ A20D ED 5B 0D FA          ld de,(right)
1828+ A211 19                   add hl,de
1829+ A212 22 15 FA             ld (var6),hl
1830+ A215
1831+ A215 ED 53 0F FA          ld (var3),de
1832+ A219 11 18 00             ld  de,$18              ;offset to row0 column 24 - left of  centre of the 3d view.
1833+ A21C                                              ;1 column of left face to draw
1834+ A21C              ;draw the wall
1835+ A21C 2A 7E 81             ld   hl,(d_file)        ; fetch the location of the display file.
1836+ A21F 19                   add  hl,de
1837+ A220
1838+ A220
1839+ A220 ED 5B 15 FA          ld   de,(var6)
1840+ A224 EB                   ex   de,hl              ; transfer de to hl.
1841+ A225
1842+ A225
1843+ A225              loop17r:
1844+ A225
1845+ A225              ;*#########################################
1846+ A225              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1847+ A225
1848+ A225 3A 28 FA             ld a,(maze_highbyte)
1849+ A228 BC                   cp h                    ;are we at the top part of the maze?
1850+ A229 CA 34 A2             jp z,cont_0a
1851+ A22C                                              ;if we are on a different maze boundary
1852+ A22C                                              ;then draw a maze wall as we are the top
1853+ A22C                                              ;or north wall but maze data has no
1854+ A22C                                              ;wall data.
1855+ A22C
1856+ A22C 3E 01                ld a,1
1857+ A22E 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1858+ A22F C6 7F                add a,127               ;make sure we set a wall!
1859+ A231 C3 42 A2             jp draw_13r             ;jump straight to making an end wall
1860+ A234
1861+ A234              ;*#########################################
1862+ A234              cont_0a:
1863+ A234 7E                   ld a,(hl)
1864+ A235 17                   rla
1865+ A236 DA 3A A2             jp c,do_wall0r           ;bit 7 (128)
1866+ A239 C9                   ret
1867+ A23A
1868+ A23A
1869+ A23A              do_wall0r:
1870+ A23A                      ;check if bit 2 is set as thats an end wall
1871+ A23A                      ;and b must then be changed to 1 to stop drawing.
1872+ A23A
1873+ A23A CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1874+ A23C DA 42 A2             jp c,draw_13r          ;yes if bit 2 = 1
1875+ A23F C3 59 A2             jp draw_wall0r           ;its a wall but not a side wall.
1876+ A242
1877+ A242
1878+ A242
1879+ A242
1880+ A242              ;we need to draw 1 vertical line from pos 1,1 to show
1881+ A242              ;the side of the block.
1882+ A242
1883+ A242              ;draw sidewall brick pattern
1884+ A242              draw_13r:
1885+ A242 3E B2                ld a,_topcorner3
1886+ A244 EB                   ex de,hl
1887+ A245
1888+ A245 77                   ld (hl),a
1889+ A246 11 21 00             ld de,$21                ;jp to next line below
1890+ A249 19                   add hl,de
1891+ A24A 06 16                ld b,22                  ;block is 22 blocks high
1892+ A24C 11 21 00             ld de,$021           ;load with 32 to jump to line below us
1893+ A24F 3E AF                ld a,_black            ;wall on sides facing us;
1894+ A251              loop18r:
1895+ A251 77                   ld (hl),a             ; insert the part of the wall.
1896+ A252 19                   add  hl,de              ; advance to the next row of the display file.
1897+ A253 10 FC                djnz loop18r
1898+ A255
1899+ A255              ;###this bit causes the direction indicator to fail
1900+ A255 3E B1                ld a,_topcorner2
1901+ A257 77                   ld (hl),a
1902+ A258 C9                   ret                     ;return to main program
1903+ A259
1904+ A259              draw_wall0r:                     ;draw brick pattern only
1905+ A259
1906+ A259 11 21 00             ld de,$21                ;jp to next line below
1907+ A25C 19                   add hl,de
1908+ A25D                     ; ex de,hl
1909+ A25D
1910+ A25D 06 16                ld b,22                  ;block is 24 blocks high
1911+ A25F 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
1912+ A262 3E B6                ld a,_largewall            ;wall on sides facing us;
1913+ A264              loop19r:
1914+ A264 77                   ld (hl),a             ; insert the part of the wall.
1915+ A265                     ; ex de,hl
1916+ A265 19                   add  hl,de              ; advance to the next row of the display file.
1917+ A266                     ; ex de,hl
1918+ A266 10 FC                djnz loop19r
1919+ A268
1920+ A268 C9                   ret                     ;return to main program
1921+ A269
# file closed: src/6-rd3dmazeV6.asm
 464  A269
 465  A269              ;#####################################################
 466  A269
 467  A269
 468  A269              ;###################################################
 469  A269              ; Get Keystroke Routine from Your Sinclair Magazine
 470  A269              ; From Your Sinclair #22 (Oct.1987)
 471  A269              ;###################################################
 472  A269
 473  A269
 474  A269              get_keys:
 475  A269               ;
 476  A269               ;      YS_KEYS
 477  A269               ;
 478  A269               ;A,HL,DE corrupt
 479  A269               ;B=0, key in C
 480  A269
 481  A269
 482  A269               ;Keyboard Scanning
 483  A269               ;by Pete Cooke
 484  A269               ;from Your Sinclair #22 (Oct.1987)
 485  A269
 486  A269               ;prog for Your Sinclair
 487  A269               ;
 488  A269               ;file for Hisoft GENS
 489  A269               ;assembler but should
 490  A269               ;be suitable for most
 491  A269               ;assemblers on the market
 492  A269               ;
 493  A269               ;Reads the keyboard
 494  A269               ;Returns with C
 495  A269               ;holding L/R/U/D/F
 496  A269               ;
 497  A269               ;bit 4,C left
 498  A269               ;bit 3,C right
 499  A269               ;bit 2,C up
 500  A269               ;bit 1,C down
 501  A269               ;bit 0,C fire
 502  A269               ;
 503  A269               ;bit set to 1 if pressed
 504  A269               ;
 505  A269               ;keys are chosen by
 506  A269               ;values in KEYTAB
 507  A269               ;
 508  A269 21 B0 A2     readke  ld   hl,keytab
 509  A26C 01 00 06             ld   bc,$0600
 510  A26F               ;
 511  A26F               ;5 keys to read
 512  A26F               ;
 513  A26F 7E           read_1  ld   a,(hl)
 514  A270 1F                   rra
 515  A271 1F                   rra
 516  A272 E6 1E                and  $1e
 517  A274 5F                   ld   e,a
 518  A275 16 00                ld   d,0
 519  A277               ;
 520  A277               ;2*the row number
 521  A277               ;
 522  A277 7E                   ld   a,(hl)
 523  A278 23                   inc  hl
 524  A279 E5                   push hl
 525  A27A               ;
 526  A27A               ;save place in KEYTAB
 527  A27A               ;
 528  A27A 21 9E A2             ld   hl,keyadd
 529  A27D 19                   add  hl,de
 530  A27E 57                   ld   d,a
 531  A27F               ;
 532  A27F               ;index port addresses
 533  A27F               ;
 534  A27F C5                   push bc
 535  A280 4E                   ld   c,(hl)
 536  A281 23                   inc  hl
 537  A282 46                   ld   b,(hl)
 538  A283 ED 78                in   a,(c)
 539  A285 04                   inc  b
 540  A286 05                   dec  b
 541  A287 28 01                jr   z,read_2
 542  A289 2F                   cpl
 543  A28A 5F           read_2  ld   e,a
 544  A28B               ;
 545  A28B               ;read the port
 546  A28B               ;and flip bits if not
 547  A28B               ;Kempston
 548  A28B               ;
 549  A28B C1                   pop  bc
 550  A28C E1                   pop  hl
 551  A28D               ;
 552  A28D               ;and get back BC+HL
 553  A28D               ;
 554  A28D 7A                   ld   a,d
 555  A28E E6 07                and  $07
 556  A290 28 05                jr   z,read_4
 557  A292               ;
 558  A292 CB 1B        read_3  rr   e
 559  A294 3D                   dec  a
 560  A295 20 FB                jr   nz,read_3
 561  A297               ;
 562  A297               ;rotate L so bit needed
 563  A297               ;is in bit 0
 564  A297               ;
 565  A297 CB 1B        read_4  rr   e
 566  A299 CB 11                rl   c
 567  A29B               ;
 568  A29B               ;rotate the bit into C
 569  A29B               ;
 570  A29B 10 D2                djnz read_1
 571  A29D C9                   ret
 572  A29E               ;
 573  A29E               ;exit B=0
 574  A29E               ;     C=keys
 575  A29E               ;
 576  A29E               ;A,HL,DE corrupt
 577  A29E               ;
 578  A29E               ;
 579  A29E               ;port addresses of
 580  A29E               ;the keyboard rows
 581  A29E               ;
 582  A29E FE F7 FE FB  keyadd dw 63486,64510,65022,65278,61438,57342,49150,32766
 582  A2A2 FE FD FE FE
 582  A2A6 FE EF FE DF
 582  A2AA FE BF FE 7F
 583  A2AE 1F 00                dw 31 ;*Kempston*
 584  A2B0               ;
 585  A2B0               ;
 586  A2B0               ;KEYTAB holds the position
 587  A2B0               ;of each key as
 588  A2B0               ;1/2 row number*8 plus
 589  A2B0               ;distance from the edge
 590  A2B0               ;eg. P = 5*8+0
 591  A2B0               ;    O = 5*8+1
 592  A2B0               ;    Q = 1*8+0
 593  A2B0               ;    4 = 0*8+3
 594  A2B0               ;
 595  A2B0 04 24 23 22  keytab db 0*8+4, 4*8+4, 4*8+3, 4*8+2, 4*8+0, 3*8+2
 595  A2B4 20 1A
 596  A2B6               ;           5     6     7      8       0     X
 597  A2B6
 598  A2B6               ;old bit values before adding the x key
 599  A2B6               ;;bit values: 1 = 0 fire
 600  A2B6               ;             2 = 8 right
 601  A2B6               ;             4 = 7 up
 602  A2B6               ;             8 = 6 down
 603  A2B6               ;            16 = 5 left
 604  A2B6              ;new key table
 605  A2B6              ;;bit values:
 606  A2B6               ;             1 = x
 607  A2B6               ;             2 =  0 fire
 608  A2B6               ;             4 = 5 left
 609  A2B6               ;             8 =  7 up
 610  A2B6               ;             16 = 6 down
 611  A2B6               ;             32 =  8 right
 612  A2B6
 613  A2B6
 614  A2B6
 615  A2B6
 616  A2B6
 617  A2B6              ; keytab db 5*8+1,5*8+0,2*8+1,3*8+2,7*8+0
 618  A2B6               ;
 619  A2B6               ;set for O,P,S,X,space
 620  A2B6               ;
 621  A2B6               ;for a Kempston joystick
 622  A2B6               ;substitute
 623  A2B6               ;
 624  A2B6               ;       db 8*8+1,8*8+0,8*8+3,8*8+2,8*8+4
 625  A2B6               ;
 626  A2B6 00           end_k nop
 627  A2B7
 628  A2B7              ;##############################################
 629  A2B7              ;##############################################
 630  A2B7
 631  A2B7              ;set map - sets hl to start of map to draw
 632  A2B7              ;a holds the map number = 0 to 15
 633  A2B7
 634  A2B7              set_map:
 635  A2B7
 636  A2B7 21 00 A3             ld hl,map_0             ;start of map data 256 bytes each
 637  A2BA 32 22 FA             ld (cur_map),a          ;save our cur map
 638  A2BD 22 23 FA             ld (map_start),hl
 639  A2C0
 640  A2C0 3D                   dec a
 641  A2C1 3C                   inc a                   ;exit if its map 0
 642  A2C2
 643  A2C2 7C                   ld a,h
 644  A2C3 32 28 FA             ld (maze_highbyte),a
 645  A2C6 C8                   ret z       ;if a is 0, just return for map_0
 646  A2C7
 647  A2C7 3A 22 FA             ld a,(cur_map)
 648  A2CA 24           loop3   inc h                   ; times by 256
 649  A2CB 3D                   dec a
 650  A2CC 20 FC                jr nz, loop3
 651  A2CE 22 23 FA             ld (map_start),hl
 652  A2D1 7C                   ld a, h
 653  A2D2 32 28 FA             ld (maze_highbyte),a
 654  A2D5 C9                   ret
 655  A2D6
 656  A2D6              ;#################################################################
 657  A2D6              ;walking sound
 658  A2D6
 659  A2D6              walk_sound:
 660  A2D6
 661  A2D6              zap:
 662  A2D6 D5                   push de
 663  A2D7 C5                   push bc
 664  A2D8 16 10        	    ld d,16		;speaker = bit 4
 665  A2DA              ;e is set when the routine is called so we make different sounds for switch and footwalk
 666  A2DA              ;	    ld e,10		;distance between speaker move counter
 667  A2DA 06 FA        	    ld b,250 	;overall length counter
 668  A2DC 7A           blp0:	ld a,d
 669  A2DD E6 F8        	    and 248		;keep border colour the same
 670  A2DF D3 FE        	    out (254),a	;move the speaker in or out depending on bit 4
 671  A2E1 2F           	    cpl		    ;toggle, so we alternative between speaker in and out to make sound
 672  A2E2 57           	    ld d,a		;store it
 673  A2E3 4B           	    ld c,e		;now a pause
 674  A2E4 0D           blp1:	dec c
 675  A2E5 20 FD        	    jr nz,blp1
 676  A2E7              	   ; dec e		;change to inc e to reverse the sound, or remove to make it a note
 677  A2E7 10 F3        	    djnz blp0	;repeat B=255 times
 678  A2E9 C1                   pop bc
 679  A2EA D1                   pop de
 680  A2EB C9           	    ret
 681  A2EC              	;
 682  A2EC
 683  A2EC
 684  A2EC              ;#################################################################
 685  A2EC              ;Character screen reservation
 686  A2EC                      org $c000
 687  C000 00 00 00...  char_screen:   block 768    ;view screen built here from characters
 688  C300
 689  C300 00 00 00...  attr_screen:   block 768    ;colours held here for door animation
 690  C600
 691  C600              ;################################################
 692  C600
 693  C600
 694  C600              ;##############################################
 695  C600              ; Alternate Character set
 696  C600              ;from https://www.jimblimey.com/blog/24-zx-spectrum-fonts/
 697  C600              ;##############################################
 698  C600              charset_1:
 699  C600 00 00 00 00    defb 0,0,0,0,0,0,0,0
 699  C604 00 00 00 00
 700  C608 10 38 38 38    defb 16,56,56,56,16,0,16,0
 700  C60C 10 00 10 00
 701  C610 66 33 33 00    defb 102,51,51,0,0,0,0,0
 701  C614 00 00 00 00
 702  C618 66 66 FF 66    defb 102,102,255,102,102,255,102,102
 702  C61C 66 FF 66 66
 703  C620 14 7E D4 7E    defb 20,126,212,126,149,126,20,0
 703  C624 95 7E 14 00
 704  C628 60 94 68 10    defb 96,148,104,16,44,82,140,0
 704  C62C 2C 52 8C 00
 705  C630 30 48 30 48    defb 48,72,48,72,142,140,120,0
 705  C634 8E 8C 78 00
 706  C638 0C 0C 18 00    defb 12,12,24,0,0,0,0,0
 706  C63C 00 00 00 00
 707  C640 01 02 04 04    defb 1,2,4,4,4,4,2,1
 707  C644 04 04 02 01
 708  C648 80 40 20 20    defb 128,64,32,32,32,32,64,128
 708  C64C 20 20 40 80
 709  C650 00 54 38 FE    defb 0,84,56,254,56,84,0,0
 709  C654 38 54 00 00
 710  C658 00 18 18 7E    defb 0,24,24,126,24,24,0,0
 710  C65C 18 18 00 00
 711  C660 00 00 00 00    defb 0,0,0,0,0,0,48,96
 711  C664 00 00 30 60
 712  C668 00 00 00 7E    defb 0,0,0,126,0,0,0,0
 712  C66C 00 00 00 00
 713  C670 00 00 00 00    defb 0,0,0,0,0,0,48,0
 713  C674 00 00 30 00
 714  C678 01 02 04 08    defb 1,2,4,8,16,32,64,128
 714  C67C 10 20 40 80
 715  C680 7C 86 8A 92    defb 124,134,138,146,162,194,124,0
 715  C684 A2 C2 7C 00
 716  C688 10 30 70 10    defb 16,48,112,16,16,16,124,0
 716  C68C 10 10 7C 00
 717  C690 78 84 08 30    defb 120,132,8,48,64,128,252,0
 717  C694 40 80 FC 00
 718  C698 78 84 04 38    defb 120,132,4,56,4,132,120,0
 718  C69C 04 84 78 00
 719  C6A0 80 44 48 48    defb 128,68,72,72,252,8,8,0
 719  C6A4 FC 08 08 00
 720  C6A8 FE 80 80 7C    defb 254,128,128,124,2,130,124,0
 720  C6AC 02 82 7C 00
 721  C6B0 7A 84 80 BC    defb 122,132,128,188,194,130,124,0
 721  C6B4 C2 82 7C 00
 722  C6B8 FE 84 08 10    defb 254,132,8,16,56,16,16,0
 722  C6BC 38 10 10 00
 723  C6C0 7C 82 7C 82    defb 124,130,124,130,130,130,124,0
 723  C6C4 82 82 7C 00
 724  C6C8 7C 82 86 7A    defb 124,130,134,122,2,130,124,0
 724  C6CC 02 82 7C 00
 725  C6D0 00 30 00 00    defb 0,48,0,0,0,48,0,0
 725  C6D4 00 30 00 00
 726  C6D8 00 30 00 00    defb 0,48,0,0,0,48,32,0
 726  C6DC 00 30 20 00
 727  C6E0 08 10 20 40    defb 8,16,32,64,32,16,8,0
 727  C6E4 20 10 08 00
 728  C6E8 00 00 7E 00    defb 0,0,126,0,126,0,0,0
 728  C6EC 7E 00 00 00
 729  C6F0 20 10 08 04    defb 32,16,8,4,8,16,32,0
 729  C6F4 08 10 20 00
 730  C6F8 7C 82 04 08    defb 124,130,4,8,16,0,16,0
 730  C6FC 10 00 10 00
 731  C700 7C 82 9A AA    defb 124,130,154,170,170,158,124,0
 731  C704 AA 9E 7C 00
 732  C708 F8 44 42 FE    defb 248,68,66,254,66,66,198,0
 732  C70C 42 42 C6 00
 733  C710 FC 42 42 FC    defb 252,66,66,252,66,66,252,0
 733  C714 42 42 FC 00
 734  C718 7A 84 80 80    defb 122,132,128,128,128,130,124,0
 734  C71C 80 82 7C 00
 735  C720 FC 42 42 42    defb 252,66,66,66,66,66,252,0
 735  C724 42 42 FC 00
 736  C728 FE 42 40 70    defb 254,66,64,112,192,66,254,0
 736  C72C C0 42 FE 00
 737  C730 FE 42 40 70    defb 254,66,64,112,192,64,224,0
 737  C734 C0 40 E0 00
 738  C738 7A 84 80 80    defb 122,132,128,128,156,130,126,2
 738  C73C 9C 82 7E 02
 739  C740 82 44 44 5E    defb 130,68,68,94,244,68,130,0
 739  C744 F4 44 82 00
 740  C748 10 08 08 08    defb 16,8,8,8,8,8,4,0
 740  C74C 08 08 04 00
 741  C750 7E 08 04 04    defb 126,8,4,4,4,132,120,0
 741  C754 04 84 78 00
 742  C758 CC 44 48 F0    defb 204,68,72,240,72,68,198,0
 742  C75C 48 44 C6 00
 743  C760 C0 40 40 40    defb 192,64,64,64,64,66,254,0
 743  C764 40 42 FE 00
 744  C768 C6 6A 5A 4A    defb 198,106,90,74,74,66,198,0
 744  C76C 4A 42 C6 00
 745  C770 CC 64 54 54    defb 204,100,84,84,84,84,204,0
 745  C774 54 54 CC 00
 746  C778 78 84 84 84    defb 120,132,132,132,132,132,120,0
 746  C77C 84 84 78 00
 747  C780 F8 44 44 F8    defb 248,68,68,248,64,64,224,0
 747  C784 40 40 E0 00
 748  C788 78 84 84 84    defb 120,132,132,132,132,140,125,2
 748  C78C 84 8C 7D 02
 749  C790 FC 42 42 FC    defb 252,66,66,252,66,66,198,0
 749  C794 42 42 C6 00
 750  C798 74 88 80 78    defb 116,136,128,120,4,132,120,0
 750  C79C 04 84 78 00
 751  C7A0 7C 54 10 10    defb 124,84,16,16,16,16,48,0
 751  C7A4 10 10 30 00
 752  C7A8 C6 44 44 82    defb 198,68,68,130,130,130,124,0
 752  C7AC 82 82 7C 00
 753  C7B0 CC 44 44 44    defb 204,68,68,68,68,40,16,0
 753  C7B4 44 28 10 00
 754  C7B8 C6 42 42 4A    defb 198,66,66,74,90,106,204,0
 754  C7BC 5A 6A CC 00
 755  C7C0 82 44 28 10    defb 130,68,40,16,40,68,130,0
 755  C7C4 28 44 82 00
 756  C7C8 CC 44 44 38    defb 204,68,68,56,16,16,48,0
 756  C7CC 10 10 30 00
 757  C7D0 FE 84 08 10    defb 254,132,8,16,32,66,254,0
 757  C7D4 20 42 FE 00
 758  C7D8 1C 10 10 10    defb 28,16,16,16,16,16,28,0
 758  C7DC 10 10 1C 00
 759  C7E0 80 40 20 10    defb 128,64,32,16,8,4,2,1
 759  C7E4 08 04 02 01
 760  C7E8 38 08 08 08    defb 56,8,8,8,8,8,56,0
 760  C7EC 08 08 38 00
 761  C7F0 00 00 10 38    defb 0,0,16,56,108,198,0,0
 761  C7F4 6C C6 00 00
 762  C7F8 00 00 00 00    defb 0,0,0,0,0,0,0,255
 762  C7FC 00 00 00 FF
 763  C800 30 30 18 00    defb 48,48,24,0,0,0,0,0
 763  C804 00 00 00 00
 764  C808 00 00 7A 04    defb 0,0,122,4,124,132,122,0
 764  C80C 7C 84 7A 00
 765  C810 80 40 40 5C    defb 128,64,64,92,98,66,188,0
 765  C814 62 42 BC 00
 766  C818 00 00 7A 84    defb 0,0,122,132,128,130,124,0
 766  C81C 80 82 7C 00
 767  C820 02 04 74 8C    defb 2,4,116,140,132,132,122,0
 767  C824 84 84 7A 00
 768  C828 00 00 BC 42    defb 0,0,188,66,124,64,62,0
 768  C82C 7C 40 3E 00
 769  C830 34 48 40 E0    defb 52,72,64,224,64,64,128,0
 769  C834 40 40 80 00
 770  C838 00 00 7A 84    defb 0,0,122,132,140,116,4,120
 770  C83C 8C 74 04 78
 771  C840 80 40 78 44    defb 128,64,120,68,68,68,136,0
 771  C844 44 44 88 00
 772  C848 10 00 10 08    defb 16,0,16,8,8,8,4,0
 772  C84C 08 08 04 00
 773  C850 00 10 00 10    defb 0,16,0,16,8,8,136,112
 773  C854 08 08 88 70
 774  C858 C0 40 48 50    defb 192,64,72,80,224,80,200,0
 774  C85C E0 50 C8 00
 775  C860 30 10 10 10    defb 48,16,16,16,16,16,56,0
 775  C864 10 10 38 00
 776  C868 00 00 AC 54    defb 0,0,172,84,84,68,204,0
 776  C86C 54 44 CC 00
 777  C870 00 00 B8 44    defb 0,0,184,68,68,68,204,0
 777  C874 44 44 CC 00
 778  C878 00 00 78 84    defb 0,0,120,132,132,132,120,0
 778  C87C 84 84 78 00
 779  C880 00 00 B8 44    defb 0,0,184,68,68,120,64,128
 779  C884 44 78 40 80
 780  C888 00 00 74 88    defb 0,0,116,136,136,120,4,2
 780  C88C 88 78 04 02
 781  C890 00 00 B0 48    defb 0,0,176,72,64,64,64,0
 781  C894 40 40 40 00
 782  C898 00 00 78 80    defb 0,0,120,128,112,8,240,0
 782  C89C 70 08 F0 00
 783  C8A0 00 20 10 7C    defb 0,32,16,124,16,16,8,0
 783  C8A4 10 10 08 00
 784  C8A8 00 00 90 48    defb 0,0,144,72,132,132,120,0
 784  C8AC 84 84 78 00
 785  C8B0 00 00 82 44    defb 0,0,130,68,68,40,16,0
 785  C8B4 44 28 10 00
 786  C8B8 00 00 84 42    defb 0,0,132,66,82,106,70,0
 786  C8BC 52 6A 46 00
 787  C8C0 00 00 88 50    defb 0,0,136,80,32,80,136,0
 787  C8C4 20 50 88 00
 788  C8C8 00 00 82 44    defb 0,0,130,68,68,60,4,120
 788  C8CC 44 3C 04 78
 789  C8D0 00 00 7C 88    defb 0,0,124,136,48,68,248,0
 789  C8D4 30 44 F8 00
 790  C8D8 0E 10 10 60    defb 14,16,16,96,16,16,14,0
 790  C8DC 10 10 0E 00
 791  C8E0 18 18 18 00    defb 24,24,24,0,24,24,24,0
 791  C8E4 18 18 18 00
 792  C8E8 E0 10 10 0C    defb 224,16,16,12,16,16,224,0
 792  C8EC 10 10 E0 00
 793  C8F0 00 00 70 9A    defb 0,0,112,154,12,0,0,0
 793  C8F4 0C 00 00 00
 794  C8F8 00 00 18 3C    defb 0,0,24,60,102,255,0,0
 794  C8FC 66 FF 00 00
 795  C900
 796  C900
 797  C900
 798  C900                  include 7-rd3dmazeV6.asm    ;the maze itself and other routines
# file opened: src/7-rd3dmazeV6.asm
   1+ C900              ;this is the maze data and colour exit routine
   2+ C900
   3+ C900              ;##########################################################
   4+ C900              ;maze data
   5+ C900
   6+ C900                      org $a300   ;41728
   7+ A300
   8+ A300              ;################################################################
   9+ A300              ; maze data
  10+ A300              ;################################################################
  11+ A300
  12+ A300              ; the maze lies on a page boundary, allowing the code to check only the low byte of its address.
  13+ A300              ; the maze is 18 positions north-to-south (rows 0 to 17) and 16 positions west-to-east (columns 0 to 15).
  14+ A300              ;
  15+ A300              ;    n
  16+ A300              ;    |
  17+ A300              ; w -+- e
  18+ A300              ;    |
  19+ A300              ;    s
  20+ A300              ;
  21+ A300              ; key: x=wall, space=passageway, e=exit.
  22+ A300
  23+ A300
  24+ A300                 ;   org 34288 ;($85F0) for maze start
  25+ A300
  26+ A300                     ; org 28928               ;$7100 256 byte boundary
  27+ A300
  28+ A300              ;#####################################################################################
  29+ A300              ;This is our 16 Maze's maze data = numbered 0 to 15
  30+ A300              ;#####################################################################################
  31+ A300
  32+ A300              ; maze constants
  33+ A300              ; --------------
  34+ A300              ; the code for the wall must have bit 7 set whereas the other codes must have bit 7 reset except switch and exit
  35+ A300              ;as we still need to draw a wall.
  36+ A300
  37+ A300              _mw     equ  128   ;bin 10000000              ; wall.
  38+ A300              _mp     equ  32    ;bin 00100000              ; passageway.
  39+ A300              _me     equ  192   ;bin 11000000              ; exit.
  40+ A300              _sp     equ  32    ;bin 00100000              ; passageway.
  41+ A300              _mh     equ  129   ;bin 10000001              ; seperator or end wall
  42+ A300              _ms     equ  224   ;bin 11100000              ; switch     ($e0)
  43+ A300
  44+ A300
  45+ A300              ; _mh - outside wall
  46+ A300              ; _mw - inner maze wall
  47+ A300              ; _mp - space=passageway
  48+ A300              ; _me - exit door
  49+ A300              ; _ms - switch
  50+ A300              ; maze starts at 34288 on a 256 byte boundary
  51+ A300
  52+ A300              ;col  1    2     3    4    5   6    7   8    9    10   11   12   13   14   15   16
  53+ A300              map_0:
  54+ A300 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  54+ A304 20 20 20 20
  54+ A308 20 20 20 20
  54+ A30C 20 20 20 20
  55+ A310 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;2
  55+ A314 80 20 80 20
  55+ A318 80 20 80 20
  55+ A31C 80 20 80 20
  56+ A320 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  56+ A324 20 20 20 20
  56+ A328 20 20 20 20
  56+ A32C 20 20 20 20
  57+ A330 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;4
  57+ A334 80 20 80 20
  57+ A338 80 20 80 20
  57+ A33C 80 20 80 20
  58+ A340 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  58+ A344 20 20 20 20
  58+ A348 20 20 20 20
  58+ A34C 20 20 20 20
  59+ A350 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;6
  59+ A354 80 20 80 20
  59+ A358 80 20 80 20
  59+ A35C 80 20 80 20
  60+ A360 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  60+ A364 80 80 80 20
  60+ A368 20 20 20 20
  60+ A36C 20 20 20 20
  61+ A370 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;8
  61+ A374 80 20 20 20
  61+ A378 80 20 80 20
  61+ A37C 80 20 80 20
  62+ A380 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _me, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  62+ A384 20 20 C0 80
  62+ A388 20 20 20 20
  62+ A38C 20 20 20 20
  63+ A390 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;10
  63+ A394 80 20 80 20
  63+ A398 20 20 80 80
  63+ A39C 20 20 80 20
  64+ A3A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _me, _mw, _mp, _mp, _mp ;11
  64+ A3A4 20 20 20 20
  64+ A3A8 80 20 20 C0
  64+ A3AC 80 20 20 20
  65+ A3B0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;12
  65+ A3B4 80 20 80 20
  65+ A3B8 20 20 80 80
  65+ A3BC 20 20 80 20
  66+ A3C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  66+ A3C4 20 20 20 20
  66+ A3C8 20 20 20 20
  66+ A3CC 20 20 20 20
  67+ A3D0 81 20 C0 20   db _mh, _mp, _me, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;14
  67+ A3D4 80 20 80 20
  67+ A3D8 80 20 80 20
  67+ A3DC 80 20 80 20
  68+ A3E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  68+ A3E4 20 20 20 20
  68+ A3E8 20 20 20 20
  68+ A3EC 20 20 20 20
  69+ A3F0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;16
  69+ A3F4 80 20 80 20
  69+ A3F8 80 20 80 20
  69+ A3FC 80 20 80 20
  70+ A400
  71+ A400              map_1:
  72+ A400 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  72+ A404 20 20 20 20
  72+ A408 20 20 20 20
  72+ A40C 20 20 20 20
  73+ A410 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;2
  73+ A414 20 20 20 20
  73+ A418 20 80 20 20
  73+ A41C 20 20 20 20
  74+ A420 81 C0 20 80   db _mh, _me, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  74+ A424 20 80 80 80
  74+ A428 20 20 20 20
  74+ A42C 20 20 20 20
  75+ A430 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;4
  75+ A434 20 20 20 20
  75+ A438 20 80 20 20
  75+ A43C 20 20 20 20
  76+ A440 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  76+ A444 20 20 80 20
  76+ A448 20 20 20 20
  76+ A44C 20 20 20 20
  77+ A450 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  77+ A454 20 80 80 80
  77+ A458 20 80 20 20
  77+ A45C 20 20 20 20
  78+ A460 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  78+ A464 20 80 20 20
  78+ A468 20 20 20 20
  78+ A46C 20 20 20 20
  79+ A470 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mp, _me, _mw, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;8
  79+ A474 80 80 20 C0
  79+ A478 80 80 20 80
  79+ A47C 80 80 20 20
  80+ A480 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  80+ A484 80 80 20 80
  80+ A488 20 20 20 20
  80+ A48C 20 20 20 20
  81+ A490 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
  81+ A494 20 80 20 20
  81+ A498 20 80 20 20
  81+ A49C 20 20 20 20
  82+ A4A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
  82+ A4A4 20 20 80 20
  82+ A4A8 20 20 20 20
  82+ A4AC 20 20 20 20
  83+ A4B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;12
  83+ A4B4 20 20 20 20
  83+ A4B8 20 80 20 20
  83+ A4BC 20 20 20 20
  84+ A4C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  84+ A4C4 20 20 20 20
  84+ A4C8 20 20 20 20
  84+ A4CC 20 20 20 20
  85+ A4D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;14
  85+ A4D4 20 20 20 20
  85+ A4D8 20 80 20 20
  85+ A4DC 20 20 20 20
  86+ A4E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  86+ A4E4 20 20 20 20
  86+ A4E8 20 20 20 20
  86+ A4EC 20 20 20 20
  87+ A4F0 81 E0 20 20   db _mh, _ms, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;16
  87+ A4F4 20 20 20 20
  87+ A4F8 20 80 20 20
  87+ A4FC 20 20 20 20
  88+ A500
  89+ A500
  90+ A500              map_2:
  91+ A500 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  91+ A504 20 20 20 20
  91+ A508 20 20 20 20
  91+ A50C 20 20 20 20
  92+ A510 81 C0 20 80   db _mh, _me, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
  92+ A514 80 80 80 80
  92+ A518 80 20 20 20
  92+ A51C 20 20 20 20
  93+ A520 81 80 20 80   db _mh, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  93+ A524 20 20 20 20
  93+ A528 20 20 20 20
  93+ A52C 20 20 20 20
  94+ A530 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
  94+ A534 20 20 20 20
  94+ A538 20 20 20 20
  94+ A53C 20 20 20 20
  95+ A540 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  95+ A544 20 20 80 20
  95+ A548 20 20 20 20
  95+ A54C 20 20 20 20
  96+ A550 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  96+ A554 20 20 20 20
  96+ A558 20 80 20 20
  96+ A55C 20 20 20 20
  97+ A560 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  97+ A564 80 80 80 80
  97+ A568 20 20 20 20
  97+ A56C 20 20 20 20
  98+ A570 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
  98+ A574 20 20 80 20
  98+ A578 20 20 20 80
  98+ A57C 80 80 20 20
  99+ A580 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  99+ A584 20 C0 20 20
  99+ A588 20 20 20 20
  99+ A58C 20 20 20 20
 100+ A590 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 100+ A594 20 80 20 20
 100+ A598 20 80 20 20
 100+ A59C 20 20 20 20
 101+ A5A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 101+ A5A4 20 20 20 20
 101+ A5A8 80 20 20 20
 101+ A5AC 20 20 20 20
 102+ A5B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 102+ A5B4 20 20 20 20
 102+ A5B8 80 20 20 20
 102+ A5BC 20 20 20 20
 103+ A5C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 103+ A5C4 20 20 20 20
 103+ A5C8 20 20 20 20
 103+ A5CC 20 20 20 20
 104+ A5D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 104+ A5D4 20 20 20 20
 104+ A5D8 20 20 20 20
 104+ A5DC 20 20 20 20
 105+ A5E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 105+ A5E4 20 20 20 20
 105+ A5E8 20 20 20 20
 105+ A5EC 20 20 20 20
 106+ A5F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 106+ A5F4 20 20 20 20
 106+ A5F8 20 20 20 20
 106+ A5FC 20 20 20 20
 107+ A600
 108+ A600              map_3
 109+ A600 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 109+ A604 20 20 20 20
 109+ A608 20 20 20 20
 109+ A60C 20 20 20 20
 110+ A610 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 110+ A614 20 20 20 80
 110+ A618 20 20 20 20
 110+ A61C 20 20 20 20
 111+ A620 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 111+ A624 20 20 20 80
 111+ A628 20 20 20 20
 111+ A62C 20 20 20 20
 112+ A630 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;4
 112+ A634 20 20 20 80
 112+ A638 20 20 20 20
 112+ A63C 20 20 80 20
 113+ A640 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 113+ A644 20 20 20 20
 113+ A648 20 20 20 20
 113+ A64C 20 20 80 20
 114+ A650 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 114+ A654 20 20 20 80
 114+ A658 20 20 20 20
 114+ A65C 20 20 20 20
 115+ A660 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 115+ A664 20 20 20 20
 115+ A668 20 20 20 20
 115+ A66C 20 20 20 20
 116+ A670 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 116+ A674 20 20 20 80
 116+ A678 20 20 20 20
 116+ A67C 20 20 20 20
 117+ A680 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 117+ A684 20 20 20 20
 117+ A688 20 20 20 20
 117+ A68C 20 20 20 20
 118+ A690 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 118+ A694 80 80 20 80
 118+ A698 20 20 20 20
 118+ A69C 20 20 20 20
 119+ A6A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 119+ A6A4 20 20 80 20
 119+ A6A8 20 20 20 20
 119+ A6AC 20 20 20 20
 120+ A6B0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 120+ A6B4 20 C0 20 80
 120+ A6B8 20 20 20 20
 120+ A6BC 20 20 20 20
 121+ A6C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 121+ A6C4 20 20 20 20
 121+ A6C8 20 20 20 20
 121+ A6CC 20 20 20 20
 122+ A6D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 122+ A6D4 20 20 20 80
 122+ A6D8 20 20 20 20
 122+ A6DC 20 20 20 20
 123+ A6E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 123+ A6E4 20 20 20 80
 123+ A6E8 20 20 20 20
 123+ A6EC 20 20 20 20
 124+ A6F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 124+ A6F4 20 20 20 80
 124+ A6F8 20 20 20 20
 124+ A6FC 20 20 20 20
 125+ A700
 126+ A700              map_4:
 127+ A700 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 127+ A704 20 20 20 20
 127+ A708 20 20 20 20
 127+ A70C 20 20 20 20
 128+ A710 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;2
 128+ A714 80 80 80 80
 128+ A718 80 80 80 80
 128+ A71C 80 80 20 20
 129+ A720 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp ;3
 129+ A724 20 20 20 20
 129+ A728 20 20 20 80
 129+ A72C 20 80 20 20
 130+ A730 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp ;4
 130+ A734 20 20 20 20
 130+ A738 80 80 20 80
 130+ A73C 20 20 20 20
 131+ A740 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp ;5
 131+ A744 80 80 80 80
 131+ A748 20 80 20 80
 131+ A74C 20 80 20 20
 132+ A750 81 20 80 80   db _mh, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;6
 132+ A754 20 20 20 20
 132+ A758 20 80 20 80
 132+ A75C 80 80 20 20
 133+ A760 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;7
 133+ A764 20 20 80 80
 133+ A768 20 20 20 80
 133+ A76C 20 20 20 20
 134+ A770 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
 134+ A774 80 80 20 20
 134+ A778 20 20 20 80
 134+ A77C 80 80 20 20
 135+ A780 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 135+ A784 20 20 20 80
 135+ A788 20 80 80 80
 135+ A78C 80 80 80 20
 136+ A790 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 136+ A794 80 80 20 20
 136+ A798 20 80 20 20
 136+ A79C 20 20 20 20
 137+ A7A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp ;11
 137+ A7A4 20 20 80 20
 137+ A7A8 20 20 20 20
 137+ A7AC 20 80 80 20
 138+ A7B0 81 80 20 80   db _mh, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;12
 138+ A7B4 80 80 80 80
 138+ A7B8 80 80 80 80
 138+ A7BC 80 80 20 20
 139+ A7C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp ;13
 139+ A7C4 20 80 20 20
 139+ A7C8 80 20 20 20
 139+ A7CC 80 80 20 20
 140+ A7D0 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp ;14
 140+ A7D4 20 80 20 20
 140+ A7D8 20 20 20 20
 140+ A7DC 20 80 20 20
 141+ A7E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mp, _mp ;15
 141+ A7E4 20 80 80 80
 141+ A7E8 80 80 20 20
 141+ A7EC 80 80 20 20
 142+ A7F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 142+ A7F4 20 20 20 20
 142+ A7F8 20 20 20 20
 142+ A7FC 20 20 20 20
 143+ A800
 144+ A800              map_5:
 145+ A800 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 145+ A804 20 20 20 20
 145+ A808 20 20 20 20
 145+ A80C 20 20 20 20
 146+ A810 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;2
 146+ A814 80 80 80 20
 146+ A818 80 80 80 80
 146+ A81C 80 80 80 20
 147+ A820 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 147+ A824 20 20 20 20
 147+ A828 20 20 20 20
 147+ A82C 20 20 20 20
 148+ A830 81 20 C0 20   db _mh, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 148+ A834 20 20 20 20
 148+ A838 20 20 20 20
 148+ A83C 20 20 20 20
 149+ A840 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;5
 149+ A844 80 80 80 20
 149+ A848 80 80 80 80
 149+ A84C 80 80 80 20
 150+ A850 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 150+ A854 20 20 20 20
 150+ A858 20 20 20 20
 150+ A85C 20 20 20 20
 151+ A860 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 151+ A864 20 20 20 20
 151+ A868 20 20 20 20
 151+ A86C 20 20 20 20
 152+ A870 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 152+ A874 20 20 20 20
 152+ A878 20 20 20 20
 152+ A87C 20 20 20 20
 153+ A880 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 153+ A884 80 80 80 20
 153+ A888 80 80 80 80
 153+ A88C 80 80 80 20
 154+ A890 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;10
 154+ A894 20 20 20 20
 154+ A898 20 20 80 20
 154+ A89C 80 20 20 20
 155+ A8A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;11
 155+ A8A4 20 20 20 20
 155+ A8A8 20 80 20 20
 155+ A8AC 20 80 20 20
 156+ A8B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mw, _mp ;12
 156+ A8B4 20 20 20 20
 156+ A8B8 80 20 20 80
 156+ A8BC 20 20 80 20
 157+ A8C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;13
 157+ A8C4 20 20 20 80
 157+ A8C8 20 20 80 20
 157+ A8CC 80 20 20 20
 158+ A8D0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;14
 158+ A8D4 80 80 80 20
 158+ A8D8 20 80 20 20
 158+ A8DC 20 80 80 20
 159+ A8E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;15
 159+ A8E4 20 20 20 20
 159+ A8E8 80 80 80 80
 159+ A8EC 20 20 20 20
 160+ A8F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;16
 160+ A8F4 20 20 20 80
 160+ A8F8 80 80 80 80
 160+ A8FC 80 80 20 20
 161+ A900
 162+ A900              map_6:
 163+ A900 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 163+ A904 20 20 20 20
 163+ A908 20 20 20 20
 163+ A90C 20 20 20 20
 164+ A910 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mw, _mp ;2
 164+ A914 80 80 80 80
 164+ A918 80 80 20 20
 164+ A91C 80 80 80 20
 165+ A920 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;3
 165+ A924 80 20 20 20
 165+ A928 80 80 20 20
 165+ A92C 20 80 20 20
 166+ A930 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _ms, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;4
 166+ A934 80 20 E0 20
 166+ A938 80 80 80 80
 166+ A93C 80 80 20 20
 167+ A940 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;5
 167+ A944 80 20 80 20
 167+ A948 80 80 20 20
 167+ A94C 20 20 20 20
 168+ A950 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;6
 168+ A954 80 20 80 20
 168+ A958 20 80 20 20
 168+ A95C 20 80 80 20
 169+ A960 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;7
 169+ A964 20 20 20 20
 169+ A968 20 80 20 20
 169+ A96C 20 80 20 20
 170+ A970 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;8
 170+ A974 80 80 80 80
 170+ A978 20 80 80 80
 170+ A97C 80 80 80 20
 171+ A980 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 171+ A984 20 20 20 80
 171+ A988 20 20 20 20
 171+ A98C 20 20 20 20
 172+ A990 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mw, _mw, _mp ;10
 172+ A994 80 80 20 80
 172+ A998 20 80 80 20
 172+ A99C 80 80 80 20
 173+ A9A0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;11
 173+ A9A4 20 80 20 80
 173+ A9A8 20 20 80 20
 173+ A9AC 80 20 80 20
 174+ A9B0 81 20 20 20   db _mh, _mp, _mp, _mp, _me, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp ;12
 174+ A9B4 C0 80 20 80
 174+ A9B8 20 80 20 80
 174+ A9BC 20 20 80 20
 175+ A9C0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;13
 175+ A9C4 80 80 20 80
 175+ A9C8 20 80 20 20
 175+ A9CC 20 20 20 20
 176+ A9D0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;14
 176+ A9D4 20 20 20 80
 176+ A9D8 20 80 80 80
 176+ A9DC 20 20 20 20
 177+ A9E0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp ;15
 177+ A9E4 80 80 80 80
 177+ A9E8 20 80 80 80
 177+ A9EC 80 20 80 20
 178+ A9F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 178+ A9F4 20 20 20 20
 178+ A9F8 20 20 20 20
 178+ A9FC 20 20 20 20
 179+ AA00
 180+ AA00              map_7
 181+ AA00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 181+ AA04 20 20 20 20
 181+ AA08 20 20 20 20
 181+ AA0C 20 20 20 20
 182+ AA10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 182+ AA14 20 20 20 80
 182+ AA18 20 20 20 20
 182+ AA1C 20 20 20 20
 183+ AA20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 183+ AA24 20 20 20 80
 183+ AA28 20 20 20 20
 183+ AA2C 20 20 20 20
 184+ AA30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 184+ AA34 20 20 20 80
 184+ AA38 20 20 20 20
 184+ AA3C 20 20 20 20
 185+ AA40 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 185+ AA44 20 20 20 20
 185+ AA48 20 20 20 20
 185+ AA4C 20 20 80 20
 186+ AA50 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;6
 186+ AA54 20 20 20 20
 186+ AA58 20 20 20 20
 186+ AA5C 20 20 80 20
 187+ AA60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 187+ AA64 20 20 20 20
 187+ AA68 20 20 20 20
 187+ AA6C 20 20 20 20
 188+ AA70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 188+ AA74 20 20 20 20
 188+ AA78 20 20 20 20
 188+ AA7C 20 20 20 20
 189+ AA80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 189+ AA84 20 20 20 20
 189+ AA88 20 20 20 20
 189+ AA8C 20 20 20 20
 190+ AA90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;10
 190+ AA94 20 20 20 20
 190+ AA98 20 20 20 80
 190+ AA9C 20 20 20 20
 191+ AAA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 191+ AAA4 20 20 20 20
 191+ AAA8 20 20 20 20
 191+ AAAC 20 20 20 20
 192+ AAB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 192+ AAB4 20 20 20 20
 192+ AAB8 20 20 20 20
 192+ AABC 20 20 20 20
 193+ AAC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 193+ AAC4 20 20 20 20
 193+ AAC8 20 20 20 20
 193+ AACC 20 20 20 20
 194+ AAD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 194+ AAD4 20 20 20 20
 194+ AAD8 20 20 20 20
 194+ AADC 20 20 20 20
 195+ AAE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 195+ AAE4 20 20 20 20
 195+ AAE8 20 20 20 20
 195+ AAEC 20 20 20 20
 196+ AAF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 196+ AAF4 20 20 20 20
 196+ AAF8 20 20 20 20
 196+ AAFC 20 20 20 20
 197+ AB00
 198+ AB00              map_8:
 199+ AB00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 199+ AB04 20 20 20 20
 199+ AB08 20 20 20 20
 199+ AB0C 20 20 20 20
 200+ AB10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 200+ AB14 20 20 20 80
 200+ AB18 20 20 20 20
 200+ AB1C 20 20 20 20
 201+ AB20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 201+ AB24 20 20 20 80
 201+ AB28 20 20 20 20
 201+ AB2C 20 20 20 20
 202+ AB30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 202+ AB34 20 20 20 80
 202+ AB38 20 20 20 20
 202+ AB3C 20 20 20 20
 203+ AB40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 203+ AB44 20 20 20 20
 203+ AB48 20 20 20 20
 203+ AB4C 20 20 20 20
 204+ AB50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 204+ AB54 20 20 20 20
 204+ AB58 20 20 20 20
 204+ AB5C 20 20 20 20
 205+ AB60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 205+ AB64 20 20 20 20
 205+ AB68 20 20 20 20
 205+ AB6C 20 20 20 20
 206+ AB70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 206+ AB74 20 20 20 20
 206+ AB78 20 20 20 20
 206+ AB7C 20 20 20 20
 207+ AB80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 207+ AB84 20 20 20 20
 207+ AB88 20 20 20 20
 207+ AB8C 20 20 20 20
 208+ AB90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 208+ AB94 20 20 20 20
 208+ AB98 20 20 20 20
 208+ AB9C 20 20 20 20
 209+ ABA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 209+ ABA4 20 20 80 20
 209+ ABA8 20 20 20 20
 209+ ABAC 20 20 20 20
 210+ ABB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 210+ ABB4 20 20 20 80
 210+ ABB8 20 20 20 20
 210+ ABBC 20 20 20 20
 211+ ABC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 211+ ABC4 20 20 80 20
 211+ ABC8 20 20 20 20
 211+ ABCC 20 20 20 20
 212+ ABD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 212+ ABD4 20 20 20 20
 212+ ABD8 20 20 20 20
 212+ ABDC 20 20 20 20
 213+ ABE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 213+ ABE4 20 20 20 20
 213+ ABE8 20 20 20 20
 213+ ABEC 20 20 20 20
 214+ ABF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 214+ ABF4 20 20 20 20
 214+ ABF8 20 20 20 20
 214+ ABFC 20 20 20 20
 215+ AC00
 216+ AC00              map_9:
 217+ AC00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 217+ AC04 20 20 20 20
 217+ AC08 20 20 20 20
 217+ AC0C 20 20 20 20
 218+ AC10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 218+ AC14 20 20 20 20
 218+ AC18 20 20 20 20
 218+ AC1C 20 20 20 20
 219+ AC20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 219+ AC24 20 20 20 20
 219+ AC28 20 20 20 20
 219+ AC2C 20 20 20 20
 220+ AC30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 220+ AC34 20 20 20 20
 220+ AC38 20 20 20 20
 220+ AC3C 20 20 20 20
 221+ AC40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 221+ AC44 20 20 20 20
 221+ AC48 20 20 20 20
 221+ AC4C 20 20 20 20
 222+ AC50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 222+ AC54 20 20 20 20
 222+ AC58 20 20 20 20
 222+ AC5C 20 20 20 20
 223+ AC60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 223+ AC64 20 20 20 20
 223+ AC68 20 20 20 20
 223+ AC6C 20 20 20 20
 224+ AC70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 224+ AC74 20 20 20 20
 224+ AC78 20 20 20 20
 224+ AC7C 20 20 20 20
 225+ AC80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 225+ AC84 20 20 20 20
 225+ AC88 20 20 20 20
 225+ AC8C 20 20 20 20
 226+ AC90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 226+ AC94 20 20 20 20
 226+ AC98 20 20 20 20
 226+ AC9C 20 20 20 20
 227+ ACA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 227+ ACA4 20 20 20 20
 227+ ACA8 20 20 20 20
 227+ ACAC 20 20 20 20
 228+ ACB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 228+ ACB4 20 20 20 20
 228+ ACB8 20 20 20 20
 228+ ACBC 20 20 20 20
 229+ ACC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 229+ ACC4 20 20 20 20
 229+ ACC8 20 20 20 20
 229+ ACCC 20 20 20 20
 230+ ACD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 230+ ACD4 20 20 20 20
 230+ ACD8 20 20 20 20
 230+ ACDC 20 20 20 20
 231+ ACE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 231+ ACE4 20 20 20 20
 231+ ACE8 20 20 20 20
 231+ ACEC 20 20 20 20
 232+ ACF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 232+ ACF4 20 20 20 20
 232+ ACF8 20 20 20 20
 232+ ACFC 20 20 20 20
 233+ AD00
 234+ AD00              map_10:
 235+ AD00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 235+ AD04 20 20 20 20
 235+ AD08 20 20 20 20
 235+ AD0C 20 20 20 20
 236+ AD10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 236+ AD14 20 20 20 20
 236+ AD18 20 20 20 20
 236+ AD1C 20 20 20 20
 237+ AD20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 237+ AD24 20 20 20 20
 237+ AD28 20 20 20 20
 237+ AD2C 20 20 20 20
 238+ AD30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 238+ AD34 20 20 20 20
 238+ AD38 20 20 20 20
 238+ AD3C 20 20 20 20
 239+ AD40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 239+ AD44 20 20 20 20
 239+ AD48 20 20 20 20
 239+ AD4C 20 20 20 20
 240+ AD50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 240+ AD54 20 20 20 20
 240+ AD58 20 20 20 20
 240+ AD5C 20 20 20 20
 241+ AD60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 241+ AD64 20 20 20 20
 241+ AD68 20 20 20 20
 241+ AD6C 20 20 20 20
 242+ AD70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 242+ AD74 20 20 20 20
 242+ AD78 20 20 20 20
 242+ AD7C 20 20 20 20
 243+ AD80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 243+ AD84 20 20 20 20
 243+ AD88 20 20 20 20
 243+ AD8C 20 20 20 20
 244+ AD90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 244+ AD94 20 20 20 20
 244+ AD98 20 20 20 20
 244+ AD9C 20 20 20 20
 245+ ADA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 245+ ADA4 20 20 20 20
 245+ ADA8 20 20 20 20
 245+ ADAC 20 20 20 20
 246+ ADB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 246+ ADB4 20 20 20 20
 246+ ADB8 20 20 20 20
 246+ ADBC 20 20 20 20
 247+ ADC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 247+ ADC4 20 20 20 20
 247+ ADC8 20 20 20 20
 247+ ADCC 20 20 20 20
 248+ ADD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 248+ ADD4 20 20 20 20
 248+ ADD8 20 20 20 20
 248+ ADDC 20 20 20 20
 249+ ADE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 249+ ADE4 20 20 20 20
 249+ ADE8 20 20 20 20
 249+ ADEC 20 20 20 20
 250+ ADF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 250+ ADF4 20 20 20 20
 250+ ADF8 20 20 20 20
 250+ ADFC 20 20 20 20
 251+ AE00
 252+ AE00              map_11:
 253+ AE00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 253+ AE04 20 20 20 20
 253+ AE08 20 20 20 20
 253+ AE0C 20 20 20 20
 254+ AE10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 254+ AE14 20 20 20 20
 254+ AE18 20 20 20 20
 254+ AE1C 20 20 20 20
 255+ AE20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 255+ AE24 20 20 20 20
 255+ AE28 20 20 20 20
 255+ AE2C 20 20 20 20
 256+ AE30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 256+ AE34 20 20 20 20
 256+ AE38 20 20 20 20
 256+ AE3C 20 20 20 20
 257+ AE40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 257+ AE44 20 20 20 20
 257+ AE48 20 20 20 20
 257+ AE4C 20 20 20 20
 258+ AE50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 258+ AE54 20 20 20 20
 258+ AE58 20 20 20 20
 258+ AE5C 20 20 20 20
 259+ AE60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 259+ AE64 20 20 20 20
 259+ AE68 20 20 20 20
 259+ AE6C 20 20 20 20
 260+ AE70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 260+ AE74 20 20 20 20
 260+ AE78 20 20 20 20
 260+ AE7C 20 20 20 20
 261+ AE80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 261+ AE84 20 20 20 20
 261+ AE88 20 20 20 20
 261+ AE8C 20 20 20 20
 262+ AE90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 262+ AE94 20 20 20 20
 262+ AE98 20 20 20 20
 262+ AE9C 20 20 20 20
 263+ AEA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 263+ AEA4 20 20 20 20
 263+ AEA8 20 20 20 20
 263+ AEAC 20 20 20 20
 264+ AEB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 264+ AEB4 20 20 20 20
 264+ AEB8 20 20 20 20
 264+ AEBC 20 20 20 20
 265+ AEC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 265+ AEC4 20 20 20 20
 265+ AEC8 20 20 20 20
 265+ AECC 20 20 20 20
 266+ AED0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 266+ AED4 20 20 20 20
 266+ AED8 20 20 20 20
 266+ AEDC 20 20 20 20
 267+ AEE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 267+ AEE4 20 20 20 20
 267+ AEE8 20 20 20 20
 267+ AEEC 20 20 20 20
 268+ AEF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 268+ AEF4 20 20 20 20
 268+ AEF8 20 20 20 20
 268+ AEFC 20 20 20 20
 269+ AF00
 270+ AF00              map_12:
 271+ AF00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 271+ AF04 20 20 20 20
 271+ AF08 20 20 20 20
 271+ AF0C 20 20 20 20
 272+ AF10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 272+ AF14 20 20 20 20
 272+ AF18 20 20 20 20
 272+ AF1C 20 20 20 20
 273+ AF20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 273+ AF24 20 20 20 20
 273+ AF28 20 20 20 20
 273+ AF2C 20 20 20 20
 274+ AF30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 274+ AF34 20 20 20 20
 274+ AF38 20 20 20 20
 274+ AF3C 20 20 20 20
 275+ AF40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 275+ AF44 20 20 20 20
 275+ AF48 20 20 20 20
 275+ AF4C 20 20 20 20
 276+ AF50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 276+ AF54 20 20 20 20
 276+ AF58 20 20 20 20
 276+ AF5C 20 20 20 20
 277+ AF60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 277+ AF64 20 20 20 20
 277+ AF68 20 20 20 20
 277+ AF6C 20 20 20 20
 278+ AF70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 278+ AF74 20 20 20 20
 278+ AF78 20 20 20 20
 278+ AF7C 20 20 20 20
 279+ AF80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 279+ AF84 20 20 20 20
 279+ AF88 20 20 20 20
 279+ AF8C 20 20 20 20
 280+ AF90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 280+ AF94 20 20 20 20
 280+ AF98 20 20 20 20
 280+ AF9C 20 20 20 20
 281+ AFA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 281+ AFA4 20 20 20 20
 281+ AFA8 20 20 20 20
 281+ AFAC 20 20 20 20
 282+ AFB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 282+ AFB4 20 20 20 20
 282+ AFB8 20 20 20 20
 282+ AFBC 20 20 20 20
 283+ AFC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 283+ AFC4 20 20 20 20
 283+ AFC8 20 20 20 20
 283+ AFCC 20 20 20 20
 284+ AFD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 284+ AFD4 20 20 20 20
 284+ AFD8 20 20 20 20
 284+ AFDC 20 20 20 20
 285+ AFE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 285+ AFE4 20 20 20 20
 285+ AFE8 20 20 20 20
 285+ AFEC 20 20 20 20
 286+ AFF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 286+ AFF4 20 20 20 20
 286+ AFF8 20 20 20 20
 286+ AFFC 20 20 20 20
 287+ B000
 288+ B000              map_13:
 289+ B000 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 289+ B004 20 20 20 20
 289+ B008 20 20 20 20
 289+ B00C 20 20 20 20
 290+ B010 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 290+ B014 20 20 20 20
 290+ B018 20 20 20 20
 290+ B01C 20 20 20 20
 291+ B020 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 291+ B024 20 20 20 20
 291+ B028 20 20 20 20
 291+ B02C 20 20 20 20
 292+ B030 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 292+ B034 20 20 20 20
 292+ B038 20 20 20 20
 292+ B03C 20 20 20 20
 293+ B040 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 293+ B044 20 20 20 20
 293+ B048 20 20 20 20
 293+ B04C 20 20 20 20
 294+ B050 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 294+ B054 20 20 20 20
 294+ B058 20 20 20 20
 294+ B05C 20 20 20 20
 295+ B060 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 295+ B064 20 20 20 20
 295+ B068 20 20 20 20
 295+ B06C 20 20 20 20
 296+ B070 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 296+ B074 20 20 20 20
 296+ B078 20 20 20 20
 296+ B07C 20 20 20 20
 297+ B080 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 297+ B084 20 20 20 20
 297+ B088 20 20 20 20
 297+ B08C 20 20 20 20
 298+ B090 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 298+ B094 20 20 20 20
 298+ B098 20 20 20 20
 298+ B09C 20 20 20 20
 299+ B0A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 299+ B0A4 20 20 20 20
 299+ B0A8 20 20 20 20
 299+ B0AC 20 20 20 20
 300+ B0B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 300+ B0B4 20 20 20 20
 300+ B0B8 20 20 20 20
 300+ B0BC 20 20 20 20
 301+ B0C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 301+ B0C4 20 20 20 20
 301+ B0C8 20 20 20 20
 301+ B0CC 20 20 20 20
 302+ B0D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 302+ B0D4 20 20 20 20
 302+ B0D8 20 20 20 20
 302+ B0DC 20 20 20 20
 303+ B0E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 303+ B0E4 20 20 20 20
 303+ B0E8 20 20 20 20
 303+ B0EC 20 20 20 20
 304+ B0F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 304+ B0F4 20 20 20 20
 304+ B0F8 20 20 20 20
 304+ B0FC 20 20 20 20
 305+ B100
 306+ B100              map_14:
 307+ B100 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 307+ B104 20 20 20 20
 307+ B108 20 20 20 20
 307+ B10C 20 20 20 20
 308+ B110 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 308+ B114 20 20 20 20
 308+ B118 20 20 20 20
 308+ B11C 20 20 20 20
 309+ B120 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 309+ B124 20 20 20 20
 309+ B128 20 20 20 20
 309+ B12C 20 20 20 20
 310+ B130 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 310+ B134 20 20 20 20
 310+ B138 20 20 20 20
 310+ B13C 20 20 20 20
 311+ B140 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 311+ B144 20 20 20 20
 311+ B148 20 20 20 20
 311+ B14C 20 20 20 20
 312+ B150 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 312+ B154 20 20 20 20
 312+ B158 20 20 20 20
 312+ B15C 20 20 20 20
 313+ B160 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 313+ B164 20 20 20 20
 313+ B168 20 20 20 20
 313+ B16C 20 20 20 20
 314+ B170 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 314+ B174 20 20 20 20
 314+ B178 20 20 20 20
 314+ B17C 20 20 20 20
 315+ B180 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 315+ B184 20 20 20 20
 315+ B188 20 20 20 20
 315+ B18C 20 20 20 20
 316+ B190 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 316+ B194 20 20 20 20
 316+ B198 20 20 20 20
 316+ B19C 20 20 20 20
 317+ B1A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 317+ B1A4 20 20 20 20
 317+ B1A8 20 20 20 20
 317+ B1AC 20 20 20 20
 318+ B1B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 318+ B1B4 20 20 20 20
 318+ B1B8 20 20 20 20
 318+ B1BC 20 20 20 20
 319+ B1C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 319+ B1C4 20 20 20 20
 319+ B1C8 20 20 20 20
 319+ B1CC 20 20 20 20
 320+ B1D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 320+ B1D4 20 20 20 20
 320+ B1D8 20 20 20 20
 320+ B1DC 20 20 20 20
 321+ B1E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 321+ B1E4 20 20 20 20
 321+ B1E8 20 20 20 20
 321+ B1EC 20 20 20 20
 322+ B1F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 322+ B1F4 20 20 20 20
 322+ B1F8 20 20 20 20
 322+ B1FC 20 20 20 20
 323+ B200
 324+ B200              map_15:
 325+ B200 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 325+ B204 20 20 20 20
 325+ B208 20 20 20 20
 325+ B20C 20 20 20 20
 326+ B210 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 326+ B214 20 20 20 20
 326+ B218 20 20 20 20
 326+ B21C 20 20 20 20
 327+ B220 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 327+ B224 20 20 20 20
 327+ B228 20 20 20 20
 327+ B22C 20 20 20 20
 328+ B230 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 328+ B234 20 20 20 20
 328+ B238 20 20 20 20
 328+ B23C 20 20 20 20
 329+ B240 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 329+ B244 20 20 20 20
 329+ B248 20 20 20 20
 329+ B24C 20 20 20 20
 330+ B250 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 330+ B254 20 20 20 20
 330+ B258 20 20 20 20
 330+ B25C 20 20 20 20
 331+ B260 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 331+ B264 20 20 20 20
 331+ B268 20 20 20 20
 331+ B26C 20 20 20 20
 332+ B270 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 332+ B274 20 20 20 20
 332+ B278 20 20 20 20
 332+ B27C 20 20 20 20
 333+ B280 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 333+ B284 20 20 20 20
 333+ B288 20 20 20 20
 333+ B28C 20 20 20 20
 334+ B290 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 334+ B294 20 20 20 20
 334+ B298 20 20 20 20
 334+ B29C 20 20 20 20
 335+ B2A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 335+ B2A4 20 20 20 20
 335+ B2A8 20 20 20 20
 335+ B2AC 20 20 20 20
 336+ B2B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 336+ B2B4 20 20 20 20
 336+ B2B8 20 20 20 20
 336+ B2BC 20 20 20 20
 337+ B2C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 337+ B2C4 20 20 20 20
 337+ B2C8 20 20 20 20
 337+ B2CC 20 20 20 20
 338+ B2D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 338+ B2D4 20 20 20 20
 338+ B2D8 20 20 20 20
 338+ B2DC 20 20 20 20
 339+ B2E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 339+ B2E4 20 20 20 20
 339+ B2E8 20 20 20 20
 339+ B2EC 20 20 20 20
 340+ B2F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 340+ B2F4 20 20 20 20
 340+ B2F8 20 20 20 20
 340+ B2FC 20 20 20 20
 341+ B300
 342+ B300              ;map start positions
 343+ B300
 344+ B300              ;map0
 345+ B300 00 00                dw  00
 346+ B302              ;map1
 347+ B302 00 00                dw  00
 348+ B304              ;map2
 349+ B304 00 00                dw  00
 350+ B306              ;map3
 351+ B306 00 00                dw  00
 352+ B308              ;map4
 353+ B308 00 00                dw  00
 354+ B30A              ;map5
 355+ B30A 00 00                dw  00
 356+ B30C              ;map6
 357+ B30C 00 00                dw  00
 358+ B30E              ;map7
 359+ B30E 00 00                dw  00
 360+ B310              ;map8
 361+ B310 00 00                dw  00
 362+ B312              ;map9
 363+ B312 00 00                dw  00
 364+ B314              ;map10
 365+ B314 00 00                dw  00
 366+ B316              ;map11
 367+ B316 00 00                dw  00
 368+ B318              ;map12
 369+ B318 00 00                dw  00
 370+ B31A              ;map13
 371+ B31A 00 00                dw  00
 372+ B31C              ;map14
 373+ B31C 00 00                dw  00
 374+ B31E              ;map15
 375+ B31E 00 00                dw  00
 376+ B320
 377+ B320 00                   nop
 378+ B321 00                   nop
 379+ B322 00                   nop
 380+ B323
 381+ B323
 382+ B323              ;##################################################################################
 383+ B323              ;door exit animation
 384+ B323              ;the idea here is that the following will happen when you reach the exit:-
 385+ B323              ;    0 turn off the buffer screen via reg $69
 386+ B323              ;    1 draw a black box growing ever bigger to fill the screen - thats exit_anim routine
 387+ B323              ;    2 leave that screen on show
 388+ B323              ;    3 point to the buffer screen
 389+ B323              ;    4 draw the first screen of the next level - unless its the last level (level 255 when you finish the game!)
 390+ B323              ;    5 copy the attributes to a place in memory - probably after the char screen at $c000
 391+ B323              ;    6 switch the buffer screen back on via reg $69
 392+ B323              ;    7 make all the buffer screen colours black
 393+ B323              ;    8 switch in the buffer screen
 394+ B323              ;    9 turn off the buffer screen because we want to see the colours materialise!
 395+ B323              ;    9 draw the colours back in from the copied colours earlier but from the outside in - new_maze_anim routine
 396+ B323              ;    10 go back to normal!
 397+ B323              ;
 398+ B323              ;   if A==10: NR_69=0 (display Bank5)
 399+ B323              exit_anim:
 400+ B323                        ;  BREAK
 401+ B323              ;first, make the REAL spectrum screen shows our exit door as we need to write to the screen LIVE
 402+ B323
 403+ B323 ED 91 52 0A              nextreg $52,10      ;select the real spectrum screen
 404+ B327                          ;now redraw our current screen
 405+ B327 CD 6E B3                 call redraw_screen
 406+ B32A CD 59 B4                 call copy_colours
 407+ B32D CD 7B 85                 call draw_exit_door_open
 408+ B330 CD 93 9A                 call draw_screen_right
 409+ B333 21 00 C5                 ld hl,charset_1-256
 410+ B336 22 36 8C                 ld (base),hl
 411+ B339 CD E1 8C                 call compass          ; draw compass
 412+ B33C
 413+ B33C ED 91 69 00              nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 414+ B340 3E 0A                    ld a,10
 415+ B342 32 CA 81                 ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 416+ B345
 417+ B345 ED 91 07 00              nextreg 7,0
 418+ B349 CD 8A B3                 call do_exit_anim
 419+ B34C CD 6B 81                 call pause
 420+ B34F
 421+ B34F              ;need to set the player start position now.
 422+ B34F
 423+ B34F 3A 22 FA                 ld a,(cur_map)
 424+ B352 3D                       dec a               ;point to our next map
 425+ B353 CD B7 A2                 call set_map      ;set our map
 426+ B356 2E 01                    ld l,01              ;top left of maze
 427+ B358 22 00 FA                 ld (player_pos),hl
 428+ B35B
 429+ B35B              ;need to make the screen black, draw ink bits, copy colours to somewhere else then copy back
 430+ B35B
 431+ B35B                        ;  nextreg $69,64       ;turn ON screen buffering so we write directly to the ALTERNATE screen our new maze start
 432+ B35B CD 6E B3                 call redraw_screen
 433+ B35E CD 27 B4                 call new_maze_anim
 434+ B361 CD 6B 81                 call pause
 435+ B364 CD 6B 81                 call pause
 436+ B367 CD 6B 81                 call pause
 437+ B36A CD 6B 81                 call pause
 438+ B36D
 439+ B36D C9                       ret                 ;return to normal game
 440+ B36E              ;------------------------------------------------------------------------------------------
 441+ B36E              redraw_screen:
 442+ B36E CD 80 81                   call clear_char_screen    ;clear screen @c000
 443+ B371 CD 93 8D                   call get_distance         ; get distance we can see
 444+ B374 CD 67 8F                   call draw_left_side       ; start drawing the left side of the
 445+ B377 CD 93 8D                   call get_distance         ; get distance we can see
 446+ B37A CD 80 9B                   call draw_right_side      ; start drawing the right side of the maze
 447+ B37D CD 0A 97                   call draw_front_view      ; draw wall in front of player
 448+ B380 CD 96 97                   call draw_side_walls
 449+ B383                            ;my print used to print screen @c000 to 16384 inc udg's
 450+ B383 CD 8E 8C                   call my_print             ;copy to screen from c000
 451+ B386 CD 18 99                   call draw_colours         ;colourise the display
 452+ B389 C9                         ret
 453+ B38A              ;end drawing the new screen
 454+ B38A              ;----------------------------------------------------------------------------------
 455+ B38A              ;draw a load of black boxes to hide the current screen. We then call part of this routine again to draw in the correct
 456+ B38A              ;colours to the new level - supposed to look cool lol!
 457+ B38A
 458+ B38A              do_exit_anim:
 459+ B38A ED 91 07 00             nextreg 7,0
 460+ B38E
 461+ B38E              ;Original base code by David Saphier from Facebook May 2018
 462+ B38E
 463+ B38E 97                       sub a
 464+ B38F 32 22 B4                 ld (in_out),a       ;indicate we are drawing out from the middle
 465+ B392
 466+ B392
 467+ B392              ;reset the boxes to default
 468+ B392              ; this must be the same as the size of the square to draw
 469+ B392 3E 02                    ld a,2    ; reduce the size of the square to draw
 470+ B394 32 23 B4                 ld (size1),a
 471+ B397
 472+ B397              ; this must equal the number of squares to draw
 473+ B397 3E 02                    ld a,2  ;number of boxes to draw
 474+ B399 32 24 B4                 ld (num2draw1),a
 475+ B39C
 476+ B39C 21 6C 59                 ld hl,256+11+22528+65+32 ;start point - middle of the screen nearly!
 477+ B39F
 478+ B39F 3E 5A                    ld a,90
 479+ B3A1 32 58 B4                 ld (sound_byte),a
 480+ B3A4
 481+ B3A4              d_box1:	    ;play some sound
 482+ B3A4 D5                       push de
 483+ B3A5 3A 58 B4                 ld a,(sound_byte)
 484+ B3A8 D6 06                    sub 6
 485+ B3AA 5F                       ld e,a
 486+ B3AB 32 58 B4                 ld (sound_byte),a
 487+ B3AE CD D6 A2                 call walk_sound
 488+ B3B1 D1                       pop de
 489+ B3B2
 490+ B3B2 3E 00                    ld a,0              ;set colour
 491+ B3B4 CD D0 B3                 call box1           ;draw the box
 492+ B3B7 11 E0 FF                	ld de,65504         ; 65504  (-32)
 493+ B3BA
 494+ B3BA 19                       add hl,de           ;next box to draw
 495+ B3BB                       ;   call pause
 496+ B3BB                       ;   call pause
 497+ B3BB
 498+ B3BB 3A 23 B4                 ld a,(size1)     ; increase the size of the square to draw
 499+ B3BE 3C                       inc a
 500+ B3BF 3C                       inc a
 501+ B3C0 32 23 B4                 ld (size1),a
 502+ B3C3
 503+ B3C3
 504+ B3C3 3A 24 B4                 ld a,(num2draw1)  ;number of boxes to draw
 505+ B3C6 3C                       inc a
 506+ B3C7 32 24 B4                 ld (num2draw1),a
 507+ B3CA FE 0E                    cp 14
 508+ B3CC C2 A4 B3                 jp nz, d_box1     ; exit when we get to 2 as routine fails after that.
 509+ B3CF
 510+ B3CF C9                       ret
 511+ B3D0
 512+ B3D0              ;davids code here amended by me....
 513+ B3D0              box1:
 514+ B3D0 3A 23 B4                 ld a,(size1)
 515+ B3D3 47                       ld b,a
 516+ B3D4
 517+ B3D4              ml11:
 518+ B3D4 CD 15 B4     	call docol1
 519+ B3D7 77           	ld (hl),a
 520+ B3D8 23           	inc hl
 521+ B3D9 10 F9        	djnz ml11
 522+ B3DB F5               push af
 523+ B3DC 3A 23 B4         ld a,(size1)
 524+ B3DF 3D               dec a
 525+ B3E0 47              	ld b,a
 526+ B3E1 F1               pop af
 527+ B3E2 2B           	dec hl
 528+ B3E3
 529+ B3E3              ml21:
 530+ B3E3 CD 15 B4     	call docol1
 531+ B3E6 11 20 00     	ld de,32     ;was 32
 532+ B3E9 19           	add hl,de
 533+ B3EA 77           	ld (hl),a
 534+ B3EB 10 F6        	djnz ml21
 535+ B3ED F5               push af
 536+ B3EE 3A 23 B4         ld a,(size1)
 537+ B3F1 47              	ld b,a
 538+ B3F2 F1               pop af
 539+ B3F3 2D           	dec l
 540+ B3F4
 541+ B3F4              ml31:
 542+ B3F4 CD 15 B4     	call docol1
 543+ B3F7 77            	ld (hl),a
 544+ B3F8 2B            	dec hl
 545+ B3F9 10 F9         	djnz ml31
 546+ B3FB F5               push af
 547+ B3FC 3A 23 B4         ld a,(size1)
 548+ B3FF 3D               dec a
 549+ B400 47              	ld b,a
 550+ B401 F1               pop af
 551+ B402 2C            	inc l
 552+ B403
 553+ B403              ml41:
 554+ B403 CD 15 B4     	call docol1
 555+ B406 11 E0 FF     	ld de,65504; was 65504  (-32)
 556+ B409 19           	add hl,de
 557+ B40A 77           	ld (hl),a
 558+ B40B 10 F6        	djnz ml41
 559+ B40D F5               push af
 560+ B40E 3A 23 B4         ld a,(size1)
 561+ B411 3D               dec a
 562+ B412 47              	ld b,a
 563+ B413 F1               pop af
 564+ B414 C9           	ret
 565+ B415
 566+ B415              ;end of davids code...
 567+ B415
 568+ B415              ;set square colours
 569+ B415              docol1:                     ;this routine draws black colours on existing level
 570+ B415                  ;    ld a,(in_out)
 571+ B415                  ;    dec a               ;check if a=0
 572+ B415                  ;    jr z,do_out         ;draw the attributes screen proper if a <> 0
 573+ B415 3E F0                ld a,240            ;black screen
 574+ B417 C9                   ret
 575+ B418              do_out                      ;this routine draws the colours on new level - but I cant get it working!
 576+ B418 E5                   push hl
 577+ B419 11 00 6B             ld de,$6b00         ;$5800 + $6b00 = $c300. point to our alternate attribute screen
 578+ B41C                     ; ld de,(fadein)      ;fadein holds our memory pointer to attribut screen-22528
 579+ B41C 19                   add hl,de
 580+ B41D 7E                   ld a,(hl)           ;get the colour to print
 581+ B41E                     ; inc de
 582+ B41E                     ; ld (fadein),de
 583+ B41E                     ; ld a,6
 584+ B41E E1                   pop hl
 585+ B41F C9                   ret
 586+ B420
 587+ B420
 588+ B420 00 00        fadein     dw 0   ;holds address of colours to fetch for screen colouring
 589+ B422 00           in_out:    db 0   ;1=draw inward, 0=draw outward
 590+ B423 02           size1:     db 2   ; size of square to draw ;double the number to draw
 591+ B424 02           num2draw1: db 2   ;number of squares to draw
 592+ B425 00           cur_screen db 0   ;hold the current screen in view for the exit screen
 593+ B426 00           cur_page   db 0   ;hold the current screen thats paged in view for the exit screen
 594+ B427
 595+ B427              ;###########################################################################
 596+ B427
 597+ B427              new_maze_anim:
 598+ B427
 599+ B427 ED 91 07 01                 nextreg 7,1
 600+ B42B 3E 0A                      ld a,10
 601+ B42D 32 58 B4                   ld (sound_byte),a
 602+ B430
 603+ B430              ;we have 24 vertical columns of 24 blocks - swipe left to right
 604+ B430 06 18                      ld b,24
 605+ B432 21 00 C3                   ld hl,attr_screen     ;address of colours screen to copy
 606+ B435 11 00 58                   ld de,de_dest           ;attributes on main screen
 607+ B438 C5           again_1:      push bc
 608+ B439 01 18 00                   ld bc,24              ;number of cells to copy
 609+ B43C
 610+ B43C              Loop_col_1:
 611+ B43C ED B0                      ldir
 612+ B43E                            ;do the walking sound
 613+ B43E D5                         push de
 614+ B43F 3A 58 B4                   ld a,(sound_byte)
 615+ B442 C6 06                      add a,6
 616+ B444 5F                         ld e,a
 617+ B445 32 58 B4                   ld (sound_byte),a
 618+ B448 CD D6 A2                   call walk_sound
 619+ B44B D1                         pop de
 620+ B44C C1                         pop bc
 621+ B44D ED 35 08 00                add de,8
 622+ B451 ED 34 08 00                add hl,8
 623+ B455 10 E1                      djnz again_1
 624+ B457 C9                         ret
 625+ B458
 626+ B458
 627+ B458 0A           sound_byte    db 10
 628+ B459              de_dest       equ 22528
 629+ B459
 630+ B459
 631+ B459              ;*********************************************************************
 632+ B459              ; Making LDIR 21% faster
 633+ B459              ;taken from MSX Assembly page - http://map.grauw.nl/articles/fast_loops.php
 634+ B459
 635+ B459
 636+ B459              ;LDI Performs a "LD (DE),(HL)", then increments DE and HL, and decrements BC.
 637+ B459
 638+ B459              ;Now, on with the lesson. Aside from OTIR you can also unroll other things. INIR, LDIR and LDDR will also greatly benefit from this method, and sometimes it is also ;beneficial to unroll normal loops which use DJNZ, JR or JP.
 639+ B459
 640+ B459              ;In the case of LDIR however, the number of loops is often too large to simply use an LDI that number of times. That would take up too much space. So what we can do ;instead is to unroll only part of the loop. Say, we need to LDIR something 256 (100H) times. Instead of LDIR we could write:
 641+ B459
 642+ B459              ;we need to move 768 bytes = 48 x 16
 643+ B459              copy_colours:
 644+ B459
 645+ B459 01 00 03                   ld bc,768             ;number of cells to copy
 646+ B45C 21 00 C3                   ld hl,attr_screen     ;address of colours screen to copy
 647+ B45F 11 00 58                   ld de,22528           ;attributes on main screen
 648+ B462              Loop_col:
 649+ B462 ED A0            ldi  ; 16x LDI
 650+ B464 ED A0            ldi
 651+ B466 ED A0            ldi
 652+ B468 ED A0            ldi
 653+ B46A ED A0            ldi
 654+ B46C ED A0            ldi
 655+ B46E ED A0            ldi
 656+ B470 ED A0            ldi
 657+ B472 ED A0            ldi
 658+ B474 ED A0            ldi
 659+ B476 ED A0            ldi
 660+ B478 ED A0            ldi
 661+ B47A ED A0            ldi
 662+ B47C ED A0            ldi
 663+ B47E ED A0            ldi
 664+ B480 ED A0            ldi
 665+ B482 EA 62 B4         jp pe,Loop_col  ; Loop until bc = zero
 666+ B485
 667+ B485 C9                         ret
 668+ B486
 669+ B486
# file closed: src/7-rd3dmazeV6.asm
 799  B486
 800  B486              ;##############################################
 801  B486              ;misc data
 802  B486              ;various variables
 803  B486              ;udg charachter set
 804  B486              ;##############################################
 805  B486
 806  B486                      org 64000       ;fa00
 807  FA00
 808  FA00              ;variables
 809  FA00              ;-----------------------------------------------
 810  FA00
 811  FA00 00 00        player_pos: dw $0                  ; only when in the main game loop
 812  FA02                                             ; holds the low byte of the current insertion location when inserting a passageway into the maze.
 813  FA02
 814  FA02              ;l4083:  db 134               ; high byte of the maze location data
 815  FA02              ;l4084:  db 08                ; holds the desired length of the passageway beign inserted when constructing the maze.
 816  FA02 06           maxview: db 6                   ;holds how far we can see before
 817  FA03                                              ;hitting a wall
 818  FA03              ;l4085:  db $01               ; holds the passageway direction when inserting a passageway into the maze ($00=north, $01=west, $02=south, $03=east).
 819  FA03
 820  FA03 00           flags:  db 0                 ; flags:
 821  FA04                                           ;na   bit 7: 1=the player has been caught.
 822  FA04                                           ;na   bit 6: 1=the player has moved forwards.408a
 823  FA04                                           ;na   bit 5: 1=the player has not moved and so there is no need to redraw the view of the maze.
 824  FA04                                           ;na   bit 4: 1=the exit is visible.
 825  FA04                                           ;na   bit 3: 1=rex has moved.
 826  FA04                                           ;na   bit 2: 1=rex has moved into a new location.
 827  FA04                                           ;na   bit 1: 1=rex has his left foot forward, 0=rex has his right foot forward.
 828  FA04                                           ; bit 0: maxview used bit
 829  FA04
 830  FA04 00           var1:   db 0  ; used for printing
 831  FA05
 832  FA05 00           var2:   db 0  ; used for printing
 833  FA06
 834  FA06 00           depth:  db 0  ; stores our depth of field when we are looking
 835  FA07 00           l4086:  db 0
 836  FA08
 837  FA08              player_dir:
 838  FA08 00                   db 0  ;; only when in the main game loop
 839  FA09              de_count:
 840  FA09 00 00                dw 0  ;used to hold 2 bytes of reg de for maze locating info
 841  FA0B
 842  FA0B 00 00        left     dw 0000
 843  FA0D 00 00        right    dw 0000
 844  FA0F 00 00        var3     dw 0000     ;misc. used in drawing walls
 845  FA11 00 00        var4     dw 0000     ;misc. used in drawing walls
 846  FA13 00 00        var5     dw 0000     ;misc - used in drawing walls
 847  FA15 00 00        var6     dw 0000     ;stores current maze block check position
 848  FA17
 849  FA17 00           end_wall db 0        ;stores whether current wall being draw is
 850  FA18                                   ;an outside maze wall or not (as we want to treat
 851  FA18                                   ;this differnetly when drawn in future
 852  FA18 00 00        var7     dw 0        ;misc loop counter in walls
 853  FA1A 00 00        var8     dw 0        ;not used
 854  FA1C 00 00        var9     dw 0        ;not used
 855  FA1E 00           var10    db 0        ;used for maze wall drawing at depth 5
 856  FA1F 00           lr_wall  db 0        ;used for left and right wall drawing in draw_side_walls routine
 857  FA20 00 00        w5_start dw 0        ;not used
 858  FA22 00           cur_map  db 0        ;stores current map to draw or show
 859  FA23 00 00        map_start dw 0       ;tores the map start address
 860  FA25
 861  FA25 00 00        furthest_point dw 0 ;store the address of the furthest point
 862  FA27                                  ;we can see in the maze from our position.
 863  FA27 00           blockid  db 0        ;stores  block position of layer 5 for wall drawing
 864  FA28 71           maze_highbyte db $71 ;holds high byte of current maze in use
 865  FA29 00           map_show    db  0    ;tells is if we are already showing the map
 866  FA2A 00           show_exit       db 0 ;used to say whether to draw the full size exit door or not
 867  FA2B                                   ;0 = draw a closed exit door
 868  FA2B                                   ;1 = draw an open exit door
 869  FA2B 00           switch_pulled   db  0 ; 0 and 1 for on and off - default off
 870  FA2C 00 00        sp_store        dw  0   ;save and restore the SP
 871  FA2E 00 00        switch_sound    dw 0    ;shows if switch sound already sounded = 0=no, 1=yes
 872  FA30
 873  FA30              ;#############################################################
 874  FA30              ;reserve 200 bytes for the stack - points here from BASIC
 875  FA30              ;stack pointer lives here
 876  FA30 00 00 00...  stack_p        block 200
 877  FAF8
 878  FAF8              ;stack pointer is at 64511
 879  FAF8
 880  FAF8              ;##############################################
 881  FAF8              ;udg charachter set starts at 64512
 882  FAF8              ;##############################################
 883  FAF8
 884  FAF8                      org 64512
 885  FC00
 886  FC00              ;##############################################
 887  FC00                    ;UDG Characher Defs
 888  FC00              ;##############################################
 889  FC00              _chars:
 890  FC00 48 4B 97 93   db	72,75,151,147,137,68,36,18      ;80	65080	;door wood effect 1
 890  FC04 89 44 24 12
 891  FC08 A8 44 A2 A9   db	168,68,162,169,41,66,148,164	;81	65088   ;door wood effect 2
 891  FC0C 29 42 94 A4
 892  FC10 11 2A 52 54   db	17,42,82,84,78,78,37,18  	    ;82	65096   ;door wood effect 3
 892  FC14 4E 4E 25 12
 893  FC18 28 48 A4 94   db	40,72,164,148,74,146,36,72  	;83	65104   ;door wood effect 4
 893  FC1C 4A 92 24 48
 894  FC20 34 34 34 F7   db	52,52,52,247,247,52,52,52     	;84	65112	;Door Barsvertical
 894  FC24 F7 34 34 34
 895  FC28 00 00 00 FF   db	0,0,0,255,255,0,0,0   	        ;85	65120   ;Door Bars Crossbars
 895  FC2C FF 00 00 00
 896  FC30 AC EC 6C 2C   db	172,236,108,44,44,46,47,45	    ;86	65128	;door bars left side
 896  FC34 2C 2E 2F 2D
 897  FC38 35 37 36 34   db	53,55,54,52,52,116,244,180	    ;87	65136	;door bars right side
 897  FC3C 34 74 F4 B4
 898  FC40              ;rest of door graphic chars are at $b9 onwards below
 899  FC40
 900  FC40 C0 F0 FC FF   db	192,240,252,255,255,252,240,192 ;88	65144   left hand triangle pointed
 900  FC44 FF FC F0 C0
 901  FC48 03 0F 3F FF   db	3,15,63,255,255,63,15,3         ;89	65152	right hand triangle pointed
 901  FC4C FF 3F 0F 03
 902  FC50 00 00 00 00   db	0,0,0,0,0,0,0,0	                ;8a	65160
 902  FC54 00 00 00 00
 903  FC58 FF 55 FF AF   db	255,85,255,175,255,95,255,255   ;8b	65168	upper wall 5 right bottom
 903  FC5C FF 5F FF FF
 904  FC60 FF D5 FF FA   db	255,213,255,250,255,253,255,255	;8c	upper wall 5 left bottom
 904  FC64 FF FD FF FF
 905  FC68
 906  FC68              ;extra layer 5 chars
 907  FC68 FF 3F F3 9F   db	255,63,243,159,244,47,249,143 	 ;8d	small wall stretched (layer 3)
 907  FC6C F4 2F F9 8F
 908  FC70 FF 8C FF 26   db	255,140,255,38,255,140,255,38 	 ;8e	small wall stretched (layer 3)
 908  FC74 FF 8C FF 26
 909  FC78
 910  FC78               ;Section 2 left and right UDG
 911  FC78 00 00 00 00   DB 0,0,0,0,0,3,31,255              ;8f 65200  top right Section 2 (1)
 911  FC7C 00 03 1F FF
 912  FC80 00 00 01 0F   DB 0,0,1,15,127,255,255,255        ;90 65208  top right Section 2 (2)
 912  FC84 7F FF FF FF
 913  FC88 07 3F FF FF   DB 7,63,255,255,255,255,255,255    ;91 65216  top right Section 2 (3)
 913  FC8C FF FF FF FF
 914  FC90
 915  FC90 FF 1F 03 00   DB 255,31,3,0,0,0,0,0              ;92 65224   bottom right Section 2 (1)
 915  FC94 00 00 00 00
 916  FC98 FF FF FF 7F   DB 255,255,255,127,15,1,0,0        ;93 65232   bottom right Section 2 (2)
 916  FC9C 0F 01 00 00
 917  FCA0 FF FF FF FF   DB 255,255,255,255,255,255,63,7    ;94 65240   bottom right Section 2 (3)
 917  FCA4 FF FF 3F 07
 918  FCA8
 919  FCA8 E0 FC FF FF   DB 224,252,255,255,255,255,255,255 ;95 65248   top left Section 2 (1)
 919  FCAC FF FF FF FF
 920  FCB0 00 00 80 F0   DB 0,0,128,240,254,255,255,255     ;96 65256   top left Section 2 (2)
 920  FCB4 FE FF FF FF
 921  FCB8 00 00 00 00   DB 0,0,0,0,0,192,248,255           ;97 65264   top left Section 2 (3)
 921  FCBC 00 C0 F8 FF
 922  FCC0
 923  FCC0 FF FF FF FF   DB 255,255,255,255,255,255,252,224 ;98 65272   bottom left Section 2 (1)
 923  FCC4 FF FF FC E0
 924  FCC8 FF FF FF FE   DB 255,255,255,254,240,128,0,0     ;99 65280   bottom left Section 2 (2)
 924  FCCC F0 80 00 00
 925  FCD0 FF F8 C0 00   DB 255,248,192,0,0,0,0,0           ;9a 65288   bottom left Section 2 (3)
 925  FCD4 00 00 00 00
 926  FCD8
 927  FCD8 80 C0 E0 F0   DB	128,192,224,240,245,250,245,250	;9b	65296	layer 5 left top
 927  FCDC F5 FA F5 FA
 928  FCE0 F5 FA F5 FA   DB	245,250,245,250,240,224,192,128	;9c	65304	layer 5 left bottom
 928  FCE4 F0 E0 C0 80
 929  FCE8 01 03 07 0F   DB	1,3,7,15,95,175,95,175         	;9d	65312   layer 5 right top
 929  FCEC 5F AF 5F AF
 930  FCF0 5F AF 5F AF   DB	95,175,95,175,15,7,3,1         	;9e	65320	layer 5 right bottom
 930  FCF4 0F 07 03 01
 931  FCF8 55 AA 55 AA   DB	85,170,85,170,85,170,85,170    	;9f	65328	chequer
 931  FCFC 55 AA 55 AA
 932  FD00 55 AA 55 AA   DB	85,170,85,170,0,0,0,0          	;a0	65336	top chequer
 932  FD04 00 00 00 00
 933  FD08 00 00 00 00   DB	0,0,0,0,85,170,85,170          	;a1	65344	bottom chequer
 933  FD0C 55 AA 55 AA
 934  FD10 00 00 00 00   DB	0,0,0,0,255,255,255,255        	;a2	65352		bottom black
 934  FD14 FF FF FF FF
 935  FD18 FF FF FF FF   DB	255,255,255,255,0,0,0,0        	;a3	65360		top black
 935  FD1C 00 00 00 00
 936  FD20 FF 08 08 08   DB	255,8,8,8,255,128,128,255      	;a4	65368		brick pattern
 936  FD24 FF 80 80 FF
 937  FD28 99 C8 64 32   DB	153,200,100,50,25,140,206,171  	;a5	65376		top left brick diag
 937  FD2C 19 8C CE AB
 938  FD30 10 28 10 7C   DB	16,40,16,124,16,40,40,68       	;a6	65384		man
 938  FD34 10 28 28 44
 939  FD38 00 78 6B 7E   DB	0,120,107,126,124,104,120,0    	;a7	65392		switch
 939  FD3C 7C 68 78 00
 940  FD40 FF A5 FF A5   DB	255,165,255,165,165,255,165,255	;a8	65400		fancy square
 940  FD44 A5 FF A5 FF
 941  FD48 80 C0 E0 F0   DB	128,192,224,240,255,255,255,255	;a9	65408		top left 5
 941  FD4C FF FF FF FF
 942  FD50 01 03 07 0F   DB	1,3,7,15,255,255,255,255       	;aa	65416		top right 5
 942  FD54 FF FF FF FF
 943  FD58 FF FF FF FF   DB	255,255,255,255,240,224,192,128	;ab	65424		bot left  5
 943  FD5C F0 E0 C0 80
 944  FD60 FF FF FF FF   DB	255,255,255,255,15,7,3,1       	;ac	65432		bot right 5
 944  FD64 0F 07 03 01
 945  FD68 FF E5 FF FD   DB	255,229,255,253,253,255,255,255	;ad	65440		top right fancy
 945  FD6C FD FF FF FF
 946  FD70 FF A7 FF BF   DB	255,167,255,191,191,255,255,255	;ae	65448		top left fancy
 946  FD74 BF FF FF FF
 947  FD78 FF FF FF FF   DB	255,255,255,255,255,255,255,255	;af	65456		all black
 947  FD7C FF FF FF FF
 948  FD80 FF FE FC F8   DB	255,254,252,248,240,224,192,128	;b0	65464		top left triangle
 948  FD84 F0 E0 C0 80
 949  FD88 FF 7F 3F 1F   DB	255,127,63,31,15,7,3,1         	;b1	65472		top right triangle
 949  FD8C 0F 07 03 01
 950  FD90 01 03 07 0F   DB	1,3,7,15,31,63,127,255         	;b2	65480		bot right triangle
 950  FD94 1F 3F 7F FF
 951  FD98 80 C0 E0 F0   DB	128,192,224,240,248,252,254,255	;b3	65488		bot right triangle
 951  FD9C F8 FC FE FF
 952  FDA0
 953  FDA0 FF 55 FF AA   DB	255,85,255,170,255,85,255,170	;b4	65496		small wall
 953  FDA4 FF 55 FF AA
 954  FDA8 FF 88 88 FF   DB	255,136,136,255,162,162,255,128	;b5	65504		mediumwall
 954  FDAC A2 A2 FF 80
 955  FDB0 FF 88 88 88   DB	255,136,136,136,255,224,192,128	;b6	65512		largewall
 955  FDB4 FF E0 C0 80
 956  FDB8 FF AA FF AA   DB	255,170,255,170,255,170,255,170 ;b7	65520		mediumwall_1
 956  FDBC FF AA FF AA
 957  FDC0 FF 88 88 88   DB	255,136,136,136,255,128,128,128 ;b8	65528		hugewall
 957  FDC4 FF 80 80 80
 958  FDC8
 959  FDC8              ;layer 5 section 3 right TOP
 960  FDC8
 961  FDC8 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;b9 top right section 3 (4)
 961  FDCC FF FF FF FF
 962  FDD0 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;ba top right section 3 (3)
 962  FDD4 FF FF FF FF
 963  FDD8 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;bb top right section 3 (2)
 963  FDDC FF FF FF FF
 964  FDE0 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;bc top right section 3 (1)
 964  FDE4 FF FF FF FF
 965  FDE8
 966  FDE8              ;layer 5 section 3 right BOTTOM
 967  FDE8
 968  FDE8 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;bd top right section 3 (6)
 968  FDEC FF 00 00 00
 969  FDF0 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;be top right section 3 (6)
 969  FDF4 FF FF 00 00
 970  FDF8 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;bf top right section 3 (6)
 970  FDFC FF FF FF 00
 971  FE00 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c0 top right section 3 (6)
 971  FE04 FF FF FF FF
 972  FE08
 973  FE08              ;layer 5 section 3 left TOP TBD
 974  FE08
 975  FE08 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;c1 bottom right section 3 (5)
 975  FE0C FF 00 00 00
 976  FE10 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;c2 bottom right section 3 (6)
 976  FE14 FF FF 00 00
 977  FE18 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;c3 bottom right section 3 (6)
 977  FE1C FF FF FF 00
 978  FE20 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c4 bottom right section 3 (6)
 978  FE24 FF FF FF FF
 979  FE28
 980  FE28              ;layer 5 section 3 left BOTTOM TBD
 981  FE28
 982  FE28 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;c5 bottom right section 3 (5)
 982  FE2C FF FF FF FF
 983  FE30 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;c6 bottom right section 3 (6)
 983  FE34 FF FF FF FF
 984  FE38 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;c7 bottom right section 3 (6)
 984  FE3C FF FF FF FF
 985  FE40 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c8 bottom right section 3 (6)
 985  FE44 FF FF FF FF
 986  FE48
 987  FE48
 988  FE48              ;layer 5 section 4 right TOP
 989  FE48
 990  FE48 00 00 00 00   DB 0,0,0,0,0,0,0,255               ;c9 top right section 3 (4)
 990  FE4C 00 00 00 FF
 991  FE50 00 00 00 00   DB 0,0,0,0,0,0,255,255             ;ca top right section 3 (4)
 991  FE54 00 00 FF FF
 992  FE58 00 00 00 00   DB 0,0,0,0,255,255,255,255         ;cb top right section 3 (3)
 992  FE5C FF FF FF FF
 993  FE60 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;cc top right section 3 (2)
 993  FE64 FF FF FF FF
 994  FE68 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;cd top right section 3 (1)
 994  FE6C FF FF FF FF
 995  FE70
 996  FE70              ;layer 5 section 4 right BOTTOM
 997  FE70
 998  FE70 FF 00 00 00   db 255,0,0,0,0,0,0,0               ;ce top right section 3 (6)
 998  FE74 00 00 00 00
 999  FE78 FF FF 00 00   db 255,255,0,0,0,0,0,0             ;cf top right section 3 (6)
 999  FE7C 00 00 00 00
1000  FE80 FF FF FF FF   db 255,255,255,255,0,0,0,0         ;d0 top right section 3 (6)
1000  FE84 00 00 00 00
1001  FE88 FF FF FF FF   db 255,255,255,255,255,255,0,0     ;d1 top right section 3 (6)
1001  FE8C FF FF 00 00
1002  FE90 FF FF FF FF   db 255,255,255,255,255,255,255,0   ;d2 top right section 3 (6)
1002  FE94 FF FF FF 00
1003  FE98
1004  FE98
1005  FE98              ;Extra wall5
1006  FE98              ; db	249,63,243,159,244,47,249,143 	;c9	small wall stretched more
1007  FE98              ; db 255,15,255,31,255,15,255,15	   	;ca	small wall stretched
1008  FE98              ; db 240,15,224,31,224,15,112,15	   	;cb	small wall stretched
1009  FE98
1010  FE98              ;triangular door wood parts
1011  FE98 FF FF FE FB   db	255,255,254,251,249,228,228,146     ;d3	   ;door wood effect top corner 1 right side($80)
1011  FE9C F9 E4 E4 92
1012  FEA0 88 CB E7 F3   db	136,203,231,243,249,252,254,255	    ;d4	   ;door wood effect bottom corner 1 (80)
1012  FEA4 F9 FC FE FF
1013  FEA8 FF FE FE FC   db	255,254,254,252,254,238,229,146     ;d5	   ;door wood effect top corner 3 right side($82)
1013  FEAC FE EE E5 92
1014  FEB0 91 CA E2 F4   db	145,202,226,244,250,252,254,255    	;d6    ;door wood effect bottom corner 1 (82)
1014  FEB4 FA FC FE FF
1015  FEB8
1016  FEB8              ;additional characters for level numbers printed on right of display
1017  FEB8              ;single caracter 10,11,12,13,14,15
1018  FEB8 00 4C 52 52    db  0,76,82,82,82,82,76,0             ;d7
1018  FEBC 52 52 4C 00
1019  FEC0 00 48 48 48    db  0,72,72,72,72,72,72,0             ;d8
1019  FEC4 48 48 48 00
1020  FEC8 00 4C 52 42    db  0,76,82,66,68,72,94,0             ;d9
1020  FECC 44 48 5E 00
1021  FED0 00 4C 52 46    db  0,76,82,70,66,82,76,0             ;da
1021  FED4 42 52 4C 00
1022  FED8 00 42 46 4A    db  0,66,70,74,94,66,66,0             ;db
1022  FEDC 5E 42 42 00
1023  FEE0 00 4E 50 4C    db  0,78,80,76,66,82,76,0             ;dc
1023  FEE4 42 52 4C 00
1024  FEE8
1025  FEE8              ;characters to print around the switch
1026  FEE8 FF 00 FF 00    db  255,0,255,0,255,0,255,0           ;dd  ;horizontal bars x 4
1026  FEEC FF 00 FF 00
1027  FEF0 FF 80 BF A0    db  255,128,191,160,175,168,171,170   ;de  ;top left corner
1027  FEF4 AF A8 AB AA
1028  FEF8 AA AB A8 AF    db  170,171,168,175,160,191,128,255   ;df  ;bot left corner
1028  FEFC A0 BF 80 FF
1029  FF00 AA AA AA AA    db  170,170,170,170,170,170,170,170   ;e0  ;vertical bars
1029  FF04 AA AA AA AA
1030  FF08 FF 01 FD 05    db  255,1,253,5,245,21,213,85         ;e1  ;top right corner
1030  FF0C F5 15 D5 55
1031  FF10 55 D5 15 F5    db  85,213,21,245,5,253,1,255         ;e2  ;bot right corner
1031  FF14 05 FD 01 FF
1032  FF18 00 FF 00 FF    db  0,255,0,255,0,255,0,255           ;e3  ;bot horizontal bars
1032  FF1C 00 FF 00 FF
1033  FF20 55 55 55 55    db  85,85,85,85,85,85,85,85           ;e4  ;right vertical bars
1033  FF24 55 55 55 55
1034  FF28
1035  FF28              ;side view switch chars
1036  FF28 FF FF FE FC    db  255,255,254,252,249,242,228,201   ;e5 ;top triangle bit
1036  FF2C F9 F2 E4 C9
1037  FF30 92 A4 A9 AA    db  146,164,169,170,170,170,170,170   ;e6 ; top left corner
1037  FF34 AA AA AA AA
1038  FF38 FF 01 7D 85    db  255,1,125,133,53,85,149,21        ;e7 ;top right corner
1038  FF3C 35 55 95 15
1039  FF40 55 D5 55 55    db  85,213,85,85,85,85,85,85          ;e8 ;2nd top line bottom right bit
1039  FF44 55 55 55 55
1040  FF48 40 80 00 00    db  64,128,0,0,0,0,0,0                ;e9 ;3rd top line bottom 2nd right bit
1040  FF4C 00 00 00 00
1041  FF50 92 24 49 92    db  146,36,73,146,36,72,144,32        ;ea ;top horizontal line
1041  FF54 24 48 90 20
1042  FF58
1043  FF58 C9 E4 F2 F9    db  201,228,242,249,252,254,255,255  ;eb   ;bottom triangle bit
1043  FF5C FC FE FF FF
1044  FF60 15 95 55 35    db  21,149,85,53,133,125,1,255       ;ec ;bottom right corner
1044  FF64 85 7D 01 FF
1045  FF68 55 55 55 55    db  85,85,85,85,85,85,213,85         ;ed ;2nd bottom line bottom right bit
1045  FF6C 55 55 D5 55
1046  FF70 AA AA AA AA    db  170,170,170,170,170,169,164,146  ;ee   ;bottom left corner
1046  FF74 AA A9 A4 92
1047  FF78 00 00 00 00    db  0,0,0,0,0,0,128,64               ;ef ;3rd top line bottom 2nd right bit
1047  FF7C 00 00 80 40
1048  FF80 20 90 48 24    db  32,144,72,36,146,73,36,146       ;f0 ;bottom horizontal line
1048  FF84 92 49 24 92
1049  FF88
1050  FF88 00 00 00 00    db   0,0,0,0,32,0,0,1                ;f1 ;stars for the inside of the closed door
1050  FF8C 20 00 00 01
1051  FF90 00 08 00 00    db   0,8,0,0,0,0,0,0                 ;f2 ;stars for the inside of the closed door
1051  FF94 00 00 00 00
1052  FF98
1053  FF98
1054  FF98
1055  FF98              ;END_PROGRAM
1056  FF98
1057  FF98
1058  FF98              ;for SJASMPLUS
1059  FF98              ;;
1060  FF98              ;; Set up the Nex output
1061  FF98              ;;
1062  FF98
1063  FF98                      ; This sets the name of the project, the start address,
1064  FF98                      ; and the initial stack pointer.
1065  FF98               ;       SAVENEX OPEN "3dmaze.nex";, start_game  ;, END_PROGRAM
1066  FF98                      SAVEBIN "3dmaze.bin",32768,32767
1067  FF98
1068  FF98                      ; This asserts the minimum core version.  Set it to the core version
1069  FF98                      ; you are developing on.
1070  FF98              ;        SAVENEX CORE 2,0,0
1071  FF98
1072  FF98                      ; This sets the border colour while loading (in this case white),
1073  FF98                      ; what to do with the file handle of the nex file when starting (0 =
1074  FF98                      ; close file handle as we're not going to access the project.nex
1075  FF98                      ; file after starting.  See sjasmplus documentation), whether
1076  FF98                      ; we preserve the next registers (0 = no, we set to default), and
1077  FF98                      ; whether we require the full 2MB expansion (0 = no we don't).
1078  FF98              ;        SAVENEX CFG 7,0,0,0
1079  FF98
1080  FF98                      ; Generate the Nex file automatically based on which pages you use.
1081  FF98              ;        SAVENEX AUTO
1082  FF98
# file closed: src/rd3dmazeV6-sj.asm
