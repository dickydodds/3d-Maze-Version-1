# file opened: src/rd3dmazeV6-sj.asm
   1  0000              ; written by me, richard dodds (dickydodds.com) beginning may 2018
   2  0000
   3  0000              ; some useful info:-
   4  0000              ; the zx81 character based screen is drawn in memory and then copied to the spectrum screen.
   5  0000
   6  0000              ;2nd oct 2018 - layer 6 completed - can print udg and spectrum
   7  0000              ;             character set now.
   8  0000              ;20th oct 2018 - left side completed except for multiple blocks in
   9  0000              ;layer 2, 3 & 4
  10  0000              ;11th oct - left side done and colours added.
  11  0000              ;V3. 22 nov - left side properly fixed - had bugs on top and bottom of maze
  12  0000              ;V4 27 nov. Removed the maze generation code from Malcolm Evans
  13  0000              ;V6 - 20 June 2018 - fixed end wall distance. Started chopping into manageable chunks.
  14  0000              ;2019 - done a load of stuff!
  15  0000              ;Oct 2020 - moved to SJASMPlus and implemented backbuffer
  16  0000              ;Oct 19 2020 - added ULANext colours and removed maze printing routine that used ROM - implemented M/C one.
  17  0000              ;
  18  0000
  19  0000              ;For SJASMPLUS
  20  0000
  21  0000                      ; Allow the Next paging and instructions
  22  0000                      DEVICE ZXSPECTRUMNEXT
  23  0000
  24  0000                      ; Generate a map file for use with Cspect
  25  0000                      CSPECTMAP "project.map"
  26  0000
  27  0000
  28  0000                ;      INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
  29  0000                ;      INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
  30  0000
  31  0000
  32  0000              ;for info...
  33  0000              ;load "4-rd3dmazeV6.asm" ; draw left side of maze
  34  0000              ;load "5-rd3dmazeV6.asm" ; draw wall in front of player
  35  0000              ;load "6-rd3dmazeV6.asm" ; draw right side of maze
  36  0000
  37  0000
  38  0000              ;##################################################
  39  0000              ;##################################################
  40  0000              ;##################################################
  41  0000              ;##################################################
  42  0000              ;##################################################
  43  0000              ;#                                                #
  44  0000              ;#               main game loop here              #
  45  0000              ;#                                                #
  46  0000              ;##################################################
  47  0000              ;##################################################
  48  0000              ;##################################################
  49  0000              ;##################################################
  50  0000              ;##################################################
  51  0000
  52  0000              main:           org 32768
  53  8000
  54  8000              ;;; dont forget to create your character set on the next! ;;
  55  8000
  56  8000              ;set the player direction based on keypress
  57  8000              ; 0=north, 1=west, 2=south, 3=east
  58  8000
  59  8000 F3           start_game:    di       ;disable interrupts
  60  8001
  61  8001
  62  8001              ; set stack pointer in lower just before the _chars data
  63  8001
  64  8001                     ; ld sp,64500
  65  8001
  66  8001
  67  8001                         ; BREAK
  68  8001                        ;  ld a,$69
  69  8001                        ;  ld BC,$243b
  70  8001                        ;  out (c),a
  71  8001                        ;  ld bc,$253b
  72  8001                         ; Ld a,%10
  73  8001                        ;  in a,(c)
  74  8001
  75  8001                   ;       ld a,$43
  76  8001                   ;       call ReadNextReg
  77  8001                   ;       ;a holds the value
  78  8001
  79  8001              ;first, clear the 2 ULA bank screens as they are at ROM location 0
  80  8001
  81  8001 ED 91 50 0A                NEXTREG $50,10
  82  8005 CD 84 81                   CALL clsULA
  83  8008 ED 91 50 0E                NEXTREG $50,14
  84  800C CD 84 81                   CALL clsULA
  85  800F
  86  800F              ;setup ULA Plus Palette
  87  800F
  88  800F CD 95 82                   call Setup_palette
  89  8012
  90  8012              ; jump straight into sjasmplus debugger
  91  8012                    ;  BREAK
  92  8012
  93  8012              ;SET DEFAULT PLAYER POSITION AND DIRECTION
  94  8012              ; 0=north, 1=west, 2=south, 3=east
  95  8012 3E 02                      ld a,2            ;set default to be south
  96  8014 32 08 FA                   ld (player_dir),a
  97  8017
  98  8017                            ;make sure our exit door is closed
  99  8017 AF                         xor a                 ;reg a=0
 100  8018 32 2A FA                   ld (show_exit),a
 101  801B                            ;make sure our switch is up = 0 = not pulled
 102  801B 32 2B FA                   ld (switch_pulled),a
 103  801E
 104  801E              ;remember to set maze_highbyte for current maze
 105  801E
 106  801E              ;start on maze map 0
 107  801E              a_map:
 108  801E 3E 06                      ld a,6
 109  8020 CD 8A A2                   call set_map      ;set our map
 110  8023
 111  8023              ;              ld h,$71          ;set at maze 1 bottom maze
 112  8023 2E 01                      ld l,01              ;top left of maze
 113  8025
 114  8025 22 00 FA                   ld (player_pos),hl
 115  8028
 116  8028              main_loop:
 117  8028              ;set CPU Speed
 118  8028                            ;set CPU Speed Mhz
 119  8028                            ;0 = 3.5
 120  8028                            ;1 = 7
 121  8028                            ;2 = 14
 122  8028                            ;4 = 28
 123  8028 ED 91 07 01                nextreg 7,1
 124  802C
 125  802C                         ;   ;put standard printing back to black text & white paper
 126  802C                         ;   ld a,98
 127  802C                         ;   ld (att),a
 128  802C
 129  802C CD 76 81                   call clear_char_screen    ;clear screen @c000
 130  802F
 131  802F CD 67 8D                   call get_distance ; get distance we can see
 132  8032                                              ; and save depth we can see
 133  8032                            ; load de is done when getting the distance above
 134  8032                            ; we need de to hold the jump value in the maze direction
 135  8032                            ; we are looking
 136  8032
 137  8032 CD 3B 8F                   call draw_left_side   ; start drawing the left side of the maze
 138  8035
 139  8035                            ;we need to repopulate var furthest_point
 140  8035
 141  8035 CD 67 8D                   call get_distance     ; get distance we can see
 142  8038                                                  ; and set de accordingly
 143  8038                                                  ; and save depth we can see
 144  8038
 145  8038 CD 54 9B                   call draw_right_side  ; start drawing the right side of the maze
 146  803B
 147  803B CD DE 96                   call draw_front_view  ; draw wall in front of player
 148  803E
 149  803E                            ;check if we are at an end wall. If so, draw walls left
 150  803E                            ;and right to simulate the long outside edge wall
 151  803E
 152  803E CD 6A 97                   call draw_side_walls
 153  8041
 154  8041                            ;draw screen at mem location 0000
 155  8041                            ;my print used to print screen @c000 to 16384 inc udg's
 156  8041 CD 62 8C                   call my_print         ;copy to screen from c000
 157  8044
 158  8044                            ;we need to copy the colours to an alternate memory screen then copy them back to the main screen
 159  8044                            ;we do this because we use the alternate colour screen when we transition between levels
 160  8044 CD EC 98                   call draw_colours     ;colourise the display but store at address 'attr_screen'
 161  8047 CD 45 B4                   call copy_colours     ;copy colour map to screen
 162  804A
 163  804A                            ;make sure we point to our character set
 164  804A 21 00 C5                   ld hl,charset_1-256
 165  804D 22 0A 8C                   ld (base),hl
 166  8050 CD B5 8C                   call compass          ; draw compass
 167  8053
 168  8053              ;------------------------------------------------------------------------
 169  8053                            ;see if we need to draw the door or switch
 170  8053                  ;ld a,1
 171  8053                  ;ld (switch_pulled),a
 172  8053
 173  8053 CD A0 8E                   call draw_door        ;see if we need to draw a door
 174  8056 CD F3 8E                   call draw_switch     ;see if we need to draw a switch
 175  8059              ;----------------------------------------------------------------------
 176  8059              ;setup right hand side of the screen
 177  8059 CD 67 9A                   call draw_screen_right
 178  805C
 179  805C                            ;now flip the screen into the visible screen
 180  805C CD C1 81                   call FlipULABuffers_peter
 181  805F
 182  805F              ;set CPU Speed
 183  805F                            ;set CPU Speed Mhz
 184  805F                            ;0 = 3.5
 185  805F                            ;1 = 7
 186  805F                            ;2 = 14
 187  805F                            ;4 = 28
 188  805F ED 91 07 00                nextreg 7,0
 189  8063
 190  8063              ;#######################################
 191  8063              ;now move based on keypress
 192  8063              ;#######################################
 193  8063
 194  8063              ;Now set our view direction based on keypress
 195  8063
 196  8063              ;c bit values: 1 = 0 fire
 197  8063               ;             2 = 5 right
 198  8063               ;             4 = 7 up (forward)
 199  8063               ;             8 = 6 down
 200  8063               ;            16 = 8 left
 201  8063
 202  8063
 203  8063              ;set the player direction based on keypress
 204  8063              ; 0=north, 1=west, 2=south, 3=east
 205  8063
 206  8063
 207  8063              ;######################################
 208  8063              ;speed of game set here
 209  8063              ;######################################
 210  8063
 211  8063 CD 61 81                     call pause      ;slow down the game here
 212  8066
 213  8066              wait4key:
 214  8066 CD 3D A2                   call get_keys      ;keypress in C register
 215  8069
 216  8069 79                         ld a,c
 217  806A
 218  806A B7                         or a               ;clear flags
 219  806B CA 66 80                   jp z,wait4key      ;wait for a keypress b4 continuing
 220  806E
 221  806E                            ;check if its the map key and have we already pressed it
 222  806E 47                         ld b,a             ;save our key
 223  806F 3A 29 FA                   ld a,(map_show)    ;get our last pressed map key
 224  8072 90                         sub b              ;map key is 0 =1 in reg a
 225  8073                                               ;1= we are already showing the map, 0 says we are not
 226  8073 28 F1                      jr z,wait4key      ;zero flag set if map_show=1 so do nothing
 227  8075
 228  8075 AF                         xor a               ;make reg a zero
 229  8076 32 29 FA                   ld (map_show),a
 230  8079 78                         ld a,b              ;now carry on :)
 231  807A
 232  807A FE 10                      cp 16              ; 8 (right) pressed
 233  807C CA CB 80                   jp z,plus
 234  807F
 235  807F FE 08        key_6         cp 8               ;6 (down) pressed
 236  8081 C2 9A 80                   jp nz, comp_4      ;carry on if not pressed otherwise return to BASIC
 237  8084 ED 91 43 00                nextreg $43,0      ;turn off ulanext
 238  8088 ED 91 69 00                nextreg $69,0      ;turn off ula banking
 239  808C ED 91 50 FF                NEXTREG $50,$FF
 240  8090 ED 91 52 0A                NEXTREG $52,$0A
 241  8094 FD 21 3A 5C                ld iy,$5c3a
 242  8098 FB                         ei
 243  8099 C9                         ret                ;return to BASIC
 244  809A
 245  809A FE 04        comp_4:       cp 4               ;7 (forward) pressed
 246  809C CA E6 80                   jp z,move_forward
 247  809F
 248  809F FE 02                      cp 2               ; 5 (left) pressed
 249  80A1 CA D8 80                   jp z,minus
 250  80A4
 251  80A4               ;             cp 1               ;0 PRESSED
 252  80A4                            ;0 was pressed or we never get here!
 253  80A4 A8                         xor b             ;make b zero
 254  80A5 3A 29 FA                   ld a,(map_show)
 255  80A8 90 97                      sub b,a           ;exit if b=1 as we are already showing the map!
 256  80AA C2 66 80                   jp nz,wait4key
 257  80AD 3C                         inc a             ;a=1 to show we pressed 6 to show the map
 258  80AE 32 29 FA                   ld (map_show),a   ;save it
 259  80B1 E5                         push hl
 260  80B2
 261  80B2 32 29 FA                   ld (map_show),a   ;save that we have pressed 6 - reg a = 1
 262  80B5 3A C0 81                   ld a,(ULABank)
 263  80B8                       ;     NEXTREG $52,a    ;page in the proper ULA screen but dont display it unless
 264  80B8                                              ;already displayed.
 265  80B8 CD 84 81                   CALL clsULA       ;clear the hidden ULA Screen as it shows old data
 266  80BB CD 16 8B                   CALL DRAW_MAP
 267  80BE CD A1 81                   call FlipULABuffers
 268  80C1 E1                         pop hl
 269  80C2
 270  80C2 C3 66 80                   jp wait4key
 271  80C5
 272  80C5 32 08 FA     go1:          ld (player_dir),a
 273  80C8 C3 28 80                   jp main_loop      ;start again
 274  80CB
 275  80CB
 276  80CB              plus:
 277  80CB 3A 08 FA                   ld a,(player_dir)
 278  80CE 3C                         inc a
 279  80CF FE 04                      cp 4          ;if its 4, make it 0 as it cant be >3
 280  80D1 C2 C5 80                   jp nz,go1     ;start game loop if its not 4
 281  80D4 97                         sub a         ;make it 0 (wraparound
 282  80D5 C3 C5 80                   jp go1
 283  80D8
 284  80D8 3A 08 FA     minus:        ld a,(player_dir)
 285  80DB 3D                         dec a
 286  80DC FE FF                      cp 255
 287  80DE C2 C5 80                   jp nz,go1         ;continue game if not 0
 288  80E1 3E 03                      ld a,3            ;wraparound
 289  80E3 C3 C5 80                   jp go1
 290  80E6
 291  80E6
 292  80E6              ;how do i implement a less-than/greater-than test in assembly?
 293  80E6
 294  80E6              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
 295  80E6              ;a and the argument were equal, else if the carry is set the argument was greater,
 296  80E6              ;and finally, if neither is set, then reg 'a' must be greater
 297  80E6              ;(cp does nothing to the registers, only the f (flag) register is changed).
 298  80E6
 299  80E6              move_forward:
 300  80E6
 301  80E6              ;----------------------------------------------------------------------------
 302  80E6              ;1st, check if we are trying to enter an open exit door
 303  80E6              ;so, is the door open?
 304  80E6
 305  80E6              ; door will always face NORTH.
 306  80E6              ; show door type = 0 = front, 1 = side
 307  80E6
 308  80E6                         ;  ld (show_exit),a
 309  80E6                           ;are we facing south?
 310  80E6 3A 08 FA                  ld a,(player_dir)
 311  80E9 D6 02                     sub 2                  ;2 = south
 312  80EB 20 2C                     jr nz,cont_a           ;if not, just continue in the normal way
 313  80ED
 314  80ED 2A 00 FA                  ld hl,(player_pos)
 315  80F0 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 316  80F3 19                        add hl,de
 317  80F4 7E                        ld a,(hl)
 318  80F5 FE C0                     cp _me                 ;is it our DOOR block?
 319  80F7 20 20                     jr nz,cont_a           ;if not, just continue in the normal way
 320  80F9                           ;YES its a door - so exit through it - but only if we are looking south
 321  80F9 3A 2B FA                  ld a,(switch_pulled)
 322  80FC A7                        and a
 323  80FD 28 1A                     jr z,cont_a            ;if not, just continue in the normal way
 324  80FF              ;Door is in front of us AND open so lets exit!
 325  80FF
 326  80FF                         ; reset the switch pulled back to off position
 327  80FF AF                       xor a
 328  8100 32 2B FA                 ld (switch_pulled),a
 329  8103              ;need to set the player start position now.
 330  8103
 331  8103 3A 22 FA                 ld a,(cur_map)
 332  8106 3D                       dec a               ;point to our next map
 333  8107 CD 8A A2                 call set_map      ;set our map
 334  810A 2E 01                    ld l,01              ;top left of maze
 335  810C 22 00 FA                 ld (player_pos),hl
 336  810F
 337  810F              ;draw exit animation
 338  810F                      ;    nextreg $69,0           ;turn off paging
 339  810F                          ;we moved forward and overwrote the door so redraw it
 340  810F ED 91 07 03              nextreg 7,3             ;set cpu speed to max
 341  8113                       ;   call draw_exit_door_open
 342  8113 CD 23 B3                 call exit_anim
 343  8116
 344  8116                       ;   call new_maze_anim
 345  8116                       ;   nextreg $69,64          ;turn on paging
 346  8116 C3 28 80                 jp main_loop          ;jump to our next level
 347  8119              ;--------------------------------------------------------------------------------
 348  8119              cont_a:
 349  8119              ;1st, check if we are trying to flick the switch on
 350  8119              ;so, is the door open?
 351  8119
 352  8119              ; switch will always face NORTH.
 353  8119              ; show switch type = 0 = off, 1 = on
 354  8119
 355  8119                           ;are we facing south?
 356  8119 3A 08 FA                  ld a,(player_dir)
 357  811C D6 02                     sub 2                  ;2 = south
 358  811E 20 17                     jr nz,cont_b           ;if not, just continue in the normal way
 359  8120
 360  8120 2A 00 FA                  ld hl,(player_pos)
 361  8123 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 362  8126 19                        add hl,de
 363  8127 7E                        ld a,(hl)
 364  8128 FE E0                     cp _ms                 ;is it our SWITCH block?
 365  812A 20 0B                     jr nz,cont_b           ;if not, just continue in the normal way
 366  812C                           ;YES its a switch - so mark it as switched on
 367  812C 3E 01                     ld a,1
 368  812E 32 2B FA                  ld (switch_pulled),a
 369  8131
 370  8131              ;draw switch
 371  8131 CD F3 8E                 call draw_switch      ;draw our switch
 372  8134 C3 28 80                 jp main_loop          ;jump to our next level
 373  8137              ;--------------------------------------------------------------------------------
 374  8137
 375  8137 3A 02 FA     cont_b:       ld a,(maxview)         ;if our maximum view depth = 0 ie we are
 376  813A                                                  ;in front of a wall face
 377  813A                                                  ;then do nothing
 378  813A 3C                         inc a
 379  813B 3D                         dec a
 380  813C CA 66 80                   jp z,wait4key
 381  813F
 382  813F CD 7E 8E                   call load_walk        ; get walk forward value to add
 383  8142 2A 00 FA                   ld hl,(player_pos)    ;get our current position
 384  8145 7C                         ld a,h                ;save our current H value for comparing later
 385  8146 19                         add hl,de              ;move our position forward in our view
 386  8147
 387  8147 BC                         cp h              ;have we crossed 256 byte boundry?
 388  8148 C2 28 80                   jp nz,main_loop   ;we have exited our boundry so dont
 389  814B                                              ;move our view anywhere.
 390  814B                            ;now test if l=0
 391  814B              ;              ld a,l
 392  814B 2C                         inc l
 393  814C 2D                         dec l             ;are we at position 0? Exit if yes and do nothing
 394  814D                            ;cp 0
 395  814D CA 28 80                   jp z,main_loop   ;we are at location 0 in the maze, so, again do nothing
 396  8150                                              ;and just exit so we stay at position 1
 397  8150
 398  8150              ;;;;;;;;;;#########################
 399  8150                            ;now check if l=255 ;
 400  8150              ;              cp 255                ;are we at the bottom edge of the maze
 401  8150              ;              jp z,main_loop
 402  8150
 403  8150                            ;we ARE at the bottom row so DO NOT MOVE FORWARD
 404  8150 22 00 FA                   ld (player_pos),hl
 405  8153 C3 28 80                   jp main_loop          ;continue to the game loop
 406  8156
 407  8156
 408  8156
 409  8156
 410  8156              ;we get here as we are not at the bottom of the maze.
 411  8156 FE 10        move_1:       cp 16                 ;are we at the top edge of the maze?
 412  8158 D2 28 80                   jp nc,main_loop
 413  815B 22 00 FA                   ld (player_pos),hl    ;save our new position
 414  815E
 415  815E              ;we are at the TOP of the maze so dont saaveour addition to HL
 416  815E C3 28 80                   jp main_loop          ;continue to the game loop
 417  8161
 418  8161
 419  8161              ;move_back:
 420  8161               ;             jp main_loop
 421  8161
 422  8161              ;##########################################################################
 423  8161              ;Pause routine for slowing down the game
 424  8161
 425  8161 E5           pause:        push hl
 426  8162 C5                         push bc
 427  8163 06 01                      ld b,1           ;delay loop
 428  8165              loop19:       ;halt             ;no interrupts!
 429  8165 21 A0 2F                   ld hl,12192
 430  8168 2B           abc:          dec hl
 431  8169 7C                         ld a,h
 432  816A 3D                         dec a
 433  816B                            ;dec h
 434  816B 20 FB                      jr nz,abc
 435  816D 05                         dec b
 436  816E C2 65 81                   jp nz,loop19
 437  8171 C1                         pop bc
 438  8172 E1                         pop hl
 439  8173 C9                         ret
 440  8174              ;##########################################################################
 441  8174
 442  8174              ;load other programs
 443  8174
 444  8174              ;for SJASMPLUS
 445  8174
 446  8174                  INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
# file opened: src/1-rd3dmazeV6.asm
   1+ 8174
   2+ 8174              ;variables
   3+ 8174
   4+ 8174              chan_open: equ 5633
   5+ 8174              cl_line:   equ 3652 ; clear screen not changing print pos
   6+ 8174              print:     equ 8252 ; print text line
   7+ 8174              at         equ 22   ; the 'print 'at' directive
   8+ 8174              paper      equ $11  ; paper directive
   9+ 8174              ink        equ $10  ; ink directive
  10+ 8174              flash      equ $12  ; flash directive
  11+ 8174              bright     equ $13
  12+ 8174              over       equ $15
  13+ 8174              blue       equ $02
  14+ 8174              red        equ $00
  15+ 8174              magenta    equ $06
  16+ 8174              green      equ $80
  17+ 8174              cyan       equ $02
  18+ 8174              yellow     equ 26
  19+ 8174              white      equ 255
  20+ 8174              black      equ 253
  21+ 8174              ;rex_pos    equ 32904
  22+ 8174
  23+ 8174              udg_start  equ 63480+8 ;63488  ;= 1024 less than real address for the display printing routine
  24+ 8174
  25+ 8174
  26+ 8174              screen_add equ 16384
  27+ 8174              screen_atr equ screen_add + 6144
  28+ 8174              screen_bot equ 23659
  29+ 8174              screen_mem equ $c000   ;49152
  30+ 8174              df_cc      equ $5c84
  31+ 8174
  32+ 8174 00 C0        d_file   dw $c000    ;char display in memory at 49152
  33+ 8176
  34+ 8176
  35+ 8176              ;maze_highbyte           equ  $71  ;H value (of HL) of current maze being drawn
  36+ 8176              _hugewall               equ  $b8
  37+ 8176              _chequerboard           equ  $9f
  38+ 8176              _space                  equ  32
  39+ 8176              _bottomblack            equ  $a2
  40+ 8176              _topblack               equ  $a3
  41+ 8176              _topwhitebottomchequer  equ  $a1
  42+ 8176              _topchequerbottomwhite  equ  $a0
  43+ 8176              _topleftwhite           equ  39
  44+ 8176              _bottomleftwhite        equ  40
  45+ 8176              _toprightwhite          equ  41
  46+ 8176              _bottomrightwhite       equ  42
  47+ 8176              _black                  equ  $af
  48+ 8176              _topcorner1             equ  $b0  ;bottom corner left slope to righttop
  49+ 8176              _topcorner2             equ  $b1  ;left corner slope to right bottom from left
  50+ 8176              _topcorner3             equ  $b2  ;bottom corner slope to right top
  51+ 8176              _topcorner4             equ  $b3  ;top corner left slope to right bottom
  52+ 8176              _wall                   equ  $a4  ;wall pattern
  53+ 8176              _leftinnerwall          equ  $a5  ;diagonal brick pattern left
  54+ 8176              _topleft5               equ  $a9  ;next 4 are for far view on layer 5
  55+ 8176              _bottomleft5            equ  $ab  ;
  56+ 8176              _topright5              equ  $aa
  57+ 8176              _bottomright5           equ  $ac
  58+ 8176              _smallwall              equ  $b4  ;far away wall
  59+ 8176              _mediumwall             equ  $b5  ;middle wall
  60+ 8176              _mediumwall_1           equ  $b7  ;middle wall_1
  61+ 8176              _largewall              equ  $b6  ;close view wall
  62+ 8176              _layer5lefttop          equ  $9b  ;layer 5 top left chevron
  63+ 8176              _layer5leftbottom       equ  $9c  ;layer 5 bottom left chevron
  64+ 8176
  65+ 8176
  66+ 8176
  67+ 8176              ;*******  NO MORE CODE HERE PLEASE AS IT WILL SHIFT THE MEMORY UP ****************
  68+ 8176
  69+ 8176              ;################################################################
  70+ 8176              ; some routines here in the 1.5k before the maze data
  71+ 8176              ;################################################################
  72+ 8176
  73+ 8176              ;============================================
  74+ 8176              ;clear the character maze in memory
  75+ 8176              ;============================================
  76+ 8176
  77+ 8176              clear_char_screen:
  78+ 8176
  79+ 8176 21 00 C0             ld hl,$c000
  80+ 8179 01 16 03             ld bc,790;767
  81+ 817C 11 01 C0             ld de,$c001
  82+ 817F 36 20                ld (hl),32      ;space
  83+ 8181 ED B0                ldir
  84+ 8183 C9                   ret
  85+ 8184              ;################################################################
  86+ 8184              ;rom routine for cls of the 2 video pages
  87+ 8184              ;################################################################
  88+ 8184
  89+ 8184              clsULA:                 ;Clear Ula Buffer:
  90+ 8184 21 00 00         ld  hl,$0000
  91+ 8187 11 01 00         ld  de,$0001
  92+ 818A 01 00 18         ld  bc,$1800
  93+ 818D 75               ld  (hl),l
  94+ 818E ED B0            ldir
  95+ 8190 36 F0            ld  (hl),240    ;black was $48    ; black paper, cyan ink
  96+ 8192 01 FF 02         ld  bc,$02FF
  97+ 8195 ED B0            ldir
  98+ 8197 C9               ret
  99+ 8198
 100+ 8198              ; ******************************************************************************
 101+ 8198              ; from Mike Daily
 102+ 8198              ; Function: Read a next register
 103+ 8198              ; Out: a = register to read
 104+ 8198              ; Out: a = value in register
 105+ 8198
 106+ 8198              ; call with reg value in reg a
 107+ 8198              ; ******************************************************************************
 108+ 8198              readnextreg:
 109+ 8198 01 3B 24             ld bc,$243b ; select NEXT register
 110+ 819B ED 79                out (c),a
 111+ 819D 04                   inc b ; $253b to access (read or write) value
 112+ 819E ED 78                in a,(c)
 113+ 81A0 C9                   ret
 114+ 81A1              ;#################################################################################
 115+ 81A1              FlipULABuffers:
 116+ 81A1                              ; Flip ULA/Alt UA screen (double buffer ULA screen)
 117+ 81A1
 118+ 81A1                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 119+ 81A1
 120+ 81A1 3A C0 81                     ld      a,(ULABank)             ; Get screen to display this frame
 121+ 81A4 FE 0A                        cp      10
 122+ 81A6 28 07                        jr      z,@DisplayAltULA
 123+ 81A8
 124+ 81A8 3E 40                        ld      a,64                    ; set CURRENT screen to Alternate ULA (bit 6
 125+ 81AA 06 0A                        ld      b,10                    ; set target screen to ULA
 126+ 81AC C3 B2 81                     jp      @DisplayULA
 127+ 81AF
 128+ 81AF 06 0E        @DisplayAltULA: ld      b,14                    ; set target screen to Alternate ULA screen
 129+ 81B1 AF                           xor     a                       ; zero the a reg
 130+ 81B2 ED 92 69     @DisplayULA:    nextreg $69,a                   ; Select Timex/ULA screen to show
 131+ 81B5 78                           ld      a,b                     ; get bank to render to next frame
 132+ 81B6 32 C0 81                     ld      (ULABank),a             ; store it...
 133+ 81B9
 134+ 81B9              ; swap the ula bank we are writing out buffer screen to
 135+ 81B9              swap_bank:                          ;load bank 10 or 14 to location 0 to write to
 136+ 81B9 3A C0 81                     ld a,(ULABank)
 137+ 81BC ED 92 52                     nextreg $52,a       ;was $50
 138+ 81BF C9                           ret
 139+ 81C0
 140+ 81C0 0A           ULABank         defb 10   ;holds current ULA screen in use
 141+ 81C1              ;#################################################################################
 142+ 81C1
 143+ 81C1
 144+ 81C1
 145+ 81C1              ;##################################################################################
 146+ 81C1              FlipULABuffers_peter:     ; Flip ULA/Alt ULA screen (double buffer ULA screen)
 147+ 81C1                                        ; from Peter Ped Helcmanovsky on the Next Team
 148+ 81C1
 149+ 81C1 3A C0 81         ld a,(ULABank)  ; Get screen to display this frame
 150+ 81C4
 151+ 81C4                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 152+ 81C4                  ; its %0000'1110 vs %0000'1010 in binary, so extract bit2 and move it to bit6
 153+ 81C4
 154+ 81C4 E6 04            and %0000'0100  ; $04 from A=14, $00 from A=10
 155+ 81C6 ED 23            swapnib         ; bit6 set from bit2
 156+ 81C8 ED 92 69         nextreg $69,a   ; Select Timex/ULA screen to show
 157+ 81CB
 158+ 81CB                  ; flip the drawing buffer mapped at $4000
 159+ 81CB 3A C0 81         ld a,(ULABank)
 160+ 81CE EE 04            xor 10^14       ; alternate between 10 and 14
 161+ 81D0 32 C0 81         ld (ULABank),a
 162+ 81D3 ED 92 52         nextreg $52,a   ; map the new "backbuffer" to $4000 (for next drawing)
 163+ 81D6 C9               ret
 164+ 81D7
 165+ 81D7              ;##################################################################################
 166+ 81D7
 167+ 81D7
 168+ 81D7
 169+ 81D7              ;##################################################################
 170+ 81D7              ;print a line of text on screen
 171+ 81D7              ;##################################################################
 172+ 81D7
 173+ 81D7              ; enter with IX pointing to the message
 174+ 81D7
 175+ 81D7              ;message format    row,col,colour,"message",end char
 176+ 81D7
 177+ 81D7              print_message:  ;make sure we point to our character set
 178+ 81D7 DD 46 00                     ld b,(ix)           ;row
 179+ 81DA DD 23                        inc ix
 180+ 81DC DD 4E 00                     ld c,(ix)           ;column
 181+ 81DF DD 23                        inc ix
 182+ 81E1 DD 7E 00                     ld a,(ix)           ;set attribute colour
 183+ 81E4 32 0E 8C                     ld (att),a
 184+ 81E7
 185+ 81E7
 186+ 81E7 CD F0 8B                     call locate
 187+ 81EA DD 23                        inc ix              ;point to characters to print
 188+ 81EC 21 00 C5     mesg_rept:      ld hl,charset_1-256 ; point to our character set
 189+ 81EF 22 0A 8C                     ld (base),hl
 190+ 81F2 DD 7E 00                     ld a,(ix)           ;load our character to print
 191+ 81F5
 192+ 81F5                              ;check if we are printing a UDG
 193+ 81F5                              ;we are currently pointing at the ram char set
 194+ 81F5 CB 7F                        bit 7,a                 ;are we printing udg's?
 195+ 81F7                                                      ;if bit 7=0 then zero test = false
 196+ 81F7 28 09                        jr z,no_udg             ;exit if theres no graphic to print
 197+ 81F9 D6 80                        sub $80                 ;point to the first character of udg's
 198+ 81FB 11 00 FC                     ld de,_chars;           ;start of udg's in memory
 199+ 81FE ED 53 0A 8C                  ld (base),de
 200+ 8202
 201+ 8202 FE 7F        no_udg:         cp 127               ;check flags to see if a=zero
 202+ 8204 C8                           ret z               ;quit when char = 0
 203+ 8205 F5                           push af
 204+ 8206 CD 12 8C                     call print1         ;print the message - auto increments the column
 205+ 8209 F1                           pop af
 206+ 820A DD 23                        inc ix
 207+ 820C 20 DE                        jr nz,mesg_rept
 208+ 820E C9                           ret
 209+ 820F
 210+ 820F              ;#################################################################
 211+ 820F
 212+ 820F
 213+ 820F
 214+ 820F
 215+ 820F              ;###############################################################
 216+ 820F              ;Message list
 217+ 820F              ;message format    row,col,colour,"message",end char
 218+ 820F
 219+ 820F 00 19 94 B0  message_border1:      db 0,25,148,$b0,$b1,$b0,$20,$b1,$b0,$b1,$7f
 219+ 8213 B1 B0 20 B1
 219+ 8217 B0 B1 7F
 220+ 821A 01 19 57 88  message_get:          db 1,25,87,$88,"G E T",$89,$7f
 220+ 821E 47 20 45 20
 220+ 8222 54 89 7F
 221+ 8225 02 19 57 88  message_out:          db 2,25,87,$88,"O U T",$89,$7F
 221+ 8229 4F 20 55 20
 221+ 822D 54 89 7F
 222+ 8230 03 19 94 B3  message_border4:      db 3,25,148,$b3,$b2,$b3,$20,$b2,$b3,$b2,$7f
 222+ 8234 B2 B3 20 B2
 222+ 8238 B3 B2 7F
 223+ 823B 17 02 3C 20  message_closed:       db 23,2,60," Go flick the switch ",$7F
 223+ 823F 47 6F 20 66
 223+ 8243 6C 69 63 6B
 223+ 8247 20 74 68 65
 223+ 824B 20 73 77 69
 223+ 824F 74 63 68 20
 223+ 8253 7F
 224+ 8254 17 01 48 20  message_switchon:     db 23,1,72," The Door is now Open! ",$7F
 224+ 8258 54 68 65 20
 224+ 825C 44 6F 6F 72
 224+ 8260 20 69 73 20
 224+ 8264 6E 6F 77 20
 224+ 8268 4F 70 65 6E
 224+ 826C 21 20 7F
 225+ 826F 17 01 64 20  message_leave:        db 23,1,100," Woohoo! Time to leave ",$7F
 225+ 8273 57 6F 6F 68
 225+ 8277 6F 6F 21 20
 225+ 827B 54 69 6D 65
 225+ 827F 20 74 6F 20
 225+ 8283 6C 65 61 76
 225+ 8287 65 20 7F
 226+ 828A 0F 19 57 20  message_level         db 15,25,87," LEVEL ",$7f
 226+ 828E 4C 45 56 45
 226+ 8292 4C 20 7F
 227+ 8295
 228+ 8295
 229+ 8295              ;##########################################################################
 230+ 8295              ;setup ULANext palette data - code from Matt Davies early version of Ed.s
 231+ 8295
 232+ 8295              Setup_palette:
 233+ 8295
 234+ 8295 ED 91 43 01         nextreg $43,%00000001   ; Set ULANext palette ON
 235+ 8299 ED 91 40 00         nextreg $40,%00000000    ; set index to 0 which = start of palette
 236+ 829D ED 91 42 01         nextreg $42,%00000001   ; Set 2 ink & 254 paper
 237+ 82A1
 238+ 82A1              ;poke in the pallete data
 239+ 82A1 21 AF 82             ld hl, .palette_data    ;get the start of .palette_data
 240+ 82A4 7E           .lp1    ld a, (hl)
 241+ 82A5 FE 01                cp $01                   ;99 is the end of the data
 242+ 82A7 C8                   ret z                   ;exit if a=99
 243+ 82A8 ED 92 41             nextreg $41,a           ;this auto increments
 244+ 82AB 23                   inc hl
 245+ 82AC C3 A4 82             jp .lp1
 246+ 82AF
 247+ 82AF              .palette_data:
 248+ 82AF              ;ink colours - only first 16 which are standard spectrum colours
 249+ 82AF
 250+ 82AF 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 250+ 82B3 4A CB 1B F9
 250+ 82B7 DF 00 07 E0
 250+ 82BB E7 1F FC FE
 251+ 82BF E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 251+ 82C3 24 49 92 B6
 251+ 82C7 FE DB 96 6E
 251+ 82CB 49 25 00 00
 252+ 82CF 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 252+ 82D3 AD F1 FA FE
 252+ 82D7 F5 EC C8 84
 252+ 82DB E8 EC F4 F8
 253+ 82DF FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 253+ 82E3 31 0D 09 05
 253+ 82E7 05 0E 13 1B
 253+ 82EB 1F 9F FB F3
 254+ 82EF C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 254+ 82F3 00 21 65 86
 254+ 82F7 CB CA F2 E9
 254+ 82FB E4 C4 80 40
 255+ 82FF 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 255+ 8303 00 00 00 00
 255+ 8307 00 00 00 00
 255+ 830B 00 00 00 00
 256+ 830F 00 00 00 00      db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 256+ 8313 00 00 00 00
 256+ 8317 00 00 00 00
 256+ 831B 00 00 00 00
 257+ 831F 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 257+ 8323 00 00 00 00
 257+ 8327 00 00 00 00
 257+ 832B 00 00
 258+ 832D
 259+ 832D 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 259+ 8331 4A CB 1B F9
 259+ 8335 DF 00 07 E0
 259+ 8339 E7 1F FC FE
 260+ 833D 00 02 A0 36  	db $0, $2, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 260+ 8341 4A CB 1B F9
 260+ 8345 DF 00 07 E0
 260+ 8349 E7 1F FC FE
 261+ 834D E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 261+ 8351 24 49 92 B6
 261+ 8355 FE DB 96 6E
 261+ 8359 49 25 00 00
 262+ 835D 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 262+ 8361 AD F1 FA FE
 262+ 8365 F5 EC C8 84
 262+ 8369 E8 EC F4 F8
 263+ 836D FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 263+ 8371 31 0D 09 05
 263+ 8375 05 0E 13 1B
 263+ 8379 1F 9F FB F3
 264+ 837D C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 264+ 8381 00 21 65 86
 264+ 8385 CB CA F2 E9
 264+ 8389 E4 C4 80 40
 265+ 838D
 266+ 838D              ;these are the red wall graduations - 6 colours
 267+ 838D C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $0, $0, $0, $0, $0, $7, $6, $4, $2, $0
 267+ 8391 40 20 00 00
 267+ 8395 00 00 00 07
 267+ 8399 06 04 02 00
 268+ 839D C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $ff, $ff, $ff, $ff, $0, $0, $0, $0, $ff, $01
 268+ 83A1 40 20 FF FF
 268+ 83A5 FF FF 00 00
 268+ 83A9 00 00 FF 01
 269+ 83AD
 270+ 83AD              palette_end:
 271+ 83AD              ;##################################################################################
 272+ 83AD
 273+ 83AD              draw_exit_door_closed:
 274+ 83AD                             ; exit_closed 20 lines of 17 chars
 275+ 83AD 06 14                        ld b,20
 276+ 83AF 21 1D 84                     ld hl,exit_closed
 277+ 83B2 C5           abcd:           push bc
 278+ 83B3 E5                           push hl
 279+ 83B4 E5 DD E1                     ld ix,hl        ;point to our data to print
 280+ 83B7 CD D7 81                     CALL print_message
 281+ 83BA E1                           pop hl
 282+ 83BB 11 11 00                     ld de,17
 283+ 83BE 19                           add hl,de
 284+ 83BF E5 DD E1                     ld ix,hl
 285+ 83C2 C1                           pop bc
 286+ 83C3 10 ED                        djnz abcd
 286+ 83C5
 287+ 83C5              ;call the colouring routine
 288+ 83C5 CD F9 83                     call colour_door
 289+ 83C8              ;print the middle bars again as we overote them above
 290+ 83C8 DD 21 D7 83                  ld ix,over1
 291+ 83CC CD D7 81                     CALL print_message
 292+ 83CF DD 21 E8 83                  ld ix,over2
 293+ 83D3 CD D7 81                     CALL print_message
 294+ 83D6 C9                           ret
 295+ 83D7
 296+ 83D7 09 06 86 80  over1:          db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 296+ 83DB 81 80 81 80
 296+ 83DF 81 80 81 80
 296+ 83E3 81 80 81 80
 296+ 83E7 7F
 297+ 83E8 0A 06 84 82  over2:          db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 297+ 83EC 83 82 83 82
 297+ 83F0 83 82 83 82
 297+ 83F4 83 82 83 81
 297+ 83F8 7F
 298+ 83F9
 299+ 83F9
 300+ 83F9              ;this routine below will be used by the right wall closed door drawing routine as well as now
 301+ 83F9              ;now colour the bars white ink - this will overwrite the 2 dark bars at line 7 and 8 - will sort later
 302+ 83F9 21 A8 58     colour_door:    ld hl,22696         ;start of bar bit at the top of the door
 303+ 83FC 11 20 00                     ld de,32            ;to jump 1 line down
 304+ 83FF 3E 09                        ld a,9              ;draw 9 characters across
 305+ 8401 32 1C 84                     ld (att_count),a
 306+ 8404 3E C7                        ld a,199
 307+ 8406 4F                           ld c,a              ;set colour to white ink, black paper
 308+ 8407 3E 10                        ld a,16             ;do 16 lines
 309+ 8409 E5           rept_5:         push hl
 310+ 840A F5           rept_4:         push af
 311+ 840B 3A 1C 84                     ld a,(att_count)    ;9
 312+ 840E 47                           ld b,a
 313+ 840F F1                           pop af
 314+ 8410 71           rept_3:         ld (hl),c           ;set the attribute colour
 315+ 8411 23                           inc hl
 316+ 8412 10 FC                        djnz rept_3
 317+ 8414 E1                           pop hl
 318+ 8415 19                           add hl,de           ;jump to next line below
 319+ 8416 E5                           push hl
 320+ 8417 3D                           dec a
 321+ 8418 20 F0                        jr nz,rept_4
 322+ 841A E1                           pop hl
 323+ 841B C9                           ret
 324+ 841C
 325+ 841C 09           att_count       db  9
 326+ 841D
 327+ 841D              ;###############################################################
 328+ 841D              ;door graphic
 329+ 841D              ;message format    row,col,colour,"message",end char (127 ($7f) )
 330+ 841D              exit_closed:    ;20 lines
 331+ 841D 03 06 88 80                  db 3,6,136, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 331+ 8421 81 80 81 80
 331+ 8425 81 80 81 80
 331+ 8429 81 80 81 80
 331+ 842D 7F
 332+ 842E 04 06 86 82                  db 4,6,134, $82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 332+ 8432 83 82 83 82
 332+ 8436 83 82 83 82
 332+ 843A 83 82 83 81
 332+ 843E 7F
 333+ 843F 05 06 84 80                  db 5,6,132, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 333+ 8443 81 84 84 84
 333+ 8447 84 84 84 84
 333+ 844B 84 84 81 80
 333+ 844F 7F
 334+ 8450 06 06 82 82                  db 6,6,130, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 334+ 8454 83 84 84 84
 334+ 8458 84 84 84 84
 334+ 845C 84 84 83 81
 334+ 8460 7F
 335+ 8461 07 06 80 80                  db 7,6,128, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 335+ 8465 81 84 84 84
 335+ 8469 84 84 84 84
 335+ 846D 84 84 81 80
 335+ 8471 7F
 336+ 8472 08 06 7E 82                  db 8,6,126, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 336+ 8476 83 84 84 84
 336+ 847A 84 84 84 84
 336+ 847E 84 84 83 81
 336+ 8482 7F
 337+ 8483 09 06 86 80                  db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 337+ 8487 81 80 81 80
 337+ 848B 81 80 81 80
 337+ 848F 81 80 81 80
 337+ 8493 7F
 338+ 8494 0A 06 84 82                  db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 338+ 8498 83 82 83 82
 338+ 849C 83 82 83 82
 338+ 84A0 83 82 83 81
 338+ 84A4 7F
 339+ 84A5 0B 06 82 80                  db 11,6,130,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 339+ 84A9 81 84 84 84
 339+ 84AD 84 84 84 84
 339+ 84B1 84 84 81 80
 339+ 84B5 7F
 340+ 84B6 0C 06 80 82                  db 12,6,128,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 340+ 84BA 83 84 84 84
 340+ 84BE 84 84 84 84
 340+ 84C2 84 84 83 81
 340+ 84C6 7F
 341+ 84C7 0D 06 7E 80                  db 13,6,126,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 341+ 84CB 81 84 84 84
 341+ 84CF 84 84 84 84
 341+ 84D3 84 84 81 80
 341+ 84D7 7F
 342+ 84D8 0E 06 86 82                  db 14,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 342+ 84DC 83 84 84 84
 342+ 84E0 84 84 84 84
 342+ 84E4 84 84 83 81
 342+ 84E8 7F
 343+ 84E9 0F 06 84 80                  db 15,6,132,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 343+ 84ED 81 84 84 84
 343+ 84F1 84 84 84 84
 343+ 84F5 84 84 81 80
 343+ 84F9 7F
 344+ 84FA 10 06 82 82                  db 16,6,130,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 344+ 84FE 83 84 84 84
 344+ 8502 84 84 84 84
 344+ 8506 84 84 83 81
 344+ 850A 7F
 345+ 850B 11 06 80 80                  db 17,6,128,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 345+ 850F 81 84 84 84
 345+ 8513 84 84 84 84
 345+ 8517 84 84 81 80
 345+ 851B 7F
 346+ 851C 12 06 7E 82                  db 18,6,126,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 346+ 8520 83 84 84 84
 346+ 8524 84 84 84 84
 346+ 8528 84 84 83 81
 346+ 852C 7F
 347+ 852D 13 06 88 80                  db 19,6,136,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 347+ 8531 81 84 84 84
 347+ 8535 84 84 84 84
 347+ 8539 84 84 81 80
 347+ 853D 7F
 348+ 853E 14 06 86 82                  db 20,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 348+ 8542 83 84 84 84
 348+ 8546 84 84 84 84
 348+ 854A 84 84 83 81
 348+ 854E 7F
 349+ 854F 15 06 84 80                  db 21,6,132,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 349+ 8553 81 80 81 80
 349+ 8557 81 80 81 80
 349+ 855B 81 80 81 80
 349+ 855F 7F
 350+ 8560 16 06 82 82                  db 22,6,130,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 350+ 8564 83 82 83 82
 350+ 8568 83 82 83 82
 350+ 856C 83 82 83 81
 350+ 8570 7F
 351+ 8571              ;------------------------------------------------------------------------------------
 352+ 8571              draw_exit_door_open:
 353+ 8571                             ; exit_closed 20 lines of 17 chars
 354+ 8571 06 14                        ld b,20
 355+ 8573 21 8A 85                     ld hl,exit_open
 356+ 8576 C5           abcde:          push bc
 357+ 8577 E5                           push hl
 358+ 8578 E5 DD E1                     ld ix,hl        ;point to our data to print
 359+ 857B CD D7 81                     CALL print_message
 360+ 857E E1                           pop hl
 361+ 857F 11 11 00                     ld de,17
 362+ 8582 19                           add hl,de
 363+ 8583 E5 DD E1                     ld ix,hl
 364+ 8586 C1                           pop bc
 365+ 8587 10 ED                        djnz abcde
 365+ 8589
 366+ 8589 C9                           ret
 367+ 858A              exit_open:    ;20 lines
 368+ 858A 03 06 BF B1                  db 3,6,191, $b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$7F
 368+ 858E AF AF AF AF
 368+ 8592 AF AF AF AF
 368+ 8596 AF AF AF B0
 368+ 859A 7F
 369+ 859B 04 06 BF 20                  db 4,6,191, $20,$b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$7F
 369+ 859F B1 AF AF AF
 369+ 85A3 AF AF AF AF
 369+ 85A7 AF AF B0 20
 369+ 85AB 7F
 370+ 85AC 05 06 BF 20                  db 5,6,191, $20,$20,$b1,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$20,$7F
 370+ 85B0 20 B1 AF AF
 370+ 85B4 AF AF AF AF
 370+ 85B8 AF B0 20 20
 370+ 85BC 7F
 371+ 85BD 06 06 BE 20                  db 6,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 371+ 85C1 20 20 AF AF
 371+ 85C5 AF AF AF AF
 371+ 85C9 AF 20 20 20
 371+ 85CD 7F
 372+ 85CE 07 06 BE 20                  db 7,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 372+ 85D2 20 20 AF AF
 372+ 85D6 AF AF AF AF
 372+ 85DA AF 20 20 20
 372+ 85DE 7F
 373+ 85DF 08 06 BE 20                  db 8,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 373+ 85E3 20 20 AF AF
 373+ 85E7 AF AF AF AF
 373+ 85EB AF 20 20 20
 373+ 85EF 7F
 374+ 85F0 09 06 BE 20                  db 9,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 374+ 85F4 20 20 AF AF
 374+ 85F8 AF AF AF AF
 374+ 85FC AF 20 20 20
 374+ 8600 7F
 375+ 8601 0A 06 BE 20                  db 10,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 375+ 8605 20 20 AF AF
 375+ 8609 AF AF AF AF
 375+ 860D AF 20 20 20
 375+ 8611 7F
 376+ 8612 0B 06 BE 20                  db 11,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 376+ 8616 20 20 AF AF
 376+ 861A AF AF AF AF
 376+ 861E AF 20 20 20
 376+ 8622 7F
 377+ 8623 0C 06 BE 20                  db 12,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 377+ 8627 20 20 AF AF
 377+ 862B AF AF AF AF
 377+ 862F AF 20 20 20
 377+ 8633 7F
 378+ 8634 0D 06 BE 20                  db 13,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 378+ 8638 20 20 AF AF
 378+ 863C AF AF AF AF
 378+ 8640 AF 20 20 20
 378+ 8644 7F
 379+ 8645 0E 06 BE 20                  db 14,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 379+ 8649 20 20 AF AF
 379+ 864D AF AF AF AF
 379+ 8651 AF 20 20 20
 379+ 8655 7F
 380+ 8656 0F 06 BE 20                  db 15,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 380+ 865A 20 20 AF AF
 380+ 865E AF AF AF AF
 380+ 8662 AF 20 20 20
 380+ 8666 7F
 381+ 8667 10 06 BE 20                  db 16,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 381+ 866B 20 20 AF AF
 381+ 866F AF AF AF AF
 381+ 8673 AF 20 20 20
 381+ 8677 7F
 382+ 8678 11 06 BE 20                  db 17,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 382+ 867C 20 20 AF AF
 382+ 8680 AF AF AF AF
 382+ 8684 AF 20 20 20
 382+ 8688 7F
 383+ 8689 12 06 BE 20                  db 18,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 383+ 868D 20 20 AF AF
 383+ 8691 AF AF AF AF
 383+ 8695 AF 20 20 20
 383+ 8699 7F
 384+ 869A 13 06 BE 20                  db 19,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 384+ 869E 20 20 AF AF
 384+ 86A2 AF AF AF AF
 384+ 86A6 AF 20 20 20
 384+ 86AA 7F
 385+ 86AB 14 06 BF 20                  db 20,6,191,$20,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$20,$7F
 385+ 86AF 20 B2 AF AF
 385+ 86B3 AF AF AF AF
 385+ 86B7 AF B3 20 20
 385+ 86BB 7F
 386+ 86BC 15 06 BF 20                  db 21,6,191,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$7F
 386+ 86C0 B2 AF AF AF
 386+ 86C4 AF AF AF AF
 386+ 86C8 AF AF B3 20
 386+ 86CC 7F
 387+ 86CD 16 06 BF B2                  db 22,6,191,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$7F
 387+ 86D1 AF AF AF AF
 387+ 86D5 AF AF AF AF
 387+ 86D9 AF AF AF B3
 387+ 86DD 7F
 388+ 86DE
 389+ 86DE              ;--------------------------------------------------------------------------------------
 390+ 86DE              draw_door_right_closed:
 391+ 86DE                             ; exit_closed 14 lines of 7 chars
 392+ 86DE 06 0D                        ld b,13
 393+ 86E0 21 5B 87                     ld hl,right_door_closed
 394+ 86E3 C5           abc_a:          push bc
 395+ 86E4 E5                           push hl
 396+ 86E5 E5 DD E1                     ld ix,hl        ;point to our data to print
 397+ 86E8 CD D7 81                     CALL print_message
 398+ 86EB E1                           pop hl
 399+ 86EC 11 07 00                     ld de,7
 400+ 86EF 19                           add hl,de
 401+ 86F0 E5 DD E1                     ld ix,hl
 402+ 86F3 C1                           pop bc
 403+ 86F4 10 ED                        djnz abc_a
 404+ 86F6
 405+ 86F6              ;draw top angled bit of the door on right wall
 406+ 86F6 DD 21 42 87                  ld ix,top_right_1        ;point to our data to print
 407+ 86FA CD D7 81                     CALL print_message
 408+ 86FD DD 21 47 87                  ld ix,top_right_2        ;point to our data to print
 409+ 8701 CD D7 81                     CALL print_message
 410+ 8704 DD 21 4D 87                  ld ix,top_right_3        ;point to our data to print
 411+ 8708 CD D7 81                     CALL print_message
 412+ 870B DD 21 54 87                  ld ix,top_right_4        ;point to our data to print
 413+ 870F CD D7 81                     CALL print_message
 414+ 8712
 415+ 8712              ;draw bottom angled bit of the door on right wall
 416+ 8712 DD 21 AF 87                  ld ix,bot_right_1        ;point to our data to print
 417+ 8716 CD D7 81                     CALL print_message
 418+ 8719 DD 21 B6 87                  ld ix,bot_right_2        ;point to our data to print
 419+ 871D CD D7 81                     CALL print_message
 420+ 8720 DD 21 BD 87                  ld ix,bot_right_3        ;point to our data to print
 421+ 8724 CD D7 81                     CALL print_message
 422+ 8727 DD 21 C3 87                  ld ix,bot_right_4        ;point to our data to print
 423+ 872B CD D7 81                     CALL print_message
 424+ 872E                         ; BREAK
 425+ 872E              ;now colour the attributes correctly to look diagonal
 426+ 872E                              ;do white colour bars first
 427+ 872E 21 B6 58                     ld hl,22710         ;start of bar bit at the top of the door
 428+ 8731 11 20 00                     ld de,32            ;to jump 1 line down
 429+ 8734 3E 01                        ld a,1              ;draw 1 attribute across
 430+ 8736 32 1C 84                     ld (att_count),a
 431+ 8739 3E C7                        ld a,199
 432+ 873B 4F                           ld c,a              ;set colour to white ink, black paper
 433+ 873C 3E 0E                        ld a,14             ;do 16 lines
 434+ 873E                             ; push hl
 435+ 873E CD 09 84                     call rept_5         ;colour our door correctly
 436+ 8741 C9                           ret
 437+ 8742
 438+ 8742
 439+ 8742              ;top 2 parts of the door
 440+ 8742 02 17 88 D3  top_right_1:    db 2,23,136,         $d3,$7F
 440+ 8746 7F
 441+ 8747 03 16 88 D5  top_right_2:    db 3,22,136,     $d5,$80,$7F
 441+ 874B 80 7F
 442+ 874D 04 15 88 D3  top_right_3:    db 4,21,136, $d3,$83,$82,$7F
 442+ 8751 83 82 7F
 443+ 8754 05 15 88 80  top_right_4:    db 5,21,136, $80,$87,$80,$7F
 443+ 8758 87 80 7F
 444+ 875B              ;middle of the closed door
 445+ 875B              right_door_closed:      ;15 lines
 446+ 875B 06 15 82 82                  db 6,21,130, $82,$87,$82,$7F
 446+ 875F 87 82 7F
 447+ 8762 07 15 80 80                  db 7,21,128, $80,$87,$80,$7F
 447+ 8766 87 80 7F
 448+ 8769 08 15 7E 82                  db 8,21,126, $82,$87,$82,$7F
 448+ 876D 87 82 7F
 449+ 8770 09 15 88 80                  db 9,21,136, $80,$87,$80,$7F
 449+ 8774 87 80 7F
 450+ 8777 0A 15 86 82                  db 10,21,134,$82,$87,$82,$7F
 450+ 877B 87 82 7F
 451+ 877E 0B 15 84 80                  db 11,21,132,$80,$87,$80,$7F
 451+ 8782 87 80 7F
 452+ 8785 0C 15 82 82                  db 12,21,130,$82,$87,$82,$7F
 452+ 8789 87 82 7F
 453+ 878C 0D 15 80 80                  db 13,21,128,$80,$87,$80,$7F
 453+ 8790 87 80 7F
 454+ 8793 0E 15 7E 82                  db 14,21,126,$82,$87,$82,$7F
 454+ 8797 87 82 7F
 455+ 879A 0F 15 88 80                  db 15,21,136,$80,$87,$80,$7F
 455+ 879E 87 80 7F
 456+ 87A1 10 15 86 82                  db 16,21,134,$82,$87,$82,$7F
 456+ 87A5 87 82 7F
 457+ 87A8 11 15 84 80                  db 17,21,132,$80,$87,$80,$7F
 457+ 87AC 87 80 7F
 458+ 87AF              ;                db 18,21,130,$82,$87,$82,$7F
 459+ 87AF              ;bottom 2 parts of the door
 460+ 87AF 12 15 80 80  bot_right_1:    db 18,21,128, $80,$87,$80,$7F
 460+ 87B3 87 80 7F
 461+ 87B6 13 15 80 D4  bot_right_2:    db 19,21,128, $d4,$83,$82,$7F
 461+ 87BA 83 82 7F
 462+ 87BD 14 16 80 D6  bot_right_3:    db 20,22,128,     $d6,$80,$7F
 462+ 87C1 80 7F
 463+ 87C3 15 17 80 D4  bot_right_4:    db 21,23,128,         $d4,$7F
 463+ 87C7 7F
 464+ 87C8
 465+ 87C8              ;--------------------------------------------------------------------
 466+ 87C8              draw_door_right_open:
 467+ 87C8                             ; exit_closed 14 lines of 7 chars
 468+ 87C8 06 0D                        ld b,13
 469+ 87CA 21 1F 88                     ld hl,right_door_open
 470+ 87CD C5           abc_b:          push bc
 471+ 87CE E5                           push hl
 472+ 87CF E5 DD E1                     ld ix,hl        ;point to our data to print
 473+ 87D2 CD D7 81                     CALL print_message
 474+ 87D5 E1                           pop hl
 475+ 87D6 11 07 00                     ld de,7
 476+ 87D9 19                           add hl,de
 477+ 87DA E5 DD E1                     ld ix,hl
 478+ 87DD C1                           pop bc
 479+ 87DE 10 ED                        djnz abc_b
 480+ 87E0
 481+ 87E0              ;draw top angled bit of the door on right wall
 482+ 87E0 DD 21 0B 88                  ld ix,top_right_op2        ;point to our data to print
 483+ 87E4 CD D7 81                     CALL print_message
 484+ 87E7 DD 21 11 88                  ld ix,top_right_op3        ;point to our data to print
 485+ 87EB CD D7 81                     CALL print_message
 486+ 87EE DD 21 18 88                  ld ix,top_right_op4        ;point to our data to print
 487+ 87F2 CD D7 81                     CALL print_message
 488+ 87F5
 489+ 87F5              ;draw bottom angled bit of the door on right wall - basically, all spaces so floor colour is drawn
 490+ 87F5 DD 21 7A 88                  ld ix,bot_right_op1        ;point to our data to print
 491+ 87F9 CD D7 81                     CALL print_message
 492+ 87FC DD 21 81 88                  ld ix,bot_right_op2        ;point to our data to print
 493+ 8800 CD D7 81                     CALL print_message
 494+ 8803 DD 21 88 88                  ld ix,bot_right_op3        ;point to our data to print
 495+ 8807 CD D7 81                     CALL print_message
 496+ 880A
 497+ 880A C9                           ret
 498+ 880B
 499+ 880B              ;top 2 parts of the door
 500+ 880B 03 16 C0 B0  top_right_op2:    db 3,22,192,     $b0,$7F,$7F;;$20,$7F
 500+ 880F 7F 7F
 501+ 8811 04 15 C0 B0  top_right_op3:    db 4,21,192, $b0,$20,$7F,$7F;$20,$7F
 501+ 8815 20 7F 7F
 502+ 8818 05 15 BC 20  top_right_op4:    db 5,21,188, $20,$20,$7F,$7F;$20,$7F
 502+ 881C 20 7F 7F
 503+ 881F              ;middle of the open door
 504+ 881F              right_door_open:      ;15 lines
 505+ 881F 06 15 BC 20                  db 6,21,188, $20,$20,$7F,$7F;$20,$7F
 505+ 8823 20 7F 7F
 506+ 8826 07 15 BC 20                  db 7,21,188, $20,$20,$7F,$7F;,$20,$7F
 506+ 882A 20 7F 7F
 507+ 882D 08 15 BC 20                  db 8,21,188, $20,$20,$7F,$7F;,$20,$7F
 507+ 8831 20 7F 7F
 508+ 8834 09 15 BC 20                  db 9,21,188, $20,$20,$7F,$7F;$20,$7F
 508+ 8838 20 7F 7F
 509+ 883B 0A 15 BC 20                  db 10,21,188,$20,$20,$7F,$7F;$20,$7F
 509+ 883F 20 7F 7F
 510+ 8842 0B 15 BC 20                  db 11,21,188,$20,$20,$7F,$7F;$20,$7F
 510+ 8846 20 7F 7F
 511+ 8849 0C 15 BC 20                  db 12,21,188,$20,$20,$7F,$7F;$20,$7F
 511+ 884D 20 7F 7F
 512+ 8850 0D 15 BC 20                  db 13,21,188,$20,$20,$7F,$7F;$20,$7F
 512+ 8854 20 7F 7F
 513+ 8857 0E 15 BC 20                  db 14,21,188,$20,$20,$7F,$7F;$20,$7F
 513+ 885B 20 7F 7F
 514+ 885E 0F 15 BC 20                  db 15,21,188,$20,$20,$7F,$7F;$20,$7F
 514+ 8862 20 7F 7F
 515+ 8865 10 15 BC 20                  db 16,21,188,$20,$20,$7F,$7F;$20,$7F
 515+ 8869 20 7F 7F
 516+ 886C 11 15 BC 20                  db 17,21,188,$20,$20,$7F,$7F;$20,$7F
 516+ 8870 20 7F 7F
 517+ 8873 12 15 BC 20                  db 18,21,188,$20,$20,$7F,$7F;$20,$7F
 517+ 8877 20 7F 7F
 518+ 887A
 519+ 887A              ;bottom 2 parts of the door
 520+ 887A 13 15 BC 20  bot_right_op1:    db 19,21,188, $20,$20,$7F,$7F;$20,$7F
 520+ 887E 20 7F 7F
 521+ 8881 14 15 62 20  bot_right_op2:    db 20,21,98, $20,$20,$7F,$7F;$20,$7F
 521+ 8885 20 7F 7F
 522+ 8888 15 16 62 20  bot_right_op3:    db 21,22,98,     $20,$7F,$7F;$20,$7F
 522+ 888C 7F 7F
 523+ 888E
 524+ 888E              ;--------------------------------------------------------------------
 525+ 888E              ;--------------------------------------------------------------------
 526+ 888E              ;switch animation below - neds to be switched on
 527+ 888E              ;--------------------------------------------------------------------
 528+ 888E              ;--------------------------------------------------------------------
 529+ 888E              ;switch_anim:
 530+ 888E
 531+ 888E              draw_switch_off:
 532+ 888E                             ; exit_closed 13 lines of 5 chars
 533+ 888E 06 0C                        ld b,12
 534+ 8890 21 BA 88                     ld hl,switch_off_g      ;start of switch off graphic
 535+ 8893 C5           abc_b1:          push bc
 536+ 8894 E5                           push hl
 537+ 8895 E5 DD E1                     ld ix,hl                ;point to our data to print
 538+ 8898 CD D7 81                     CALL print_message
 539+ 889B E1                           pop hl
 540+ 889C 11 07 00                     ld de,7                 ;each line is 9 chars long
 541+ 889F 19                           add hl,de
 542+ 88A0 E5 DD E1                     ld ix,hl
 543+ 88A3 C1                           pop bc
 544+ 88A4 10 ED                        djnz abc_b1
 545+ 88A6
 546+ 88A6              ;now colour the attributes to show switch is in the OFF position - colour it blue
 547+ 88A6                              ;do white colour bars first
 548+ 88A6 21 0C 59                     ld hl,22764+32   ;start of bar bit at the top of the door
 549+ 88A9 11 20 00                     ld de,32            ;to jump 1 line down after each print
 550+ 88AC 3E 01                        ld a,1              ;draw 1 attribute across
 551+ 88AE 32 1C 84                     ld (att_count),a
 552+ 88B1 3E B8                        ld a,184            ; colour to print (199=white)
 553+ 88B3 4F                           ld c,a              ;set colour to white ink, black paper
 554+ 88B4 3E 04                        ld a,4             ;do 5 lines
 555+ 88B6 CD 09 84                     call rept_5         ;colour our door correctly
 556+ 88B9
 557+ 88B9 C9                           ret
 558+ 88BA
 559+ 88BA              ;switch in off position
 560+ 88BA              switch_off_g:      ;13 lines
 561+ 88BA 06 0B 9E DE                  db 6,11,158, $de,$dd,$e1,$7F
 561+ 88BE DD E1 7F
 562+ 88C1 07 0B 9E E0                  db 7,11,158, $e0," ",$e4,$7F
 562+ 88C5 20 E4 7F
 563+ 88C8 08 0B 9E E0                  db 8,11,158, $e0," ",$e4,$7F
 563+ 88CC 20 E4 7F
 564+ 88CF 09 0B 9E E0                  db 9,11,158, $e0," ",$e4,$7F
 564+ 88D3 20 E4 7F
 565+ 88D6 0A 0B 9E E0                  db 10,11,158,$e0," ",$e4,$7F
 565+ 88DA 20 E4 7F
 566+ 88DD 0B 0B 9E E0                  db 11,11,158,$e0," ",$e4,$7F
 566+ 88E1 20 E4 7F
 567+ 88E4 0C 0B 9E E0                  db 12,11,158,$e0,"|",$e4,$7F
 567+ 88E8 7C E4 7F
 568+ 88EB 0D 0B 9E E0                  db 13,11,158,$e0,"|",$e4,$7F
 568+ 88EF 7C E4 7F
 569+ 88F2 0E 0B 9E E0                  db 14,11,158,$e0,"|",$e4,$7F
 569+ 88F6 7C E4 7F
 570+ 88F9 0F 0B 9E E0                  db 15,11,158,$e0,"|",$e4,$7F
 570+ 88FD 7C E4 7F
 571+ 8900 10 0B 9E E0                  db 16,11,158,$e0," ",$e4,$7F
 571+ 8904 20 E4 7F
 572+ 8907 11 0B 9E DF                  db 17,11,158,$df,$e3,$e2,$7F
 572+ 890B E3 E2 7F
 573+ 890E
 574+ 890E
 575+ 890E              ;--------------------------------------------------------------------
 576+ 890E
 577+ 890E              draw_switch_on:
 578+ 890E                             ; exit_closed 13 lines of 5 chars
 579+ 890E 06 0C                        ld b,12
 580+ 8910 21 3A 89                     ld hl,switch_on_g      ;start of switch off graphic
 581+ 8913 C5           abc_b2:          push bc
 582+ 8914 E5                           push hl
 583+ 8915 E5 DD E1                     ld ix,hl                ;point to our data to print
 584+ 8918 CD D7 81                     CALL print_message
 585+ 891B E1                           pop hl
 586+ 891C 11 07 00                     ld de,7                 ;each line is 9 chars long
 587+ 891F 19                           add hl,de
 588+ 8920 E5 DD E1                     ld ix,hl
 589+ 8923 C1                           pop bc
 590+ 8924 10 ED                        djnz abc_b2
 591+ 8926
 592+ 8926              ;now colour the attributes to show switch is in the OFF position - colour it blue
 593+ 8926                              ;do white colour bars first
 594+ 8926 21 8C 59                     ld hl,22924;+32      ;start of bar bit at the top of the door
 595+ 8929 11 20 00                     ld de,32            ;to jump 1 line down after each print
 596+ 892C 3E 01                        ld a,1              ;draw 1 attribute across
 597+ 892E 32 1C 84                     ld (att_count),a
 598+ 8931 3E 82                        ld a,130            ; colour to print (199=white)
 599+ 8933 4F                           ld c,a              ;set colour to white ink, black paper
 600+ 8934 3E 04                        ld a,4             ;do 5 lines
 601+ 8936 CD 09 84                     call rept_5         ;colour our door correctly
 602+ 8939
 603+ 8939 C9                           ret
 604+ 893A
 605+ 893A              ;switch in off position
 606+ 893A              switch_on_g:      ;12 lines
 607+ 893A 06 0B 9E DE                  db 6,11,158, $de,$dd,$e1,$7F
 607+ 893E DD E1 7F
 608+ 8941 07 0B 9E E0                  db 7,11,158, $e0," ",$e4,$7F
 608+ 8945 20 E4 7F
 609+ 8948 08 0B 9E E0                  db 8,11,158, $e0,"|",$e4,$7F
 609+ 894C 7C E4 7F
 610+ 894F 09 0B 9E E0                  db 9,11,158, $e0,"|",$e4,$7F
 610+ 8953 7C E4 7F
 611+ 8956 0A 0B 9E E0                  db 10,11,158,$e0,"|",$e4,$7F
 611+ 895A 7C E4 7F
 612+ 895D 0B 0B 9E E0                  db 11,11,158,$e0,"|",$e4,$7F
 612+ 8961 7C E4 7F
 613+ 8964 0C 0B 9E E0                  db 12,11,158,$e0," ",$e4,$7F
 613+ 8968 20 E4 7F
 614+ 896B 0D 0B 9E E0                  db 13,11,158,$e0," ",$e4,$7F
 614+ 896F 20 E4 7F
 615+ 8972 0E 0B 9E E0                  db 14,11,158,$e0," ",$e4,$7F
 615+ 8976 20 E4 7F
 616+ 8979 0F 0B 9E E0                  db 15,11,158,$e0," ",$e4,$7F
 616+ 897D 20 E4 7F
 617+ 8980 10 0B 9E E0                  db 16,11,158,$e0," ",$e4,$7F
 617+ 8984 20 E4 7F
 618+ 8987 11 0B 9E DF                  db 17,11,158,$df,$e3,$e2,$7F
 618+ 898B E3 E2 7F
 619+ 898E              ;-----------------------------------------------------------------------------------
 620+ 898E
 621+ 898E              draw_switch_right_off:
 622+ 898E
 623+ 898E                             ; exit_closed 14 lines of 7 chars
 624+ 898E 06 06                        ld b,6
 625+ 8990 21 0D 8A                     ld hl,switch_right_off
 626+ 8993 C5           abc_b3:         push bc
 627+ 8994 E5                           push hl
 628+ 8995 E5 DD E1                     ld ix,hl        ;point to our data to print
 629+ 8998 CD D7 81                     CALL print_message
 630+ 899B E1                           pop hl
 631+ 899C 11 07 00                     ld de,7         ;7 chars to read
 632+ 899F 19                           add hl,de
 633+ 89A0 E5 DD E1                     ld ix,hl
 634+ 89A3 C1                           pop bc
 635+ 89A4 10 ED                        djnz abc_b3
 636+ 89A6
 637+ 89A6              ;draw top angled bit of the door on right wall
 638+ 89A6 DD 21 F2 89                  ld ix,top_right_1a        ;point to our data to print
 639+ 89AA CD D7 81                     CALL print_message
 640+ 89AD DD 21 F8 89                  ld ix,top_right_2a        ;point to our data to print
 641+ 89B1 CD D7 81                     CALL print_message
 642+ 89B4 DD 21 FF 89                  ld ix,top_right_3a        ;point to our data to print
 643+ 89B8 CD D7 81                     CALL print_message
 644+ 89BB DD 21 06 8A                  ld ix,top_right_4a        ;point to our data to print
 645+ 89BF CD D7 81                     CALL print_message
 646+ 89C2
 647+ 89C2              ;draw bottom angled bit of the door on right wall
 648+ 89C2 DD 21 37 8A                  ld ix,bot_right_1a        ;point to our data to print
 649+ 89C6 CD D7 81                     CALL print_message
 650+ 89C9 DD 21 3E 8A                  ld ix,bot_right_2a        ;point to our data to print
 651+ 89CD CD D7 81                     CALL print_message
 652+ 89D0 DD 21 45 8A                  ld ix,bot_right_3a        ;point to our data to print
 653+ 89D4 CD D7 81                     CALL print_message
 654+ 89D7 DD 21 4C 8A                  ld ix,bot_right_4a        ;point to our data to print
 655+ 89DB CD D7 81                     CALL print_message
 656+ 89DE
 657+ 89DE              ;now colour the attributes correctly to look diagonal
 658+ 89DE                              ;do white colour bars first
 659+ 89DE 21 16 59                     ld hl,22710 +96       ;start of bar bit at the top of the door
 660+ 89E1 11 20 00                     ld de,32            ;to jump 1 line down
 661+ 89E4 3E 01                        ld a,1              ;draw 1 attribute across
 662+ 89E6 32 1C 84                     ld (att_count),a
 663+ 89E9 3E B8                        ld a,184            ;set colour of switxch
 664+ 89EB 4F                           ld c,a              ;set colour to white ink, black paper
 665+ 89EC 3E 04                        ld a,4             ; # of lines to do
 666+ 89EE CD 09 84                     call rept_5         ;colour our door correctly
 667+ 89F1 C9                           ret
 668+ 89F2
 669+ 89F2
 670+ 89F2              ;top 2 parts of the switch
 671+ 89F2 05 16 9E E5  top_right_1a:    db 5,22,158,    $e5,$e7,$7F
 671+ 89F6 E7 7F
 672+ 89F8 06 15 9E E5  top_right_2a:    db 6,21,158,$e5,$ea,$e8,$7F
 672+ 89FC EA E8 7F
 673+ 89FF 07 15 9E E6  top_right_3a:    db 7,21,158,$e6,$e9,$e4,$7F
 673+ 8A03 E9 E4 7F
 674+ 8A06 08 15 9E E0  top_right_4a:    db 8,21,158,$e0," ",$e4,$7F
 674+ 8A0A 20 E4 7F
 675+ 8A0D              ;middle of the OFF switch
 676+ 8A0D              switch_right_off:
 677+ 8A0D 09 15 9E E0                  db 9,21,158, $e0," ",$e4,$7F
 677+ 8A11 20 E4 7F
 678+ 8A14 0A 15 9E E0                  db 10,21,158,$e0," ",$e4,$7F
 678+ 8A18 20 E4 7F
 679+ 8A1B 0B 15 9E E0                  db 11,21,158,$e0," ",$e4,$7F
 679+ 8A1F 20 E4 7F
 680+ 8A22 0C 15 9E E0                  db 12,21,158,$e0,"|",$e4,$7F
 680+ 8A26 7C E4 7F
 681+ 8A29 0D 15 9E E0                  db 13,21,158,$e0,"|",$e4,$7F
 681+ 8A2D 7C E4 7F
 682+ 8A30 0E 15 9E E0                  db 14,21,158,$e0,"|",$e4,$7F
 682+ 8A34 7C E4 7F
 683+ 8A37
 684+ 8A37              ;bottom 2 parts of the switch
 685+ 8A37 0F 15 9E E0  bot_right_1a:   db 15,21,158,$e0,"|",$e4,$7F
 685+ 8A3B 7C E4 7F
 686+ 8A3E 10 15 9E EE  bot_right_2a:   db 16,21,158,$ee,$ef,$e4,$7F
 686+ 8A42 EF E4 7F
 687+ 8A45 11 15 9E EB  bot_right_3a:   db 17,21,158,$eb,$f0,$ed,$7F
 687+ 8A49 F0 ED 7F
 688+ 8A4C 12 16 9E EB  bot_right_4a:   db 18,22,158,    $eb,$ec,$7F
 688+ 8A50 EC 7F
 689+ 8A52
 690+ 8A52              ;--------------------------------------------------------------------------------
 691+ 8A52
 692+ 8A52              draw_switch_right_on:
 693+ 8A52                             ; exit_closed 14 lines of 7 chars
 694+ 8A52 06 06                        ld b,6
 695+ 8A54 21 D1 8A                     ld hl,switch_right_on
 696+ 8A57 C5           abc_b4:         push bc
 697+ 8A58 E5                           push hl
 698+ 8A59 E5 DD E1                     ld ix,hl        ;point to our data to print
 699+ 8A5C CD D7 81                     CALL print_message
 700+ 8A5F E1                           pop hl
 701+ 8A60 11 07 00                     ld de,7         ;7 chars to read
 702+ 8A63 19                           add hl,de
 703+ 8A64 E5 DD E1                     ld ix,hl
 704+ 8A67 C1                           pop bc
 705+ 8A68 10 ED                        djnz abc_b4
 706+ 8A6A
 707+ 8A6A              ;draw top angled bit of the door on right wall
 708+ 8A6A DD 21 B6 8A                  ld ix,top_right_1b        ;point to our data to print
 709+ 8A6E CD D7 81                     CALL print_message
 710+ 8A71 DD 21 BC 8A                  ld ix,top_right_2b        ;point to our data to print
 711+ 8A75 CD D7 81                     CALL print_message
 712+ 8A78 DD 21 C3 8A                  ld ix,top_right_3b        ;point to our data to print
 713+ 8A7C CD D7 81                     CALL print_message
 714+ 8A7F DD 21 CA 8A                  ld ix,top_right_4b        ;point to our data to print
 715+ 8A83 CD D7 81                     CALL print_message
 716+ 8A86
 717+ 8A86              ;draw bottom angled bit of the door on right wall
 718+ 8A86 DD 21 FB 8A                  ld ix,bot_right_1b        ;point to our data to print
 719+ 8A8A CD D7 81                     CALL print_message
 720+ 8A8D DD 21 02 8B                  ld ix,bot_right_2b        ;point to our data to print
 721+ 8A91 CD D7 81                     CALL print_message
 722+ 8A94 DD 21 09 8B                  ld ix,bot_right_3b        ;point to our data to print
 723+ 8A98 CD D7 81                     CALL print_message
 724+ 8A9B DD 21 10 8B                  ld ix,bot_right_4b        ;point to our data to print
 725+ 8A9F CD D7 81                     CALL print_message
 726+ 8AA2
 727+ 8AA2              ;now colour the attributes correctly to look diagonal
 728+ 8AA2                              ;do white colour bars first
 729+ 8AA2 21 96 59                     ld hl,22710 +96+96+32       ;start of bar bit at the top of the door
 730+ 8AA5 11 20 00                     ld de,32            ;to jump 1 line down
 731+ 8AA8 3E 01                        ld a,1              ;draw 1 attribute across
 732+ 8AAA 32 1C 84                     ld (att_count),a
 733+ 8AAD 3E 82                        ld a,130            ;set colour of switxch
 734+ 8AAF 4F                           ld c,a              ;set colour to white ink, black paper
 735+ 8AB0 3E 04                        ld a,4             ; # of lines to do
 736+ 8AB2 CD 09 84                     call rept_5         ;colour our door correctly
 737+ 8AB5 C9                           ret
 738+ 8AB6
 739+ 8AB6
 740+ 8AB6              ;top 2 parts of the switch
 741+ 8AB6 05 16 9E E5  top_right_1b:    db 5,22,158,    $e5,$e7,$7F
 741+ 8ABA E7 7F
 742+ 8ABC 06 15 9E E5  top_right_2b:    db 6,21,158,$e5,$ea,$e8,$7F
 742+ 8AC0 EA E8 7F
 743+ 8AC3 07 15 9E E6  top_right_3b:    db 7,21,158,$e6,$e9,$e4,$7F
 743+ 8AC7 E9 E4 7F
 744+ 8ACA 08 15 9E E0  top_right_4b:    db 8,21,158,$e0,"|",$e4,$7F
 744+ 8ACE 7C E4 7F
 745+ 8AD1              ;middle of the ON switch
 746+ 8AD1              switch_right_on:
 747+ 8AD1 09 15 9E E0                  db 9,21,158, $e0,"|",$e4,$7F
 747+ 8AD5 7C E4 7F
 748+ 8AD8 0A 15 9E E0                  db 10,21,158,$e0,"|",$e4,$7F
 748+ 8ADC 7C E4 7F
 749+ 8ADF 0B 15 9E E0                  db 11,21,158,$e0,"|",$e4,$7F
 749+ 8AE3 7C E4 7F
 750+ 8AE6 0C 15 9E E0                  db 12,21,158,$e0," ",$e4,$7F
 750+ 8AEA 20 E4 7F
 751+ 8AED 0D 15 9E E0                  db 13,21,158,$e0," ",$e4,$7F
 751+ 8AF1 20 E4 7F
 752+ 8AF4 0E 15 9E E0                  db 14,21,158,$e0," ",$e4,$7F
 752+ 8AF8 20 E4 7F
 753+ 8AFB
 754+ 8AFB              ;bottom 2 parts of the switch
 755+ 8AFB 0F 15 9E E0  bot_right_1b:   db 15,21,158,$e0," ",$e4,$7F
 755+ 8AFF 20 E4 7F
 756+ 8B02 10 15 9E EE  bot_right_2b:   db 16,21,158,$ee,$ef,$e4,$7F
 756+ 8B06 EF E4 7F
 757+ 8B09 11 15 9E EB  bot_right_3b:   db 17,21,158,$eb,$f0,$ed,$7F
 757+ 8B0D F0 ED 7F
 758+ 8B10 12 16 9E EB  bot_right_4b:   db 18,22,158,    $eb,$ec,$7F
 758+ 8B14 EC 7F
 759+ 8B16
 760+ 8B16
 761+ 8B16
 762+ 8B16
 763+ 8B16
 764+ 8B16
 765+ 8B16
 766+ 8B16
 767+ 8B16
# file closed: src/1-rd3dmazeV6.asm
 447  8B16                  INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
# file opened: src/2-rd3dmazeV6.asm
   1+ 8B16
   2+ 8B16              ;##############################################
   3+ 8B16              ;Draw the current map on screen
   4+ 8B16              ;##############################################
   5+ 8B16
   6+ 8B16                  ;    org $E000   ; 57344 - top 8k
   7+ 8B16
   8+ 8B16              ;max row=21, max column = 31
   9+ 8B16
  10+ 8B16              ;will need to change DF_CC position for sjasmplus
  11+ 8B16              DRAW_MAP:
  12+ 8B16                      ;set max speed!
  13+ 8B16 ED 91 07 03          nextreg 7,3
  14+ 8B1A
  15+ 8B1A                      ;set our colours
  16+ 8B1A 3E B2                ld a,178            ;red
  17+ 8B1C 32 E6 98             ld (wallcol),a
  18+ 8B1F
  19+ 8B1F              ;first draw a top wall line
  20+ 8B1F 3E 11                ld a,17          ;draw 16 wall chars
  21+ 8B21 01 04 02             ld bc,$0204      ;print at 2,4;
  22+ 8B24 CD CD 8B             call topbotline
  23+ 8B27
  24+ 8B27              ;now draw the map data
  25+ 8B27 01 04 03             ld bc,$0304      ;set row and column to 2,4
  26+ 8B2A 2A 23 FA             ld hl,(map_start)
  27+ 8B2D 22 18 FA             ld (var7),hl   ;save it
  28+ 8B30              rep1:
  29+ 8B30 C5                   push bc
  30+ 8B31 CD F0 8B             call locate
  31+ 8B34 C1                   pop bc           ;restore our counter
  32+ 8B35 C5                   push bc          ;resave it
  33+ 8B36
  34+ 8B36 CD 77 8B             call get_maze_data
  35+ 8B39 CD 12 8C             call print1      ;print character
  36+ 8B3C C1                   pop bc
  37+ 8B3D 0C                   inc c
  38+ 8B3E 79                   ld a,c
  39+ 8B3F D6 14                sub 20          ;just draw 16 characters (we start at loc 4)
  40+ 8B41 C2 30 8B             jp nz,rep1
  41+ 8B44
  42+ 8B44              ;now draw a final wall at the end of the line
  43+ 8B44 C5                   push bc
  44+ 8B45 11 00 F8             ld de,udg_start  ;point to udg chars
  45+ 8B48 ED 53 0A 8C          ld (base),de
  46+ 8B4C CD F0 8B             call locate      ;set print position
  47+ 8B4F CD F6 99             call set_wall_col   ;set our wall colour
  48+ 8B52 3A E6 98             ld a,(wallcol)
  49+ 8B55 32 0E 8C             ld (att),a
  50+ 8B58 3E B4                ld a,_smallwall  ;draw wall char
  51+ 8B5A CD 12 8C             call print1
  52+ 8B5D C1                   pop bc
  53+ 8B5E 78                   ld a,b
  54+ 8B5F FE 12                cp 18            ;draw 18 lines (starting at line 2)
  55+ 8B61 28 05                jr z,ret2        ;exit after 18 lines
  56+ 8B63 04                   inc b
  57+ 8B64 0E 04                ld c,4           ;start row from pos 4 again
  58+ 8B66 18 C8                jr rep1          ;start again
  59+ 8B68
  60+ 8B68              ;now draw a bottom line wall
  61+ 8B68 3E 11        ret2:   ld a,17          ;draw 16 wall chars
  62+ 8B6A 01 04 13             ld bc,$1304      ;print at 2,4;
  63+ 8B6D CD CD 8B             call topbotline
  64+ 8B70
  65+ 8B70              ;put our char set back to normal!
  66+ 8B70 21 00 C5             ld hl,charset_1-256
  67+ 8B73 22 0A 8C             ld (base),hl
  68+ 8B76 C9                   ret
  69+ 8B77
  70+ 8B77              ;cycle through the maze drawing blocks, player, exit etc
  71+ 8B77              get_maze_data:
  72+ 8B77 2A 18 FA             ld hl,(var7)    ;get our current map position
  73+ 8B7A 3E 28                ld a,40         ;cyan paper, black ink
  74+ 8B7C 32 0E 8C             ld (att),a
  75+ 8B7F
  76+ 8B7F              ;set charset to non udg
  77+ 8B7F 11 00 C6             ld de,charset_1
  78+ 8B82 15                   dec d
  79+ 8B83 ED 53 0A 8C          ld (base),de    ;set char set start for ptint1 routine
  80+ 8B87 7E                   ld a,(hl)       ;get our character to print
  81+ 8B88 23                   inc hl           ;jump to next maze location
  82+ 8B89 22 18 FA             ld (var7),hl
  83+ 8B8C 67                   ld h,a          ;save reg a - we dont need reg h anymore
  84+ 8B8D
  85+ 8B8D              ;Now check if its a player, a wall or an Exit or switch,
  86+ 8B8D ED 5B 00 FA          ld de,(player_pos)      ;get player location
  87+ 8B91 2D                   dec l                   ;put back hl as we inc'd it earlier
  88+ 8B92 7B                   ld a,e                  ;go back 1 position as we already incremented it
  89+ 8B93 BD                   cp l
  90+ 8B94 7C                   ld a,h             ;restore reg a for further compares
  91+ 8B95 20 02                jr nz,go_1          ;no match for a player
  92+ 8B97 3E A6                ld a,$a6           ;set a to  our little man character which is a graphic
  93+ 8B99 FE 20        go_1:   cp ' '
  94+ 8B9B C8                   ret z
  95+ 8B9C
  96+ 8B9C              ;its a graphic character - assume its a wall no matter what
  97+ 8B9C 67                   ld h,a             ;save reg a
  98+ 8B9D 3E 0A                ld a,10             ;yellow paper, black ink
  99+ 8B9F 32 0E 8C             ld (att),a         ;red ink, blue background
 100+ 8BA2 7C                   ld a,h
 101+ 8BA3
 102+ 8BA3
 103+ 8BA3              ;Now check if its a player, a wall or an Exit or switch
 104+ 8BA3 1E A6                ld e, $a6           ;our little man graphic
 105+ 8BA5 BB                   cp e
 106+ 8BA6 28 1B                jr z,go_on          ;do next check
 107+ 8BA8
 108+ 8BA8              ;check for an exit....
 109+ 8BA8 1E C0                ld e,_me            ;exit char = 192
 110+ 8BAA 7C                   ld a,h
 111+ 8BAB BB                   cp e               ;needs to be a compare so a is left intact
 112+ 8BAC 3E A8                ld a,$a8            ;load exit character
 113+ 8BAE 28 13                jr z,go_on
 114+ 8BB0              ;
 115+ 8BB0              ;a7 check for a switch...
 116+ 8BB0 1E E0                ld e,_ms           ;exit char = 192
 117+ 8BB2 7C                   ld a,h
 118+ 8BB3 BB                   cp e               ;needs to be a compare so a is left intact
 119+ 8BB4 3E A7                ld a,$a7            ;load exit character
 120+ 8BB6 28 0B                jr z,go_on
 121+ 8BB8
 122+ 8BB8              ;default to a wall....
 123+ 8BB8              carry_on1:
 124+ 8BB8 CD F6 99             call set_wall_col   ;set our wall colour
 125+ 8BBB 3A E6 98             ld a,(wallcol)
 126+ 8BBE 32 0E 8C             ld (att),a         ;red ink, blue background
 127+ 8BC1 3E B4                ld a,_smallwall         ;return wall char
 128+ 8BC3
 129+ 8BC3
 130+ 8BC3              go_on:
 131+ 8BC3 D6 80                sub $80          ;subtract 128 to point to correct graphic char
 132+ 8BC5              ;set char set to udg's
 133+ 8BC5 11 00 FC             ld de,_chars;$fc00
 134+ 8BC8 ED 53 0A 8C          ld (base),de
 135+ 8BCC C9                   ret
 136+ 8BCD
 137+ 8BCD              topbotline:
 138+ 8BCD              ;draws a single line of 16 wall chars
 139+ 8BCD              ;set char set to udg's
 140+ 8BCD 11 00 FC             ld de,$fc00             ;point to udg's
 141+ 8BD0 ED 53 0A 8C          ld (base),de
 142+ 8BD4
 143+ 8BD4 F5           rep3:   push af
 144+ 8BD5 CD F0 8B             call locate             ;set print position
 145+ 8BD8              ;set wall colour. Print 1 uses whats stored in (att)
 146+ 8BD8 CD F6 99             call set_wall_col   ;set our wall colour
 147+ 8BDB 3A E6 98             ld a,(wallcol)
 148+ 8BDE 32 0E 8C             ld (att),a
 149+ 8BE1 3E B4                ld a,_smallwall
 150+ 8BE3 D6 80                sub $80
 151+ 8BE5 C5                   push bc
 152+ 8BE6 CD 12 8C             call print1      ;print the character
 153+ 8BE9 C1                   pop bc
 154+ 8BEA 0C                   inc c
 155+ 8BEB F1                   pop af
 156+ 8BEC 3D                   dec a
 157+ 8BED 20 E5                jr nz,rep3        ;exit when a=0
 158+ 8BEF C9                   ret
 159+ 8BF0
 160+ 8BF0
 161+ 8BF0              ;==================================================
 162+ 8BF0              ;from advanced spectrum machine code book
 163+ 8BF0              ;==================================================
 164+ 8BF0
 165+ 8BF0              ;locate routine for use with print routine
 166+ 8BF0
 167+ 8BF0              ;   entry: b=line  c=column
 168+ 8BF0              ;   preserved = bc
 169+ 8BF0              ;   on exit -   hl = display file address
 170+ 8BF0              ;               de = attr address
 171+ 8BF0              ;               a  = attr (b,c)
 172+ 8BF0              ;   df_cc is altered
 173+ 8BF0
 174+ 8BF0
 175+ 8BF0
 176+ 8BF0                 ; BREAK
 177+ 8BF0 78           locate: ld a,b
 178+ 8BF1 E6 18                and $18
 179+ 8BF3 67                   ld h,a
 180+ 8BF4 CB F4                set 6,h
 181+ 8BF6 0F                   rrca
 182+ 8BF7 0F                   rrca
 183+ 8BF8 0F                   rrca
 184+ 8BF9 F6 58                or $58
 185+ 8BFB 57                   ld d,a
 186+ 8BFC 78                   ld a,b
 187+ 8BFD E6 07                and 7
 188+ 8BFF 0F                   rrca
 189+ 8C00 0F                   rrca
 190+ 8C01 0F                   rrca
 191+ 8C02 81                   add a,c
 192+ 8C03 6F                   ld l,a
 193+ 8C04 5F                   ld e,a
 194+ 8C05 1A                   ld a,(de)
 195+ 8C06 22 84 5C             ld (df_cc),hl
 196+ 8C09 C9                   ret
 197+ 8C0A
 198+ 8C0A              ;here is the new print routine
 199+ 8C0A
 200+ 8C0A              ;   entry: a=char code to be printed
 201+ 8C0A              ;   preserved = c
 202+ 8C0A              ;   exit -  b=0
 203+ 8C0A              ;           de = attribute address
 204+ 8C0A
 205+ 8C0A              ; variable base is initialised to 3c00h = normal spectrum character set
 206+ 8C0A              ; att is place immediately before mask so that
 207+ 8C0A              ; the two can be accessed with one ld instuction
 208+ 8C0A
 209+ 8C0A 00 3C        base    dw $3c00 ; start of speccy characer set
 210+ 8C0C 00 40        dfcc    dw $4000 ;start of spectrum screen mem
 211+ 8C0E              ;dfcc    dw $0000 ;start of spectrum screen mem slot 0
 212+ 8C0E 38 00        att     dw $38
 213+ 8C10 00 00        mask    dw 0
 214+ 8C12
 215+ 8C12
 216+ 8C12
 217+ 8C12              print1: ; construct character data address
 218+ 8C12
 219+ 8C12
 220+ 8C12 6F                   ld l,a
 221+ 8C13 26 00                ld h,0
 222+ 8C15 29                   add hl,hl
 223+ 8C16 29                   add hl,hl
 224+ 8C17 29                   add hl,hl
 225+ 8C18 ED 5B 0A 8C          ld de,(base)                ;char set data
 226+ 8C1C 19                   add hl,de
 227+ 8C1D
 228+ 8C1D                      ; take display file address
 229+ 8C1D ED 5B 84 5C          ld de,(df_cc)
 230+ 8C21 06 08                ld b,8
 231+ 8C23
 232+ 8C23                      ; print character row by row
 233+ 8C23 7E           nxtrow: ld a,(hl)
 234+ 8C24 12                   ld (de),a
 235+ 8C25 23                   inc hl
 236+ 8C26 14                   inc d
 237+ 8C27 10 FA                djnz nxtrow
 238+ 8C29
 239+ 8C29                      ; construct attribute address
 240+ 8C29 7A                   ld a,d
 241+ 8C2A 0F                   rrca
 242+ 8C2B 0F                   rrca
 243+ 8C2C 0F                   rrca
 244+ 8C2D 3D                   dec a
 245+ 8C2E E6 03                and 3
 246+ 8C30 F6 58                or $58
 247+ 8C32 57                   ld d,a
 248+ 8C33 2A 0E 8C             ld hl,(att)    ; h=mask, l=attribute
 249+ 8C36
 250+ 8C36                      ; take old attribute
 251+ 8C36 1A                   ld a,(de)
 252+ 8C37
 253+ 8C37                      ; construct new one
 254+ 8C37 AD                   xor l
 255+ 8C38 A4                   and h
 256+ 8C39 AD                   xor l
 257+ 8C3A
 258+ 8C3A                      ; replace attribute
 259+ 8C3A 12                   ld (de),a
 260+ 8C3B
 261+ 8C3B                      ; finally, set dfcc to next print position
 262+ 8C3B 21 84 5C             ld hl,df_cc
 263+ 8C3E 34                   inc (hl)
 264+ 8C3F C0                   ret nz
 265+ 8C40 23                   inc hl
 266+ 8C41 7E                   ld a,(hl)
 267+ 8C42 C6 08                add a,8
 268+ 8C44 77                   ld (hl),a
 269+ 8C45 C9                   ret
 270+ 8C46
 271+ 8C46
 272+ 8C46              ; print routine - print screen at c000 to 16384
 273+ 8C46              ; uses locate routine
 274+ 8C46
 275+ 8C46              my_print_info:  ; set dfcc to line , column
 276+ 8C46
 277+ 8C46              ;1st, check if we are printing a udg
 278+ 8C46              ;reg a holds our character to print. udg's are char $90 onwards
 279+ 8C46
 280+ 8C46              ; the carry will be set if the cp argument > than a
 281+ 8C46
 282+ 8C46
 283+ 8C46              setbase:
 284+ 8C46 F5                   push af
 285+ 8C47 C5                   push bc
 286+ 8C48 E5                   push hl
 287+ 8C49              ;        ld a,$3c                ;point to spectrum rom
 288+ 8C49              ;        ld (base+1),a
 289+ 8C49              ;        sub a                   ; make zero
 290+ 8C49              ;        ld (base),a
 291+ 8C49
 292+ 8C49              ;point to our character set
 293+ 8C49 21 00 C6             ld hl,charset_1
 294+ 8C4C 25                   dec h
 295+ 8C4D 22 0A 8C             ld (base),hl
 296+ 8C50
 297+ 8C50                      ;we are now pointing at the rom char set
 298+ 8C50 0A                   ld a,(bc)               ;get our char to print
 299+ 8C51               ;       nop ;or a
 300+ 8C51 CB 7F                bit 7,a                 ;are we printing udg's?
 301+ 8C53                      ; bit 7=1 so zero =false
 302+ 8C53 28 09                jr z,ret_1              ;exit if theres no graphic to print
 303+ 8C55 D6 80                sub $80                 ;point to the first character of udg's
 304+ 8C57 01 00 F8             ld bc,udg_start         ;start of udg's in memory
 305+ 8C5A ED 43 0A 8C          ld (base),bc
 306+ 8C5E                      ;ld hl,(base)
 307+ 8C5E E1           ret_1   pop hl
 308+ 8C5F C1                   pop bc
 309+ 8C60 F1                   pop af
 310+ 8C61
 311+ 8C61 C9                   ret
 312+ 8C62
 313+ 8C62              my_print:
 314+ 8C62 06 00        lp4:    ld b,0
 315+ 8C64 0E 00                ld c,0
 316+ 8C66              ;        ld a,120
 317+ 8C66
 318+ 8C66              ;        ld (att),a
 319+ 8C66 CD F0 8B             call locate ; set print pos and attribute
 320+ 8C69                      ;call cls - clear the screen
 321+ 8C69
 322+ 8C69                      ;loop 24 times
 323+ 8C69                      ;ld a,2
 324+ 8C69                      ;push af
 325+ 8C69
 326+ 8C69                      ; set base pointer to  character set
 327+ 8C69                      ; starts at space char code 0
 328+ 8C69                ;      ld hl,(base)
 329+ 8C69                      ;ld (base),hl
 330+ 8C69 97                   sub a
 331+ 8C6A                    ;make reg a=0
 332+ 8C6A 32 B4 8C             ld (lc),a   ;line counter
 333+ 8C6D
 334+ 8C6D                      ; remember, print1 preserves the c register
 335+ 8C6D 01 FF BF             ld bc, $bfff ;c000  ; 1 less than display in memory
 336+ 8C70 2E 00                ld l,0
 337+ 8C72              lp3:
 338+ 8C72
 339+ 8C72 C5                   push bc
 340+ 8C73 E5                   push hl
 341+ 8C74 03                   inc bc
 342+ 8C75 0A                   ld a,(bc)
 343+ 8C76 CD 46 8C             call setbase ; set char set
 344+ 8C79 3E F0                ld a,240
 345+ 8C7B 32 0E 8C             ld (att),a          ;set black ink and paper
 346+ 8C7E 0A                   ld a,(bc)           ;reload our character to print
 347+ 8C7F 2A 0A 8C             ld hl,(base)
 348+ 8C82
 349+ 8C82              ;charset test
 350+ 8C82 2A 00 C6             ld hl,(charset_1)
 351+ 8C85
 352+ 8C85 CD 12 8C             call print1  ; print char in a
 353+ 8C88 E1                   pop hl
 354+ 8C89 C1                   pop bc
 355+ 8C8A
 356+ 8C8A 03                   inc bc
 357+ 8C8B 2C                   inc l
 358+ 8C8C 7D                   ld a,l
 359+ 8C8D FE 19                cp 25       ; print 26 chars
 360+ 8C8F C2 72 8C             jp nz,lp3
 361+ 8C92
 362+ 8C92 C5                   push bc
 363+ 8C93 E1                   pop hl
 364+ 8C94 16 00                ld d,0
 365+ 8C96 1E 08                ld e,8
 366+ 8C98 19                   add hl,de
 367+ 8C99
 368+ 8C99 E5                   push hl
 369+ 8C9A C1                   pop bc
 370+ 8C9B 2E 00                ld l,0       ;start at 0 for the next line
 371+ 8C9D 3A B4 8C             ld a,(lc)
 372+ 8CA0 3C                   inc  a
 373+ 8CA1
 374+ 8CA1              ;we only draw the first 24 columns x 24 lines
 375+ 8CA1 FE 18                cp 24      ; x lines to print
 376+ 8CA3
 377+ 8CA3 C8                   ret z
 378+ 8CA4
 379+ 8CA4              ; reset position to next line. locate can do attributes too
 380+ 8CA4 D9                   exx
 381+ 8CA5 E5                   push hl
 382+ 8CA6 32 B4 8C             ld (lc),a  ; save counter
 383+ 8CA9 47                   ld b,a
 384+ 8CAA 0E 00                ld c,0
 385+ 8CAC CD F0 8B             call locate
 386+ 8CAF E1                   pop hl
 387+ 8CB0 D9                   exx
 388+ 8CB1 C3 72 8C             jp lp3
 389+ 8CB4
 390+ 8CB4
 391+ 8CB4 00           lc      db 0
 392+ 8CB5
 393+ 8CB5
 394+ 8CB5              ;============================================
 395+ 8CB5              ; draw player direction text on screen
 396+ 8CB5              ;===========================================
 397+ 8CB5
 398+ 8CB5              ; loop 7 times for 7 lines
 399+ 8CB5              ; start at column 14
 400+ 8CB5              ; print 7 characters
 401+ 8CB5
 402+ 8CB5              compass:
 403+ 8CB5              ;first colour in the background - 7 lines starting at 17,25
 404+ 8CB5              ;              ld b,17           ;row 21
 405+ 8CB5              ;              ld c,25           ;col 25
 406+ 8CB5
 407+ 8CB5              ;loc_1:        push bc
 408+ 8CB5              ;              call locate    ;set print position
 409+ 8CB5              ;              pop bc
 410+ 8CB5              ;              ;de holds the attribute position
 411+ 8CB5              ;              ld a,151          ;set colour
 412+ 8CB5              ;              call colour1
 413+ 8CB5              ;              ld a,23
 414+ 8CB5              ;              sub b
 415+ 8CB5              ;              inc b
 416+ 8CB5              ;              jr nz,loc_1
 417+ 8CB5              ;              jr draw_compass
 418+ 8CB5
 419+ 8CB5              ;colour1:      ld l,7
 420+ 8CB5              ;colour2:      ld (de),a
 421+ 8CB5              ;              inc de
 422+ 8CB5              ;              dec l
 423+ 8CB5              ;              ret z
 424+ 8CB5              ;              jr colour2
 425+ 8CB5
 426+ 8CB5              ;now draw the compass
 427+ 8CB5 06 17        draw_compass: ld b,23           ;row 21
 428+ 8CB7 0E 19                      ld c,25           ;col 25
 429+ 8CB9
 430+ 8CB9 C5                         push bc
 431+ 8CBA CD E4 8C                   call print_pos    ;set print position
 432+ 8CBD C1                         pop bc
 433+ 8CBE
 434+ 8CBE              ; now print our characters
 435+ 8CBE 11 2B 8D                   ld de,c_dat-1       ;data start
 436+ 8CC1 1A           loop1:        ld a,(de)
 437+ 8CC2 FE 78                      cp 'x';120            ; = "x" data end
 438+ 8CC4 CA D6 8C                   jp z,nxt_line
 439+ 8CC7 FE 46                      cp 'F';70             ; "F" finished so exit
 440+ 8CC9 CA EF 8C                   jp z, do_exit
 441+ 8CCC
 442+ 8CCC D5                         push de
 443+ 8CCD C5                         push bc
 444+ 8CCE CD 12 8C                   call print1       ; print the character
 445+ 8CD1 C1                         pop bc
 446+ 8CD2 D1                         pop de
 447+ 8CD3
 448+ 8CD3 1B                         dec de
 449+ 8CD4 18 EB                      jr loop1
 450+ 8CD6
 451+ 8CD6 C5           nxt_line:     push bc
 452+ 8CD7 D5                         push de
 453+ 8CD8 0E 19                      ld c,25
 454+ 8CDA 05                         dec b
 455+ 8CDB CD E4 8C                   call print_pos
 456+ 8CDE D1                         pop de
 457+ 8CDF C1                         pop bc
 458+ 8CE0 1B                         dec de
 459+ 8CE1 05                         dec b
 460+ 8CE2 18 DD                      jr loop1
 461+ 8CE4
 462+ 8CE4              ; set print position
 463+ 8CE4 C5           print_pos:    push bc
 464+ 8CE5 CD F0 8B                   call locate
 465+ 8CE8 3E A5                      ld a,165          ;set ink and paper colour
 466+ 8CEA 32 0E 8C                   ld (att),a
 467+ 8CED C1                         pop bc
 468+ 8CEE C9                         ret
 469+ 8CEF
 470+ 8CEF CD 2C 8D     do_exit:  call show_dir     ; highlight player direction
 471+ 8CF2
 472+ 8CF2 C9                         ret
 473+ 8CF3
 474+ 8CF3
 475+ 8CF3 46                   db "F"
 476+ 8CF4              ;        db "x       "
 477+ 8CF4 78 73 73 61          db "xssapmoC"
 477+ 8CF8 70 6D 6F 43
 478+ 8CFC 78 20 20 20          db "x       "
 478+ 8D00 20 20 20 20
 479+ 8D04 78 20 20 20          db "x   N   "
 479+ 8D08 4E 20 20 20
 480+ 8D0C 78 20 20 20          db "x   |   "
 480+ 8D10 7C 20 20 20
 481+ 8D14 78 20 45 2D          db "x E-+-W "
 481+ 8D18 2B 2D 57 20
 482+ 8D1C 78 20 20 20          db "x   |   "
 482+ 8D20 7C 20 20 20
 483+ 8D24 78 20 20 20          db "x   S   "
 483+ 8D28 53 20 20 20
 484+ 8D2C              c_dat:
 485+ 8D2C
 486+ 8D2C
 487+ 8D2C              ;===========================================
 488+ 8D2C              ; highlight player direction
 489+ 8D2C              ;===========================================
 490+ 8D2C
 491+ 8D2C              ;l4085 holdsplayer view  direction
 492+ 8D2C
 493+ 8D2C              ;00= north, 01=west, 02=south, 03=east
 494+ 8D2C
 495+ 8D2C 3E A5        show_dir:     ld a,165;185             ;white txt, brown background
 496+ 8D2E              ;now clear the settings to none
 497+ 8D2E 21 FC 5A                   ld hl,23228+64       ;s
 498+ 8D31 77                         ld (hl),a
 499+ 8D32 21 BE 5A                   ld hl,23166+64       ;e
 500+ 8D35 77                         ld (hl),a
 501+ 8D36 21 BA 5A                   ld hl,23162+64       ;w
 502+ 8D39 77                         ld (hl),a
 503+ 8D3A 21 7C 5A                   ld hl,23100+64       ;n
 504+ 8D3D 77                         ld (hl),a
 505+ 8D3E
 506+ 8D3E
 507+ 8D3E              ;now colour the direction indicator
 508+ 8D3E
 509+ 8D3E 3A 08 FA                   ld a,(player_dir)
 510+ 8D41 FE 00                      cp 0              ;n
 511+ 8D43 C2 4C 8D                   jp nz,c1
 512+ 8D46 21 7C 5A                   ld hl,23100+64       ;n
 513+ 8D49 C3 63 8D                   jp poke_it
 514+ 8D4C FE 01        c1:           cp 1              ;w
 515+ 8D4E 20 06                      jr nz,c2
 516+ 8D50 21 BA 5A                   ld hl,23162+64       ;w
 517+ 8D53 C3 63 8D                   jp poke_it
 518+ 8D56 FE 02        c2:           cp 2              ;s
 519+ 8D58 20 06                      jr nz,c3
 520+ 8D5A 21 FC 5A                   ld hl,23228+64       ;s
 521+ 8D5D C3 63 8D                   jp poke_it
 522+ 8D60              ;it must be east                ;e
 523+ 8D60 21 BE 5A     c3            ld hl,23166+64       ;e
 524+ 8D63
 525+ 8D63 3E 96        poke_it:      ld a,150          ;cyan paper, black writing
 526+ 8D65 77                         ld(hl),a
 527+ 8D66 C9           q1:           ret
 528+ 8D67
# file closed: src/2-rd3dmazeV6.asm
 448  8D67                  INCLUDE "3-rd3dmazeV6.asm" ; check walls in front of player
# file opened: src/3-rd3dmazeV6.asm
   1+ 8D67
   2+ 8D67
   3+ 8D67              ;##################################################
   4+ 8D67              ; Start to draw the maze in memory
   5+ 8D67              ;##################################################
   6+ 8D67
   7+ 8D67              ;hl will hold the player location in the maze
   8+ 8D67
   9+ 8D67              ;now draw the maze position
  10+ 8D67
  11+ 8D67              ;1 get our location from player_pos 16 bit but only the low byte used
  12+ 8D67              ;  since our maze is max 256 bytes.
  13+ 8D67              ;2 get our direction from player_dir 0 - 3 only.
  14+ 8D67              ;  0=north
  15+ 8D67              ;  1=west
  16+ 8D67              ;  2=south
  17+ 8D67              ;  3=east
  18+ 8D67              ;3 work out how far away the wall is in front of our view-
  19+ 8D67              ;  if its greater or less that 6 blocks since thats the max depth
  20+ 8D67              ;  we will draw on screen (6 blocks)
  21+ 8D67              ;4 start drawing from the back to the front
  22+ 8D67              ;  so everything is overwritten (separate routine).
  23+ 8D67              ;
  24+ 8D67
  25+ 8D67
  26+ 8D67              ;screen is built in memory from c000 (49152) using characters
  27+ 8D67
  28+ 8D67              get_distance:
  29+ 8D67
  30+ 8D67 2A 00 FA                   ld hl,(player_pos)    ;get player location
  31+ 8D6A
  32+ 8D6A 3A 08 FA                   ld a,(player_dir)     ; get player direction
  33+ 8D6D
  34+ 8D6D
  35+ 8D6D              ;00= north, 01=west, 02=south, 03=east
  36+ 8D6D
  37+ 8D6D              ;if 0 decrease by -16 n
  38+ 8D6D              ;if 1 decrease by -1  w
  39+ 8D6D              ;if 2 increase by +16 s
  40+ 8D6D              ;if 3 increase by +1  e
  41+ 8D6D
  42+ 8D6D              ;when checking distance, if you are looking south and your current location
  43+ 8D6D              ;is >240 then you are at the south wall.
  44+ 8D6D
  45+ 8D6D
  46+ 8D6D              ;if you are at the top of the maze facing north, and you current location
  47+ 8D6D              ; is <16 you are at the far north wall of the maze
  48+ 8D6D
  49+ 8D6D              ;for east amd west you can detect a wall is chr $80 except for 255 (bottom
  50+ 8D6D              ; right) as the next  right location is outside the maze.
  51+ 8D6D
  52+ 8D6D              ; find out how far away we are from a wall
  53+ 8D6D                      ;are we facing north?
  54+ 8D6D FE 00                      cp 0
  55+ 8D6F CA 17 8E                   jp z, north2
  56+ 8D72 FE 01                      cp 1
  57+ 8D74 CA 11 8E                   jp z, west2
  58+ 8D77 FE 02                      cp 2
  59+ 8D79 CA 1D 8E                   jp z, south2
  60+ 8D7C                      ;it must be facing east if we get heret
  61+ 8D7C
  62+ 8D7C                      ;check if were at the bottom right hand corner (255)
  63+ 8D7C                      ;if so we implicitly have a wall.
  64+ 8D7C
  65+ 8D7C
  66+ 8D7C
  67+ 8D7C                      ;we are facing east
  68+ 8D7C 11 01 00                   ld de, $0001      ; (+1) to go to next line in front of us
  69+ 8D7F
  70+ 8D7F              ;clear maxview flag and data
  71+ 8D7F              check_dist:
  72+ 8D7F 3E 06                      ld a,6
  73+ 8D81 32 02 FA                   ld (maxview),a
  74+ 8D84 3A 03 FA                   ld a,(flags)
  75+ 8D87 CB 87                      res 0,a
  76+ 8D89 32 03 FA                   ld (flags),a
  77+ 8D8C
  78+ 8D8C 06 FF                      ld b,255            ;make accum 1 - counter
  79+ 8D8E
  80+ 8D8E              ;check if maxview set - if so, dont check for wall
  81+ 8D8E              ;in front of player anymore as there alreay is a wall set
  82+ 8D8E
  83+ 8D8E 3A 03 FA     loop2:        ld a,(flags)
  84+ 8D91 CB 47                      bit 0,a           ;if 1, then already set
  85+ 8D93 C2 B6 8D                   jp nz,check_mh
  86+ 8D96
  87+ 8D96 7E                         ld a,(hl)         ; this is the furthest point we can see
  88+ 8D97 FE 80                      cp _mw ;=128      ;is it a wall here
  89+ 8D99 28 0A                      jr z,j2
  90+ 8D9B
  91+ 8D9B              ;check for an exit wall and treat as if its a wall
  92+ 8D9B FE C0                      cp _me
  93+ 8D9D CA A5 8D                   jp z, j2   ;if no wall check for end wall
  94+ 8DA0
  95+ 8DA0              ;check for an switch wall and treat as if its a wall
  96+ 8DA0 FE E0                      cp _ms
  97+ 8DA2 C2 B6 8D                   jp nz, check_mh   ;if no wall check for end wall
  98+ 8DA5
  99+ 8DA5 78           j2:           ld a,b            ;there is a wall if we get here
 100+ 8DA6                            ;is it 255? if so make it 0
 101+ 8DA6 3C                         inc a             ;if a=0, it was 255
 102+ 8DA7 CA AB 8D                   jp z,j1
 103+ 8DAA 3D                         dec a             ;put back to original value
 104+ 8DAB
 105+ 8DAB 32 02 FA     j1:           ld (maxview),a    ;save how far we can actually see
 106+ 8DAE 3A 03 FA                   ld a,(flags)
 107+ 8DB1 CB C7                      set 0,a
 108+ 8DB3 32 03 FA                   ld (flags),a      ;set that we have set the flag
 109+ 8DB6
 110+ 8DB6
 111+ 8DB6 7E           check_mh:     ld a,(hl)
 112+ 8DB7 FE 81                      cp _mh ;=129      ; is it an end wall?
 113+ 8DB9 28 39                      jr z, end_loop    ; if yes, exit now
 114+ 8DBB 04                         inc b
 115+ 8DBC
 116+ 8DBC              ;check if we are at location 0 in the maze - if so do nothing
 117+ 8DBC 7D                         ld a,l
 118+ 8DBD 3C                         inc a
 119+ 8DBE 3D                         dec a             ;zero flag set if = to zero
 120+ 8DBF CA F1 8D                   jp z,end_loop2
 121+ 8DC2
 122+ 8DC2              ;##########################################################
 123+ 8DC2
 124+ 8DC2              ;now check if we are at the top end of the maze or the bottom
 125+ 8DC2              ;end of the maze as there are no blocks to check for there.
 126+ 8DC2              ;do bottom end first.
 127+ 8DC2
 128+ 8DC2
 129+ 8DC2 3A 08 FA                   ld a,(player_dir)
 130+ 8DC5 3D                         dec a                 ;is it 0 which = north
 131+ 8DC6 3C                         inc a
 132+ 8DC7 C2 D5 8D                   jp nz,cont_6a          ;carry on if not at north wall
 133+ 8DCA
 134+ 8DCA                            ;are we trying to read data outside the 256 byte boundary?
 135+ 8DCA 7D                         ld a,l
 136+ 8DCB FE 11                      cp 17
 137+ 8DCD D2 E8 8D                   jp nc,cont_9
 138+ 8DD0
 139+ 8DD0 19                         add hl,de         ;now jump to next location in front of us
 140+ 8DD1 78                         ld a,b            ;get our depth
 141+ 8DD2 C3 F4 8D                   jp end_loop       ;exit routine
 142+ 8DD5
 143+ 8DD5
 144+ 8DD5 3A 08 FA     cont_6a       ld a,(player_dir)
 145+ 8DD8 D6 02                      sub 2              ;are we facing south?
 146+ 8DDA C2 E8 8D                   jp nz,cont_9        ;z means yes
 147+ 8DDD
 148+ 8DDD 7D                         ld a,l
 149+ 8DDE FE F0                      cp 240
 150+ 8DE0 DA E8 8D                   jp c,cont_9      ;carry set if cp >a
 151+ 8DE3
 152+ 8DE3 19                         add hl,de         ;now jump to next location in front of us
 153+ 8DE4 78                         ld a,b            ;get our depth
 154+ 8DE5 C3 F4 8D                   jp end_loop       ;exit routine
 155+ 8DE8
 156+ 8DE8
 157+ 8DE8              ;###########################################################
 158+ 8DE8
 159+ 8DE8 78           cont_9        ld a,b
 160+ 8DE9 FE 06                      cp 6              ;only do a max of 6 loops as
 161+ 8DEB 19                         add hl,de         ;now jump to next location in front of
 162+ 8DEC 20 A0                      jr nz,loop2
 163+ 8DEE C3 F4 8D                   jp end_loop
 164+ 8DF1                      ;we have hit a wall or 6 loops
 165+ 8DF1
 166+ 8DF1 06 FF        end_loop2:    ld b,255          ;we are here as we are at the end wall
 167+ 8DF3                                              ;top and bottom of the maze so make our
 168+ 8DF3                                              ;depth 0
 169+ 8DF3 04           end_loop1:    inc b
 170+ 8DF4
 171+ 8DF4              end_loop:
 172+ 8DF4              ;first check if we hit an end wall - our maxview flag will =0
 173+ 8DF4 3A 03 FA                   ld a,(flags)
 174+ 8DF7 CB 47                      bit 0,a
 175+ 8DF9 C2 00 8E                   jp nz,cont_8      ;continue on if not 0
 176+ 8DFC 78                         ld a,b
 177+ 8DFD 32 02 FA                   ld (maxview),a    ;if it is make maxview 0
 178+ 8E00              cont_8:
 179+ 8E00              ;check if b=255, if so, make it 0
 180+ 8E00 04                         inc b
 181+ 8E01 CA 05 8E                   jp z,here1
 182+ 8E04 05                         dec b             ;put back original value
 183+ 8E05 78           here1:        ld a,b
 184+ 8E06 32 06 FA                   ld (depth),a         ; -save how far we can see
 185+ 8E09 ED 53 09 FA                ld (de_count),de     ;save the de value for adding / subtracting later
 186+ 8E0D 22 25 FA                   ld (furthest_point),hl
 187+ 8E10 C9                         ret
 188+ 8E11
 189+ 8E11              west2:
 190+ 8E11 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the left
 191+ 8E14 C3 7F 8D                   jp check_dist
 192+ 8E17
 193+ 8E17              north2:
 194+ 8E17 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind
 195+ 8E1A C3 7F 8D                   jp check_dist
 196+ 8E1D              south2:
 197+ 8E1D 11 10 00                   ld de, $0010      ; (+16) to go to next line to the left
 198+ 8E20 C3 7F 8D                   jp check_dist
 199+ 8E23
 200+ 8E23 C9                         ret
 201+ 8E24
 202+ 8E24
 203+ 8E24              ;############################################
 204+ 8E24              ; ld de with the value to use to check the walls in front
 205+ 8E24              ; or the sides of the player
 206+ 8E24              ;############################################
 207+ 8E24
 208+ 8E24              ; reg a must contain the direction you want to look at
 209+ 8E24
 210+ 8E24              load_de:
 211+ 8E24 3A 08 FA                 ld a,(player_dir)     ; get player direction
 212+ 8E27              ; 00= north, 01=west, 02=south, 03=east
 213+ 8E27
 214+ 8E27              ;if 0 decrease by -16 n
 215+ 8E27              ;if 1 decrease by -1  w
 216+ 8E27              ;if 2 increase by +16 s
 217+ 8E27              ;if 3 increase by +1  e
 218+ 8E27
 219+ 8E27              ;when checking distance, if you are looking south and your current location
 220+ 8E27              ;is >240 then you are at the south wall.
 221+ 8E27
 222+ 8E27
 223+ 8E27              ;if you are at the top of the maze facing north, and you current location
 224+ 8E27              ; is <16 you are at the far north wall of the maze
 225+ 8E27
 226+ 8E27              ;for east and west you can detect a wall is $80 except for 255 (bottom
 227+ 8E27              ; right) as the next  right location is outside the maze.
 228+ 8E27
 229+ 8E27              ; find out how far away we are from a wall
 230+ 8E27                      ;are we facing north?
 231+ 8E27 FE 00                      cp 0
 232+ 8E29 C2 3E 8E                   jp nz,de_1
 233+ 8E2C 11 FF FF                   ld de, $ffff  ; (-1) to go to the left of north
 234+ 8E2F ED 53 0B FA                ld (left),de
 235+ 8E33 11 01 00                   ld de, $0001  ; (+1) to go to next line right  - north
 236+ 8E36 ED 53 0D FA                ld (right),de
 237+ 8E3A 11 10 00                   ld de, $0010  ; (+16) to go to next line behind - north
 238+ 8E3D C9                         ret
 239+ 8E3E
 240+ 8E3E FE 01        de_1:         cp 1          ;west
 241+ 8E40 C2 55 8E                   jp nz,de_2
 242+ 8E43 11 10 00                   ld de, $0010  ; (+16) to go to next line to the left - west
 243+ 8E46 ED 53 0B FA                ld (left),de
 244+ 8E4A 11 F0 FF                   ld de, $fff0  ; (-16) to go to next line to the right - west
 245+ 8E4D ED 53 0D FA                ld (right),de
 246+ 8E51 11 01 00                   ld de, $0001  ; (+1) to go to next line behind - west
 247+ 8E54 C9                         ret
 248+ 8E55
 249+ 8E55 FE 02        de_2:         cp 2          ; south
 250+ 8E57 C2 6C 8E                   jp nz,de_3
 251+ 8E5A 11 01 00                   ld de, $001  ; (+1) to go to next line to the left - south
 252+ 8E5D ED 53 0B FA                ld (left),de
 253+ 8E61 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the right - south
 254+ 8E64 ED 53 0D FA                ld (right),de
 255+ 8E68 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind - south
 256+ 8E6B C9                         ret
 257+ 8E6C
 258+ 8E6C                            ;we must be facing east if we get here
 259+ 8E6C 11 F0 FF     de_3:         ld de, $fff0      ; (-16) to go to next line left - east
 260+ 8E6F ED 53 0B FA                ld (left),de
 261+ 8E73 11 10 00                   ld de, $0010      ; (+16) to go to next line right - east
 262+ 8E76 ED 53 0D FA                ld (right),de
 263+ 8E7A 11 FF FF                   ld de, $ffff      ; (-1) to go to next line behind - east
 264+ 8E7D C9                         ret
 265+ 8E7E
 266+ 8E7E
 267+ 8E7E              ;#######################################################
 268+ 8E7E              ;load walk - load de with the amount to jump in the maze
 269+ 8E7E              ;as we walk forward
 270+ 8E7E              ;#######################################################
 271+ 8E7E
 272+ 8E7E              load_walk:
 273+ 8E7E 3A 08 FA                   ld a,(player_dir)   ;find out which way we are looking
 274+ 8E81
 275+ 8E81                            ;are we facing north?
 276+ 8E81 FE 00                      cp 0
 277+ 8E83 C2 8A 8E                   jp nz,de1
 278+ 8E86 11 F0 FF                   ld de, $fff0 ; (-16) to go to next line behind - north
 279+ 8E89 C9                         ret
 280+ 8E8A
 281+ 8E8A FE 01        de1:          cp 1          ;west
 282+ 8E8C C2 93 8E                   jp nz,de2
 283+ 8E8F 11 FF FF                   ld de, $ffff  ; (-1) to go to next line behind - west
 284+ 8E92 C9                         ret
 285+ 8E93
 286+ 8E93 FE 02        de2:          cp 2          ; south
 287+ 8E95 C2 9C 8E                   jp nz,de3
 288+ 8E98 11 10 00                   ld de, $0010     ; (+16) to go to next line behind - south
 289+ 8E9B C9                         ret
 290+ 8E9C
 291+ 8E9C                            ;we must be facing east if we get here
 292+ 8E9C 11 01 00     de3:          ld de, $0001      ; (+1) to go to next line behind - east
 293+ 8E9F C9                         ret
 294+ 8EA0
 295+ 8EA0
 296+ 8EA0
 297+ 8EA0              ;#################################################################################
 298+ 8EA0              ;DOOR & SWITCH DRAWING ROUTINES
 299+ 8EA0
 300+ 8EA0              ;#################################################################################
 301+ 8EA0              ;see if we need to draw an open or closed door
 302+ 8EA0
 303+ 8EA0              ; show door type = 0 = front, 1 = side
 304+ 8EA0
 305+ 8EA0              draw_door:   ;check to see if we need to show the exit door
 306+ 8EA0                           ;door will always face NORTH.
 307+ 8EA0 AF                        xor a                  ;make reg a zero to say no door
 308+ 8EA1 32 2A FA                  ld (show_exit),a
 309+ 8EA4                           ;are we facing south?
 310+ 8EA4 3A 08 FA                  ld a,(player_dir)
 311+ 8EA7 D6 02                     sub 2                  ;2 = south
 312+ 8EA9 20 28                     jr nz,check_east      ;if not check if door is to our right hand side
 313+ 8EAB                           ;we must be facing south and be in front of the door
 314+ 8EAB                           ;dec a
 315+ 8EAB                           ;ld (show_exit),a
 316+ 8EAB 2A 00 FA                  ld hl,(player_pos)
 317+ 8EAE 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 318+ 8EB1 19                        add hl,de
 319+ 8EB2 7E                        ld a,(hl)
 320+ 8EB3 FE C0                     cp _me                 ;is it our DOOR?
 321+ 8EB5 20 1C                     jr nz,check_east      ;if not check if door is to our right hand side
 322+ 8EB7                           ;YES its a door - so draw it - but only if we are looking south
 323+ 8EB7 3A 2B FA                  ld a,(switch_pulled)
 324+ 8EBA A7                        and a
 325+ 8EBB 28 0B                     jr z,not_open
 326+ 8EBD CD 71 85                  call  draw_exit_door_open
 327+ 8EC0                           ;print the door message
 328+ 8EC0 DD 21 6F 82               ld ix,message_leave
 329+ 8EC4 CD D7 81                  CALL print_message
 330+ 8EC7 C9                        ret
 331+ 8EC8 CD AD 83     not_open:    call draw_exit_door_closed
 332+ 8ECB
 333+ 8ECB                           ;print the door message
 334+ 8ECB DD 21 3B 82               ld ix,message_closed        ;exit_closed
 335+ 8ECF CD D7 81                  CALL print_message
 336+ 8ED2 C9                        ret
 337+ 8ED3
 338+ 8ED3              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 339+ 8ED3              check_east:
 340+ 8ED3                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 341+ 8ED3                           ; so we have to be facing EAST
 342+ 8ED3 3A 08 FA                  ld a,(player_dir)
 343+ 8ED6 D6 03                     sub 3              ;EAST = 3
 344+ 8ED8 C0                        ret nz             ;exit as theres no door to our right
 345+ 8ED9
 346+ 8ED9 2A 00 FA                  ld hl,(player_pos)
 347+ 8EDC 23                        inc hl             ;move test point to 1 place in front of us
 348+ 8EDD 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 349+ 8EE0 19                        add hl,de
 350+ 8EE1 7E                        ld a,(hl)
 351+ 8EE2 FE C0                     cp _me             ;;is it our DOOR?
 352+ 8EE4 C0                        ret nz
 353+ 8EE5                           ;there IS a door and it will always face NORTH and be on our right
 354+ 8EE5                           ;yes its our door - so draw it
 355+ 8EE5
 356+ 8EE5                           ;determine if its open or closed
 357+ 8EE5 3A 2B FA                  ld a,(switch_pulled)
 358+ 8EE8 A7                        and a
 359+ 8EE9 20 04                     jr nz,_open           ;0=closed 1 = open
 360+ 8EEB CD DE 86                  call draw_door_right_closed
 361+ 8EEE C9                        ret
 362+ 8EEF CD C8 87     _open:       call draw_door_right_open
 363+ 8EF2 C9                        ret
 364+ 8EF3
 365+ 8EF3              ;#########################################################################################
 366+ 8EF3              ;SWITCH Drawing Routine - I am being very lazy here and copying the code from the door
 367+ 8EF3              ;drawing as its the same thing to do for both the door and switch and  cant be bothered atm to
 368+ 8EF3              ;modify the dor routine and save bytes! (nov 2020)
 369+ 8EF3              ;-----------------------------------------------------------------------------------------
 370+ 8EF3
 371+ 8EF3              draw_switch:
 372+ 8EF3
 373+ 8EF3               ;check to see if we need to show the Switch
 374+ 8EF3                           ;switch will always face NORTH.
 375+ 8EF3                         ;  xor a                  ;make reg a zero to say no switch
 376+ 8EF3                         ;  ld (show_switch),a
 377+ 8EF3                           ;are we facing south?
 378+ 8EF3 3A 08 FA                  ld a,(player_dir)
 379+ 8EF6 D6 02                     sub 2                  ;2 = south
 380+ 8EF8 20 21                     jr nz,check_sw_east      ;if not check if switch is to our right hand side
 381+ 8EFA 2A 00 FA                  ld hl,(player_pos)
 382+ 8EFD 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 383+ 8F00 19                        add hl,de
 384+ 8F01 7E                        ld a,(hl)
 385+ 8F02 FE E0                     cp _ms                 ;is it our SWITCH?
 386+ 8F04 20 15                     jr nz,check_sw_east      ;if not check if the SWITCH is to our right hand side
 387+ 8F06                           ;YES its a switch - so draw it - but only if we are looking south
 388+ 8F06 3A 2B FA                  ld a,(switch_pulled)
 389+ 8F09 A7                        and a
 390+ 8F0A 28 0B                     jr z,switch_off
 391+ 8F0C CD 0E 89                  call  draw_switch_on
 392+ 8F0F                           ;print the switch on message
 393+ 8F0F DD 21 54 82               ld ix,message_switchon
 394+ 8F13 CD D7 81                  CALL print_message
 395+ 8F16 C9                        ret
 396+ 8F17
 397+ 8F17 CD 8E 88     switch_off:  call draw_switch_off
 398+ 8F1A C9                        ret
 399+ 8F1B
 400+ 8F1B              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 401+ 8F1B              check_sw_east:
 402+ 8F1B                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 403+ 8F1B                           ; so we have to be facing EAST
 404+ 8F1B 3A 08 FA                  ld a,(player_dir)
 405+ 8F1E D6 03                     sub 3              ;EAST = 3
 406+ 8F20 C0                        ret nz             ;exit as theres no door to our right
 407+ 8F21
 408+ 8F21 2A 00 FA                  ld hl,(player_pos)
 409+ 8F24 23                        inc hl             ;move test point to 1 place in front of us
 410+ 8F25 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 411+ 8F28 19                        add hl,de
 412+ 8F29 7E                        ld a,(hl)
 413+ 8F2A FE E0                     cp _ms             ;;is it our DOOR?
 414+ 8F2C C0                        ret nz
 415+ 8F2D                           ;there IS a door and it will always face NORTH and be on our right
 416+ 8F2D                           ;yes its our door - so draw it
 417+ 8F2D
 418+ 8F2D                           ;determine if its open or closed
 419+ 8F2D 3A 2B FA                  ld a,(switch_pulled)
 420+ 8F30 A7                        and a
 421+ 8F31 20 04                     jr nz,open_a           ;0=closed 1 = open
 422+ 8F33 CD 8E 89                  call draw_switch_right_off
 423+ 8F36 C9                        ret
 424+ 8F37 CD 52 8A     open_a:      call draw_switch_right_on
 425+ 8F3A C9                        ret
 426+ 8F3B
 427+ 8F3B
 428+ 8F3B
# file closed: src/3-rd3dmazeV6.asm
 449  8F3B                  INCLUDE "4-rd3dmazeV6.asm" ; draw left side of maze
# file opened: src/4-rd3dmazeV6.asm
   1+ 8F3B
   2+ 8F3B              ;============================================
   3+ 8F3B              ;start to draw the maze from current location
   4+ 8F3B              ;============================================
   5+ 8F3B
   6+ 8F3B
   7+ 8F3B              draw_left_side:
   8+ 8F3B
   9+ 8F3B
  10+ 8F3B
  11+ 8F3B              ;       (depth) will hold how far we can see - max 6 squares in front of our view
  12+ 8F3B
  13+ 8F3B              ;              ld hl,(player_pos)    ;get player position
  14+ 8F3B
  15+ 8F3B              ;              ld a,l
  16+ 8F3B                      ; if l=255  we are at the bottom right hand corner facing east to a end wall
  17+ 8F3B                      ; if l>240 we are at the south wall
  18+ 8F3B                      ; if l<16 we are at the north wall
  19+ 8F3B
  20+ 8F3B
  21+ 8F3B              ;how do i implement a less-than/greater-than test in assembly?
  22+ 8F3B
  23+ 8F3B              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
  24+ 8F3B              ;a and the argument were equal, else if the carry is set the argument was greater,
  25+ 8F3B              ;and finally, if neither is set, then a must be greater
  26+ 8F3B              ;(cp does nothing to the registers, only the f (flag) register is changed).
  27+ 8F3B
  28+ 8F3B              ;we need to draw from the furthest distance so
  29+ 8F3B              ;point hl to furthest position - only need to use l reg in the subtraction
  30+ 8F3B              ;              ld a,l
  31+ 8F3B              ;              sub a,b           ;will never be >255 or less than 1
  32+ 8F3B              ;hl now points to furthest visible point in front of the player
  33+ 8F3B
  34+ 8F3B
  35+ 8F3B              ;no matter what, always draw layer 6 view so theres always a wall in front of us
  36+ 8F3B
  37+ 8F3B              ;        ld   de,$C177
  38+ 8F3B              ;        ld   a,_topblack
  39+ 8F3B              ;;        ld   a,_topwhitebottomchequer
  40+ 8F3B              ;        ld   (de),a                             ; insert the top of the wall face.
  41+ 8F3B              ;        ld   hl,$0021
  42+ 8F3B              ;        add  hl,de                              ; advance to the next row of the display file.
  43+ 8F3B              ;        ld   (hl),_bottomblack        ; insert the bottom of the wall face.
  44+ 8F3B              ;;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
  45+ 8F3B
  46+ 8F3B              ;draw a complete line of chequerboard to emulate seeing the outside
  47+ 8F3B              ;maze wall regardless of what blocks are seen.
  48+ 8F3B
  49+ 8F3B 21 6A C1             ld hl,$c16A
  50+ 8F3E 11 6B C1             ld de,$C16b              ; offset to row 11, col 0
  51+ 8F41 01 19 00             ld bc,25
  52+ 8F44                    ; ld (hl),_topwhitebottomchequer
  53+ 8F44 36 A2                ld (hl),_bottomblack        ; insert the bottom of the wall face.
  54+ 8F46
  55+ 8F46 ED B0                ldir
  56+ 8F48 21 8B C1             ld hl,$c18b
  57+ 8F4B 11 8C C1             ld de,$C18c              ; offset to row 12, col 0
  58+ 8F4E 01 19 00             ld bc,25
  59+ 8F51                    ; ld (hl),_topchequerbottomwhite
  60+ 8F51 36 A3                ld (hl),_topblack        ; insert the bottom of the wall face.
  61+ 8F53 ED B0                ldir
  62+ 8F55
  63+ 8F55              ;now draw the rest of the left side
  64+ 8F55
  65+ 8F55 3A 06 FA                   ld a,(depth)
  66+ 8F58 FE 06                      cp 6
  67+ 8F5A CA 7A 8F                   jp z,draw_6	;just draw end middle block perhaps??
  68+ 8F5D FE 05                      cp 5
  69+ 8F5F CA BE 8F                   jp z,draw_5	;only need to draw 3 block + 1 part
  70+ 8F62 FE 04                      cp 4
  71+ 8F64 CA 68 91                   jp z,draw_4	;only need to draw 2 block + 1 part
  72+ 8F67 FE 03                      cp 3
  73+ 8F69 CA 81 93                   jp z,draw_3	;only need to draw 1 block + 1 part
  74+ 8F6C FE 02                      cp 2
  75+ 8F6E CA 13 95                   jp z,draw_2	;only need to draw 1 block
  76+ 8F71 FE 01                      cp 1
  77+ 8F73 CA CB 95                   jp z,draw_1	;only need to draw 1 block
  78+ 8F76 C3 74 96                   jp draw_0		;only need to draw edge blocks
  79+ 8F79              ;end of routine
  80+ 8F79 C9                         ret
  81+ 8F7A
  82+ 8F7A              draw_6:
  83+ 8F7A
  84+ 8F7A              draw_layer_6:
  85+ 8F7A
  86+ 8F7A
  87+ 8F7A              ;now draw the maze starting at the furthest point we can see
  88+ 8F7A              ; i.e. the middle of the display
  89+ 8F7A
  90+ 8F7A              ; draw section 6
  91+ 8F7A              ; --------------
  92+ 8F7A              ; hl=maze location being drawn.
  93+ 8F7A              ; now determine what to draw for this section.
  94+ 8F7A
  95+ 8F7A 2A 25 FA             ld hl,(furthest_point)
  96+ 8F7D CD 24 8E             call load_de
  97+ 8F80 19                   add hl,de
  98+ 8F81 22 25 FA             ld (furthest_point),hl  ;increment for the next layer to draw
  99+ 8F84
 100+ 8F84 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
 101+ 8F87 11 77 01             ld   de,$0177           ; offset to row 11 column 12 - the centre of the 3d view.
 102+ 8F8A 19                   add  hl,de
 103+ 8F8B E5                   push hl                 ;save it
 104+ 8F8C
 105+ 8F8C ED 5B 25 FA          ld   de,(furthest_point); retrieve the maze location.
 106+ 8F90 EB                   ex   de,hl              ; transfer de to hl.
 107+ 8F91
 108+ 8F91 ED 5B 09 FA          ld de,(de_count)
 109+ 8F95 19                   add hl,de               ;get the block in front of us from the maze.
 110+ 8F96
 111+ 8F96              loop6:
 112+ 8F96
 113+ 8F96 7E                   ld a,(hl)
 114+ 8F97 17                   rla
 115+ 8F98 DA 9E 8F             jp c,do_wall            ;bit 7 (128)
 116+ 8F9B
 117+ 8F9B C3 B4 8F             jp do_no_wall         ; otherwise draw no wall
 118+ 8F9E
 119+ 8F9E
 120+ 8F9E              do_wall:
 121+ 8F9E                      ;check if bit 2 is set as thats an end wall
 122+ 8F9E                      ;and b must then be changed to 1 to stop drawing more than 1 wall.
 123+ 8F9E 17                   rla                     ;rotate next bit into carry.
 124+ 8F9F D2 A8 8F             jp nc, draw7
 125+ 8FA2 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 126+ 8FA4 28 02                jr z,draw7
 127+ 8FA6 06 01                ld b,1                  ;set b so we exit on return
 128+ 8FA8
 129+ 8FA8 D1           draw7   pop de
 130+ 8FA9 3E A2                ld   a,_bottomblack
 131+ 8FAB 12                   ld   (de),a             ; insert the top of the wall.
 132+ 8FAC 21 21 00             ld   hl,$0021
 133+ 8FAF 19                   add  hl,de              ; advance to the next row of the display file.
 134+ 8FB0 36 A3                ld   (hl),_topblack     ; insert the bottom of the wall.
 135+ 8FB2 18 0A                jr draw_5              ; jump to draw layer 5
 136+ 8FB4
 137+ 8FB4              ; there is a wall so insert chequerboard for the wall face.
 138+ 8FB4
 139+ 8FB4              do_no_wall:
 140+ 8FB4 D1                   pop de
 141+ 8FB5                      ;push de
 142+ 8FB5 3E A2                ld   a,_bottomblack;_topwhitebottomchequer
 143+ 8FB7 12                   ld   (de),a                             ; insert the top of the wall face.
 144+ 8FB8 21 21 00             ld   hl,$0021
 145+ 8FBB 19                   add  hl,de                              ; advance to the next row of the display file.
 146+ 8FBC 36 A3                ld   (hl),_topblack;_topchequerbottomwhite        ; insert the bottom of the wall face.
 147+ 8FBE
 148+ 8FBE              ;now got to draw the 5th row of data
 149+ 8FBE
 150+ 8FBE
 151+ 8FBE              ;############################################
 152+ 8FBE              ;############################################
 153+ 8FBE              ;draw section 5 left
 154+ 8FBE              ;############################################
 155+ 8FBE              ;############################################
 156+ 8FBE
 157+ 8FBE              draw_5:
 158+ 8FBE              ;ret
 159+ 8FBE              ; hl=maze location being drawn.
 160+ 8FBE              ; now determine what to draw for this section.
 161+ 8FBE
 162+ 8FBE              ;first we need to decrement how far we can see to the layer
 163+ 8FBE              ;we are working on
 164+ 8FBE
 165+ 8FBE 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 166+ 8FC1
 167+ 8FC1 CD 24 8E             call load_de            ;get left and right and front jump into de reg
 168+ 8FC4 19                   add hl,de               ;jump backwards along the user view 1 space
 169+ 8FC5
 170+ 8FC5 22 25 FA             ld (furthest_point),hl ;re save it
 171+ 8FC8
 172+ 8FC8 11 FF FF             ld de,$ffff             ;to move the display position -1
 173+ 8FCB ED 53 11 FA          ld (var4),de
 174+ 8FCF
 175+ 8FCF ED 5B 0B FA          ld de,(left)
 176+ 8FD3
 177+ 8FD3              ;move the maze location pointer 1 to the left - used for all
 178+ 8FD3              ;remaining blocks to test if there is a wall there or not.
 179+ 8FD3
 180+ 8FD3 19                   add hl,de
 181+ 8FD4 22 15 FA             ld (var6),hl
 182+ 8FD7
 183+ 8FD7 ED 53 0F FA          ld (var3),de
 184+ 8FDB 11 75 01             ld   de,$0175           ; offset to row 11 column 10 - left of  centre of the 3d view.
 185+ 8FDE
 186+ 8FDE CD E4 8F             call do_draw_5
 187+ 8FE1
 188+ 8FE1 C3 68 91              jp draw_4               ;now draw the 4th level
 189+ 8FE4
 190+ 8FE4              do_draw_5:
 191+ 8FE4
 192+ 8FE4 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
 193+ 8FE7 19                   add  hl,de
 194+ 8FE8
 195+ 8FE8
 196+ 8FE8              ; draw left half then right half of the display.
 197+ 8FE8
 198+ 8FE8 06 04                ld b,4                ; count for 4 columns left  of maze
 199+ 8FEA
 200+ 8FEA ED 5B 15 FA          ld de,(var6); retrieve the maze location.
 201+ 8FEE
 202+ 8FEE
 203+ 8FEE
 204+ 8FEE              ;check if we are at the bottom right of the maze
 205+ 8FEE              ;if so, there is no wall after position 255 so point us to
 206+ 8FEE              ;position 240 and fake the wall!
 207+ 8FEE              ;;;        ld a,e
 208+ 8FEE              ;;;        cp 255
 209+ 8FEE              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 210+ 8FEE              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 211+ 8FEE
 212+ 8FEE
 213+ 8FEE              ;now move the maze pointer left (-1) 1 position
 214+ 8FEE              ;so we can read the type of walls to our left
 215+ 8FEE
 216+ 8FEE              cont_3:
 217+ 8FEE              ;*         push hl
 218+ 8FEE              ;*        ld hl,(left)
 219+ 8FEE              ;*        add hl,de
 220+ 8FEE              ;*        ex de,hl
 221+ 8FEE              ;*        pop hl
 222+ 8FEE
 223+ 8FEE EB                   ex   de,hl              ; transfer de to hl.
 224+ 8FEF
 225+ 8FEF              ;       hl = furthest point in the maze
 226+ 8FEF              ;       de = d_file location to store byte to display
 227+ 8FEF
 228+ 8FEF              ;we have to load the first plot position with a corner bit to show
 229+ 8FEF              ;the end of the wall at the position we can see next to the center
 230+ 8FEF              ;plot position on section 6
 231+ 8FEF              ;then, while we draw the other blocks we can see we just want top and
 232+ 8FEF              ;bottom blacks pointed so will use var1 and var 2 to hold the
 233+ 8FEF              ;character block we need to print.
 234+ 8FEF
 235+ 8FEF
 236+ 8FEF 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 237+ 8FF1 32 04 FA             ld (var1),a
 238+ 8FF4 3C                   inc a
 239+ 8FF5 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 240+ 8FF7
 241+ 8FF7 32 05 FA             ld (var2),a             ;ld with bottom left char
 242+ 8FFA
 243+ 8FFA              loop8:
 244+ 8FFA E5                   push hl
 245+ 8FFB
 246+ 8FFB
 247+ 8FFB              ;############################################################################
 248+ 8FFB              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 249+ 8FFB
 250+ 8FFB 3A 28 FA             ld a,(maze_highbyte)
 251+ 8FFE BC                   cp h                    ;are we at the top part of the maze?
 252+ 8FFF CA 32 90             jp z,cont_1s
 253+ 9002                                              ;if we are on a different maze boundary
 254+ 9002                                              ;then draw a maze wall as we are the top
 255+ 9002                                              ;or north wall but maze data has no
 256+ 9002                                              ;wall data.
 257+ 9002              ;4 = 2nd left wall
 258+ 9002              ;3 = 2nd left wall
 259+ 9002              ;2 = 3rd left wall
 260+ 9002              ;1 = 4th left wall
 261+ 9002
 262+ 9002 78                   ld a,b                  ;our current wall counter
 263+ 9003 FE 04                cp 4
 264+ 9005 C2 10 90             jp nz,a5_1                 ;its not wall 4
 265+ 9008 3E 01                ld a,1
 266+ 900A 47                   ld b,a
 267+ 900B C6 80                add a,128               ;make sure we set a wall!
 268+ 900D C3 68 90             jp draw_5S             ;jump straight to making an end wall
 269+ 9010
 270+ 9010 FE 03        a5_1:   cp 3
 271+ 9012 C2 1D 90             jp nz,a5_2             ;its not wall 3
 272+ 9015 3E 01                ld a,1
 273+ 9017 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 274+ 9018 C6 80                add a,128               ;make sure we set a wall!
 275+ 901A C3 8F 90             jp do_2ndwall_l        ;draw the 2nd block to the left
 276+ 901D
 277+ 901D FE 02        a5_2:   cp 2
 278+ 901F C2 2A 90             jp nz,a5_3             ;its not wall 3
 279+ 9022 3E 01                ld a,1
 280+ 9024 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 281+ 9025 C6 80                add a,128               ;make sure we set a wall!
 282+ 9027 C3 CF 90             jp do_3rdwall_l       ;draw the 2nd block to the left
 283+ 902A
 284+ 902A              ;a must = 1 if we get here.
 285+ 902A 3E 01        a5_3:   ld a,1
 286+ 902C 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 287+ 902D C6 80                add a,128               ;make sure we set a wall!
 288+ 902F C3 1C 91             jp do_4thwall_l       ;draw the cnd block to the left
 289+ 9032
 290+ 9032              ;############################################################################
 291+ 9032
 292+ 9032              ;are we at a maze edge wall = clear flag?
 293+ 9032              cont_1s:
 294+ 9032 97                   sub a
 295+ 9033 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 296+ 9036
 297+ 9036
 298+ 9036 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 299+ 9037
 300+ 9037 FE 81                cp _mh                  ;maze_wall = 129
 301+ 9039 20 07                jr nz,cont9
 302+ 903B F5                   push af
 303+ 903C 3E 01                ld a,1
 304+ 903E 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 305+ 9041 F1                   pop af
 306+ 9042
 307+ 9042 17           cont9:  rla
 308+ 9043 DA 56 90             jp c,do_wall5            ;bit 7 (128)
 309+ 9046
 310+ 9046
 311+ 9046              go_back5:
 312+ 9046 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 313+ 9049 19                   add hl,de               ; holds current screen position
 314+ 904A EB                   ex de,hl
 315+ 904B E1                   pop hl
 316+ 904C D5                   push de
 317+ 904D ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 318+ 9051 19                   add hl,de                ; go left 1 block in the maze
 319+ 9052 D1                   pop de
 320+ 9053 10 A5                djnz loop8
 321+ 9055 C9                   ret
 322+ 9056
 323+ 9056
 324+ 9056              ; there is not a wall so insert black to show that the location is too far away to see its detail.
 325+ 9056
 326+ 9056              do_wall5:
 327+ 9056
 328+ 9056              ;check if b=2 - if so we are not at a wall immediately next to our left
 329+ 9056              ;nor are we at an and wall. We are drawing the 2nd block to the left
 330+ 9056              ;b=3 for 3rd block to the left.
 331+ 9056
 332+ 9056 78                   ld a,b
 333+ 9057 D6 01                sub 1
 334+ 9059 CA 1C 91             jp z,do_4thwall_l       ;draw the cnd block to the left
 335+ 905C
 336+ 905C 78                   ld a,b                  ;b is our loop count
 337+ 905D D6 02                sub 2                   ;check if a=2
 338+ 905F CA CF 90             jp z,do_3rdwall_l       ;draw the 2nd block to the left
 339+ 9062
 340+ 9062 78                   ld a,b
 341+ 9063 D6 03                sub 3
 342+ 9065 CA 8F 90             jp z,do_2ndwall_l       ;draw the cnd block to the left
 343+ 9068
 344+ 9068
 345+ 9068
 346+ 9068              ;b must = 4 if we get here, so draw the first wall
 347+ 9068
 348+ 9068                        ;check if bit 2 is set as thats an end
 349+ 9068                      ;and b must then be changed to 1 to stop drawing.
 350+ 9068              draw_5S:
 351+ 9068 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 352+ 906A 28 04                jr z,draw8
 353+ 906C
 354+ 906C 97                   sub a                   ;we do NOT have an ouside maze wall
 355+ 906D 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 356+ 9070              ;b must be 1 if we get here!
 357+ 9070
 358+ 9070 D5           draw8:  push de
 359+ 9071 3A 04 FA             ld   a,(var1)           ;holds _smallwall
 360+ 9074 12                   ld   (de),a             ; insert the top of the wall.
 361+ 9075
 362+ 9075 1B                   dec de
 363+ 9076 12                   ld   (de),a             ; insert the top of the wall.
 364+ 9077 13                   inc de                  ;put plot position back to start of wall
 365+ 9078
 366+ 9078              ;now check if we need to draw a black side on the right
 367+ 9078              ;by looking to the character to the right of the wall
 368+ 9078              ;and if there is not a wall already drawn, then draw a
 369+ 9078              ;black side
 370+ 9078
 371+ 9078 3E A9                ld a,_topleft5          ;draw the top left side
 372+ 907A 13                   inc de                  ;jump ahead 1 char in the display
 373+ 907B 12                   ld (de),a               ;draw a black and chevron side
 374+ 907C 1B                   dec de                  ;go back 1 space again
 375+ 907D
 376+ 907D              ;NOW DO THE NEXT LINE BELOW
 377+ 907D
 378+ 907D              ;_x1:
 379+ 907D 21 21 00             ld   hl,$0021           ;jump to the next line below
 380+ 9080 19                   add  hl,de
 381+ 9081 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 382+ 9084 77                   ld   (hl),a             ; insert the bottom of the wall.
 383+ 9085 2B                   dec hl
 384+ 9086 77                   ld   (hl),a             ; insert the bottom of the wall.
 385+ 9087 23                   inc hl
 386+ 9088 23                   inc hl
 387+ 9089 3E AB                ld a,_bottomleft5
 388+ 908B 77                   ld (hl),a
 389+ 908C
 390+ 908C              ;_x2
 391+ 908C D1                    pop de
 392+ 908D 18 B7                jr go_back5              ; jump back to main loop
 393+ 908F
 394+ 908F
 395+ 908F              ;************************************
 396+ 908F
 397+ 908F              ;draw the wall for 2nd LEFT layer
 398+ 908F
 399+ 908F              ;***********************************
 400+ 908F
 401+ 908F              do_2ndwall_l:
 402+ 908F
 403+ 908F D5                   push de                 ;save the current acreen position
 404+ 9090
 405+ 9090              ;1st check if theres a wall where we need to draw the black side
 406+ 9090
 407+ 9090 1B                   dec de
 408+ 9091 1B                   dec de                  ;move 3 place left to position us correctly
 409+ 9092
 410+ 9092              ;now draw a red wall to the right of section 2
 411+ 9092 13                   inc de
 412+ 9093 3E B4                ld a,_smallwall
 413+ 9095 12                   ld (de),a
 414+ 9096 1B                   dec de
 415+ 9097 12                   ld (de),a               ;draw 2nd one (4 wide)
 416+ 9098 1B                   dec de
 417+ 9099 12                   ld (de),a               ;draw 3rd one (4 wide)
 418+ 909A
 419+ 909A 13                   inc de
 420+ 909B 13                   inc de
 421+ 909C 13                   inc de
 422+ 909D                               ;put us back to our start position ready
 423+ 909D                                              ;to start drawing the black side
 424+ 909D
 425+ 909D              ;now check if we need to draw a black side on the right
 426+ 909D              ;by looking to the character to the right of the wall
 427+ 909D              ;and if there is not a wall already drawn, then draw a
 428+ 909D              ;black side
 429+ 909D
 430+ 909D 13                   inc de
 431+ 909E 1A                   ld a,(de)               ;read whats there
 432+ 909F FE B4                cp _smallwall           ;is it a wall
 433+ 90A1 CA AB 90             jp z,_x1r_2_l           ;if yes, do NOT draw a black side.
 434+ 90A4 1B                   dec de
 435+ 90A5 3E 95                ld a,$95                ;draw top left side
 436+ 90A7 12                   ld (de),a               ;draw middle top bit
 437+ 90A8 3C                   inc a
 438+ 90A9 13                   inc de
 439+ 90AA 12                   ld (de),a               ;draw middle top bit
 440+ 90AB
 441+ 90AB
 442+ 90AB              ;top line done
 443+ 90AB
 444+ 90AB              ;now do the bottom line underneath
 445+ 90AB
 446+ 90AB              ;REMEMBER - 1 block is 2 8 bit squares at the section
 447+ 90AB              _x1r_2_l:
 448+ 90AB 1B                   dec de
 449+ 90AC 1B                   dec de
 450+ 90AD 1B                   dec de                  ;move left 3 places in the display
 451+ 90AE 21 21 00             ld  hl,$0021           ;jump to the next line below + 1 char right
 452+ 90B1 19                   add hl,de
 453+ 90B2
 454+ 90B2
 455+ 90B2              ;now draw a red wall to the right of section 2
 456+ 90B2 23                   inc hl
 457+ 90B3 3E B4                ld a,_smallwall
 458+ 90B5 77                   ld (hl),a
 459+ 90B6 2B                   dec hl
 460+ 90B7 77                   ld (hl),a
 461+ 90B8 2B                   dec hl
 462+ 90B9 77                   ld (hl),a               ;draw 3rd one (3 wide)
 463+ 90BA
 464+ 90BA 23                   inc hl
 465+ 90BB 23                   inc hl
 466+ 90BC 23                   inc hl
 467+ 90BD
 468+ 90BD              ;now check if we need to draw a black side on the left of the lower half wall
 469+ 90BD              ;do this by checking if the next block is already a wall just like above
 470+ 90BD
 471+ 90BD 23                   inc hl      ;look at the right block
 472+ 90BE 7E                   ld a,(hl)
 473+ 90BF FE B4                cp _smallwall           ;is there a bottom wall5 here?
 474+ 90C1 CA CB 90             jp z,_x2r_2_l
 475+ 90C4 3E 98                ld a,$98            ;draw rightmost bottom
 476+ 90C6 2B                   dec hl
 477+ 90C7 77                   ld (hl),a
 478+ 90C8
 479+ 90C8 3C                  inc a
 480+ 90C9 23                   inc hl
 481+ 90CA 77                   ld (hl),a
 482+ 90CB
 483+ 90CB D1           _x2r_2_l  pop de
 484+ 90CC C3 46 90             jp go_back5              ; jump back to main loop
 485+ 90CF
 486+ 90CF              ;##########################################
 487+ 90CF
 488+ 90CF              ;draw the wall for 3rd LEFT layer
 489+ 90CF
 490+ 90CF              ;##########################################
 491+ 90CF
 492+ 90CF              do_3rdwall_l:
 493+ 90CF
 494+ 90CF D5                   push de                 ;save the current acreen position
 495+ 90D0              ;1st check if theres a wall where we need to draw the black side
 496+ 90D0
 497+ 90D0 1B                  dec de
 498+ 90D1 1B                   dec de
 499+ 90D2 1B                   dec de
 500+ 90D3 1B                   dec de
 501+ 90D4 1B                   dec de
 502+ 90D5 1B                   dec de
 503+ 90D6
 504+ 90D6
 505+ 90D6              ;now draw a red wall to the left of section 2,  top half
 506+ 90D6
 507+ 90D6 3E B4                ld a,_smallwall;$8e                ;8e - 3rd wall graphic
 508+ 90D8 12                   ld (de),a
 509+ 90D9 13                   inc de
 510+ 90DA 12                   ld (de),a
 511+ 90DB 13                   inc de
 512+ 90DC 12                   ld (de),a
 513+ 90DD 13                   inc de
 514+ 90DE 12                   ld (de),a               ;draw 4th one (4 wide)
 515+ 90DF
 516+ 90DF
 517+ 90DF              ;now check if we need to draw a black side on the right
 518+ 90DF              ;by looking to the character to the right of the wall
 519+ 90DF              ;and if there is not a wall already drawn, then draw a
 520+ 90DF              ;black side
 521+ 90DF
 522+ 90DF 13                   inc de
 523+ 90E0 1A                   ld a,(de)               ;read whats there
 524+ 90E1                     ; dec de                  ;put our pointer back to the original position
 525+ 90E1 FE B4                cp _smallwall           ;is it a wall
 526+ 90E3 CA F3 90             jp z,_x1r_3l               ;if yes, do NOT draw a black side.
 527+ 90E6 1B                   dec de
 528+ 90E7 13                   inc de
 529+ 90E8 13                   inc de
 530+ 90E9 13                   inc de
 531+ 90EA 3E C5                ld a,$c5             ;draw top right side
 532+ 90EC 12                   ld (de),a
 533+ 90ED 1B                   dec de
 534+ 90EE 3C                   inc a
 535+ 90EF 12                   ld (de),a
 536+ 90F0 3C                   inc a
 537+ 90F1 1B                   dec de
 538+ 90F2 12                   ld (de),a
 539+ 90F3
 540+ 90F3              ;Top line done
 541+ 90F3              ;now do the bottom line
 542+ 90F3
 543+ 90F3              _x1r_3l:
 544+ 90F3 1B                   dec de
 545+ 90F4 1B                   dec de
 546+ 90F5 1B                   dec de
 547+ 90F6 1B                   dec de
 548+ 90F7
 549+ 90F7 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 90FA 19                   add  hl,de
 551+ 90FB 3E B4                ld a,_smallwall;$8e
 552+ 90FD 77                   ld (hl),a
 553+ 90FE 23                   inc hl
 554+ 90FF 77                   ld (hl),a
 555+ 9100 23                   inc hl
 556+ 9101 77                   ld (hl),a
 557+ 9102 23                   inc hl
 558+ 9103 77                   ld (hl),a
 559+ 9104
 560+ 9104 23                   inc hl
 561+ 9105
 562+ 9105
 563+ 9105              ;now check if we need to draw a black side on the left of the lower half wall
 564+ 9105              ;do this by checking if the next block is already a wall just like above
 565+ 9105
 566+ 9105 23                   inc hl      ;look at the right block
 567+ 9106 7E                   ld a,(hl)
 568+ 9107 2B                   dec hl
 569+ 9108 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 570+ 910A CA 18 91             jp z,_x2r_3l
 571+ 910D 2B                   dec hl
 572+ 910E              ;inc hl
 573+ 910E 3E C3                ld a,$c3            ;draw leftmost bottom
 574+ 9110 23                   inc hl
 575+ 9111 77                   ld (hl),a
 576+ 9112 23                   inc hl
 577+ 9113 3D                   dec a
 578+ 9114 77                   ld (hl),a
 579+ 9115 23                   inc hl
 580+ 9116 3D                   dec a
 581+ 9117 77                   ld (hl),a
 582+ 9118
 583+ 9118 D1           _x2r_3l  pop de
 584+ 9119 C3 46 90             jp go_back5              ; jump back to main loop
 585+ 911C
 586+ 911C              ;##########################################
 587+ 911C
 588+ 911C              ;draw the wall for 4th (and last!) LEFT layer
 589+ 911C
 590+ 911C              ;##########################################
 591+ 911C
 592+ 911C              do_4thwall_l:
 593+ 911C
 594+ 911C              ;draw top half of wall
 595+ 911C
 596+ 911C D5                   push de                 ;save the current acreen position
 597+ 911D              ;1st check if theres a wall where we need to draw the black side
 598+ 911D 1B                   dec de
 599+ 911E 1B                   dec de
 600+ 911F 1B                   dec de
 601+ 9120 1B                   dec de
 602+ 9121 1B                   dec de
 603+ 9122 1B                   dec de
 604+ 9123              ;now draw a red wall to the right of section 2,  top half
 605+ 9123
 606+ 9123 3E B4                ld a,_smallwall;$8d
 607+ 9125 12                   ld (de),a
 608+ 9126 1B                   dec de
 609+ 9127 12                   ld (de),a
 610+ 9128 13                   inc de                  ;move print position back for black wall
 611+ 9129
 612+ 9129              ;now check if we need to draw a black side on the right
 613+ 9129              ;by looking to the character to the right of the wall
 614+ 9129              ;and if there is not a wall already drawn, then draw a
 615+ 9129              ;black side
 616+ 9129
 617+ 9129 13                   inc de                  ;jump left 1 char in the display
 618+ 912A 1A                   ld a,(de)               ;read whats there
 619+ 912B 1B                   dec de                  ;put our pointer back to the original position
 620+ 912C FE B4                cp _smallwall;$8e                 ;is it a wall
 621+ 912E CA 42 91             jp z,_x1r_31_l               ;if yes, do NOT draw a black side.
 622+ 9131              ;        dec de
 623+ 9131 3E B9                ld a,$b9              ;draw top right side
 624+ 9133 13                   inc de
 625+ 9134 13                   inc de
 626+ 9135 13                   inc de
 627+ 9136 13                   inc de
 628+ 9137 12                   ld (de),a           ;draw 4 black sides
 629+ 9138 1B                   dec de
 630+ 9139 3C                   inc a
 631+ 913A 12                   ld (de),a
 632+ 913B 3C                   inc a
 633+ 913C 1B                   dec de
 634+ 913D 12                   ld (de),a
 635+ 913E 3C                   inc a
 636+ 913F 1B                   dec de
 637+ 9140 12                   ld (de),a
 638+ 9141
 639+ 9141 1B                   dec de              ;move to wall start
 640+ 9142
 641+ 9142
 642+ 9142              ;top line done
 643+ 9142
 644+ 9142              ;now do the bottom line underneath
 645+ 9142
 646+ 9142              _x1r_31_l
 647+ 9142 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 648+ 9145 19                   add  hl,de
 649+ 9146
 650+ 9146 3E B4                ld a,_smallwall;$8d
 651+ 9148 77                   ld (hl),a
 652+ 9149 2B                   dec hl
 653+ 914A 77                   ld (hl),a
 654+ 914B
 655+ 914B 23                   inc hl
 656+ 914C
 657+ 914C
 658+ 914C              ;now check if we need to draw a black side on the left of the lower half wall
 659+ 914C              ;do this by checking if the next block is already a wall just like above
 660+ 914C
 661+ 914C 23                   inc hl      ;look at the left block
 662+ 914D 7E                   ld a,(hl)
 663+ 914E 2B                   dec hl
 664+ 914F FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 665+ 9151 CA 64 91             jp z,_x2r_31_l
 666+ 9154
 667+ 9154                   ;  dec hl
 668+ 9154 3E BD                ld a,$bd            ;draw leftmost bottom
 669+ 9156 23                   inc hl
 670+ 9157 23                   inc hl
 671+ 9158 23                   inc hl
 672+ 9159 23                   inc hl
 673+ 915A
 674+ 915A 77                   ld (hl),a
 675+ 915B 2B                   dec hl
 676+ 915C 3C                   inc a
 677+ 915D 77                   ld (hl),a
 678+ 915E 2B                   dec hl
 679+ 915F 3C                   inc a
 680+ 9160 77                   ld (hl),a
 681+ 9161 2B                   dec hl
 682+ 9162 3C                   inc a
 683+ 9163 77                   ld (hl),a
 684+ 9164
 685+ 9164 D1           _x2r_31_l  pop de
 686+ 9165 C3 46 90             jp go_back5              ; jump back to main loop
 687+ 9168
 688+ 9168
 689+ 9168              ;############################################
 690+ 9168              ;############################################
 691+ 9168              ;draw LEFT layer 4
 692+ 9168              ;############################################
 693+ 9168              ;############################################
 694+ 9168
 695+ 9168              draw_4
 696+ 9168
 697+ 9168              ; hl=maze location being drawn.
 698+ 9168              ; now determine what to draw for this section.
 699+ 9168
 700+ 9168
 701+ 9168 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 702+ 916B
 703+ 916B CD 24 8E             call load_de            ;get left and right and front jump into de reg
 704+ 916E 19                   add hl,de               ;jump backwards along the user view 1 space
 705+ 916F 22 25 FA             ld (furthest_point),hl  ;re save it
 706+ 9172
 707+ 9172              ;we should also move our pointer left to read where the walls are.
 708+ 9172              ;this will be from this point onwards as we can see the blocks more fully
 709+ 9172
 710+ 9172 11 FF FF             ld de,$ffff              ;to move the printed position -3
 711+ 9175 ED 53 11 FA          ld (var4),de            ;as block is 3 chars wide
 712+ 9179
 713+ 9179              ;we need to move pointer 1 to the left for wall checking
 714+ 9179 ED 5B 0B FA          ld de,(left)
 715+ 917D 19                   add hl,de
 716+ 917E 22 15 FA             ld (var6),hl ;re save it
 717+ 9181
 718+ 9181
 719+ 9181 ED 53 0F FA          ld (var3),de
 720+ 9185 11 51 01             ld de,$0151            ; offset to row 10 column 16 - left of  centre of the 3d view.
 721+ 9188 CD 8E 91             call do_draw_4
 722+ 918B
 723+ 918B
 724+ 918B C3 81 93             jp draw_3              ;now draw the 4th level
 725+ 918E
 726+ 918E              do_draw_4:
 727+ 918E
 728+ 918E 2A 74 81             ld hl,(d_file)         ; fetch the location of the display file.
 729+ 9191 19                   add hl,de
 730+ 9192 06 04                ld b,4                 ; count for 3 blocks left of display file
 731+ 9194                                             ; 0 is not counted so loops 3 times
 732+ 9194 ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
 733+ 9198 EB                   ex de,hl
 734+ 9199
 735+ 9199              ;       hl = furthest point in the maze
 736+ 9199              ;       de = d_file location to store byte to display
 737+ 9199
 738+ 9199              loop9:
 739+ 9199 E5                   push hl
 740+ 919A
 741+ 919A              ;#############################################################################
 742+ 919A              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 743+ 919A
 744+ 919A 3A 28 FA             ld a,(maze_highbyte)
 745+ 919D BC                   cp h                    ;are weoutside of our maze?
 746+ 919E CA D1 91             jp z,cont_5
 747+ 91A1
 748+ 91A1                       ;if we are on a different maze boundary
 749+ 91A1                                              ;then draw a maze wall as we are the top
 750+ 91A1                                              ;or north wall but maze data has no
 751+ 91A1                                              ;wall data.
 752+ 91A1
 753+ 91A1              ;4 = 1st LEFT wall
 754+ 91A1              ;3 = 2nd LEFT wall
 755+ 91A1              ;2 = 3rd LEFT wall
 756+ 91A1              ;1 = 4th LEFT wall
 757+ 91A1
 758+ 91A1 78                   ld a,b                  ;our current wall counter
 759+ 91A2 FE 04                cp 4
 760+ 91A4 C2 AF 91             jp nz,a4_1              ;its not a wall
 761+ 91A7 3E 01                ld a,1
 762+ 91A9 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 763+ 91AA C6 80                add a,128               ;make sure we set a wall!
 764+ 91AC C3 00 92             jp draw_9               ;draw the 1st block to the left
 765+ 91AF
 766+ 91AF              ;        ld a,b
 767+ 91AF FE 03        a4_1:   cp 3
 768+ 91B1 C2 BC 91             jp nz,a4_2              ;its not wall
 769+ 91B4 3E 01                ld a,1
 770+ 91B6 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 771+ 91B7 C6 80                add a,128               ;make sure we set a wall!
 772+ 91B9 C3 40 92             jp draw_9_2L           ;draw the 2nd block to the left
 773+ 91BC
 774+ 91BC FE 02        a4_2:   cp 2
 775+ 91BE C2 C9 91             jp nz,a4_3              ;its not wall
 776+ 91C1 3E 01                ld a,1
 777+ 91C3 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 778+ 91C4 C6 80                add a,128               ;make sure we set a wall!
 779+ 91C6 C3 B2 92             jp draw_9_3L           ;draw the 3rd block to the left
 780+ 91C9
 781+ 91C9              ;a must = 1 if we get here.
 782+ 91C9 3E 01        a4_3:   ld a,1
 783+ 91CB 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 784+ 91CC C6 80                add a,128               ;make sure we set a wall!
 785+ 91CE C3 11 93             jp draw_9_4L           ;draw the 4th block to the left
 786+ 91D1
 787+ 91D1              ;############################################################################
 788+ 91D1
 789+ 91D1
 790+ 91D1              ;now check if we are on the south wall and frig it to draw the
 791+ 91D1              ;walls we need.
 792+ 91D1              ;reg a already contains l
 793+ 91D1
 794+ 91D1              ;cont_4s:
 795+ 91D1
 796+ 91D1
 797+ 91D1              cont_5:
 798+ 91D1 7E                   ld a,(hl)
 799+ 91D2 17                   rla
 800+ 91D3 DA E6 91             jp c,do_wall4            ;bit 7 (128)
 801+ 91D6
 802+ 91D6               ;       call do_no_wall4         ; otherwise draw no wall
 803+ 91D6
 804+ 91D6              go_back4:
 805+ 91D6 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 806+ 91D9 19                   add hl,de
 807+ 91DA EB                   ex de,hl
 808+ 91DB E1                   pop hl
 809+ 91DC D5                   push de
 810+ 91DD ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 811+ 91E1 19                   add hl,de               ; move to the start of the next block to print
 812+ 91E2                                              ;we need to move back 4 blocks
 813+ 91E2                                              ;as the first block obscures the view
 814+ 91E2                                              ;of the next 3 blocks.
 815+ 91E2 D1                   pop de
 816+ 91E3 10 B4                djnz loop9
 817+ 91E5 C9                   ret
 818+ 91E6
 819+ 91E6              do_wall4:
 820+ 91E6
 821+ 91E6              draw_4s:
 822+ 91E6
 823+ 91E6              ;Draw wall based on b count
 824+ 91E6
 825+ 91E6              wall4L_start:
 826+ 91E6
 827+ 91E6 78                   ld a,b
 828+ 91E7 D6 01                sub 1                   ;4th wall  to the left
 829+ 91E9 CA 11 93             jp z,draw_9_4L
 830+ 91EC
 831+ 91EC 78                   ld a,b
 832+ 91ED D6 02                sub 2                   ;3rd wall to the left
 833+ 91EF CA B2 92             jp z,draw_9_3L
 834+ 91F2
 835+ 91F2 78                   ld a,b
 836+ 91F3 D6 03                sub 3                   ;2nd wall immediately wall to the left
 837+ 91F5 CA 40 92             jp z,draw_9_2L
 838+ 91F8
 839+ 91F8 78                   ld a,b
 840+ 91F9 D6 04                sub 4                   ;1st wall immediately wall to the left
 841+ 91FB CA 00 92             jp z,draw_9
 842+ 91FE
 843+ 91FE E1                   pop hl
 844+ 91FF C9                   ret
 845+ 9200
 846+ 9200              draw_9:
 847+ 9200 C5                   push bc
 848+ 9201 D5                   push de                 ;save our display pointer
 849+ 9202 06 04                ld b,4                  ;block is 4 blocks high
 850+ 9204 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 851+ 9207 1B                   dec de
 852+ 9208
 853+ 9208 3E B7        loop10: ld   a,_mediumwall_1      ;grey sides facing us
 854+ 920A 12                   ld (de),a               ; insert thepart of the wall.
 855+ 920B 13                   inc de
 856+ 920C 12                   ld (de),a               ;put grey side to our right
 857+ 920D 13                   inc de
 858+ 920E 12                   ld (de),a
 859+ 920F 13                   inc de
 860+ 9210 12                   ld (de),a
 861+ 9211 1B                   dec de
 862+ 9212 1B                   dec de
 863+ 9213 1B                   dec de                  ;go left 1 again
 864+ 9214 EB                   ex de,hl
 865+ 9215 19                   add  hl,de              ; advance to the next row of the display file.
 866+ 9216 EB                   ex de,hl
 867+ 9217 10 EF                djnz loop10             ;do this 3 times
 868+ 9219
 869+ 9219                      ;now draw the blank face
 870+ 9219 D1                   pop de                  ;back to our original position
 871+ 921A D5                   push de
 872+ 921B 13                   inc de
 873+ 921C 13                   inc de                  ;move ahead 3 spaces in the display
 874+ 921D 13                   inc de
 875+ 921E              ;        inc de
 876+ 921E
 877+ 921E              ;check if the char to our right is a wall block.
 878+ 921E              ;if so, do not draw a black face as we need to hide it or it will
 879+ 921E              ;ovewrite the already drawn block
 880+ 921E
 881+ 921E 1A                   ld a,(de)
 882+ 921F FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 883+ 9221 C2 28 92             jp nz,cont_1            ;there is no block so draw black edge
 884+ 9224 D1                   pop de
 885+ 9225 C1                   pop bc
 886+ 9226 18 AE                jr go_back4             ;otherwise quit this draw
 887+ 9228
 888+ 9228 EB           cont_1  ex  de,hl
 889+ 9229 11 21 00             ld de,$0021
 890+ 922C 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
 891+ 922E 77                   ld  (hl),a
 892+ 922F 19                   add hl,de
 893+ 9230 3E AF                ld  a,_black      ;triangle sloping to right bottom
 894+ 9232 77                   ld  (hl),a
 895+ 9233 19                   add hl,de
 896+ 9234 3E AF                ld  a,_black      ;triangle sloping to right bottom
 897+ 9236 77                   ld  (hl),a
 898+ 9237 19                   add hl,de
 899+ 9238
 900+ 9238 77                   ld  (hl),a
 901+ 9239 3E B0                ld  a,_topcorner1
 902+ 923B 77                   ld  (hl),a
 903+ 923C D1                   pop de
 904+ 923D C1                   pop bc
 905+ 923E 18 96                jr go_back4              ; jump back to main loop
 906+ 9240
 907+ 9240              ;************************************
 908+ 9240              ;*Draw the 2nd LEFT block of section 4
 909+ 9240              ;************************************
 910+ 9240
 911+ 9240              draw_9_2L:
 912+ 9240 C5                   push bc
 913+ 9241 21 FF FF             ld hl,$ffff                 ;move start point (-1) `to correct position
 914+ 9244 19                   add hl,de
 915+ 9245 EB                   ex de,hl
 916+ 9246 D5                   push de
 917+ 9247
 918+ 9247              ;now draw the 2nd wall itself
 919+ 9247 06 04                ld b,4                  ;block is 4 blocks high
 920+ 9249 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 921+ 924C 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 922+ 924E
 923+ 924E              loop10r_2L:
 924+ 924E 12                   ld (de),a             ; insert thepart of the wall.
 925+ 924F 1B                   dec de
 926+ 9250 12                   ld (de),a               ;put grey side to our right
 927+ 9251 1B                   dec de
 928+ 9252 12                   ld (de),a
 929+ 9253 1B                   dec de
 930+ 9254 12                   ld (de),a
 931+ 9255 1B                   dec de
 932+ 9256 12                   ld (de),a
 933+ 9257 13                   inc de
 934+ 9258 13                   inc de
 935+ 9259 13                   inc de
 936+ 925A 13                   inc de                  ;go left 1 again
 937+ 925B EB                   ex de,hl
 938+ 925C 19                   add  hl,de              ; advance to the next row of the display file.
 939+ 925D EB                   ex de,hl
 940+ 925E 10 EE                djnz loop10r_2L             ;do this 3 times
 941+ 9260
 942+ 9260                      ;now draw the blank face
 943+ 9260 D1                   pop de                  ;back to our original position
 944+ 9261 D5                   push de
 945+ 9262 13                   inc de                  ;move left 3 space left in the display
 946+ 9263 13                   inc de
 947+ 9264 13                   inc de
 948+ 9265
 949+ 9265              ;check if the char to our right is a wall block.
 950+ 9265              ;if so, do not draw a black face as we need to hide it or it will
 951+ 9265              ;ovewrite the already drawn block
 952+ 9265
 953+ 9265 1A                   ld a,(de)
 954+ 9266 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 955+ 9268 C2 70 92             jp nz,cont_1r_2L           ;there is no block so draw black edge
 956+ 926B D1                   pop de
 957+ 926C C1                   pop bc
 958+ 926D C3 D6 91             jp go_back4             ;otherwise quit this draw
 959+ 9270
 960+ 9270              cont_1r_2L:
 961+ 9270 EB                   ex  de,hl
 962+ 9271 11 21 00             ld de,$0021
 963+ 9274
 964+ 9274              ;need to loop 2 times drawing 2 lots of 3 top
 965+ 9274              ;& bottom chars- move down 1after 1st 3 top chars drawn
 966+ 9274              ;
 967+ 9274
 968+ 9274 3E 02                ld a,2
 969+ 9276 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 970+ 9279
 971+ 9279              ;loop for 2 black wall columns
 972+ 9279 3E 03                ld a,3                  ;column start height
 973+ 927B 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 974+ 927E
 975+ 927E 06 03                ld b,3                  ;loop 3 times for 3 columns
 976+ 9280 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 977+ 9283 3E 97                ld a,$97
 978+ 9285 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 979+ 9288
 980+ 9288              loop10br_2L:
 981+ 9288 C5                   push bc                 ;save count
 982+ 9289 3A 04 FA             ld a,(var1)             ;column height
 983+ 928C 47                   ld b,a                  ;holds the column height in chars
 984+ 928D 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 985+ 9290 F5                   push af                 ;save a for bottom corners
 986+ 9291 77                   ld  (hl),a
 987+ 9292
 988+ 9292              loop10ar_2L:
 989+ 9292 19                   add hl,de
 990+ 9293 3E AF                ld  a,_black            ;black wall fill
 991+ 9295 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 992+ 9296 10 FA                djnz loop10ar_2L
 993+ 9298
 994+ 9298 F1                   pop af                  ;retrivetop corner
 995+ 9299 3D                   dec a                   ;prep for next top corner
 996+ 929A 32 05 FA             ld (var2),a             ;re-save it for next corner
 997+ 929D C6 04                add a,4                 ;get the correct char to print
 998+ 929F 77                   ld  (hl),a              ;draw the bottom of the wall
 999+ 92A0
1000+ 92A0                      ;now change column count
1001+ 92A0 3A 04 FA             ld a,(var1)
1002+ 92A3 C1                   pop bc
1003+ 92A4
1004+ 92A4 2A 13 FA             ld hl,(var5)
1005+ 92A7 2B                   dec hl                  ;move print position to the left
1006+ 92A8 22 13 FA             ld (var5),hl
1007+ 92AB
1008+ 92AB 10 DB                djnz loop10br_2L
1009+ 92AD
1010+ 92AD D1                   pop de
1011+ 92AE C1                   pop bc
1012+ 92AF C3 D6 91             jp go_back4             ; jump back to main loop
1013+ 92B2
1014+ 92B2              ;#############################################
1015+ 92B2              ;*Draw the 3rd LEFT block of section 4
1016+ 92B2              ;#############################################
1017+ 92B2
1018+ 92B2              draw_9_3L:
1019+ 92B2 C5                   push bc
1020+ 92B3 D5                   push de                 ;save our display pointer
1021+ 92B4 06 04                ld b,4                  ;block is 4 blocks high
1022+ 92B6 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1023+ 92B9 11 4A C1             ld de,$C162-24              ;start of drawing
1024+ 92BC
1025+ 92BC              loop10r_3L:
1026+ 92BC 3E B7                ld a,_mediumwall_1      ;grey sides facing us
1027+ 92BE 12                   ld (de),a               ; insert thepart of the wall.
1028+ 92BF EB                   ex de,hl
1029+ 92C0 19                   add  hl,de              ; advance to the next row of the display file.
1030+ 92C1 EB                   ex de,hl
1031+ 92C2 10 F8                djnz loop10r_3L             ;do this 3 times
1032+ 92C4
1033+ 92C4                      ;now draw the blank face
1034+ 92C4 D1                   pop de                  ;back to our original position
1035+ 92C5 D5                   push de
1036+ 92C6
1037+ 92C6              ;check if the char to our right is a wall block.
1038+ 92C6              ;if so, do not draw a black face as we need to hide it or it will
1039+ 92C6              ;ovewrite the already drawn block
1040+ 92C6
1041+ 92C6 1A                   ld a,(de)
1042+ 92C7 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1043+ 92C9 C2 D1 92             jp nz,cont_1r_3L            ;there is no block so draw black edge
1044+ 92CC
1045+ 92CC D1                   pop de
1046+ 92CD C1                   pop bc
1047+ 92CE C3 D6 91             jp go_back4             ;otherwise quit this draw
1048+ 92D1
1049+ 92D1              cont_1r_3L:
1050+ 92D1 EB                   ex de,hl
1051+ 92D2 11 21 00             ld de,$0021
1052+ 92D5 21 4B C1             ld hl,$c161-22
1053+ 92D8
1054+ 92D8              ;need to loop 2 times drawing 2 lots of 3 top
1055+ 92D8              ;& bottom chars- move down 1after 1st 3 top chars drawn
1056+ 92D8              ;
1057+ 92D8
1058+ 92D8              ;loop for 5 black wall columns
1059+ 92D8 3E 03                ld a,3                  ;column start height
1060+ 92DA 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
1061+ 92DD
1062+ 92DD 06 05                ld b,5                  ;loop 5 times for 3 columns
1063+ 92DF 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1064+ 92E2 3E CD                ld a,$cd ;91
1065+ 92E4 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1066+ 92E7
1067+ 92E7              loop10br_2aL:
1068+ 92E7 C5                   push bc                 ;save count
1069+ 92E8 3A 04 FA             ld a,(var1)             ;column height
1070+ 92EB 47                   ld b,a                  ;holds the column height in chars
1071+ 92EC 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1072+ 92EF F5                   push af                 ;save a for bottom corners
1073+ 92F0 77                   ld  (hl),a
1074+ 92F1
1075+ 92F1              loop10ar_2aL:
1076+ 92F1 19                   add hl,de
1077+ 92F2 3E AF                ld  a,_black            ;black wall fill
1078+ 92F4 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1079+ 92F5 10 FA                djnz loop10ar_2aL
1080+ 92F7
1081+ 92F7 F1                   pop af                  ;retrivetop corner
1082+ 92F8 3D                   dec a                   ;prep for next top corner
1083+ 92F9 32 05 FA             ld (var2),a             ;re-save it for next corner
1084+ 92FC C6 06                add a,6                 ;get the correct char to print
1085+ 92FE 77                   ld  (hl),a              ;draw the bottom of the wall
1086+ 92FF
1087+ 92FF                      ;now change column count
1088+ 92FF 3A 04 FA             ld a,(var1)
1089+ 9302 C1                   pop bc
1090+ 9303
1091+ 9303 2A 13 FA             ld hl,(var5)
1092+ 9306 23                   inc hl                  ;move print position to the right
1093+ 9307 22 13 FA             ld (var5),hl
1094+ 930A
1095+ 930A 10 DB                djnz loop10br_2aL
1096+ 930C
1097+ 930C D1                   pop de
1098+ 930D C1                   pop bc
1099+ 930E C3 D6 91             jp go_back4              ; jump back to main loop
1100+ 9311
1101+ 9311              ;#############################################
1102+ 9311              ;*Draw the 4th LEFT block of section 4
1103+ 9311              ;#############################################
1104+ 9311
1105+ 9311              ; we only need to draw 2 columns of black sides.
1106+ 9311
1107+ 9311              draw_9_4L:
1108+ 9311
1109+ 9311              ; we only need to draw up to 2 columns of black sides.
1110+ 9311
1111+ 9311
1112+ 9311 C5                   push bc
1113+ 9312 D5                   push de                 ;save our display pointer
1114+ 9313
1115+ 9313              ;check if the char to our left is a wall block.
1116+ 9313              ;if so, do not draw a black face as we need to hide it or it will
1117+ 9313              ;ovewrite the already drawn block
1118+ 9313
1119+ 9313 21 4A C1             ld hl,$C151-7              ;start of drawing
1120+ 9316 7E                   ld a,(hl)
1121+ 9317 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1122+ 9319 C2 21 93             jp nz,cont_3L            ;there is no block so draw black edge
1123+ 931C
1124+ 931C D1                   pop de
1125+ 931D C1                   pop bc
1126+ 931E C3 D6 91             jp go_back4             ;otherwise quit this draw
1127+ 9321
1128+ 9321              cont_3L:
1129+ 9321 11 21 00             ld de,33                ;to jump to next line below
1130+ 9324 3E CA                ld a,$ca                ;top of the wall
1131+ 9326 E5                   push hl                 ;save for drawing 2nd black wall
1132+ 9327 77                   ld (hl),a               ;to cover up wall 5
1133+ 9328 19                   add hl,de               ;jump to next line
1134+ 9329 3E AF                ld a,_black
1135+ 932B 77                   ld (hl),a
1136+ 932C 19                   add hl,de
1137+ 932D 77                   ld (hl),a
1138+ 932E 19                   add hl,de
1139+ 932F 3E CF                ld a,$cf                ;draw bottom of the line
1140+ 9331 77                   ld (hl),a
1141+ 9332
1142+ 9332              ;now check if we need to cover wall 5 with a 2nd black line to the left
1143+ 9332              ;hl points to top of the 4 blocks
1144+ 9332 E1                   pop hl                  ;restore our pointer in char ram
1145+ 9333 23                   inc hl                  ;go left 1 place
1146+ 9334 E5                   push hl
1147+ 9335 19                   add hl,de               ;now we are at the wall 5 top position
1148+ 9336 7E                   ld a,(hl)
1149+ 9337 FE B4                cp _smallwall
1150+ 9339 E1                   pop hl
1151+ 933A 20 0B                jr nz,exit3L
1152+ 933C              ;draw the second wall over section 5 wall
1153+ 933C 36 C9                ld (hl),$c9             ;top of the wall
1154+ 933E 19                   add hl,de
1155+ 933F 36 AF                ld (hl),_black
1156+ 9341 19                   add hl,de
1157+ 9342 36 AF                ld (hl),_black
1158+ 9344 19                   add hl,de
1159+ 9345 36 CE                ld (hl),$ce             ;bottom of the wall
1160+ 9347
1161+ 9347 D1           exit3L:  pop de                  ;now exit
1162+ 9348 C1                   pop bc
1163+ 9349 C3 D6 91             jp go_back4
1164+ 934C
1165+ 934C              ;###################################################
1166+ 934C              ;not needed down here
1167+ 934C
1168+ 934C C5                   push bc
1169+ 934D D5                   push de                 ;save our display pointer
1170+ 934E
1171+ 934E              ;check if the char to our right is a wall block.
1172+ 934E              ;if so, do not draw a black face as we need to hide it or it will
1173+ 934E              ;ovewrite the already drawn block
1174+ 934E
1175+ 934E 21 4A C1             ld hl,$C151-7              ;start of drawing
1176+ 9351 7E                   ld a,(hl)
1177+ 9352 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1178+ 9354 C2 5C 93             jp nz,cont_3L_l            ;there is no block so draw black edge
1179+ 9357
1180+ 9357 D1                   pop de
1181+ 9358 C1                   pop bc
1182+ 9359 C3 D6 91             jp go_back4             ;otherwise quit this draw
1183+ 935C
1184+ 935C              cont_3L_l:
1185+ 935C 06 04                ld b,4                  ;block is 4 blocks high
1186+ 935E 3E CA                ld a,$ca
1187+ 9360 77                   ld (hl),a
1188+ 9361 23                   inc hl
1189+ 9362 3D                   dec a
1190+ 9363 77                   ld (hl),a
1191+ 9364
1192+ 9364              ;need 2 black walls now!
1193+ 9364 3E AF                ld a,_black
1194+ 9366 11 21 00             ld de,33;34                ;1 line width
1195+ 9369
1196+ 9369 CD 7C 93             CALL black_wall_1         ;draw 2 black blocks
1197+ 936C 13                   inc de                        ;jump to next line below
1198+ 936D
1199+ 936D CD 7C 93             CALL black_wall_1         ;draw 2 black blocks
1200+ 9370 19                   add hl,de               ;jump to next line below
1201+ 9371
1202+ 9371
1203+ 9371              ;top half done - so do bottom half - 2 blacks first
1204+ 9371
1205+ 9371              ;de already holds 34  -1 line plus 2 chars to the right
1206+ 9371
1207+ 9371 3E CE                ld a,$ce
1208+ 9373 77                   ld (hl),a
1209+ 9374 2B                   dec hl
1210+ 9375 3C                   inc a
1211+ 9376 77                   ld (hl),a
1212+ 9377
1213+ 9377 D1                   pop de
1214+ 9378 C1                   pop bc
1215+ 9379 C3 D6 91             jp go_back4
1216+ 937C
1217+ 937C              ;draw 2 black walls across 1 line
1218+ 937C              black_wall_1:
1219+ 937C 19                   add hl,de      ;jump 1 line below
1220+ 937D 77                   ld (hl),a
1221+ 937E 2B                   dec hl
1222+ 937F 77                   ld (hl),a
1223+ 9380 C9                   ret
1224+ 9381
1225+ 9381
1226+ 9381
1227+ 9381              ;#############################################
1228+ 9381              ;#############################################
1229+ 9381              ;# draw LEFT wall 3
1230+ 9381              ;#############################################
1231+ 9381              ;#############################################
1232+ 9381
1233+ 9381              draw_3:
1234+ 9381              ;ret
1235+ 9381              ; hl=maze location being drawn.
1236+ 9381              ; now determine what to draw for this section.
1237+ 9381
1238+ 9381
1239+ 9381 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1240+ 9384
1241+ 9384 CD 24 8E             call load_de            ;get left and right and front jump into de reg
1242+ 9387
1243+ 9387 19                   add hl,de               ;jump backwards along the user view 1 space
1244+ 9388 22 25 FA             ld (furthest_point),hl ;re save it
1245+ 938B
1246+ 938B 11 FF FF             ld de,$ffff             ;to move the display position -1
1247+ 938E ED 53 11 FA          ld (var4),de
1248+ 9392
1249+ 9392 ED 5B 0B FA          ld de,(left)            ;move our check position left -1
1250+ 9396 19                   add hl,de
1251+ 9397 22 15 FA             ld (var6),hl
1252+ 939A
1253+ 939A
1254+ 939A ED 53 0F FA          ld (var3),de
1255+ 939E 11 0A 01             ld de,$10a;10b           ; offset to row 8 column5 - left of  centre of the 3d view.
1256+ 93A1
1257+ 93A1              ;2nd block starts at $109 and is 3 wall chars wide
1258+ 93A1 CD A7 93             call do_draw_3
1259+ 93A4
1260+ 93A4 C3 13 95             jp draw_2           ;now draw the 2nd level
1261+ 93A7
1262+ 93A7              do_draw_3:
1263+ 93A7
1264+ 93A7 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
1265+ 93AA 19                   add  hl,de
1266+ 93AB
1267+ 93AB
1268+ 93AB              ; draw left half of the display.
1269+ 93AB
1270+ 93AB 06 03                ld b,3                 ; count for 1 blocks left of display file
1271+ 93AD ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
1272+ 93B1
1273+ 93B1
1274+ 93B1 EB                   ex   de,hl              ; transfer de to hl.
1275+ 93B2
1276+ 93B2              ;       hl = furthest point in the maze
1277+ 93B2              ;       de = d_file location to store byte to display
1278+ 93B2
1279+ 93B2              loop11:
1280+ 93B2 E5                   push hl
1281+ 93B3
1282+ 93B3              ;################################################################
1283+ 93B3
1284+ 93B3              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1285+ 93B3              ;and stop drrawing anything else.
1286+ 93B3
1287+ 93B3 3A 28 FA             ld a,(maze_highbyte)
1288+ 93B6 BC                   cp h                    ;are we at the top part of the maze?
1289+ 93B7 CA DE 93             jp z,cont_3s
1290+ 93BA                                              ;if we are on a different maze boundary
1291+ 93BA                                              ;then draw a maze wall as we are the top
1292+ 93BA                                              ;or north wall but maze data has no
1293+ 93BA                                              ;wall data.
1294+ 93BA              ;see which wall we are at and draw the correct one before jumping out
1295+ 93BA              ;of the loop and stop drawing past the maze wall.
1296+ 93BA
1297+ 93BA              ;3 = first left wall
1298+ 93BA              ;2 = 2nd left wall
1299+ 93BA              ;1 = 4rd left wall
1300+ 93BA
1301+ 93BA 78                   ld a,b                  ;our current wall counter
1302+ 93BB D6 03                sub 3
1303+ 93BD C2 C8 93             jp nz,a3                 ;its not wall 1
1304+ 93C0 3E 01                ld a,1
1305+ 93C2 47                   ld b,a
1306+ 93C3 C6 80                add a,128               ;make sure we set a wall!
1307+ 93C5 C3 03 94             jp draw_10             ;jump straight to making an end wall
1308+ 93C8
1309+ 93C8
1310+ 93C8 78           a3:     ld a,b                  ;our current wall counter
1311+ 93C9 D6 02                sub 2
1312+ 93CB C2 D6 93             jp nz,a3_1                 ;its not wall 1
1313+ 93CE 3E 01                ld a,1
1314+ 93D0 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1315+ 93D1 C6 80                add a,128               ;make sure we set a wall!
1316+ 93D3 C3 75 94             jp draw_10_2L	       	;draw the 2nd wall to the right
1317+ 93D6
1318+ 93D6 3E 01        a3_1:   ld a,1
1319+ 93D8 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1320+ 93D9 C6 80                add a,128               ;make sure we set a wall!
1321+ 93DB C3 E7 94             jp draw_10_3L	       	;draw the 2nd wall to the right
1322+ 93DE
1323+ 93DE              ;################################################################
1324+ 93DE
1325+ 93DE
1326+ 93DE              ;now check if we are on the south wall and frig it to draw the
1327+ 93DE              ;walls we need.
1328+ 93DE              ;reg a already contains l
1329+ 93DE
1330+ 93DE              cont_3s:
1331+ 93DE              ;        ld a,l
1332+ 93DE              ;        cp $FA  ;250
1333+ 93DE              ;        jp nz,cont_6
1334+ 93DE              ;        ld l,240                ;fake it that we are at
1335+ 93DE              ;        jp draw_10             ;the south wall
1336+ 93DE
1337+ 93DE
1338+ 93DE 7E           cont_6: ld a,(hl)
1339+ 93DF 17                   rla
1340+ 93E0 DA EF 93             jp c,do_wall3            ;bit 7 (128)
1341+ 93E3
1342+ 93E3                     ; call do_no_wall3         ; otherwise draw no wall
1343+ 93E3
1344+ 93E3              go_back3:
1345+ 93E3                    ;  ld hl,(var4)            ;used for left and right drawing
1346+ 93E3                    ;  add hl,de               ; holds current screen position
1347+ 93E3                    ;  ex de,hl
1348+ 93E3              ;we move the start position of block number 2 to the left of the display
1349+ 93E3              ;and although we overwrite the next block, we can still do the
1350+ 93E3              ;check to see if a block is already drawn.
1351+ 93E3
1352+ 93E3                      ;dec de                  ;move our start print position
1353+ 93E3                      ;dec de                  ;of block 2 back 3 spaces in the
1354+ 93E3 1B                   dec de ;only 1 space back  ;display file
1355+ 93E4 E1                   pop hl
1356+ 93E5 D5                   push de
1357+ 93E6 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1358+ 93EA 19                   add hl,de                ; go left 1 block in the maze
1359+ 93EB D1                   pop de
1360+ 93EC 10 C4                djnz loop11
1361+ 93EE C9                   ret
1362+ 93EF              ;now do the 2nd position
1363+ 93EF
1364+ 93EF
1365+ 93EF
1366+ 93EF              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1367+ 93EF
1368+ 93EF              do_wall3:
1369+ 93EF
1370+ 93EF                      ;check if bit 2 is set as thats an end
1371+ 93EF                      ;and b must then be changed to 1 to stop drawing.
1372+ 93EF
1373+ 93EF              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1374+ 93EF              ;        jr z,draw_10
1375+ 93EF              ;        ld b,1                  ;set b so we exit on return
1376+ 93EF
1377+ 93EF              ;now draw the wall based on bc value
1378+ 93EF              ;wall3_start:
1379+ 93EF
1380+ 93EF
1381+ 93EF 78                   ld a,b			               ;b is the loop count i.e # of walls to draw
1382+ 93F0 D6 03               	sub 3			               ;3 = the wall imediately right
1383+ 93F2 CA 03 94             jp z,draw_10          ;draw an end wall if blockid=16
1384+ 93F5
1385+ 93F5 78                   ld a,b
1386+ 93F6 D6 02                sub 2
1387+ 93F8 CA 75 94             jp z,draw_10_2L         		;draw the 1st wall to the right
1388+ 93FB
1389+ 93FB 78                   ld a,b
1390+ 93FC D6 01                sub 1
1391+ 93FE CA E7 94             jp z,draw_10_3L	       	;draw the 2nd wall to the right
1392+ 9401
1393+ 9401 E1                   pop hl                  ;nothing to draw so return
1394+ 9402 C9                   ret
1395+ 9403
1396+ 9403
1397+ 9403              draw_10:
1398+ 9403 C5                   push bc
1399+ 9404 D5                   push de                 ;save our display pointer
1400+ 9405 1B                   dec de
1401+ 9406 1B                   dec de
1402+ 9407
1403+ 9407 06 08                ld b,8                  ;block is 8 blocks high
1404+ 9409 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1405+ 940C 3E B5                ld a, _mediumwall       ;wall on sides facing us
1406+ 940E 12           loop12: ld (de),a               ; insert the part of the wall.
1407+ 940F 13                   inc de
1408+ 9410 12                   ld (de),a               ; insert the part of the wall.
1409+ 9411 13                   inc de
1410+ 9412 12                   ld (de),a               ; insert the part of the wall.
1411+ 9413 13                   inc de
1412+ 9414 12                   ld (de),a               ; insert the part of the wall.
1413+ 9415 13                   inc de
1414+ 9416 12                   ld (de),a               ; insert the part of the wall.
1415+ 9417 13                   inc de
1416+ 9418 12                   ld (de),a               ; insert the part of the wall.
1417+ 9419 13                   inc de
1418+ 941A 12                   ld (de),a
1419+ 941B 13                   inc de
1420+ 941C 12                   ld (de),a
1421+ 941D 1B                   dec de
1422+ 941E 1B                   dec de
1423+ 941F 1B                   dec de
1424+ 9420 1B                   dec de
1425+ 9421 1B                   dec de
1426+ 9422 1B                   dec de
1427+ 9423 1B                   dec de
1428+ 9424 EB                   ex de,hl
1429+ 9425 19                   add  hl,de              ; advance to the next row of the display file.
1430+ 9426 EB                   ex de,hl
1431+ 9427 10 E5                djnz loop12             ;do this 3 times
1432+ 9429
1433+ 9429                      ;now draw the blank face to the right of the block
1434+ 9429                      ;create first column of right face characters
1435+ 9429 D1                   pop de                  ;back to our original position
1436+ 942A D5                   push de
1437+ 942B 13                   inc de
1438+ 942C 13                   inc de
1439+ 942D 13                   inc de
1440+ 942E 13                   inc de                  ;move ahead 5 spaces in the display (right)
1441+ 942F 13                   inc de
1442+ 9430 13                   inc de
1443+ 9431
1444+ 9431                  ;    inc de
1445+ 9431                  ;    inc de
1446+ 9431                  ;    inc de
1447+ 9431              ;check if the char to our right is a wall block.
1448+ 9431              ;if so, do not draw a black face as we need to hide it or it will
1449+ 9431              ;ovewrite the already drawn block
1450+ 9431              ;jp cont_2
1451+ 9431 1A                   ld a,(de)
1452+ 9432 FE B5                cp _mediumwall        ;is there an already drawn screen block here?
1453+ 9434 C2 3B 94             jp nz,cont_2            ;there is no block so draw black edge
1454+ 9437 D1                   pop de
1455+ 9438 C1                   pop bc
1456+ 9439 18 A8                jr go_back3             ;otherwise quit this draw
1457+ 943B
1458+ 943B EB           cont_2: ex  de,hl
1459+ 943C 11 21 00             ld de,$0021
1460+ 943F
1461+ 943F              ;loop for 2 columns
1462+ 943F
1463+ 943F 06 02                ld b,2                  ; loop 2 times for 2 columns
1464+ 9441 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1465+ 9444 3E 07                ld a,7
1466+ 9446 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1467+ 9449
1468+ 9449              loop12b:
1469+ 9449 C5                   push bc                 ;save count
1470+ 944A 3A 04 FA             ld a,(var1)
1471+ 944D 47                   ld b,a                  ;holds the column height in chars
1472+ 944E 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
1473+ 9450 77                   ld  (hl),a
1474+ 9451
1475+ 9451              loop12a:                   ;we must start at 5 to draw 4 face blocks on right
1476+ 9451 19                   add hl,de
1477+ 9452 3E AF                ld  a,_black      ;triangle sloping to right bottom
1478+ 9454 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1479+ 9455 10 FA                djnz loop12a
1480+ 9457
1481+ 9457
1482+ 9457 3E B0                ld  a,_topcorner1
1483+ 9459 77                   ld  (hl),a
1484+ 945A
1485+ 945A                      ;now change column count
1486+ 945A 3A 04 FA             ld a,(var1)
1487+ 945D D6 02                sub 2                   ;subtract 2
1488+ 945F 32 04 FA             ld (var1),a
1489+ 9462 C1                   pop bc
1490+ 9463
1491+ 9463 2A 13 FA             ld hl,(var5)
1492+ 9466 23                   inc hl                  ;move print position to the right
1493+ 9467 11 21 00             ld de,$21               ;move top of next column down and across 1
1494+ 946A 19                   add hl,de
1495+ 946B 22 13 FA             ld (var5),hl
1496+ 946E
1497+ 946E 10 D9                djnz loop12b
1498+ 9470 D1                   pop de
1499+ 9471 C1                   pop bc
1500+ 9472 C3 E3 93             jp go_back3              ; jump back to main loop
1501+ 9475
1502+ 9475
1503+ 9475              ;#############################################
1504+ 9475              ;     draw the 2nd LEFT block
1505+ 9475              ;#############################################
1506+ 9475
1507+ 9475              draw_10_2L:
1508+ 9475
1509+ 9475 C5                    push bc
1510+ 9476 11 FF C0              ld de, $c110-17          ;start print position of wall
1511+ 9479 D5                   push de
1512+ 947A              ;dont draw a front wall as we never see it.
1513+ 947A
1514+ 947A 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1515+ 947D 19                   add hl,de
1516+ 947E EB                   ex de,hl
1517+ 947F              ;we do not need a front wall for this row as it is never seen.
1518+ 947F              ;below jp code can be removed :) Because a square block here
1519+ 947F              ;is 8 x 8
1520+ 947F
1521+ 947F 13                   inc de                  ;move ahead 1 space in the display (right)
1522+ 9480
1523+ 9480              ;check if the char to our left is a wall block.
1524+ 9480              ;if so, do not draw a black face as we need to hide it or it will
1525+ 9480              ;ovewrite the already drawn block
1526+ 9480 1A                    ld a,(de)
1527+ 9481 FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1528+ 9483 C2 8B 94              jp nz,cont_2r_2L            ;there is no block so draw black edge
1529+ 9486 D1                    pop de
1530+ 9487 C1                    pop bc
1531+ 9488 C3 E3 93              jp go_back3             ;otherwise quit this draw
1532+ 948B
1533+ 948B
1534+ 948B              ;draw the black edge wall
1535+ 948B
1536+ 948B              cont_2r_2L:
1537+ 948B EB                    ex  de,hl
1538+ 948C 11 21 00              ld de,$0021
1539+ 948F
1540+ 948F              ;need to loop 2 times drawing 2 lots of 3 top
1541+ 948F              ;& bottom chars- move down 1after 1st 3 top chars drawn
1542+ 948F              ;
1543+ 948F
1544+ 948F 3E 02                ld a,2
1545+ 9491 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1546+ 9494
1547+ 9494              ;loop for 3 black wall columns
1548+ 9494 3E 07                ld a,7                  ;column start height
1549+ 9496 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1550+ 9499
1551+ 9499 06 03        loop_xL:ld b,3                  ;loop 3 times for 3 columns
1552+ 949B 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1553+ 949E 3E 95                ld a,$95
1554+ 94A0 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1555+ 94A3
1556+ 94A3              loop12br_2L:
1557+ 94A3 C5                   push bc                 ;save count
1558+ 94A4 3A 04 FA             ld a,(var1)             ;column height
1559+ 94A7 47                   ld b,a                  ;holds the column height in chars
1560+ 94A8 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1561+ 94AB F5                   push af                 ;save a for bottom corners
1562+ 94AC 77                   ld  (hl),a
1563+ 94AD
1564+ 94AD              loop12ar_2L:
1565+ 94AD 19                   add hl,de
1566+ 94AE 3E AF                ld  a,_black            ;black wall fill
1567+ 94B0 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1568+ 94B1 10 FA                djnz loop12ar_2L
1569+ 94B3
1570+ 94B3 F1                   pop af                  ;retrivetop corner
1571+ 94B4 3C                   inc a                   ;prep for next top corner
1572+ 94B5 32 05 FA             ld (var2),a             ;re-save it for next corner
1573+ 94B8 C6 02                add a,2;4                 ;get the correct char to print
1574+ 94BA 77                   ld  (hl),a              ;draw the bottom of the wall
1575+ 94BB
1576+ 94BB                      ;now change column count
1577+ 94BB 3A 04 FA             ld a,(var1)
1578+ 94BE C1                   pop bc
1579+ 94BF
1580+ 94BF 2A 13 FA             ld hl,(var5)
1581+ 94C2 23                   inc hl                  ;move print position to the left
1582+ 94C3 22 13 FA             ld (var5),hl
1583+ 94C6
1584+ 94C6 10 DB                djnz loop12br_2L
1585+ 94C8
1586+ 94C8              ;1st set of 3 top bits drawn
1587+ 94C8              ;now jump down the display 1 line
1588+ 94C8              ;then draw another 3 columns
1589+ 94C8
1590+ 94C8 3A 18 FA             ld a,(var7)             ;get our loop counter
1591+ 94CB 3D                   dec a
1592+ 94CC 28 12                jr z,exit_1L             ;exit after 2 loops
1593+ 94CE 32 18 FA             ld (var7),a             ;save it
1594+ 94D1 2A 13 FA             ld hl,(var5)
1595+ 94D4              ;get our last print position
1596+ 94D4                                              ;need to go to next line -1 char
1597+ 94D4 19                   add hl,de
1598+ 94D5                                              ; now move back in the display
1599+ 94D5                                              ;1 char
1600+ 94D5 22 13 FA             ld (var5),hl            ;re save it for use above
1601+ 94D8
1602+ 94D8 3E 05                ld a,5                  ;reduce black wall column height
1603+ 94DA 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1604+ 94DD
1605+ 94DD C3 99 94             jp loop_xL
1606+ 94E0
1607+ 94E0
1608+ 94E0 D1           exit_1L: pop de
1609+ 94E1 C1                   pop bc
1610+ 94E2 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1611+ 94E4
1612+ 94E4 C3 E3 93             jp go_back3              ; jump back to main loop
1613+ 94E7
1614+ 94E7              ;#############################################
1615+ 94E7              ;*Draw the 3rd LEFT block of section3
1616+ 94E7              ;#############################################
1617+ 94E7
1618+ 94E7              ; we only need to draw 2 columns of black sides.
1619+ 94E7              ; if theres no brick pattern !
1620+ 94E7
1621+ 94E7              draw_10_3L:
1622+ 94E7 C5                   push bc
1623+ 94E8 D5                   push de                 ;save our display pointer
1624+ 94E9
1625+ 94E9 21 29 C1             ld hl,$C18C-66-30-3              ;start of drawing
1626+ 94EC 7E                   ld a,(hl)               ;read what char is there
1627+ 94ED FE B5                cp _mediumwall
1628+ 94EF 20 05                jr nz,cont_1r_4L        ;exit if a wall is already there
1629+ 94F1 D1                   pop de
1630+ 94F2 C1                   pop bc
1631+ 94F3 C3 D6 91             jp go_back4             ;otherwise quit this draw
1632+ 94F6
1633+ 94F6              cont_1r_4L:
1634+ 94F6
1635+ 94F6 3E C9                ld a,$c9
1636+ 94F8 77                   ld (hl),a
1637+ 94F9
1638+ 94F9 3E AF                ld a,_black
1639+ 94FB 11 21 00             ld de,33                ;1 line width
1640+ 94FE
1641+ 94FE CD 0A 95             CALL black_wall         ;draw 4 black blocks
1642+ 9501
1643+ 9501 19                   add hl,de               ;jump to next line below
1644+ 9502
1645+ 9502
1646+ 9502              ;top half done - so do bottom half - 2 blacks first
1647+ 9502
1648+ 9502              ;de already holds 32
1649+ 9502
1650+ 9502 3E CE                ld a,$ce
1651+ 9504 77                   ld (hl),a
1652+ 9505
1653+ 9505 D1                   pop de
1654+ 9506 C1                   pop bc
1655+ 9507 C3 E3 93             jp go_back3
1656+ 950A
1657+ 950A              ;draw 2 black walls across 1 line
1658+ 950A              black_wall:
1659+ 950A 19                   add hl,de      ;jump 1 line below
1660+ 950B 77                   ld (hl),a
1661+ 950C 19                   add hl,de      ;jump 1 line below
1662+ 950D 77                   ld (hl),a
1663+ 950E 19                   add hl,de      ;jump 1 line below
1664+ 950F 77                   ld (hl),a
1665+ 9510 19                   add hl,de      ;jump 1 line below
1666+ 9511 77                   ld (hl),a
1667+ 9512
1668+ 9512
1669+ 9512 C9                   ret
1670+ 9513
1671+ 9513
1672+ 9513
1673+ 9513              ;#############################################
1674+ 9513              ;#############################################
1675+ 9513              ; draw 2nd layer
1676+ 9513              ;#############################################
1677+ 9513              ;#############################################
1678+ 9513
1679+ 9513              draw_2:
1680+ 9513              ;
1681+ 9513              ;ret
1682+ 9513              ; hl=maze location being drawn.
1683+ 9513              ; now determine what to draw for this section.
1684+ 9513
1685+ 9513
1686+ 9513 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1687+ 9516
1688+ 9516 CD 24 8E             call load_de            ;get left and right and front jump into de reg
1689+ 9519
1690+ 9519 19                   add hl,de               ;jump backwards along the user view 1 space
1691+ 951A 22 25 FA             ld (furthest_point),hl ;re save it
1692+ 951D
1693+ 951D 11 FF FF             ld de,$ffff             ;to move the display position -1
1694+ 9520 ED 53 11 FA          ld (var4),de
1695+ 9524
1696+ 9524 ED 5B 0B FA          ld de,(left)
1697+ 9528
1698+ 9528              ;we need to move pointer 1 to the left for wall checking
1699+ 9528 19                   add hl,de
1700+ 9529 22 15 FA             ld (var6),hl ;re save it
1701+ 952C
1702+ 952C ED 53 0F FA          ld (var3),de
1703+ 9530
1704+ 9530 11 A4 00             ld  de,$a4           ; offset to row10 column 7 - left of  centre of the 3d view.
1705+ 9533 CD 39 95             call do_draw_2
1706+ 9536
1707+ 9536 C3 CB 95             jp draw_1           ;now draw the 2nd level
1708+ 9539
1709+ 9539              do_draw_2:
1710+ 9539
1711+ 9539 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
1712+ 953C 19                   add  hl,de
1713+ 953D
1714+ 953D
1715+ 953D              ; draw left half then right half of the display.
1716+ 953D
1717+ 953D 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1718+ 953F                                              ; 0 is not counted so loops 12 times
1719+ 953F ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1720+ 9543 EB                   ex   de,hl              ; transfer de to hl.
1721+ 9544
1722+ 9544              ;       hl = furthest point in the maze
1723+ 9544              ;       de = d_file location to store byte to display
1724+ 9544
1725+ 9544 E5           loop14: push hl
1726+ 9545
1727+ 9545              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1728+ 9545
1729+ 9545 3A 28 FA             ld a,(maze_highbyte)
1730+ 9548 BC                   cp h                    ;are we at the top part of the maze?
1731+ 9549 CA 54 95             jp z,cont_2s
1732+ 954C                                              ;if we are on a different maze boundary
1733+ 954C                                              ;then draw a maze wall as we are the top
1734+ 954C                                              ;or north wall but maze data has no
1735+ 954C                                              ;wall data.
1736+ 954C
1737+ 954C 3E 01                ld a,1
1738+ 954E 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1739+ 954F C6 7F                add a,127               ;make sure we set a wall!
1740+ 9551 C3 69 95             jp do_wall2             ;jump straight to making an end wall
1741+ 9554
1742+ 9554              ;*#########################################
1743+ 9554              cont_2s:
1744+ 9554 7E                   ld a,(hl)
1745+ 9555 17                   rla
1746+ 9556 DA 69 95             jp c,do_wall2            ;bit 7 (128)
1747+ 9559
1748+ 9559                     ; call do_no_wall2         ; otherwise draw no wall
1749+ 9559
1750+ 9559              go_back2:
1751+ 9559 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1752+ 955C 19                   add hl,de               ; holds current screen position
1753+ 955D EB                   ex de,hl
1754+ 955E E1                   pop hl
1755+ 955F D5                   push de
1756+ 9560 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1757+ 9564 19                   add hl,de                ; go left 1 block in the maze
1758+ 9565 D1                   pop de
1759+ 9566 10 DC                djnz loop14
1760+ 9568 C9                   ret
1761+ 9569              ;now do the 2nd position
1762+ 9569
1763+ 9569
1764+ 9569              do_wall2:
1765+ 9569                      ;check if bit 2 is set as thats an end
1766+ 9569                      ;and b must then be changed to 1 to stop drawing.
1767+ 9569
1768+ 9569 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1769+ 956B 28 02                jr z,draw_11
1770+ 956D 06 01                ld b,1                  ;set b so we exit on return
1771+ 956F
1772+ 956F              draw_11:
1773+ 956F                                   ; draw the wall face bit
1774+ 956F C5                   push bc
1775+ 9570 D5                   push de
1776+ 9571 13                   inc de
1777+ 9572                                     ;save our display pointer
1778+ 9572 06 0E                ld b,14                  ;block is 14 blocks high
1779+ 9574 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1780+ 9577 3E B6                ld   a,_largewall            ;wall on sides facing us
1781+ 9579              loop13:
1782+ 9579 12                   ld (de),a             ; insert the part of the wall.
1783+ 957A 13                   inc de
1784+ 957B 12                   ld (de),a               ;put grey side to our right
1785+ 957C 13                   inc de
1786+ 957D 12                   ld (de),a               ;put grey side to our right
1787+ 957E 13                   inc de
1788+ 957F 12                   ld (de),a               ;put grey side to our right
1789+ 9580 13                   inc de
1790+ 9581 12                   ld (de),a               ;put grey side to our right
1791+ 9582 1B                   dec de
1792+ 9583 1B                   dec de
1793+ 9584 1B                   dec de
1794+ 9585 1B                   dec de
1795+ 9586 EB                   ex de,hl
1796+ 9587 19                   add  hl,de              ; advance to the next row of the display file.
1797+ 9588 EB                   ex de,hl
1798+ 9589 10 EE                djnz loop13             ;do this 3 times
1799+ 958B
1800+ 958B                      ;now draw the blank face to the right of the block
1801+ 958B                      ;create first column of right face characters
1802+ 958B D1                   pop de                  ;back to our original position
1803+ 958C 13                   inc de
1804+ 958D 13                   inc de
1805+ 958E 13                   inc de                  ;move ahead 6 spaces in the display (right)
1806+ 958F 13                   inc de
1807+ 9590 13                   inc de
1808+ 9591 13                   inc de
1809+ 9592 EB                   ex  de,hl
1810+ 9593 11 21 00             ld de,$0021
1811+ 9596
1812+ 9596 06 03                ld b,3                  ; for 8 face columns to draw to draw
1813+ 9598 22 13 FA             ld (var5),hl
1814+ 959B 3E 0D                ld a,13                 ; for 14 blocks high per column
1815+ 959D 32 04 FA             ld (var1),a
1816+ 95A0
1817+ 95A0              loop13b:
1818+ 95A0 C5                   push bc
1819+ 95A1 3A 04 FA             ld a,(var1)
1820+ 95A4 47                   ld b,a
1821+ 95A5 3E B3                ld a,_topcorner4
1822+ 95A7 77                   ld (hl),a
1823+ 95A8
1824+ 95A8              loop13a:
1825+ 95A8 19                   add hl,de
1826+ 95A9 3E AF                ld  a,_black  ;leftinnerwall  ;black      ;triangle sloping to right bottom
1827+ 95AB 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1828+ 95AC 10 FA                djnz loop13a
1829+ 95AE
1830+ 95AE                      ;ld  (hl),a
1831+ 95AE 3E B0                ld  a,_topcorner1
1832+ 95B0 77                   ld  (hl),a
1833+ 95B1
1834+ 95B1              ; now change the column count
1835+ 95B1 3A 04 FA             ld a,(var1)
1836+ 95B4 D6 02                sub 2
1837+ 95B6 32 04 FA             ld (var1),a
1838+ 95B9 C1                   pop bc
1839+ 95BA
1840+ 95BA 2A 13 FA             ld hl,(var5)
1841+ 95BD 23                   inc hl
1842+ 95BE 11 21 00             ld de,$21
1843+ 95C1 19                   add hl,de
1844+ 95C2 22 13 FA             ld (var5),hl
1845+ 95C5
1846+ 95C5 10 D9                djnz loop13b
1847+ 95C7
1848+ 95C7 C1                   pop bc
1849+ 95C8 C3 59 95             jp go_back2              ; jump back to main loop
1850+ 95CB
1851+ 95CB
1852+ 95CB              ;#############################################
1853+ 95CB              ; draw 1st layer
1854+ 95CB              ;#############################################
1855+ 95CB
1856+ 95CB              draw_1:
1857+ 95CB
1858+ 95CB              ;ret
1859+ 95CB              ; hl=maze location being drawn.
1860+ 95CB              ; now determine what to draw for this section.
1861+ 95CB
1862+ 95CB
1863+ 95CB 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1864+ 95CE
1865+ 95CE CD 24 8E             call load_de            ;get left and right and front jump into de reg
1866+ 95D1
1867+ 95D1 19                   add hl,de               ;jump backwards along the user view 1 space
1868+ 95D2 22 25 FA             ld (furthest_point),hl ;re save it
1869+ 95D5
1870+ 95D5 11 FF FF             ld de,$ffff             ;to move the display position -1
1871+ 95D8 ED 53 11 FA          ld (var4),de
1872+ 95DC
1873+ 95DC ED 5B 0B FA          ld de,(left)
1874+ 95E0
1875+ 95E0              ;we need to move pointer 1 to the left for wall checking
1876+ 95E0 19                   add hl,de
1877+ 95E1 22 15 FA             ld (var6),hl
1878+ 95E4
1879+ 95E4 ED 53 0F FA          ld (var3),de
1880+ 95E8 11 20 00             ld  de,$020           ; offset to row 1 column 0 - left of  centre of the 3d view.
1881+ 95EB CD F1 95             call do_draw_1
1882+ 95EE
1883+ 95EE C3 74 96             jp draw_0           ;now draw the 2nd level
1884+ 95F1
1885+ 95F1              do_draw_1:
1886+ 95F1
1887+ 95F1 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
1888+ 95F4 19                   add  hl,de
1889+ 95F5
1890+ 95F5
1891+ 95F5              ; draw left half then right half of the display.
1892+ 95F5
1893+ 95F5 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1894+ 95F7                                              ; 0 is not counted so loops 12 times
1895+ 95F7 ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1896+ 95FB EB                   ex   de,hl              ; transfer de to hl.
1897+ 95FC
1898+ 95FC              ;       hl = furthest point in the maze
1899+ 95FC              ;       de = d_file location to store byte to display
1900+ 95FC
1901+ 95FC E5           loop15: push hl
1902+ 95FD
1903+ 95FD              ;see if we are at the north wall. If we dont, we get a left wall
1904+ 95FD              ;drawn because we implicitly draw a wall if we are at the top
1905+ 95FD
1906+ 95FD              ;        ld a,(player_dir)
1907+ 95FD              ;        cp 2                    ;r we looking south
1908+ 95FD              ;        jp z,cont_7
1909+ 95FD              ;        ld a,l
1910+ 95FD              ;        cp 17
1911+ 95FD              ;        jp c,do_wall1
1912+ 95FD
1913+ 95FD              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1914+ 95FD
1915+ 95FD 3A 28 FA             ld a,(maze_highbyte)
1916+ 9600 BC                   cp h                    ;are we at the top part of the maze?
1917+ 9601 CA 0C 96             jp z,cont_7
1918+ 9604                                              ;if we are on a different maze boundary
1919+ 9604                                              ;then draw a maze wall as we are the top
1920+ 9604                                              ;or north wall but maze data has no
1921+ 9604                                              ;wall data.
1922+ 9604
1923+ 9604 3E 01                ld a,1
1924+ 9606 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1925+ 9607 C6 7F                add a,127               ;make sure we set a wall!
1926+ 9609 C3 21 96             jp do_wall1             ;jump straight to making an end wall
1927+ 960C
1928+ 960C              ;#########################################################
1929+ 960C
1930+ 960C 7E           cont_7: ld a,(hl)
1931+ 960D 17                   rla
1932+ 960E DA 21 96             jp c,do_wall1            ;bit 7 (128)
1933+ 9611
1934+ 9611                     ; call do_no_wall1         ; otherwise draw no wall
1935+ 9611
1936+ 9611              go_back1:
1937+ 9611 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1938+ 9614 19                   add hl,de               ; holds current screen position
1939+ 9615 EB                   ex de,hl
1940+ 9616 E1                   pop hl
1941+ 9617 D5                   push de
1942+ 9618 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1943+ 961C 19                   add hl,de                ; go left 1 block in the maze
1944+ 961D D1                   pop de
1945+ 961E 10 DC                djnz loop15
1946+ 9620
1947+ 9620              ;jp draw_0
1948+ 9620 C9                   ret
1949+ 9621              ;now do the 2nd position
1950+ 9621
1951+ 9621
1952+ 9621
1953+ 9621              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1954+ 9621
1955+ 9621              do_wall1:
1956+ 9621                      ;check if bit 2 is set as thats an end
1957+ 9621                      ;and b must then be changed to 1 to stop drawing.
1958+ 9621
1959+ 9621 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1960+ 9623 28 02                jr z,draw_12
1961+ 9625 06 01                ld b,1                  ;set b so we exit on return
1962+ 9627
1963+ 9627              ;draw the corridor bit to the left (1 column)
1964+ 9627              draw_12:
1965+ 9627 C5                   push bc
1966+ 9628 D5                   push de                 ;save our display pointer
1967+ 9629 06 16                ld b,22                  ;block is 22 blocks high
1968+ 962B 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1969+ 962E 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1970+ 9630 12           loop16: ld   (de),a             ; insert thepart of the wall.
1971+ 9631 13                   inc de
1972+ 9632 12                   ld (de),a               ;put grey side to our right
1973+ 9633                      ;inc de
1974+ 9633                      ;ld (de),a               ;put grey side to our right
1975+ 9633                      ;inc de
1976+ 9633                      ;ld (de),a               ;put grey side to our right
1977+ 9633                      ;inc de
1978+ 9633                      ;ld (de),a               ;put grey side to our right
1979+ 9633                      ;dec de
1980+ 9633                      ;dec de
1981+ 9633                      ;dec de
1982+ 9633 1B                   dec de
1983+ 9634 EB                   ex de,hl
1984+ 9635 19                   add  hl,de              ; advance to the next row of the display file.
1985+ 9636 EB                   ex de,hl
1986+ 9637 10 F7                djnz loop16             ;do this 3 times
1987+ 9639
1988+ 9639                      ;now draw the blank face to the right of the block
1989+ 9639                      ;create first column of right face characters
1990+ 9639 D1                   pop de                  ;back to our original position
1991+ 963A                      ;inc de
1992+ 963A                      ;inc de
1993+ 963A                      ;inc de                  ;move ahead 4 spaces in the display (right)
1994+ 963A 13                   inc de
1995+ 963B 13                   inc de
1996+ 963C EB                   ex  de,hl
1997+ 963D 11 21 00             ld de,$0021
1998+ 9640
1999+ 9640              ;now draw the face we see on our left as we walk forward
2000+ 9640 06 04                ld b,4                  ; for 8 face columns to draw to draw
2001+ 9642 22 13 FA             ld (var5),hl
2002+ 9645 3E 15                ld a,21                 ; for 14 blocks high per column
2003+ 9647 32 04 FA             ld (var1),a
2004+ 964A
2005+ 964A              loop14b:
2006+ 964A C5                   push bc
2007+ 964B 3A 04 FA             ld a,(var1)
2008+ 964E 47                   ld b,a
2009+ 964F 3E B3                ld a,_topcorner4
2010+ 9651 77                   ld (hl),a
2011+ 9652
2012+ 9652              loop14a:
2013+ 9652 19                   add hl,de
2014+ 9653 3E AF                ld  a,_black            ;triangle sloping to right bottom
2015+ 9655 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
2016+ 9656 10 FA                djnz loop14a
2017+ 9658
2018+ 9658                      ;ld  (hl),a
2019+ 9658 3E B0                ld  a,_topcorner1
2020+ 965A 77                   ld  (hl),a
2021+ 965B
2022+ 965B              ; now change the column count
2023+ 965B 3A 04 FA             ld a,(var1)
2024+ 965E D6 02                sub 2
2025+ 9660 32 04 FA             ld (var1),a
2026+ 9663 C1                   pop bc
2027+ 9664
2028+ 9664 2A 13 FA             ld hl,(var5)
2029+ 9667 23                   inc hl
2030+ 9668 11 21 00             ld de,$21
2031+ 966B 19                   add hl,de
2032+ 966C 22 13 FA             ld (var5),hl
2033+ 966F
2034+ 966F 10 D9                djnz loop14b
2035+ 9671
2036+ 9671 C1                   pop bc
2037+ 9672 18 9D                jr go_back1              ; jump back to main loop
2038+ 9674
2039+ 9674              ;        jp draw_1               ;draw next layer
2040+ 9674
2041+ 9674              ; there is a wall so insert chequerboard for the wall face.
2042+ 9674
2043+ 9674              ;do_no_wall1:
2044+ 9674              ;        ret ; no wall so do nothing
2045+ 9674              ;        push de
2046+ 9674              ;        ld   a,_topwhitebottomchequer
2047+ 9674              ;        ld   (de),a                             ; insert the top of the wall face.
2048+ 9674              ;        ld   hl,$0021
2049+ 9674              ;        add  hl,de                              ; advance to the next row of the display file.
2050+ 9674              ;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
2051+ 9674              ;        pop de
2052+ 9674              ;        ret
2053+ 9674
2054+ 9674
2055+ 9674
2056+ 9674
2057+ 9674              ;#############################################
2058+ 9674              ; draw layer 0
2059+ 9674              ;#############################################
2060+ 9674
2061+ 9674              draw_0:
2062+ 9674              ;ret
2063+ 9674
2064+ 9674
2065+ 9674              ; hl=maze location being drawn.
2066+ 9674              ; now determine what to draw for this section.
2067+ 9674
2068+ 9674
2069+ 9674 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
2070+ 9677
2071+ 9677 CD 24 8E             call load_de            ;get left and right and front jump into de reg
2072+ 967A
2073+ 967A 19                   add hl,de               ;jump backwards along the user view 1 space
2074+ 967B
2075+ 967B              ;move map pointer left to read the walls
2076+ 967B              ;;        ld de,(left)
2077+ 967B              ;;        add hl,de
2078+ 967B
2079+ 967B
2080+ 967B
2081+ 967B              ;;        ld (furthest_point),hl ;re save it
2082+ 967B
2083+ 967B              ;        ld de,$ffff             ;to move the display position -1
2084+ 967B              ;        ld (var4),de
2085+ 967B
2086+ 967B ED 5B 0B FA          ld de,(left)
2087+ 967F
2088+ 967F              ;we need to move pointer 1 to the left for wall checking
2089+ 967F 19                   add hl,de
2090+ 9680 22 15 FA             ld (var6),hl
2091+ 9683
2092+ 9683 ED 53 0F FA          ld (var3),de
2093+ 9687 11 00 00             ld  de,$00              ;offset to row0 column 0 - left of  centre of the 3d view.
2094+ 968A                                              ;1 column of left face to draw
2095+ 968A                  ;    call do_draw_0
2096+ 968A
2097+ 968A
2098+ 968A              do_draw_0:
2099+ 968A
2100+ 968A 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
2101+ 968D 19                   add  hl,de
2102+ 968E
2103+ 968E
2104+ 968E              ; draw left half then right half of the display.
2105+ 968E
2106+ 968E 06 01                ld b,1                 ; count for 2 blocks left or right of display file
2107+ 9690 ED 5B 15 FA          ld de,(var6)           ; 0 is not counted so loops 12 times
2108+ 9694                     ; ld   de,(furthest_point); retrieve the maze location.
2109+ 9694 EB                   ex   de,hl              ; transfer de to hl.
2110+ 9695
2111+ 9695              ;       hl = furthest point in the maze
2112+ 9695              ;       de = d_file location to store byte to display
2113+ 9695
2114+ 9695              loop17: ;push hl
2115+ 9695
2116+ 9695
2117+ 9695              ;check if we are at the north wall
2118+ 9695
2119+ 9695              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
2120+ 9695
2121+ 9695 3A 28 FA             ld a,(maze_highbyte)
2122+ 9698 BC                   cp h                    ;are we at the top part of the maze?
2123+ 9699 CA A4 96             jp z,cont_4
2124+ 969C                                              ;if we are on a different maze boundary
2125+ 969C                                              ;then draw a maze wall as we are the top
2126+ 969C                                              ;or north wall but maze data has no
2127+ 969C                                              ;wall data.
2128+ 969C
2129+ 969C 3E 01                ld a,1
2130+ 969E 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
2131+ 969F C6 7F                add a,127               ;make sure we set a wall!
2132+ 96A1 C3 B2 96             jp draw_13             ;jump straight to making an end wall
2133+ 96A4
2134+ 96A4              ;##########################################
2135+ 96A4
2136+ 96A4 7E           cont_4: ld a,(hl)
2137+ 96A5 17                   rla
2138+ 96A6 DA AA 96             jp c,do_wall0            ;bit 7 (128)
2139+ 96A9
2140+ 96A9 C9                   ret
2141+ 96AA
2142+ 96AA
2143+ 96AA
2144+ 96AA              do_wall0:
2145+ 96AA                      ;check if bit 2 is set as thats an end
2146+ 96AA                      ;and b must then be changed to 1 to stop drawing.
2147+ 96AA
2148+ 96AA CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
2149+ 96AC DA B2 96             jp c,draw_13
2150+ 96AF
2151+ 96AF C3 CB 96             jp draw_brick_l         ; otherwise draw no wall
2152+ 96B2
2153+ 96B2              ;we need to draw 1 vertical line from pos 1,1 to show
2154+ 96B2              ;the side of the block.
2155+ 96B2
2156+ 96B2              ;draw the sidewall brick pattern
2157+ 96B2              draw_13:
2158+ 96B2 3E B3                ld a,_topcorner4
2159+ 96B4 12                   ld (de),a
2160+ 96B5 21 21 00             ld hl,$21                ;jp to next line below
2161+ 96B8 19                   add hl,de
2162+ 96B9 EB                   ex de,hl
2163+ 96BA
2164+ 96BA 06 16                ld b,22                  ;block is 24 blocks high
2165+ 96BC 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
2166+ 96BF 3E AF                ld a,_black            ;wall on sides facing us;
2167+ 96C1 12           loop18: ld (de),a             ; insert the part of the wall.
2168+ 96C2 EB                   ex de,hl
2169+ 96C3 19                   add  hl,de              ; advance to the next row of the display file.
2170+ 96C4 EB                   ex de,hl
2171+ 96C5 10 FA                djnz loop18
2172+ 96C7
2173+ 96C7 3E B0                ld a,_topcorner1
2174+ 96C9 12                   ld (de),a
2175+ 96CA C9                   ret
2176+ 96CB
2177+ 96CB              draw_brick_l:
2178+ 96CB 21 21 00             ld hl,$21                ;jp to next line below
2179+ 96CE 19                   add hl,de
2180+ 96CF EB                   ex de,hl
2181+ 96D0
2182+ 96D0 06 16                ld b,22                  ;block is 24 blocks high
2183+ 96D2 21 21 00             ld hl,$021
2184+ 96D5                                         ;load with 32 to jump to line below us
2185+ 96D5 3E B8                ld a,_hugewall;_largewall            ;wall on sides facing us;
2186+ 96D7              loop18l:
2187+ 96D7 12                   ld (de),a             ; insert the part of the wall.
2188+ 96D8 EB                   ex de,hl
2189+ 96D9 19                   add  hl,de              ; advance to the next row of the display file.
2190+ 96DA EB                   ex de,hl
2191+ 96DB 10 FA                djnz loop18l
2192+ 96DD
2193+ 96DD C9                   ret
2194+ 96DE
# file closed: src/4-rd3dmazeV6.asm
 450  96DE                  INCLUDE "5-rd3dmazeV6.asm" ; draw wall in front of player+setup right part of screen
# file opened: src/5-rd3dmazeV6.asm
   1+ 96DE
   2+ 96DE
   3+ 96DE              ;#############################################
   4+ 96DE              ;original code to draw maze FRONT walls here from 3D Monster Maze
   5+ 96DE              ;call it a homage ;)
   6+ 96DE              ;#############################################
   7+ 96DE
   8+ 96DE
   9+ 96DE              ; ############################
  10+ 96DE              ; draw wall in front of player
  11+ 96DE              ; ############################
  12+ 96DE
  13+ 96DE              ; a wall face must be drawn centred within the view.
  14+ 96DE              ; the wall face is one character wider than it is high.
  15+ 96DE
  16+ 96DE              draw_front_view:
  17+ 96DE
  18+ 96DE              ;        ld a,(depth)            ;find out how far we can see - will never be higher than 6
  19+ 96DE 3A 02 FA             ld a, (maxview)
  20+ 96E1 FE 06                cp 6
  21+ 96E3 C8                   ret z				               ;too far away so return doing nothing
  22+ 96E4 FE 05        	    cp 5
  23+ 96E6 C8                   ret z
  24+ 96E7 C2 F4 96             jp nz,set4
  25+ 96EA 0E 0D                ld c,13;12
  26+ 96EC 3E B4        		ld a,_smallwall			      ;this is the character to draw (brick pattern)
  27+ 96EE 32 04 FA     		ld (var1),a
  28+ 96F1 C3 37 97             jp draw_wall
  29+ 96F4 FE 04        set4:   cp 4
  30+ 96F6 C2 03 97             jp nz,set3
  31+ 96F9 0E 0B                ld c,11
  32+ 96FB 3E B4        		ld a,_smallwall 			     ;this is the character to draw (brick pattern)
  33+ 96FD 32 04 FA     		ld (var1),a
  34+ 9700 C3 37 97             jp draw_wall
  35+ 9703 FE 03        set3:   cp 3
  36+ 9705 C2 12 97             jp nz,set2
  37+ 9708 0E 0A                ld c,10
  38+ 970A 3E B7        		ld a,_mediumwall_1			   ;this is the character to draw (brick pattern)
  39+ 970C 32 04 FA     		ld (var1),a
  40+ 970F C3 37 97             jp draw_wall
  41+ 9712 FE 02        set2:   cp 2
  42+ 9714 C2 21 97             jp nz,set1
  43+ 9717 0E 08                ld c,8
  44+ 9719 3E B5        		ld a,_mediumwall			      ;this is the character to draw (brick pattern)
  45+ 971B 32 04 FA     		ld (var1),a
  46+ 971E C3 37 97             jp draw_wall
  47+ 9721 FE 01        set1:   cp 1
  48+ 9723 C2 30 97             jp nz,set0
  49+ 9726 0E 05                ld c,5
  50+ 9728 3E B6        		ld a,_largewall			      ;this is the character to draw (brick pattern)
  51+ 972A 32 04 FA     		ld (var1),a
  52+ 972D C3 37 97             jp draw_wall
  53+ 9730              ;must be zero if we get here
  54+ 9730 0E 01        set0:   ld c,1
  55+ 9732 3E B8                ld a,_hugewall;_largewall
  56+ 9734 32 04 FA             ld (var1),a
  57+ 9737
  58+ 9737              draw_wall:
  59+ 9737              ;ld c,1 ;section from player
  60+ 9737
  61+ 9737 2A 74 81     l49f6:  ld   hl,(d_file)                        ; fetch the location of the display file.
  62+ 973A 11 21 00             ld   de,$0021                           ; each row is 33 characters wide.
  63+ 973D
  64+ 973D              ;        ld   bc,(l4085)                         ; fetch the details for the section: b=width of section, c=distance of section from player.
  65+ 973D 06 00                ld   b,$00
  66+ 973F 09                   add  hl,bc                              ; advance across the screen to the current distance of the wall.
  67+ 9740
  68+ 9740 3E 19                ld   a,$19                              ; the width of the view.
  69+ 9742 41                   ld   b,c                                ; fetch the distance.
  70+ 9743 CB 20                sla  b                                  ; multiply the distance by 2 since the wall be spans to the left and right of the centre column of the view.
  71+ 9745 90                   sub  b                                  ; determine the width of the wall face.
  72+ 9746 47                   ld   b,a                                ; b=width of the wall face (it will be an odd number of characters).
  73+ 9747
  74+ 9747 D6 01                sub  $01                                ; determine the wall height (it will be an even number of characters).
  75+ 9749
  76+ 9749              ; enter a loop to draw each column of the wall face.
  77+ 9749
  78+ 9749 C5           l4a0d:  push bc                                 ; save the wall face width.
  79+ 974A E5                   push hl                                 ; save the address within the display file.
  80+ 974B
  81+ 974B 41                   ld   b,c                                ; fetch the distance, which corresponds to the number of blank rows to show above the wall face.
  82+ 974C
  83+ 974C 36 20        l4a10:  ld   (hl),_space                        ; insert a space above the wall face.
  84+ 974E 19                   add  hl,de                              ; advance to the next row.
  85+ 974F 10 FB                djnz l4a10                              ; repeat for all rows above the wall face.
  86+ 9751
  87+ 9751 47                   ld   b,a                                ; fetch the wall height.
  88+ 9752
  89+ 9752 F5           l4a16:  push af
  90+ 9753 3A 04 FA     		ld a,(var1)
  91+ 9756 77           		ld   (hl),a                             ; insert a wall face character into the display file.
  92+ 9757 F1                   pop af
  93+ 9758 19           		      add  hl,de                              ; advance to the next row.
  94+ 9759 10 F7                djnz l4a16                              ; repeat for all rows forming the height of the wall face.
  95+ 975B
  96+ 975B 41                   ld   b,c                                ; fetch the distance, which corresponds the the number of blank rows to show above the wall face.
  97+ 975C 05                   dec  b                                  ; there is one less blank row below the wall face than above it due to the status message row.
  98+ 975D 28 05                jr   z,l4a24                            ; jump if there are no rows below the wall to blank.
  99+ 975F
 100+ 975F 36 20        l4a1f:  ld   (hl),_space                        ; insert a space below the wall face.
 101+ 9761 19                   add  hl,de                              ; advance to the next row.
 102+ 9762 10 FB                djnz l4a1f                              ; repeat for all rows below the wall face.
 103+ 9764
 104+ 9764 E1           l4a24:  pop  hl                                 ; retrieve the address within the display file.
 105+ 9765 23                   inc  hl                                 ; advance to the next column to the right.
 106+ 9766
 107+ 9766 C1                   pop  bc                                 ; retrieve the wall face width.
 108+ 9767 10 E0                djnz l4a0d                              ; repeat for all columns of the wall face.
 109+ 9769
 110+ 9769              ;call my_print
 111+ 9769 C9                   ret
 112+ 976A
 113+ 976A              ;#################################################################
 114+ 976A              ;#################################################################
 115+ 976A              ; draw maze end walls left and right of the player view
 116+ 976A              ;#################################################################
 117+ 976A              ;#################################################################
 118+ 976A
 119+ 976A              ;we will just copy parts of the front wall left and right on the screen
 120+ 976A              ;depending if theres a side wall or not. No side wall, do nothing!
 121+ 976A
 122+ 976A              draw_side_walls
 123+ 976A
 124+ 976A              ;1st we need to know if the front view is a side wallsurrounding the maze
 125+ 976A              ;this is $81 (129) if its a side wall
 126+ 976A
 127+ 976A              ;so we have an end wall here!
 128+ 976A
 129+ 976A              ;1st, check if maxdepth =4 or less. We do not want to draw anything for
 130+ 976A              ;depth 5 or 6
 131+ 976A
 132+ 976A B7                   or a                    ;clear carry flag
 133+ 976B 3A 02 FA             ld a,(maxview)          ;how far we can see in front of us
 134+ 976E FE 05                cp 5
 135+ 9770 D0                   ret nc                  ;exit if its 5 or greater
 136+ 9771                                              ;carry set if <5
 137+ 9771
 138+ 9771              ;now check if maxview and depth are the same as this indicates a side wall
 139+ 9771              ;reg a already contains maxview
 140+ 9771              ;#        ld b,a
 141+ 9771              ;#        ld a,(depth)
 142+ 9771              ;#        sub b                   ;should be 0 if the same
 143+ 9771              ;#        ret nz                  ;exit if different
 144+ 9771
 145+ 9771              ;now we cheat :) we just keep copying lines of the wall left & right
 146+ 9771              ;untill we hit a non space in the display file!
 147+ 9771
 148+ 9771              ;reg a contains our depth
 149+ 9771              ;        ld a,(maxview)
 150+ 9771 3A 06 FA             ld a,(depth)
 151+ 9774
 152+ 9774 FE 00                cp 0
 153+ 9776                      ;depth 1
 154+ 9776 CA 8E 97             jp z,cp_wall_1          ;wall immediately in front of us
 155+ 9779 FE 01                cp 1
 156+ 977B                      ;depth 2
 157+ 977B CA B8 97             jp z,cp_wall_2
 158+ 977E FE 02                cp 2
 159+ 9780                      ;depth 3
 160+ 9780 CA 00 98             jp z,cp_wall_3
 161+ 9783 FE 03                cp 3
 162+ 9785                      ;depth 4
 163+ 9785 CA 48 98             jp z,cp_wall_4
 164+ 9788 FE 04                cp 4
 165+ 978A                      ;depth 5
 166+ 978A CA 93 98             jp z,cp_wall_5
 167+ 978D C9                   ret                     ;go back now
 168+ 978E
 169+ 978E              cp_wall_1:
 170+ 978E              ;do left side first - check for char A3 (black block for maze wall at a distance
 171+ 978E
 172+ 978E 21 4A C1             ld hl,$c14a             ;we should be 10 lines down(10,0)
 173+ 9791 7E                   ld a,(hl)               ;check our character
 174+ 9792 FE 20                cp ' '                  ;should be space indicating nothing there
 175+ 9794
 176+ 9794 CC A7 97             call  z,loop91
 177+ 9797                       ;draw left half
 178+ 9797
 179+ 9797              ;now do the right side
 180+ 9797 21 39 C0             ld hl,$c039             ;we should be 10 lines down(10,24)
 181+ 979A 7E                   ld a,(hl)               ;check our character
 182+ 979B FE 20                cp ' '                  ;should be space indicating noting there
 183+ 979D C0                   ret nz                  ;exit if no space there
 184+ 979E 21 39 C0             ld hl,$c039             ;top left face
 185+ 97A1              ;        ld de,$c038             ;1 line right of front wall
 186+ 97A1 06 16                ld b,22                 ;copy 22 lines
 187+ 97A3 C3 AC 97             jp loop90               ;draw right side!
 188+ 97A6 C9                   ret                     ;exit altogether
 189+ 97A7
 190+ 97A7 21 21 C0     loop91: ld hl,$c021             ;top left face
 191+ 97AA              ;        ld de,$c022             ;1 line left
 192+ 97AA 06 16                ld b,22                 ;copy 22 lines
 193+ 97AC              loop90: ;ld a,(de)
 194+ 97AC 3E B8                ld a,_hugewall
 195+ 97AE 77                   ld (hl),a
 196+ 97AF D5                   push de
 197+ 97B0 11 21 00             ld de,33
 198+ 97B3 19                   add hl,de               ;go to next line
 199+ 97B4 D1                   pop de
 200+ 97B5 10 F5                djnz loop90
 201+ 97B7 C9                   ret
 202+ 97B8
 203+ 97B8              cp_wall_2:
 204+ 97B8              ;do left side first - check for char ' ' showing nothing drawn there
 205+ 97B8
 206+ 97B8 21 A9 C0             ld hl,$c0a9             ;we should be at the top left of the face
 207+ 97BB DD 21 A9 C0          ld ix,$c0a9
 208+ 97BF              ;        ld de,$c0ab             ;1 line left of our wall face
 209+ 97BF 11 1F FA             ld de,lr_wall
 210+ 97C2 3E B6                ld a,_largewall
 211+ 97C4 12                   ld (de),a
 212+ 97C5
 213+ 97C5 0E 05                ld c,5                  ;draw 5 columns to the border
 214+ 97C7 E5           loop80: push hl
 215+ 97C8 06 0E                ld b,14
 216+ 97CA DD 7E 00             ld a,(ix+0)             ;check our character
 217+ 97CD FE 20                cp ' '                  ;should be space indicating noting there
 218+ 97CF CC DB 98             call z,loop93
 219+ 97D2 DD 2B                dec ix
 220+ 97D4 E1                   pop hl
 221+ 97D5 2B                   dec hl                 ;move left 1 line in the display
 222+ 97D6 0D                   dec c
 223+ 97D7 C2 C7 97             jp nz,loop80            ;do this 5 times
 224+ 97DA
 225+ 97DA              ;now do the right side
 226+ 97DA 21 B9 C0             ld hl,$c0b9             ;we should be at the top right of the face
 227+ 97DD DD 21 B9 C0          ld ix,$c0b9
 228+ 97E1               ;       ld de,$c0b8             ;1 line left of our wall face
 229+ 97E1 11 1F FA             ld de,lr_wall
 230+ 97E4 3E B6                ld a,_largewall
 231+ 97E6 12                   ld (de),a
 232+ 97E7
 233+ 97E7 0E 05                ld c,5                  ;draw 5 columns to the border
 234+ 97E9 E5           loop81: push hl
 235+ 97EA 06 0E                ld b,14
 236+ 97EC DD 7E 00             ld a,(ix+0)             ;check our character
 237+ 97EF FE 20                cp ' '                  ;should be space indicating noting there
 238+ 97F1 C2 F7 97             jp nz,loop82            ;skip over if no space there
 239+ 97F4 CC DB 98             call z,loop93
 240+ 97F7 DD 23        loop82  inc ix
 241+ 97F9                               ;do the next line
 242+ 97F9 E1                   pop hl
 243+ 97FA 23                   inc hl
 244+ 97FB 0D                   dec c
 245+ 97FC C2 E9 97             jp nz,loop81
 246+ 97FF C9                   ret                     ;exit routine totally
 247+ 9800
 248+ 9800              cp_wall_3:
 249+ 9800              ;do left side first - check for char ' ' showing nothing drawn there
 250+ 9800
 251+ 9800 21 0F C1             ld hl,$c10f             ;we should be at the top left of the face
 252+ 9803 DD 21 0F C1          ld ix,$c10f
 253+ 9807              ;        ld de,$c110             ;1 line left of our wall face
 254+ 9807 11 1F FA             ld de,lr_wall
 255+ 980A 3E B5                ld a,_mediumwall
 256+ 980C 12                   ld (de),a
 257+ 980D
 258+ 980D 0E 08                ld c,8                  ;draw 8 columns to the border
 259+ 980F E5           loop83: push hl
 260+ 9810 06 08                ld b,8                 ;10 chars high
 261+ 9812 DD 7E 00             ld a,(ix+0)             ;check our character
 262+ 9815 FE 20                cp ' '                  ;should be space indicating noting there
 263+ 9817 CC DB 98             call z,loop93
 264+ 981A DD 2B                dec ix
 265+ 981C E1                   pop hl
 266+ 981D 2B                   dec hl                 ;move left 1 line in the display
 267+ 981E 0D                   dec c
 268+ 981F C2 0F 98             jp nz,loop83            ;do this 5 times
 269+ 9822
 270+ 9822              ;now do the right side
 271+ 9822 21 19 C1             ld hl,$c119             ;we should be at the top right of the face
 272+ 9825 DD 21 19 C1          ld ix,$c119
 273+ 9829              ;        ld de,$c118             ;1 line left of our wall face
 274+ 9829 11 1F FA             ld de,lr_wall
 275+ 982C 3E B5                ld a,_mediumwall
 276+ 982E 12                   ld (de),a
 277+ 982F
 278+ 982F 0E 08                ld c,8                  ;draw 8 columns to the border
 279+ 9831 E5           loop84: push hl
 280+ 9832 06 08                ld b,8                 ;8 chars high
 281+ 9834 DD 7E 00             ld a,(ix+0)             ;check our character
 282+ 9837 FE 20                cp ' '                  ;should be space indicating noting there
 283+ 9839 C2 3F 98             jp nz,loop85            ;skip over if no space there
 284+ 983C CC DB 98             call z,loop93
 285+ 983F DD 23        loop85: inc ix
 286+ 9841                               ;do the next line
 287+ 9841 E1                   pop hl
 288+ 9842 23                   inc hl
 289+ 9843 0D                   dec c
 290+ 9844 C2 31 98             jp nz,loop84
 291+ 9847 C9                   ret                     ;exit routine totally
 292+ 9848
 293+ 9848              cp_wall_4:
 294+ 9848              ;do left side first - check for char ' ' showing nothing drawn there
 295+ 9848
 296+ 9848 21 53 C1             ld hl,$c153             ;we should be at the top left of the face
 297+ 984B DD 21 53 C1          ld ix,$c153
 298+ 984F              ;
 299+ 984F 11 1F FA             ld de,lr_wall
 300+ 9852 3E B7                ld a,_mediumwall_1
 301+ 9854 12                   ld (de),a
 302+ 9855 11 54 C1             ld de,$c154             ;1 line left of our wall face
 303+ 9858 0E 0A                ld c,10                  ;draw 10 columns to the border
 304+ 985A E5           loop86: push hl
 305+ 985B 06 04                ld b,4                  ;4 chars high
 306+ 985D DD 7E 00             ld a,(ix+0)             ;check our character
 307+ 9860 FE 20                cp ' '                  ;should be space indicating noting there
 308+ 9862 CC DB 98             call z,loop93
 309+ 9865 DD 2B                dec ix
 310+ 9867 E1                   pop hl
 311+ 9868 2B                   dec hl                  ;move left 1 line in the display
 312+ 9869 0D                   dec c
 313+ 986A C2 5A 98             jp nz,loop86            ;do this 5 times
 314+ 986D
 315+ 986D              ;now do the right side
 316+ 986D 21 59 C1             ld hl,$c159             ;we should be at the top right of the face
 317+ 9870 DD 21 59 C1          ld ix,$c159
 318+ 9874              ;        ld de,$c158             ;1 line left of our wall face
 319+ 9874 11 1F FA             ld de,lr_wall
 320+ 9877 3E B7                ld a,_mediumwall_1
 321+ 9879 12                   ld (de),a
 322+ 987A
 323+ 987A 0E 0A                ld c,10                  ;draw 10 columns to the border
 324+ 987C E5           loop87: push hl
 325+ 987D 06 04                ld b,4                 ;4 chars high
 326+ 987F DD 7E 00             ld a,(ix+0)             ;check our character
 327+ 9882 FE 20                cp ' '                  ;should be space indicating noting there
 328+ 9884 C2 8A 98             jp nz,loop88            ;skip over if no space there
 329+ 9887 CC DB 98             call z,loop93
 330+ 988A DD 23        loop88: inc ix
 331+ 988C                               ;do the next line
 332+ 988C E1                   pop hl
 333+ 988D 23                   inc hl
 334+ 988E 0D                   dec c
 335+ 988F C2 7C 98             jp nz,loop87
 336+ 9892 C9                   ret                     ;exit routine totally
 337+ 9893
 338+ 9893              cp_wall_5:
 339+ 9893              ;do left side first - check for char ' ' showing nothing drawn there
 340+ 9893
 341+ 9893 21 77 C1             ld hl,$c177             ;we should be at the top left of the face
 342+ 9896 DD 21 77 C1          ld ix,$c177
 343+ 989A              ;        ld de,$c176             ;1 line left of our wall face
 344+ 989A 11 1F FA             ld de,lr_wall
 345+ 989D 3E B4                ld a,_smallwall
 346+ 989F 12                   ld (de),a
 347+ 98A0
 348+ 98A0 0E 0D                ld c,13                  ;draw 10 columns to the border
 349+ 98A2 E5           loop89: push hl
 350+ 98A3 06 02                ld b,2                  ;4 chars high
 351+ 98A5 DD 7E 00             ld a,(ix+0)             ;check our character
 352+ 98A8 FE A2                cp _bottomblack         ;should be space indicating noting there
 353+ 98AA CC DB 98             call z,loop93
 354+ 98AD DD 2B                dec ix
 355+ 98AF E1                   pop hl
 356+ 98B0 2B                   dec hl                  ;move left 1 line in the display
 357+ 98B1 0D                   dec c
 358+ 98B2 C2 A2 98             jp nz,loop89            ;do this 5 times
 359+ 98B5
 360+ 98B5              ;now do the right side
 361+ 98B5 21 75 C1             ld hl,$c175             ;we should be at the top right of the face
 362+ 98B8 DD 21 75 C1          ld ix,$c175
 363+ 98BC              ;        ld de,$c176             ;1 line left of our wall face
 364+ 98BC 11 1F FA             ld de,lr_wall
 365+ 98BF 3E B4                ld a,_smallwall
 366+ 98C1 12                   ld (de),a
 367+ 98C2
 368+ 98C2 0E 0F                ld c,15                  ;draw 10 columns to the border
 369+ 98C4 E5           loop871:push hl
 370+ 98C5 06 02                ld b,2                  ;2 chars high
 371+ 98C7 DD 7E 00             ld a,(ix+0)             ;check our character
 372+ 98CA FE A2                cp _bottomblack         ;should be space indicating noting there
 373+ 98CC C2 D2 98             jp nz,loop881            ;skip over if no space there
 374+ 98CF CC DB 98             call z,loop93
 375+ 98D2 DD 23        loop881:inc ix
 376+ 98D4                               ;do the next line
 377+ 98D4 E1                   pop hl
 378+ 98D5 23                   inc hl
 379+ 98D6 0D                   dec c
 380+ 98D7 C2 C4 98             jp nz,loop871
 381+ 98DA C9                   ret                     ;exit routine totally
 382+ 98DB
 383+ 98DB
 384+ 98DB              ;#######################################################
 385+ 98DB              ;This routine draws the end wall blocks left & right
 386+ 98DB              ;######################################################
 387+ 98DB
 388+ 98DB              ;it matches so draw a wall face by copying the existing one!
 389+ 98DB              loop93:; dec de                  ;go 1 line left
 390+ 98DB 1A           loop92: ld a,(de)
 391+ 98DC 77                   ld (hl),a
 392+ 98DD D5                   push de
 393+ 98DE 11 21 00             ld de,33
 394+ 98E1 19                   add hl,de               ;go to next line
 395+ 98E2 D1                   pop de
 396+ 98E3 10 F6                djnz loop92
 397+ 98E5
 398+ 98E5 C9                   ret
 399+ 98E6
 400+ 98E6              ;#################################################################
 401+ 98E6              ;#################################################################
 402+ 98E6              ;draw colours     ; go through char display file and paint colours
 403+ 98E6              ;#################################################################
 404+ 98E6              ;#################################################################
 405+ 98E6
 406+ 98E6
 407+ 98E6 28 00        wallcol       dw  40             ;bright red
 408+ 98E8              skycol        equ 80            ; grey paper, black ink
 409+ 98E8              floorcol      equ 98             ; brown paper, black ink
 410+ 98E8              ;corridcol     equ 112            ; yellow paper, black ink
 411+ 98E8 28           sky_floor     db  40            ;store current sky or floor colour
 412+ 98E9 00           wall_temp     db  0             ;temporary store for wall colour graduation
 413+ 98EA 00 C3        scr_attr_add  dw $c300  ;22528          ;start of spectrum attributes after char screen or 22528 actual sceen
 414+ 98EC
 415+ 98EC              ; go through the display file at c000, check the character, change the colour
 416+ 98EC              ; if at row 26, start on next line at far left (0)
 417+ 98EC              ; do it again until you reach line 24 and column 25
 418+ 98EC
 419+ 98EC              ; built character display is at location c000
 420+ 98EC
 421+ 98EC 3E 50        draw_colours: ld a, skycol           ; set the sky colour
 422+ 98EE 32 E8 98                   ld (sky_floor),a
 423+ 98F1 97                         sub a                 ; make a zero
 424+ 98F2 32 0B FA                   ld (left),a
 425+ 98F5 01 0F 03                   ld bc,783             ; 768 attributes to fill
 426+ 98F8 ED 5B EA 98                ld de,(scr_attr_add)  ; start of spectrum attributes after char screen
 427+ 98FC 21 00 C0                   ld hl,$c000           ; start of zx81 display file in memory
 428+ 98FF
 429+ 98FF CD F6 99     here:         call set_wall_col     ;set the wall colour graduation colour
 430+ 9902 CD 2A 99                   call loop_1
 431+ 9905 A7                         and a                 ;reset zero
 432+ 9906 23                         inc hl                ;current character memory we are checking
 433+ 9907 13                         inc de                ;current attribute location
 434+ 9908 0B                         dec bc                ;number of attribute cells to traverse
 435+ 9909 78                         ld a,b
 436+ 990A FE 00                      cp 0
 437+ 990C 20 F1                      jr nz,here
 438+ 990E 79                         ld a,c
 439+ 990F FE 00                      cp 0             ;dec on single reg affects flags
 440+ 9911
 441+ 9911 28 02                      jr z,lastcol     ;colour in the last block before exiting
 442+ 9913 18 EA                      jr here
 443+ 9915
 444+ 9915 3A E8 98     lastcol:      ld a,(sky_floor)   ; colour in the last square
 445+ 9918                                               ; plus last 7  squares
 446+ 9918 12                         ld(de),a
 447+ 9919 3E 70                      ld a,112
 448+ 991B 13                         inc de
 449+ 991C 12                         ld (de),a
 450+ 991D 13                         inc de
 451+ 991E 12                         ld (de),a
 452+ 991F 13                         inc de
 453+ 9920 12                         ld (de),a
 454+ 9921 13                         inc de
 455+ 9922 12                         ld (de),a
 456+ 9923 13                         inc de
 457+ 9924 12                         ld (de),a
 458+ 9925 13                         inc de
 459+ 9926 12                         ld (de),a
 460+ 9927 13                         inc de
 461+ 9928 12                         ld (de),a
 462+ 9929
 463+ 9929 C9                         ret
 464+ 992A
 465+ 992A              ;start checking chars and setting colours
 466+ 992A
 467+ 992A 7E           loop_1:        ld a, (hl)       ; get value at start of zx81 display file
 468+ 992B FE B5                       cp _mediumwall            ; top left triangle
 469+ 992D 20 07                       jr nz, next1
 470+ 992F 3A E6 98                    ld a, (wallcol)
 471+ 9932 12                          ld (de),a        ; colour it if it matches
 472+ 9933 C3 C3 99                    jp next_pos      ; go on to next char position
 473+ 9936
 474+ 9936 FE AF        next1:         cp _black            ; top right triangle
 475+ 9938 20 06                       jr nz, next2
 476+ 993A 3E FE                       ld a, 254        ;black paper, black ink
 477+ 993C 12                          ld (de),a        ; colour it if it matches
 478+ 993D C3 C3 99                    jp next_pos      ; go on to next char position
 479+ 9940
 480+ 9940 FE B3        next2:         cp _topcorner4           ; top left triangle
 481+ 9942 20 06                       jr nz, next3
 482+ 9944 3E 50                       ld a,skycol          ;paper cyan, ink 1
 483+ 9946 12                          ld (de),a        ; colour it if it matches
 484+ 9947 C3 C3 99                    jp next_pos      ; go on to next char position
 485+ 994A
 486+ 994A FE B0        next3:         cp _topcorner1            ; top left triangle
 487+ 994C 20 06                       jr nz, next4
 488+ 994E 3E 62                       ld a,floorcol
 489+ 9950 12                          ld (de),a        ; colour it if it matches
 490+ 9951 C3 C3 99                    jp next_pos      ; go on to next char position
 491+ 9954
 492+ 9954 FE B6        next4:         cp _largewall            ; look for wall character
 493+ 9956 20 07                       jr nz, next5
 494+ 9958 3A E6 98                    ld a,  (wallcol)
 495+ 995B 12                          ld (de),a        ; colour it if it matches
 496+ 995C C3 C3 99                    jp next_pos      ; go on to next char position
 497+ 995F
 498+ 995F FE B4        next5:        cp _smallwall            ;was char 09 - lower middle of screen wall character bottom
 499+ 9961 20 07                      jr nz, next6
 500+ 9963 3A E6 98                   ld a,  (wallcol)
 501+ 9966 12                         ld (de),a
 502+ 9967 C3 C3 99                   jp next_pos
 503+ 996A
 504+ 996A FE B7        next6:        cp _mediumwall_1            ;was chr 10 - middle of screen upper wall character
 505+ 996C 20 07                      jr nz, next7
 506+ 996E 3A E6 98                   ld a, (wallcol)         ;
 507+ 9971 12                         ld (de),a
 508+ 9972 C3 C3 99                   jp next_pos
 509+ 9975
 510+ 9975 FE A9        next7:        cp _topleft5            ;was chr 10 - middle of screen upper wall character
 511+ 9977 20 06                      jr nz, next8
 512+ 9979 3E 50                      ld a, skycol         ;
 513+ 997B 12                         ld (de),a
 514+ 997C C3 C3 99                   jp next_pos
 515+ 997F
 516+ 997F FE B8        next8:        cp _hugewall
 517+ 9981 20 07                      jr nz, next9
 518+ 9983 3A E6 98                   ld a, (wallcol)         ;
 519+ 9986 12                         ld (de),a
 520+ 9987 C3 C3 99                   jp next_pos
 521+ 998A
 522+ 998A FE 8E        next9:        cp $8e            ;stretched wall 5
 523+ 998C 20 07                      jr nz, next10
 524+ 998E 3A E6 98                   ld a, (wallcol)         ;
 525+ 9991 12                         ld (de),a
 526+ 9992 C3 C3 99                   jp next_pos
 527+ 9995
 528+ 9995 FE 8D        next10:       cp $8d             ;stretched wall 5 more
 529+ 9997 20 0A                      jr nz, next11
 530+ 9999 3A E6 98                   ld a, (wallcol)         ;
 531+ 999C 12                         ld (de),a
 532+ 999D 3A E6 98                   ld a, (wallcol)         ;
 533+ 99A0 C3 C3 99                   jp next_pos
 534+ 99A3
 535+ 99A3 FE 8B        next11:       cp $8b             ;stretched wall 5 more
 536+ 99A5 20 0A                      jr nz, next12
 537+ 99A7 3A E6 98                   ld a, (wallcol)         ;
 538+ 99AA 12                         ld (de),a
 539+ 99AB 3A E6 98                   ld a, (wallcol)         ;
 540+ 99AE C3 C3 99                   jp next_pos
 541+ 99B1
 542+ 99B1 FE 8C        next12:       cp $8c             ;stretched wall 5 more
 543+ 99B3 20 0A                      jr nz, next20
 544+ 99B5 3A E6 98                   ld a, (wallcol)         ;
 545+ 99B8 12                         ld (de),a
 546+ 99B9 3A E6 98                   ld a, (wallcol)         ;
 547+ 99BC C3 C3 99                   jp next_pos
 548+ 99BF
 549+ 99BF              ;draw sky or floor colour as we found no matches above
 550+ 99BF
 551+ 99BF 3A E8 98     next20         ld a,(sky_floor) ;
 552+ 99C2 12                          ld (de),a        ; colour it if it matches
 553+ 99C3 3A 0B FA     next_pos:      ld a, (left)
 554+ 99C6 3C                          inc a
 555+ 99C7 FE 19                       cp 25            ; are we at 24th column?
 556+ 99C9 32 0B FA                    ld (left),a
 557+ 99CC C0                          ret nz           ; return if not
 558+ 99CD
 559+ 99CD              ;now do paper colour of score and nav git on right
 560+ 99CD                             ;now decrease bc by 7 & increase display pos by 7
 561+ 99CD                             ;to start of next line
 562+ 99CD 97                          sub a            ; zero a register
 563+ 99CE 32 0B FA                    ld (left),a      ; back to start
 564+ 99D1 3E 08                       ld a,8           ; 7 spaces to next line
 565+ 99D3 0B           loop_4:        dec bc           ;change ldir count
 566+ 99D4 23                          inc hl
 567+ 99D5 13                          inc de
 568+ 99D6 F5                          push af
 569+ 99D7 3E 70                       ld a,112         ;yellow paper, ink 9
 570+ 99D9 12                          ld (de),a
 571+ 99DA F1                          pop af
 572+ 99DB A7                          and a           ;move screen print position
 573+ 99DC 3D                          dec a
 574+ 99DD 20 F4                       jr nz, loop_4
 575+ 99DF 1B                          dec de           ; get to start of spectrum line in the display
 576+ 99E0
 577+ 99E0                             ; check if we are below the middles of the display
 578+ 99E0                             ; so we change the 'white' colour to floor
 579+ 99E0 E5                          push hl
 580+ 99E1 D5                          push de
 581+ 99E2                            ; 22912 is the start of the floor level
 582+ 99E2                             ; de holds current position in spectrum display
 583+ 99E2
 584+ 99E2
 585+ 99E2 2A EA 98                    ld hl,(scr_attr_add)
 586+ 99E5 ED 34 7F 01                 add hl,383        ;this for display at 22528 is 22911   ; start of first floor line
 587+ 99E9 ED 52                       sbc hl,de        ;are we there yet?
 588+ 99EB C2 F3 99                    jp nz,exit2 ;was nz
 589+ 99EE 3E 62                       ld a,floorcol
 590+ 99F0 32 E8 98                    ld (sky_floor),a
 591+ 99F3 D1           exit2:         pop de
 592+ 99F4 E1                          pop hl
 593+ 99F5 C9                          ret
 594+ 99F6
 595+ 99F6
 596+ 99F6              set_wall_col:
 597+ 99F6                              ;set the wall colour graduation colour from light (top part) to dark(bottom part of wall) in 6 increments
 598+ 99F6                              ;de holds current attribute cell we are colouring in
 599+ 99F6 E5                           push hl
 600+ 99F7 D5                           push de
 601+ 99F8                              ;de holds current attribute cell we are colouring in
 602+ 99F8
 603+ 99F8 3E BC                        ld a,188
 604+ 99FA 2A EA 98                     ld hl,(scr_attr_add)     ;top of the display
 605+ 99FD B7 ED 52                     sub hl,de
 606+ 9A00 20 05                        jr nz,setcol_1   ;check next quarter of display
 607+ 9A02 32 E6 98                     ld (wallcol),a
 608+ 9A05 18 5D                        jr setcol_exit
 609+ 9A07
 610+ 9A07
 611+ 9A07 C6 02        setcol_1:       add a,2
 612+ 9A09 2A EA 98                     ld hl,(scr_attr_add)
 613+ 9A0C ED 34 80 00                  add hl,128    ;next 1/6 of the display
 614+ 9A10 B7 ED 52                     sub hl,de
 615+ 9A13 20 05                        jr nz,setcol_2   ;check next 1/6th of display
 616+ 9A15 32 E6 98                     ld (wallcol),a
 617+ 9A18 18 4A                        jr setcol_exit
 618+ 9A1A
 619+ 9A1A C6 02        setcol_2        add a,2
 620+ 9A1C 2A EA 98                     ld hl,(scr_attr_add)
 621+ 9A1F ED 34 00 01                  add hl,256     ;next 1/6  down of the display
 622+ 9A23 B7 ED 52                     sub hl,de
 623+ 9A26 20 05                        jr nz,setcol_3   ;check next 1/6th of display
 624+ 9A28 32 E6 98                     ld (wallcol),a
 625+ 9A2B 18 37                        jr setcol_exit
 626+ 9A2D
 627+ 9A2D C6 02        setcol_3        add a,2
 628+ 9A2F 2A EA 98                     ld hl,(scr_attr_add)
 629+ 9A32 ED 34 80 01                  add hl,384     ;    ;next 1/6 of the display
 630+ 9A36 B7 ED 52                     sub hl,de
 631+ 9A39 20 05                        jr nz,setcol_4   ;check next 1/6th of display
 632+ 9A3B 32 E6 98                     ld (wallcol),a
 633+ 9A3E 18 24                        jr setcol_exit
 634+ 9A40
 635+ 9A40 C6 02        setcol_4        add a,2
 636+ 9A42 2A EA 98                     ld hl,(scr_attr_add)
 637+ 9A45 ED 34 00 02                  add hl,512    ;next 1/6 of the display
 638+ 9A49 B7 ED 52                     sub hl,de
 639+ 9A4C 20 05                        jr nz,setcol_5   ;check next 1/6th of display
 640+ 9A4E 32 E6 98                     ld (wallcol),a
 641+ 9A51 18 11                        jr setcol_exit
 642+ 9A53
 643+ 9A53 C6 02        setcol_5        add a,2
 644+ 9A55 2A EA 98                     ld hl,(scr_attr_add)
 645+ 9A58 ED 34 80 02                  add hl,640     ;bottom 6th of the display
 646+ 9A5C B7 ED 52                     sub hl,de
 647+ 9A5F 20 03                        jr nz,setcol_exit   ;check next 1/6th of display
 648+ 9A61 32 E6 98                     ld (wallcol),a
 649+ 9A64
 650+ 9A64 D1           setcol_exit:    pop de
 651+ 9A65 E1                           pop hl
 652+ 9A66 C9                           ret
 653+ 9A67
 654+ 9A67              ;#######################################################################
 655+ 9A67              ;setup right hand side of the screen
 656+ 9A67
 657+ 9A67              draw_screen_right:
 658+ 9A67
 659+ 9A67 DD 21 0F 82                ld ix,message_border1       ;top border Message
 660+ 9A6B CD D7 81                   CALL print_message
 661+ 9A6E DD 21 1A 82                ld ix,message_get       ;"Get Out" Message
 662+ 9A72 CD D7 81                   CALL print_message
 663+ 9A75 DD 21 25 82                ld ix,message_out       ;"Get Out" Message
 664+ 9A79 CD D7 81                   CALL print_message
 665+ 9A7C DD 21 30 82                ld ix,message_border4       ;top border Message
 666+ 9A80 CD D7 81                   CALL print_message
 667+ 9A83                            ;do some colouring around the 'get out' words
 668+ 9A83 21 39 58                   ld hl,22585
 669+ 9A86 3E 94                      ld a,148
 670+ 9A88 77                         ld (hl),A
 671+ 9A89 21 3F 58                   ld hl,22585+6
 672+ 9A8C 77                         ld (hl),a
 673+ 9A8D 21 59 58                   ld hl,22617
 674+ 9A90 77                         ld (hl),a
 675+ 9A91 21 5F 58                   ld hl,22617+6
 676+ 9A94 77                         ld (hl),a
 677+ 9A95                            ;print "level" words
 678+ 9A95 DD 21 8A 82                ld ix,message_level       ;top border Message
 679+ 9A99 CD D7 81                   CALL print_message
 680+ 9A9C              ;now print the level numbers
 681+ 9A9C DD 21 DF 9A                ld ix,L00       ;top border Message
 682+ 9AA0 CD D7 81                   CALL print_message
 683+ 9AA3 DD 21 E6 9A                ld ix,L01       ;top border Message
 684+ 9AA7 CD D7 81                   CALL print_message
 685+ 9AAA DD 21 ED 9A                ld ix,L23      ;top border Message
 686+ 9AAE CD D7 81                   CALL print_message
 687+ 9AB1 DD 21 F4 9A                ld ix,L45        ;top border Message
 688+ 9AB5 CD D7 81                   CALL print_message
 689+ 9AB8 DD 21 FB 9A                ld ix,L67       ;top border Message
 690+ 9ABC CD D7 81                   CALL print_message
 691+ 9ABF DD 21 02 9B                ld ix,L89       ;top border Message
 692+ 9AC3 CD D7 81                   CALL print_message
 693+ 9AC6 DD 21 09 9B                ld ix,L1011       ;top border Message
 694+ 9ACA CD D7 81                   CALL print_message
 695+ 9ACD DD 21 10 9B                ld ix,L1213       ;top border Message
 696+ 9AD1 CD D7 81                   CALL print_message
 697+ 9AD4 DD 21 17 9B                ld ix,L1415
 698+ 9AD8 CD D7 81                   CALL print_message
 699+ 9ADB CD 1E 9B                   call set_floor_colour
 700+ 9ADE C9                         ret
 701+ 9ADF
 702+ 9ADF 06 1B 86 20  L00           db 6,27,134,     " 0 ",$7f
 702+ 9AE3 30 20 7F
 703+ 9AE6 07 1B 86 20  L01           db 7,27,134,     " 1 ",$7f
 703+ 9AEA 31 20 7F
 704+ 9AED 08 1B 86 32  L23           db 8,27,134,     "2 3",$7f
 704+ 9AF1 20 33 7F
 705+ 9AF4 09 1B 86 34  L45           db 9,27,134,     "4 5",$7f
 705+ 9AF8 20 35 7F
 706+ 9AFB 0A 1B 86 36  L67           db 10,27,134,    "6 7",$7f
 706+ 9AFF 20 37 7F
 707+ 9B02 0B 1B 86 38  L89           db 11,27,134,    "8 9",$7f
 707+ 9B06 20 39 7F
 708+ 9B09 0C 1B 86 D7  L1011         db 12,27,134,$d7," ",$d8,$7f
 708+ 9B0D 20 D8 7F
 709+ 9B10 0D 1B 86 D9  L1213         db 13,27,134,$d9," ",$da,$7f
 709+ 9B14 20 DA 7F
 710+ 9B17 0E 1B 86 DB  L1415         db 14,27,134,$db," ",$dc,$7f
 710+ 9B1B 20 DC 7F
 711+ 9B1E
 712+ 9B1E              ;###################################################################
 713+ 9B1E
 714+ 9B1E              ;set floor colour on right of the display - shows what floor we are on
 715+ 9B1E
 716+ 9B1E              set_floor_colour:
 717+ 9B1E AF                   xor a               ;zero a reg
 718+ 9B1F 47                   ld b,a
 719+ 9B20 2A 22 FA             ld hl,(cur_map)     ;get our current map
 720+ 9B23 55                   ld d,l
 721+ 9B24 15                   dec d               ;need to point 1 less
 722+ 9B25 1E 02                ld e,2
 723+ 9B27 ED 30                mul de              ;multiply our current map number by 2
 724+ 9B29 21 34 9B             ld hl,data_table
 725+ 9B2C 19                   add hl,de           ;should now be pointing to the correct place in the table
 726+ 9B2D 5E                   ld e,(hl)
 727+ 9B2E 23                   inc hl
 728+ 9B2F 56                   ld d,(hl)
 729+ 9B30                      ;now colour it white on screen
 730+ 9B30 3E 87                ld a,135
 731+ 9B32 12                   ld (de),a
 732+ 9B33 C9                   ret
 733+ 9B34
 734+ 9B34
 735+ 9B34
 736+ 9B34
 737+ 9B34              data_table:
 738+ 9B34 DC 58                dw  $58dc       ;23003-256    ;GND
 739+ 9B36 FC 58                dw  $58fc       ;23004-224    ;1
 740+ 9B38 1B 59                dw  $591b       ;23003-192    ;2
 741+ 9B3A 1D 59                dw  $591d       ;23005-192    ;3
 742+ 9B3C 3B 59                dw  $593b       ;23003-160    ;4
 743+ 9B3E 3D 59                dw  $593d       ;23005-160    ;5
 744+ 9B40 5B 59                dw  $595b       ;23003-128    ;6
 745+ 9B42 5D 59                dw  $595d       ;23005-128    ;7
 746+ 9B44 7B 59                dw  $597b       ;23003-96    ;8
 747+ 9B46 7D 59                dw  $597d       ;23005-96    ;9
 748+ 9B48 9B 59                dw  $599b       ;23003-64    ;10
 749+ 9B4A 9D 59                dw  $599d       ;23005-64    ;11
 750+ 9B4C BB 59                dw  $59bb       ;23003-32    ;12
 751+ 9B4E BD 59                dw  $59bd       ;23005-32    ;13
 752+ 9B50 DB 59                dw  $59db       ;23003       ;14
 753+ 9B52 DD 59                dw  $59dd       ;23005       ;15
 754+ 9B54              ;22528 to 23296
 755+ 9B54
 756+ 9B54
 757+ 9B54
# file closed: src/5-rd3dmazeV6.asm
 451  9B54                  INCLUDE "6-rd3dmazeV6.asm" ; draw right side of maze
# file opened: src/6-rd3dmazeV6.asm
   1+ 9B54
   2+ 9B54              ;############################################
   3+ 9B54              ;############################################
   4+ 9B54
   5+ 9B54              ;draw section the right side of the screen
   6+ 9B54
   7+ 9B54              ;############################################
   8+ 9B54              ;############################################
   9+ 9B54
  10+ 9B54              draw_right_side:
  11+ 9B54
  12+ 9B54 3A 06 FA                   ld a,(depth)
  13+ 9B57 FE 06                      cp 6
  14+ 9B59 CA 78 9B                   jp z,draw_6r
  15+ 9B5C FE 05        do_5r:        cp 5
  16+ 9B5E CA 82 9B                   jp z,draw_5r
  17+ 9B61 FE 04                      cp 4
  18+ 9B63 CA 3E 9D                   jp z,draw_4r
  19+ 9B66 FE 03                      cp 3
  20+ 9B68 CA 24 9F                   jp z,draw_3r
  21+ 9B6B FE 02                      cp 2
  22+ 9B6D CA A9 A0                   jp z,draw_2r
  23+ 9B70 FE 01                      cp 1
  24+ 9B72 CA 44 A1                   jp z,draw_1r
  25+ 9B75 C3 DA A1                   jp draw_0r
  26+ 9B78              ;end of routine
  27+ 9B78                        ;    ret
  28+ 9B78
  29+ 9B78              ;############################################
  30+ 9B78              ;############################################
  31+ 9B78
  32+ 9B78              ;draw section 6 right - well, nothing to do atm!
  33+ 9B78
  34+ 9B78              ;############################################
  35+ 9B78              ;############################################
  36+ 9B78
  37+ 9B78              draw_6r:
  38+ 9B78              ;do nothing on screen as already done via left side draw
  39+ 9B78              ;just incremement where we are in the maze view
  40+ 9B78
  41+ 9B78 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  42+ 9B7B CD 24 8E             call load_de            ;get left and right and front jump into de reg
  43+ 9B7E 19                   add hl,de               ;Additional add to simulate layer 6
  44+ 9B7F 22 25 FA             ld (furthest_point),hl ;re save it
  45+ 9B82
  46+ 9B82              ;############################################
  47+ 9B82              ;############################################
  48+ 9B82
  49+ 9B82              ;draw section 5 right
  50+ 9B82
  51+ 9B82              ;############################################
  52+ 9B82              ;############################################
  53+ 9B82
  54+ 9B82              draw_5r:
  55+ 9B82
  56+ 9B82              ;ret
  57+ 9B82              ; hl=maze location being drawn.
  58+ 9B82              ; now determine what to draw for this section.
  59+ 9B82
  60+ 9B82 97                   sub a                   ;make 'a' zero
  61+ 9B83 3D                   dec a                   ;make it 255 to show nothing to do
  62+ 9B84 32 27 FA             ld (blockid),a          ;save it for wall drawing
  63+ 9B87
  64+ 9B87              ;first we need to decrement how far we can see to the layer
  65+ 9B87              ;we are working on
  66+ 9B87
  67+ 9B87 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  68+ 9B8A CD 24 8E             call load_de            ;get left and right and front jump into de reg
  69+ 9B8D
  70+ 9B8D 19                   add hl,de               ;Additional add to simulate layer 6
  71+ 9B8E 22 25 FA             ld (furthest_point),hl ;re save it
  72+ 9B91
  73+ 9B91 11 01 00             ld de,$0001             ;to move the display position +1
  74+ 9B94 ED 53 11 FA          ld (var4),de
  75+ 9B98
  76+ 9B98              ;move the maze location pointer 1 to the right - used for all
  77+ 9B98              ;remaining blocks to test if there is a wall there or not.
  78+ 9B98
  79+ 9B98 ED 5B 0D FA          ld de,(right)
  80+ 9B9C 19                   add hl,de
  81+ 9B9D 22 15 FA             ld (var6),hl            ;right position in maze from our location
  82+ 9BA0
  83+ 9BA0 ED 53 0F FA          ld (var3),de            ;display position +1
  84+ 9BA4 11 79 01             ld   de,$0179           ; offset to row 11 column 10 - left of  centre of the 3d view.
  85+ 9BA7 CD B5 9B             call do_draw_5r
  86+ 9BAA
  87+ 9BAA 97                   sub a                   ;make reg a zero
  88+ 9BAB 32 1E FA             ld (var10),a            ;used in the maze wall drawing at layer 5
  89+ 9BAE 3A 27 FA             ld a,(blockid)          ;get the right hand maze wall location
  90+ 9BB1 3C                   inc a                   ;if blockid was 255 (UNUSED) its will now be zero
  91+ 9BB2                                              ;so
  92+ 9BB2 C3 3E 9D             jp draw_4r              ;now draw the 4th level
  93+ 9BB5
  94+ 9BB5              do_draw_5r:
  95+ 9BB5
  96+ 9BB5 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
  97+ 9BB8 19                   add  hl,de
  98+ 9BB9
  99+ 9BB9
 100+ 9BB9              ; draw right half of the display.
 101+ 9BB9
 102+ 9BB9 06 04                ld b,4                  ; count for 3 columns right of our position
 103+ 9BBB ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
 104+ 9BBF
 105+ 9BBF              ;check if we are at the bottom right of the maze
 106+ 9BBF              ;if so, there is no wall after position 255 so point us to
 107+ 9BBF              ;position 240 and fake the wall!
 108+ 9BBF              ;;;        ld a,e
 109+ 9BBF              ;;;        cp 255
 110+ 9BBF              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 111+ 9BBF              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 112+ 9BBF
 113+ 9BBF
 114+ 9BBF              ;now move the maze pointer right (+1) 1 position
 115+ 9BBF              ;so we can read the type of walls to our left
 116+ 9BBF
 117+ 9BBF              ;cont_3:
 118+ 9BBF              ;*         push hl
 119+ 9BBF              ;*        ld hl,(left)
 120+ 9BBF              ;*        add hl,de
 121+ 9BBF              ;*        ex de,hl
 122+ 9BBF              ;*        pop hl
 123+ 9BBF
 124+ 9BBF EB                   ex   de,hl              ; transfer de to hl.
 125+ 9BC0
 126+ 9BC0              ;       hl = furthest point in the maze
 127+ 9BC0              ;       de = d_file location to store byte to display
 128+ 9BC0
 129+ 9BC0              ;we have to load the first plot position with a corner bit to show
 130+ 9BC0              ;the end of the wall at the position we can see next to the center
 131+ 9BC0              ;plot position on section 6
 132+ 9BC0              ;then, while we draw the other blocks we can see we just want top and
 133+ 9BC0              ;bottom blacks pointed so will use var1 and var 2 to hold the
 134+ 9BC0              ;character block we need to print.
 135+ 9BC0
 136+ 9BC0              ;2020 - we dont need to do this as we are drawing
 137+ 9BC0              ;a side wall and wont see the hashes!
 138+ 9BC0
 139+ 9BC0 3E B4                ld a,_smallwall;_topright5          ; load with top right char $a9
 140+ 9BC2              ;        ld a,'#'
 141+ 9BC2 32 04 FA             ld (var1),a             ;top of mwadd udg
 142+ 9BC5              ;        inc a
 143+ 9BC5              ;        inc a
 144+ 9BC5              ;        ld a,_smallwall;_topright5          ; load with top right char $a9
 145+ 9BC5
 146+ 9BC5 32 05 FA             ld (var2),a             ;ld with bottom right wall udg char
 147+ 9BC8
 148+ 9BC8              loop8r:
 149+ 9BC8 E5                   push hl
 150+ 9BC9
 151+ 9BC9              ;##############################################################################
 152+ 9BC9              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 153+ 9BC9
 154+ 9BC9 3A 28 FA             ld a,(maze_highbyte)
 155+ 9BCC BC                   cp h                    ;are we at the top part of the maze?
 156+ 9BCD CA 00 9C             jp z,cont_5a
 157+ 9BD0                                              ;if we are on a different maze boundary
 158+ 9BD0                                              ;then draw a maze wall as we are the top
 159+ 9BD0                                              ;or north wall but maze data has no
 160+ 9BD0                                              ;wall data.
 161+ 9BD0                                              ;wall data.
 162+ 9BD0              ;4 = 1st left wall
 163+ 9BD0              ;3 = 2nd left wall
 164+ 9BD0              ;2 = 3rd left wall
 165+ 9BD0              ;1 = 4th left wall
 166+ 9BD0
 167+ 9BD0 78                   ld a,b                  ;our current wall counter
 168+ 9BD1 FE 04                cp 4
 169+ 9BD3 C2 DE 9B             jp nz,b5_1                 ;its not wall 4
 170+ 9BD6 3E 01                ld a,1
 171+ 9BD8 47                   ld b,a
 172+ 9BD9 C6 80                add a,128               ;make sure we set a wall!
 173+ 9BDB C3 36 9C             jp  do_wall5a          ;jump straight to making an end wall
 174+ 9BDE
 175+ 9BDE FE 03        b5_1:   cp 3
 176+ 9BE0 C2 EB 9B             jp nz,b5_2             ;its not wall 3
 177+ 9BE3 3E 01                ld a,1
 178+ 9BE5 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 179+ 9BE6 C6 80                add a,128               ;make sure we set a wall!
 180+ 9BE8 C3 5D 9C             jp do_2ndwall_r        ;draw the 2nd block to the left
 181+ 9BEB
 182+ 9BEB FE 02        b5_2:   cp 2
 183+ 9BED C2 F8 9B             jp nz,b5_3             ;its not wall 3
 184+ 9BF0 3E 01                ld a,1
 185+ 9BF2 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 186+ 9BF3 C6 80                add a,128               ;make sure we set a wall!
 187+ 9BF5 C3 A5 9C             jp do_3rdwall_r       ;draw the 2nd block to the left
 188+ 9BF8
 189+ 9BF8              ;a must = 1 if we get here.
 190+ 9BF8 3E 01        b5_3:   ld a,1
 191+ 9BFA 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 192+ 9BFB C6 80                add a,128               ;make sure we set a wall!
 193+ 9BFD C3 F2 9C             jp do_4thwall_r         ;jump straight to making an end wall
 194+ 9C00
 195+ 9C00              ;*############################################################################
 196+ 9C00
 197+ 9C00              ;now zero out the end wall variable
 198+ 9C00              cont_5a
 199+ 9C00 97                   sub a                   ;zero a reg
 200+ 9C01 32 17 FA             ld (end_wall),a           ;save 0 in the end wall variable
 201+ 9C04
 202+ 9C04
 203+ 9C04              ;check we are at an outside maze wall
 204+ 9C04 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 205+ 9C05 FE 81                cp _mh                  ;maze wall block
 206+ 9C07 20 07                jr nz,cont10            ;its a wall block so need to draw the wall
 207+ 9C09 F5                   push af                 ;save which print location we are at
 208+ 9C0A 3E 01                ld a,1                  ;for drawing the maze wall to the screen
 209+ 9C0C 32 17 FA             ld (end_wall),a          ;edge
 210+ 9C0F F1                   pop af
 211+ 9C10              ;        ld b,1                  ;stop drawing more blocks as its an end wall
 212+ 9C10
 213+ 9C10 17           cont10: rla
 214+ 9C11 DA 24 9C             jp c,do_wall5r          ;bit 7 (128)
 215+ 9C14
 216+ 9C14              ;        call do_no_wall5r      ; otherwise draw no wall
 217+ 9C14
 218+ 9C14              go_back5r:
 219+ 9C14 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 220+ 9C17 19                   add hl,de               ; holds current screen position
 221+ 9C18 EB                   ex de,hl
 222+ 9C19 E1                   pop hl
 223+ 9C1A D5                   push de
 224+ 9C1B ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 225+ 9C1F 19                   add hl,de               ; go left 1 block in the maze
 226+ 9C20 D1                   pop de
 227+ 9C21 10 A5                djnz loop8r
 228+ 9C23 C9                   ret
 229+ 9C24
 230+ 9C24
 231+ 9C24              do_wall5r:
 232+ 9C24
 233+ 9C24              ;check if b=2 - if so we are not at a wall immediately next to our right
 234+ 9C24              ;nor are we at an and wall. We are drawing the 2nd block to the right
 235+ 9C24              ;b=3 for 3rd block to the right.
 236+ 9C24
 237+ 9C24 78                   ld a,b
 238+ 9C25 D6 01                sub 1
 239+ 9C27 CA F2 9C             jp z,do_4thwall_r       ;draw the cnd block to the right
 240+ 9C2A
 241+ 9C2A 78                   ld a,b                  ;b is our loop count
 242+ 9C2B D6 02                sub 2                   ;check if a=2
 243+ 9C2D CA A5 9C             jp z,do_3rdwall_r       ;draw the 2nd block to the right
 244+ 9C30
 245+ 9C30 78                   ld a,b
 246+ 9C31 D6 03                sub 3
 247+ 9C33 CA 5D 9C             jp z,do_2ndwall_r       ;draw the cnd block to the right
 248+ 9C36
 249+ 9C36              ;b must = 4 if we get here
 250+ 9C36
 251+ 9C36              ;check if bit 2 is set as thats an end
 252+ 9C36              ;and b must then be changed to 1 to stop drawing.
 253+ 9C36
 254+ 9C36              do_wall5a:
 255+ 9C36 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 256+ 9C38 28 04                jr z,draw8r
 257+ 9C3A
 258+ 9C3A 97                   sub a                  ;we Don't have an outside maze wall (end wall)
 259+ 9C3B 32 17 FA             ld (end_wall),a           ;save that we are NOT at an end wall
 260+ 9C3E
 261+ 9C3E D5           draw8r:  push de
 262+ 9C3F 3A 04 FA             ld a,(var1)           ;top of wall udg
 263+ 9C42 12                   ld (de),a             ; insert the top of the wall.
 264+ 9C43
 265+ 9C43 13                   inc de
 266+ 9C44 12                   ld (de),a             ; insert the top of the wall - 2nd right.
 267+ 9C45 1B                   dec de
 268+ 9C46              ;now check if we need to draw a black side on the right
 269+ 9C46              ;by looking to the character to the right of the wall
 270+ 9C46              ;and if there is not a wall already drawn, then draw a
 271+ 9C46              ;black side
 272+ 9C46
 273+ 9C46 3E AA                ld a,_topright5         ;if not, draw the top left side
 274+ 9C48 1B                   dec de                  ;move to the right of the bricks
 275+ 9C49 12                   ld (de),a               ;draw a black and chevron side
 276+ 9C4A 13                   inc de                  ;go back 1 space again
 277+ 9C4B
 278+ 9C4B 21 21 00     _x1r:   ld   hl,$0021           ;jump to the next line below
 279+ 9C4E
 280+ 9C4E 19                   add  hl,de
 281+ 9C4F 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 282+ 9C52 77                   ld   (hl),a             ; insert the bottom of the wall.
 283+ 9C53 23                   inc hl
 284+ 9C54 77                   ld   (hl),a             ; insert the top of the wall.
 285+ 9C55 2B                   dec hl
 286+ 9C56 2B                   dec hl                  ;look at the left block
 287+ 9C57 3E AC                ld a,_bottomright5
 288+ 9C59 77                   ld (hl),a
 289+ 9C5A
 290+ 9C5A D1           _x2r:   pop de
 291+ 9C5B
 292+ 9C5B
 293+ 9C5B 18 B7                jr go_back5r              ; jump back to main loop
 294+ 9C5D
 295+ 9C5D
 296+ 9C5D              ;************************************
 297+ 9C5D
 298+ 9C5D              ;draw the wall for 2nd right layer
 299+ 9C5D
 300+ 9C5D              ;***********************************
 301+ 9C5D
 302+ 9C5D              do_2ndwall_r:
 303+ 9C5D
 304+ 9C5D D5                   push de                 ;save the current acreen position
 305+ 9C5E              ;1st check if theres a wall where we need to draw the black side
 306+ 9C5E 1A                   ld a,(de)
 307+ 9C5F FE B4                cp _smallwall
 308+ 9C61 CA 67 9C             jp z,miss5              ;theres a wall drawn already so do not
 309+ 9C64                                              ;draw any black sides & jump over
 310+ 9C64
 311+ 9C64 3E 91                ld   a,$91;b9              ;top right section 3 (1)
 312+ 9C66 12                   ld   (de),a             ; insert the top of the wall.
 313+ 9C67
 314+ 9C67              ;now draw a red wall to the right of section 2
 315+ 9C67 13           miss5:  inc de
 316+ 9C68 3E B4                ld a,_smallwall
 317+ 9C6A 12                   ld (de),a
 318+ 9C6B 13                   inc de
 319+ 9C6C 12                   ld (de),a               ;draw 2nd one (4 wide)
 320+ 9C6D 13                   inc de
 321+ 9C6E 12                   ld (de),a               ;draw 3rd one (4 wide)
 322+ 9C6F              ;        inc de
 323+ 9C6F              ;        ld (de),a               ;draw 4th one (4 wide)
 324+ 9C6F
 325+ 9C6F               ;       dec de
 326+ 9C6F 1B                   dec de
 327+ 9C70 1B                   dec de
 328+ 9C71 1B                   dec de
 329+ 9C72
 330+ 9C72              ;now check if we need to draw a black side on the right
 331+ 9C72              ;by looking to the character to the right of the wall
 332+ 9C72              ;and if there is not a wall already drawn, then draw a
 333+ 9C72              ;black side
 334+ 9C72
 335+ 9C72 1B                   dec de                  ;jump left 1 char in the display
 336+ 9C73 1A                   ld a,(de)               ;read whats there
 337+ 9C74 13                   inc de                  ;put our pointer back to the original position
 338+ 9C75 FE B4                cp _smallwall           ;is it a wall
 339+ 9C77 CA 7F 9C             jp z,_x1r_2               ;if yes, do NOT draw a black side.
 340+ 9C7A 3E 90                ld a,$90             ;draw top right side
 341+ 9C7C 1B                   dec de
 342+ 9C7D 12                   ld (de),a               ;draw middle top bit
 343+ 9C7E 13                   inc de
 344+ 9C7F
 345+ 9C7F              ;top line done
 346+ 9C7F
 347+ 9C7F              ;now do the bottom line underneath
 348+ 9C7F
 349+ 9C7F              ;REMEMBER - 1 block is 2 8 bit squares at the section
 350+ 9C7F              _x1r_2
 351+ 9C7F 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 352+ 9C82 19                   add  hl,de
 353+ 9C83
 354+ 9C83              ;1st check if theres a wall where we need to draw the black side
 355+ 9C83 7E                   ld a,(hl)
 356+ 9C84 FE B4                cp _smallwall
 357+ 9C86 CA 8C 9C             jp z, miss51
 358+ 9C89
 359+ 9C89 3E 94                ld a,$94                ;draw our rightmost wall bottom.
 360+ 9C8B 77                   ld   (hl),a             ; insert the bottom of the wall.
 361+ 9C8C
 362+ 9C8C              ;now draw a red wall to the right of section 2
 363+ 9C8C 23           miss51: inc hl
 364+ 9C8D 3E B4                ld a,_smallwall
 365+ 9C8F 77                   ld (hl),a
 366+ 9C90 23                   inc hl
 367+ 9C91 77                   ld (hl),a
 368+ 9C92 23                   inc hl
 369+ 9C93 77                   ld (hl),a               ;draw 3rd one (3 wide)
 370+ 9C94 2B                   dec hl
 371+ 9C95 2B                   dec hl
 372+ 9C96 2B                   dec hl
 373+ 9C97
 374+ 9C97              ;now check if we need to draw a black side on the left of the lower half wall
 375+ 9C97              ;do this by checking if the next block is already a wall just like above
 376+ 9C97
 377+ 9C97 2B                   dec hl      ;look at the left block
 378+ 9C98 7E                   ld a,(hl)
 379+ 9C99 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 380+ 9C9B CA A1 9C             jp z,_x2r_2
 381+ 9C9E 3E 93                ld a,$93            ;draw leftmost bottom
 382+ 9CA0 77                   ld (hl),a
 383+ 9CA1
 384+ 9CA1 D1           _x2r_2  pop de
 385+ 9CA2 C3 14 9C             jp go_back5r              ; jump back to main loop
 386+ 9CA5
 387+ 9CA5              ;##########################################
 388+ 9CA5
 389+ 9CA5              ;draw the wall for 3rd right layer
 390+ 9CA5
 391+ 9CA5              ;##########################################
 392+ 9CA5
 393+ 9CA5              do_3rdwall_r:
 394+ 9CA5
 395+ 9CA5 D5                   push de                 ;save the current acreen position
 396+ 9CA6              ;1st check if theres a wall where we need to draw the black side
 397+ 9CA6 13                   inc de                  ;move our start location 3 spaces right
 398+ 9CA7 13                   inc de
 399+ 9CA8 13                   inc de
 400+ 9CA9
 401+ 9CA9              ;now draw a red wall to the right of section 2,  top half
 402+ 9CA9
 403+ 9CA9 3E B4                ld a,_smallwall;$8e
 404+ 9CAB 12                   ld (de),a
 405+ 9CAC 13                   inc de
 406+ 9CAD 12                   ld (de),a
 407+ 9CAE 13                   inc de
 408+ 9CAF 12                   ld (de),a
 409+ 9CB0 13                   inc de
 410+ 9CB1 12                   ld (de),a               ;draw 4th one (4 wide)
 411+ 9CB2
 412+ 9CB2 1B                   dec de                  ;move print position back for black wall
 413+ 9CB3 1B                   dec de
 414+ 9CB4 1B                   dec de
 415+ 9CB5
 416+ 9CB5              ;now check if we need to draw a black side on the right
 417+ 9CB5              ;by looking to the character to the right of the wall
 418+ 9CB5              ;and if there is not a wall already drawn, then draw a
 419+ 9CB5              ;black side
 420+ 9CB5
 421+ 9CB5 1B                   dec de                  ;jump left 1 char in the display
 422+ 9CB6 1A                   ld a,(de)               ;read whats there
 423+ 9CB7 13                   inc de                  ;put our pointer back to the original position
 424+ 9CB8 FE B4                cp _smallwall           ;is it a wall
 425+ 9CBA CA CA 9C             jp z,_x1r_3               ;if yes, do NOT draw a black side.
 426+ 9CBD 3E B9                ld a,$b9             ;draw top right side
 427+ 9CBF 1B                   dec de
 428+ 9CC0 1B                   dec de
 429+ 9CC1 1B                   dec de
 430+ 9CC2 12                   ld (de),a
 431+ 9CC3 13                   inc de
 432+ 9CC4 3C                   inc a
 433+ 9CC5 12                   ld (de),a
 434+ 9CC6 3C                   inc a
 435+ 9CC7 13                   inc de
 436+ 9CC8 12                   ld (de),a
 437+ 9CC9
 438+ 9CC9 13                    inc de
 439+ 9CCA                                              ;to wall start
 440+ 9CCA
 441+ 9CCA              ;top line done
 442+ 9CCA
 443+ 9CCA              ;now do the bottom line underneath
 444+ 9CCA
 445+ 9CCA              _x1r_3
 446+ 9CCA 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 447+ 9CCD 19                   add  hl,de
 448+ 9CCE
 449+ 9CCE 3E B4                ld a,_smallwall;$8e
 450+ 9CD0 77                   ld (hl),a
 451+ 9CD1 23                   inc hl
 452+ 9CD2 77                   ld (hl),a
 453+ 9CD3 23                   inc hl
 454+ 9CD4 77                   ld (hl),a
 455+ 9CD5 23                   inc hl
 456+ 9CD6 77                   ld (hl),a
 457+ 9CD7
 458+ 9CD7 2B                   dec hl
 459+ 9CD8 2B                   dec hl
 460+ 9CD9 2B                   dec hl
 461+ 9CDA
 462+ 9CDA
 463+ 9CDA              ;now check if we need to draw a black side on the left of the lower half wall
 464+ 9CDA              ;do this by checking if the next block is already a wall just like above
 465+ 9CDA
 466+ 9CDA 2B                   dec hl      ;look at the left block
 467+ 9CDB 7E                   ld a,(hl)
 468+ 9CDC 23                   inc hl
 469+ 9CDD FE B4                cp _smallwall           ;is there a bottom wall5 here?
 470+ 9CDF CA EE 9C             jp z,_x2r_3
 471+ 9CE2 3E BD                ld a,$bd            ;draw leftmost bottom
 472+ 9CE4 2B                   dec hl
 473+ 9CE5 2B                   dec hl
 474+ 9CE6 2B                   dec hl
 475+ 9CE7
 476+ 9CE7 77                   ld (hl),a
 477+ 9CE8 23                   inc hl
 478+ 9CE9 3C                   inc a
 479+ 9CEA 77                   ld (hl),a
 480+ 9CEB 23                   inc hl
 481+ 9CEC 3C                   inc a
 482+ 9CED 77                   ld (hl),a
 483+ 9CEE
 484+ 9CEE D1           _x2r_3  pop de
 485+ 9CEF C3 14 9C             jp go_back5r              ; jump back to main loop
 486+ 9CF2
 487+ 9CF2              ;##########################################
 488+ 9CF2
 489+ 9CF2              ;draw the wall for 4th (and last!) right layer
 490+ 9CF2
 491+ 9CF2              ;##########################################
 492+ 9CF2
 493+ 9CF2              do_4thwall_r:
 494+ 9CF2
 495+ 9CF2              ;draw top half of wall
 496+ 9CF2
 497+ 9CF2 D5                   push de                 ;save the current acreen position
 498+ 9CF3              ;1st check if theres a wall where we need to draw the black side
 499+ 9CF3 13                   inc de
 500+ 9CF4 13                   inc de
 501+ 9CF5 13                   inc de
 502+ 9CF6 13                   inc de
 503+ 9CF7 13                   inc de
 504+ 9CF8 13                   inc de
 505+ 9CF9              ;now draw a red wall to the right of section 2,  top half
 506+ 9CF9
 507+ 9CF9 3E B4                ld a,_smallwall;$8d
 508+ 9CFB 12                   ld (de),a
 509+ 9CFC 13                   inc de
 510+ 9CFD 12                   ld (de),a
 511+ 9CFE
 512+ 9CFE
 513+ 9CFE 1B                   dec de                  ;move print position back for black wall
 514+ 9CFF
 515+ 9CFF              ;now check if we need to draw a black side on the right
 516+ 9CFF              ;by looking to the character to the right of the wall
 517+ 9CFF              ;and if there is not a wall already drawn, then draw a
 518+ 9CFF              ;black side
 519+ 9CFF
 520+ 9CFF 1B                   dec de                  ;jump left 1 char in the display
 521+ 9D00 1A                   ld a,(de)               ;read whats there
 522+ 9D01 13                   inc de                  ;put our pointer back to the original position
 523+ 9D02 FE B4                cp _smallwall;$8e                 ;is it a wall
 524+ 9D04 CA 18 9D             jp z,_x1r_31               ;if yes, do NOT draw a black side.
 525+ 9D07 3E B9                ld a,$b9              ;draw top right side
 526+ 9D09 1B                   dec de
 527+ 9D0A 1B                   dec de
 528+ 9D0B 1B                   dec de
 529+ 9D0C 1B                   dec de
 530+ 9D0D 12                   ld (de),a           ;draw 4 black sides
 531+ 9D0E 13                   inc de
 532+ 9D0F 3C                   inc a
 533+ 9D10 12                   ld (de),a
 534+ 9D11 3C                   inc a
 535+ 9D12 13                   inc de
 536+ 9D13 12                   ld (de),a
 537+ 9D14 3C                   inc a
 538+ 9D15 13                   inc de
 539+ 9D16 12                   ld (de),a
 540+ 9D17
 541+ 9D17 13                   inc de              ;move to wall start
 542+ 9D18
 543+ 9D18
 544+ 9D18              ;top line done
 545+ 9D18
 546+ 9D18              ;now do the bottom line underneath
 547+ 9D18
 548+ 9D18              _x1r_31
 549+ 9D18 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 9D1B 19                   add  hl,de
 551+ 9D1C
 552+ 9D1C 3E B4                ld a,_smallwall;$8d
 553+ 9D1E 77                   ld (hl),a
 554+ 9D1F 23                   inc hl
 555+ 9D20 77                   ld (hl),a
 556+ 9D21
 557+ 9D21 2B                   dec hl
 558+ 9D22
 559+ 9D22
 560+ 9D22              ;now check if we need to draw a black side on the left of the lower half wall
 561+ 9D22              ;do this by checking if the next block is already a wall just like above
 562+ 9D22
 563+ 9D22 2B                   dec hl      ;look at the left block
 564+ 9D23 7E                   ld a,(hl)
 565+ 9D24 23                   inc hl
 566+ 9D25 FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 567+ 9D27 CA 3A 9D             jp z,_x2r_31
 568+ 9D2A
 569+ 9D2A 3E BD                ld a,$bd            ;draw leftmost bottom
 570+ 9D2C 2B                   dec hl
 571+ 9D2D 2B                   dec hl
 572+ 9D2E 2B                   dec hl
 573+ 9D2F 2B                   dec hl
 574+ 9D30
 575+ 9D30 77                   ld (hl),a
 576+ 9D31 23                   inc hl
 577+ 9D32 3C                   inc a
 578+ 9D33 77                   ld (hl),a
 579+ 9D34 23                   inc hl
 580+ 9D35 3C                   inc a
 581+ 9D36 77                   ld (hl),a
 582+ 9D37 23                   inc hl
 583+ 9D38 3C                   inc a
 584+ 9D39 77                   ld (hl),a
 585+ 9D3A
 586+ 9D3A D1           _x2r_31  pop de
 587+ 9D3B C3 14 9C             jp go_back5r              ; jump back to main loop
 588+ 9D3E
 589+ 9D3E              ;############################################
 590+ 9D3E              ;############################################
 591+ 9D3E              ;draw layer 4 right
 592+ 9D3E              ;############################################
 593+ 9D3E              ;############################################
 594+ 9D3E
 595+ 9D3E              draw_4r
 596+ 9D3E
 597+ 9D3E
 598+ 9D3E              ; jump straight into sjasmplus debugger
 599+ 9D3E              ;        BREAK
 600+ 9D3E              ;        ret
 601+ 9D3E
 602+ 9D3E
 603+ 9D3E              ; hl=maze location being drawn.
 604+ 9D3E              ; now determine what to draw for this section.
 605+ 9D3E
 606+ 9D3E
 607+ 9D3E 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 608+ 9D41
 609+ 9D41 CD 24 8E             call load_de            ;get left and right and front jump into de reg
 610+ 9D44
 611+ 9D44 19                   add hl,de               ;jump backwards along the user view 1 space
 612+ 9D45 22 25 FA             ld (furthest_point),hl  ;load our last furthest point
 613+ 9D48
 614+ 9D48              ;we should also move our pointer left to read where the walls are.
 615+ 9D48              ;this will be from this point onwards as we can see the blocks more fully
 616+ 9D48
 617+ 9D48              ;        ld de,(right)
 618+ 9D48              ;        add hl,de               ;should be 1 place to the left now
 619+ 9D48              ;        ld (furthest_point),hl ;re save it
 620+ 9D48
 621+ 9D48 11 01 00             ld de,$0001 ;$0003             ;to move the printed position +3
 622+ 9D4B                                              ;not including black wall bit
 623+ 9D4B ED 53 11 FA          ld (var4),de
 624+ 9D4F
 625+ 9D4F
 626+ 9D4F              ;we need to move pointer 1 to the right for wall checking
 627+ 9D4F ED 5B 0D FA          ld de,(right)
 628+ 9D53 19                   add hl,de
 629+ 9D54 22 15 FA             ld (var6),hl
 630+ 9D57
 631+ 9D57 ED 53 0F FA          ld (var3),de
 632+ 9D5B 11 59 01             ld   de,$0159;159       ; offset to row 10 column 19 - right of  centre of the 3d view.
 633+ 9D5E CD 64 9D             call do_draw_4r
 634+ 9D61
 635+ 9D61
 636+ 9D61              ;ret
 637+ 9D61 C3 24 9F             jp draw_3r           ;now draw the 4th level
 638+ 9D64
 639+ 9D64              do_draw_4r:
 640+ 9D64
 641+ 9D64 2A 74 81             ld hl,(d_file)        ; fetch the location of the display file.
 642+ 9D67 19                   add hl,de
 643+ 9D68 06 04                ld b,4                 ; count for max of 4 blocks right of maze position
 644+ 9D6A                                              ; 0 is not counted so loops 3 times
 645+ 9D6A ED 5B 15 FA          ld de,(var6)
 646+ 9D6E EB                   ex de,hl              ; transfer de to hl.
 647+ 9D6F
 648+ 9D6F              loop9r:
 649+ 9D6F E5                   push hl
 650+ 9D70
 651+ 9D70              ;*#########################################
 652+ 9D70              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 653+ 9D70
 654+ 9D70 3A 28 FA             ld a,(maze_highbyte)
 655+ 9D73 BC                   cp h                    ;are we at the top part of the maze?
 656+ 9D74 CA A7 9D             jp z,cont_4a
 657+ 9D77                                              ;if we are on a different maze boundary
 658+ 9D77                                              ;then draw a maze wall as we are the top
 659+ 9D77                                              ;or north wall but maze data has no
 660+ 9D77                                              ;wall data.
 661+ 9D77              ;4 = 1st right wall
 662+ 9D77              ;3 = 2nd right wall
 663+ 9D77              ;2 = 3rd right wall
 664+ 9D77              ;1 = 4th right wall
 665+ 9D77
 666+ 9D77 78                   ld a,b                  ;our current wall counter
 667+ 9D78 FE 04                cp 4
 668+ 9D7A C2 85 9D             jp nz,b4                 ;its not wall 2
 669+ 9D7D 3E 01                ld a,1
 670+ 9D7F 47                   ld b,a
 671+ 9D80 C6 80                add a,128               ;make sure we set a wall!
 672+ 9D82 C3 D6 9D             jp draw_9r             ;jump straight to making an end wall
 673+ 9D85
 674+ 9D85 FE 03        b4:     cp 3
 675+ 9D87 C2 92 9D             jp nz,b4_1                 ;its not wall 2
 676+ 9D8A 3E 01                ld a,1
 677+ 9D8C 47                   ld b,a
 678+ 9D8D C6 80                add a,128               ;make sure we set a wall!
 679+ 9D8F C3 13 9E             jp draw_9r_2             ;jump straight to making an end wall
 680+ 9D92
 681+ 9D92 FE 02        b4_1:   cp 2
 682+ 9D94 C2 9F 9D             jp nz,b4_2                 ;its not wall 2
 683+ 9D97 3E 01                ld a,1
 684+ 9D99 47                   ld b,a
 685+ 9D9A C6 80                add a,128               ;make sure we set a wall!
 686+ 9D9C C3 83 9E             jp draw_9r_3             ;jump straight to making an end wall
 687+ 9D9F
 688+ 9D9F 3E 01        b4_2:   ld a,1
 689+ 9DA1 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 690+ 9DA2 C6 80                add a,128               ;make sure we set a wall!
 691+ 9DA4 C3 E4 9E             jp draw_9r_4	       	;draw the 2nd wall to the right
 692+ 9DA7
 693+ 9DA7              ;*#########################################
 694+ 9DA7              cont_4a:
 695+ 9DA7 7E                   ld a,(hl)
 696+ 9DA8 17                   rla
 697+ 9DA9 DA BC 9D             jp c,do_wall4r            ;bit 7 (128)
 698+ 9DAC
 699+ 9DAC
 700+ 9DAC              go_back4r:
 701+ 9DAC 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 702+ 9DAF                                              ; holds current screen position
 703+ 9DAF 19                   add hl,de
 704+ 9DB0 EB                   ex de,hl
 705+ 9DB1 E1                   pop hl
 706+ 9DB2 D5                   push de
 707+ 9DB3 ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 708+ 9DB7 19                   add hl,de               ; move to the start of the next block to print
 709+ 9DB8                                              ;we need to move back 4 blocks
 710+ 9DB8                                              ;as the first block obscures the view
 711+ 9DB8                                              ;of the next 3 blocks.
 712+ 9DB8 D1                   pop de
 713+ 9DB9 10 B4                djnz loop9r
 714+ 9DBB C9                   ret
 715+ 9DBC              ;now do the 4th position
 716+ 9DBC
 717+ 9DBC              do_wall4r:
 718+ 9DBC              do_wall4a:
 719+ 9DBC
 720+ 9DBC              ;now draw the wall based on bc count
 721+ 9DBC
 722+ 9DBC              wall4_start:
 723+ 9DBC
 724+ 9DBC 78                   ld a,b
 725+ 9DBD D6 04                sub 4                   ;4 = 1st wall to the right
 726+ 9DBF CA D6 9D             jp z,draw_9r
 727+ 9DC2
 728+ 9DC2 78                   ld a,b
 729+ 9DC3 D6 03                sub 3                   ;3 = 2nd wall immediately to the right
 730+ 9DC5 CA 13 9E             jp z,draw_9r_2
 731+ 9DC8
 732+ 9DC8 78                   ld a,b
 733+ 9DC9 D6 02                sub 2                   ;2 = 3rd wall immediately to the right
 734+ 9DCB CA 83 9E             jp z,draw_9r_3
 735+ 9DCE
 736+ 9DCE 78                   ld a,b
 737+ 9DCF D6 01                sub 1                   ;1 = 4th wall immediately to the right
 738+ 9DD1 CA E4 9E             jp z,draw_9r_4
 739+ 9DD4
 740+ 9DD4 E1                   pop hl
 741+ 9DD5 C9                   ret
 742+ 9DD6
 743+ 9DD6
 744+ 9DD6              draw_9r:
 745+ 9DD6 C5                   push bc
 746+ 9DD7 D5                   push de                 ;save our display pointer
 747+ 9DD8 06 04                ld b,4                  ;block is 4 blocks high
 748+ 9DDA 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 749+ 9DDD 3E B7        loop10r:ld   a,_mediumwall_1      ;grey sides facing us
 750+ 9DDF 12                   ld   (de),a             ; insert thepart of the wall.
 751+ 9DE0 13                   inc de
 752+ 9DE1 12                   ld (de),a               ;put grey side to our right
 753+ 9DE2 13                   inc de
 754+ 9DE3 12                   ld (de),a
 755+ 9DE4 13                   inc de
 756+ 9DE5 12                   ld (de),a
 757+ 9DE6 1B                   dec de
 758+ 9DE7 1B                   dec de                  ;go left 1 again
 759+ 9DE8 1B                   dec de
 760+ 9DE9 EB                   ex de,hl
 761+ 9DEA 19                   add  hl,de              ; advance to the next row of the display file.
 762+ 9DEB EB                   ex de,hl
 763+ 9DEC 10 EF                djnz loop10r             ;do this 3 times
 764+ 9DEE
 765+ 9DEE                      ;now draw the blank face
 766+ 9DEE D1                   pop de                  ;back to our original position
 767+ 9DEF D5                   push de
 768+ 9DF0 1B                   dec de                  ;move left 1 space in the display
 769+ 9DF1
 770+ 9DF1              ;check if the char to our right is a wall block.
 771+ 9DF1              ;if so, do not draw a black face as we need to hide it or it will
 772+ 9DF1              ;ovewrite the already drawn block
 773+ 9DF1
 774+ 9DF1 1A                   ld a,(de)
 775+ 9DF2 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 776+ 9DF4 C2 FB 9D             jp nz,cont_1r            ;there is no block so draw black edge
 777+ 9DF7 D1                   pop de
 778+ 9DF8 C1                   pop bc
 779+ 9DF9 18 B1                jr go_back4r             ;otherwise quit this draw
 780+ 9DFB
 781+ 9DFB EB           cont_1r ex  de,hl
 782+ 9DFC 11 21 00             ld de,$0021
 783+ 9DFF 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
 784+ 9E01 77                   ld  (hl),a
 785+ 9E02 19                   add hl,de
 786+ 9E03 3E AF                ld  a,_black
 787+ 9E05 77                   ld  (hl),a
 788+ 9E06 19                   add hl,de
 789+ 9E07 3E AF                ld  a,_black
 790+ 9E09 77                   ld  (hl),a
 791+ 9E0A 19                   add hl,de
 792+ 9E0B
 793+ 9E0B 77                   ld  (hl),a
 794+ 9E0C 3E B1                ld  a,_topcorner2
 795+ 9E0E 77                   ld  (hl),a
 796+ 9E0F D1                   pop de
 797+ 9E10 C1                   pop bc
 798+ 9E11 18 99                jr go_back4r              ; jump back to main loop
 799+ 9E13
 800+ 9E13              ;************************************
 801+ 9E13              ;*Draw the 2nd right block of section 4
 802+ 9E13              ;************************************
 803+ 9E13
 804+ 9E13              draw_9r_2:
 805+ 9E13 C5                   push bc
 806+ 9E14 21 03 00             ld hl,3                 ;move display 3 chars to the right
 807+ 9E17 19                   add hl,de
 808+ 9E18 EB                   ex de,hl
 809+ 9E19 D5                   push de
 810+ 9E1A
 811+ 9E1A              ;now draw the 2nd wall itself
 812+ 9E1A 06 04                ld b,4                  ;block is 4 blocks high
 813+ 9E1C 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 814+ 9E1F 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 815+ 9E21
 816+ 9E21              loop10r_2:
 817+ 9E21 12                   ld (de),a             ; insert thepart of the wall.
 818+ 9E22 13                   inc de
 819+ 9E23 12                   ld (de),a               ;put grey side to our right
 820+ 9E24 13                   inc de
 821+ 9E25 12                   ld (de),a
 822+ 9E26 13                   inc de
 823+ 9E27 12                   ld (de),a
 824+ 9E28 13                   inc de
 825+ 9E29 12                   ld (de),a
 826+ 9E2A 1B                   dec de
 827+ 9E2B 1B                   dec de
 828+ 9E2C 1B                   dec de
 829+ 9E2D 1B                   dec de                  ;go left 1 again
 830+ 9E2E EB                   ex de,hl
 831+ 9E2F 19                   add  hl,de              ; advance to the next row of the display file.
 832+ 9E30 EB                   ex de,hl
 833+ 9E31 10 EE                djnz loop10r_2             ;do this 3 times
 834+ 9E33
 835+ 9E33                      ;now draw the blank face
 836+ 9E33 D1                   pop de                  ;back to our original position
 837+ 9E34 D5                   push de
 838+ 9E35 1B                   dec de                  ;move left 1 space in the display
 839+ 9E36
 840+ 9E36              ;check if the char to our right is a wall block.
 841+ 9E36              ;if so, do not draw a black face as we need to hide it or it will
 842+ 9E36              ;ovewrite the already drawn block
 843+ 9E36
 844+ 9E36 1A                   ld a,(de)
 845+ 9E37 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 846+ 9E39 C2 41 9E             jp nz,cont_1r_2           ;there is no block so draw black edge
 847+ 9E3C D1                   pop de
 848+ 9E3D C1                   pop bc
 849+ 9E3E C3 AC 9D             jp go_back4r             ;otherwise quit this draw
 850+ 9E41
 851+ 9E41              cont_1r_2:
 852+ 9E41 EB                   ex  de,hl
 853+ 9E42 11 21 00             ld de,$0021
 854+ 9E45
 855+ 9E45              ;need to loop 2 times drawing 2 lots of 3 top
 856+ 9E45              ;& bottom chars- move down 1after 1st 3 top chars drawn
 857+ 9E45              ;
 858+ 9E45
 859+ 9E45 3E 02                ld a,2
 860+ 9E47 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 861+ 9E4A
 862+ 9E4A              ;loop for 2 black wall columns
 863+ 9E4A 3E 03                ld a,3                  ;column start height
 864+ 9E4C 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
 865+ 9E4F
 866+ 9E4F 06 03                ld b,3                  ;loop 3 times for 3 columns
 867+ 9E51 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 868+ 9E54 3E 91                ld a,$91
 869+ 9E56 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 870+ 9E59
 871+ 9E59              loop10br_2:
 872+ 9E59 C5                   push bc                 ;save count
 873+ 9E5A 3A 04 FA             ld a,(var1)             ;column height
 874+ 9E5D 47                   ld b,a                  ;holds the column height in chars
 875+ 9E5E 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 876+ 9E61 F5                   push af                 ;save a for bottom corners
 877+ 9E62 77                   ld  (hl),a
 878+ 9E63
 879+ 9E63              loop10ar_2:
 880+ 9E63 19                   add hl,de
 881+ 9E64 3E AF                ld  a,_black            ;black wall fill
 882+ 9E66 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 883+ 9E67 10 FA                djnz loop10ar_2
 884+ 9E69
 885+ 9E69 F1                   pop af                  ;retrivetop corner
 886+ 9E6A 3D                   dec a                   ;prep for next top corner
 887+ 9E6B 32 05 FA             ld (var2),a             ;re-save it for next corner
 888+ 9E6E C6 04                add a,4                 ;get the correct char to print
 889+ 9E70 77                   ld  (hl),a              ;draw the bottom of the wall
 890+ 9E71
 891+ 9E71                      ;now change column count
 892+ 9E71 3A 04 FA             ld a,(var1)
 893+ 9E74 C1                   pop bc
 894+ 9E75
 895+ 9E75 2A 13 FA             ld hl,(var5)
 896+ 9E78 2B                   dec hl                  ;move print position to the left
 897+ 9E79 22 13 FA             ld (var5),hl
 898+ 9E7C
 899+ 9E7C 10 DB                djnz loop10br_2
 900+ 9E7E
 901+ 9E7E              exit_1_2:
 902+ 9E7E D1                   pop de
 903+ 9E7F C1                   pop bc
 904+ 9E80 C3 AC 9D             jp go_back4r              ; jump back to main loop
 905+ 9E83
 906+ 9E83              ;#############################################
 907+ 9E83              ;*Draw the 3rd right block of section 4
 908+ 9E83              ;#############################################
 909+ 9E83
 910+ 9E83              draw_9r_3:
 911+ 9E83
 912+ 9E83 C5                   push bc
 913+ 9E84 D5                   push de                 ;save our display pointer
 914+ 9E85 06 04                ld b,4                  ;block is 4 blocks high
 915+ 9E87 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
 916+ 9E8A 11 62 C1             ld de,$C162             ;start of drawing
 917+ 9E8D
 918+ 9E8D              loop10r_3:
 919+ 9E8D 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 920+ 9E8F 12                   ld (de),a               ; insert thepart of the wall.
 921+ 9E90 EB                   ex de,hl
 922+ 9E91 19                   add  hl,de              ; advance to the next row of the display file.
 923+ 9E92 EB                   ex de,hl
 924+ 9E93 10 F8                djnz loop10r_3          ;do this 3 times
 925+ 9E95
 926+ 9E95                      ;now draw the blank face
 927+ 9E95 D1                   pop de                  ;back to our original position
 928+ 9E96 D5                   push de
 929+ 9E97
 930+ 9E97              ;check if the char to our right is a wall block.
 931+ 9E97              ;if so, do not draw a black face as we need to hide it or it will
 932+ 9E97              ;ovewrite the already drawn block
 933+ 9E97
 934+ 9E97
 935+ 9E97 3A 61 C1             ld a,($c161);(de)
 936+ 9E9A FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 937+ 9E9C C2 A4 9E             jp nz,cont_1r_3            ;there is no block so draw black edge
 938+ 9E9F
 939+ 9E9F D1                   pop de
 940+ 9EA0 C1                   pop bc
 941+ 9EA1 C3 AC 9D             jp go_back4r             ;otherwise quit this draw
 942+ 9EA4
 943+ 9EA4              cont_1r_3:
 944+ 9EA4 EB                   ex  de,hl
 945+ 9EA5 11 21 00             ld de,$0021
 946+ 9EA8 21 61 C1             ld hl,$c161
 947+ 9EAB
 948+ 9EAB              ;need to loop 2 times drawing 2 lots of 3 top
 949+ 9EAB              ;& bottom chars- move down 1after 1st 3 top chars drawn
 950+ 9EAB              ;
 951+ 9EAB
 952+ 9EAB              ;loop for 2 black wall columns
 953+ 9EAB 3E 03                ld a,3                  ;column start height
 954+ 9EAD 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 955+ 9EB0
 956+ 9EB0 06 05                ld b,5                  ;loop 5 times for 5 columns
 957+ 9EB2 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 958+ 9EB5 3E CD                ld a,$cd ;91
 959+ 9EB7 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 960+ 9EBA
 961+ 9EBA              loop10br_2a:
 962+ 9EBA C5                   push bc                 ;save count
 963+ 9EBB 3A 04 FA             ld a,(var1)             ;column height
 964+ 9EBE 47                   ld b,a                  ;holds the column height in chars
 965+ 9EBF 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 966+ 9EC2 F5                   push af                 ;save a for bottom corners
 967+ 9EC3 77                   ld  (hl),a
 968+ 9EC4
 969+ 9EC4              loop10ar_2a:
 970+ 9EC4 19                   add hl,de
 971+ 9EC5 3E AF                ld  a,_black            ;black wall fill
 972+ 9EC7 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 973+ 9EC8 10 FA                djnz loop10ar_2a
 974+ 9ECA
 975+ 9ECA F1                   pop af                  ;retrivetop corner
 976+ 9ECB 3D                   dec a                   ;prep for next top corner
 977+ 9ECC 32 05 FA             ld (var2),a             ;re-save it for next corner
 978+ 9ECF C6 06                add a,6                 ;get the correct char to print
 979+ 9ED1 77                   ld  (hl),a              ;draw the bottom of the wall
 980+ 9ED2
 981+ 9ED2                      ;now change column count
 982+ 9ED2 3A 04 FA             ld a,(var1)
 983+ 9ED5 C1                   pop bc
 984+ 9ED6
 985+ 9ED6 2A 13 FA             ld hl,(var5)
 986+ 9ED9 2B                   dec hl                  ;move print position to the left
 987+ 9EDA 22 13 FA             ld (var5),hl
 988+ 9EDD
 989+ 9EDD 10 DB                djnz loop10br_2a
 990+ 9EDF
 991+ 9EDF D1                   pop de
 992+ 9EE0 C1                   pop bc
 993+ 9EE1 C3 AC 9D             jp go_back4r              ; jump back to main loop
 994+ 9EE4
 995+ 9EE4              ;#############################################
 996+ 9EE4              ;*Draw the 4th RIGHT block of section 4
 997+ 9EE4              ;#############################################
 998+ 9EE4
 999+ 9EE4              ; we only need to draw up to 2 columns of black sides.
1000+ 9EE4
1001+ 9EE4              draw_9r_4:
1002+ 9EE4 C5                   push bc
1003+ 9EE5 D5                   push de                 ;save our display pointer
1004+ 9EE6
1005+ 9EE6              ;check if the char to our left is a wall block.
1006+ 9EE6              ;if so, do not draw a black face as we need to hide it or it will
1007+ 9EE6              ;ovewrite the already drawn block
1008+ 9EE6
1009+ 9EE6 21 62 C1             ld hl,$C18C+20-30-32              ;start of drawing
1010+ 9EE9 7E                   ld a,(hl)
1011+ 9EEA FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1012+ 9EEC C2 F4 9E             jp nz,cont_3r            ;there is no block so draw black edge
1013+ 9EEF
1014+ 9EEF D1                   pop de
1015+ 9EF0 C1                   pop bc
1016+ 9EF1 C3 AC 9D             jp go_back4r             ;otherwise quit this draw
1017+ 9EF4
1018+ 9EF4              cont_3r:
1019+ 9EF4 11 21 00             ld de,33                ;to jump to next line below
1020+ 9EF7 3E CA                ld a,$ca                ;top of the wall
1021+ 9EF9 E5                   push hl                 ;save for drawing 2nd black wall
1022+ 9EFA 77                   ld (hl),a               ;to cover up wall 5
1023+ 9EFB 19                   add hl,de               ;jump to next line
1024+ 9EFC 3E AF                ld a,_black
1025+ 9EFE 77                   ld (hl),a
1026+ 9EFF 19                   add hl,de
1027+ 9F00 77                   ld (hl),a
1028+ 9F01 19                   add hl,de
1029+ 9F02 3E CF                ld a,$cf                ;draw bottom of the line
1030+ 9F04 77                   ld (hl),a
1031+ 9F05
1032+ 9F05              ;now check if we need to cover wall 5 with a 2nd black line to the left
1033+ 9F05              ;hl points to top of the 4 blocks
1034+ 9F05 E1                   pop hl                  ;restore our pointer in char ram
1035+ 9F06 2B                   dec hl                  ;go left 1 place
1036+ 9F07 E5                   push hl
1037+ 9F08 19                   add hl,de               ;now we are at the wall 5 top position
1038+ 9F09 7E                   ld a,(hl)
1039+ 9F0A FE B4                cp _smallwall
1040+ 9F0C E1                   pop hl
1041+ 9F0D 20 0B                jr nz,exit3r
1042+ 9F0F              ;draw the second wall over section 5 wall
1043+ 9F0F 36 C9                ld (hl),$c9             ;top of the wall
1044+ 9F11 19                   add hl,de
1045+ 9F12 36 AF                ld (hl),_black
1046+ 9F14 19                   add hl,de
1047+ 9F15 36 AF                ld (hl),_black
1048+ 9F17 19                   add hl,de
1049+ 9F18 36 CE                ld (hl),$ce             ;bottom of the wall
1050+ 9F1A
1051+ 9F1A D1           exit3r:  pop de                  ;now exit
1052+ 9F1B C1                   pop bc
1053+ 9F1C C3 AC 9D             jp go_back4r
1054+ 9F1F
1055+ 9F1F
1056+ 9F1F              ;draw 2 black walls across 1 line
1057+ 9F1F              black_wall_2:
1058+ 9F1F 19                   add hl,de      ;jump 1 line below
1059+ 9F20 77                   ld (hl),a
1060+ 9F21 23                   inc hl
1061+ 9F22 77                   ld (hl),a
1062+ 9F23 C9                   ret
1063+ 9F24
1064+ 9F24
1065+ 9F24              ;#############################################
1066+ 9F24              ;#############################################
1067+ 9F24              ;# draw wall 3 right
1068+ 9F24              ;#############################################
1069+ 9F24              ;#############################################
1070+ 9F24
1071+ 9F24              draw_3r:
1072+ 9F24
1073+ 9F24              ; hl=maze location being drawn.
1074+ 9F24              ; now determine what to draw for this section.
1075+ 9F24
1076+ 9F24
1077+ 9F24 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1078+ 9F27
1079+ 9F27 CD 24 8E             call load_de            ;get left and right and front jump into de reg
1080+ 9F2A
1081+ 9F2A 19                   add hl,de               ;jump backwards along the user view 1 space
1082+ 9F2B 22 25 FA             ld (furthest_point),hl  ;re save it
1083+ 9F2E
1084+ 9F2E 11 01 00             ld de,$0001             ;to move the display position +1
1085+ 9F31 ED 53 11 FA          ld (var4),de
1086+ 9F35
1087+ 9F35 ED 5B 0D FA          ld de,(right)
1088+ 9F39
1089+ 9F39 19                   add hl,de
1090+ 9F3A 22 15 FA             ld (var6),hl
1091+ 9F3D                         ;save the maze position
1092+ 9F3D
1093+ 9F3D ED 53 0F FA          ld (var3),de
1094+ 9F41 11 19 01             ld de,$0119           ; offset right of  centre of the 3d view.
1095+ 9F44
1096+ 9F44 CD 4A 9F             call do_draw_3r
1097+ 9F47
1098+ 9F47
1099+ 9F47 C3 A9 A0             jp draw_2r              ;now draw the 2nd level
1100+ 9F4A
1101+ 9F4A              do_draw_3r:
1102+ 9F4A
1103+ 9F4A 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
1104+ 9F4D 19                   add  hl,de
1105+ 9F4E
1106+ 9F4E
1107+ 9F4E              ; draw  right half of the display.
1108+ 9F4E
1109+ 9F4E 06 03                ld b,3                  ; count for 2 blocks left or right of display file
1110+ 9F50                                              ; 0 is not counted so loops 12 times
1111+ 9F50 ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
1112+ 9F54
1113+ 9F54 EB                   ex   de,hl              ; transfer de to hl.
1114+ 9F55
1115+ 9F55              ;       hl = furthest point in the maze
1116+ 9F55              ;       de = d_file location to store byte to display
1117+ 9F55
1118+ 9F55              loop11r:
1119+ 9F55 E5                   push hl
1120+ 9F56
1121+ 9F56              ;*#########################################
1122+ 9F56              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1123+ 9F56
1124+ 9F56 3A 28 FA             ld a,(maze_highbyte)
1125+ 9F59 BC                   cp h                    ;are we at the top part of the maze?
1126+ 9F5A CA 81 9F             jp z,cont_3a
1127+ 9F5D                                              ;if we are on a different maze boundary
1128+ 9F5D                                              ;then draw a maze wall as we are the top
1129+ 9F5D                                              ;or north wall but maze data has no
1130+ 9F5D                                              ;wall data.
1131+ 9F5D              ;3 = first right wall
1132+ 9F5D              ;2 = 2nd right wall
1133+ 9F5D              ;1 = 3rd right wall
1134+ 9F5D
1135+ 9F5D 78                   ld a,b                  ;our current wall counter
1136+ 9F5E D6 03                sub 3
1137+ 9F60 C2 6B 9F             jp nz,b3_1                 ;its not wall 2
1138+ 9F63 3E 01                ld a,1
1139+ 9F65 47                   ld b,a
1140+ 9F66 C6 80                add a,128               ;make sure we set a wall!
1141+ 9F68 C3 A5 9F             jp draw_10r             ;jump straight to making an end wall
1142+ 9F6B
1143+ 9F6B 78           b3_1    ld a,b                  ;our current wall counter
1144+ 9F6C D6 02                sub 2
1145+ 9F6E C2 79 9F             jp nz,b3_2                 ;its not wall 2
1146+ 9F71 3E 01                ld a,1
1147+ 9F73 47                   ld b,a
1148+ 9F74 C6 80                add a,128               ;make sure we set a wall!
1149+ 9F76 C3 13 A0             jp draw_10r_2             ;jump straight to making an end wall
1150+ 9F79
1151+ 9F79
1152+ 9F79 3E 01        b3_2:   ld a,1
1153+ 9F7B 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1154+ 9F7C C6 80                add a,128               ;make sure we set a wall!
1155+ 9F7E C3 85 A0             jp draw_10r_3	       	;draw the 2nd wall to the right
1156+ 9F81
1157+ 9F81              ;*#########################################
1158+ 9F81              cont_3a:
1159+ 9F81 7E                   ld a,(hl)
1160+ 9F82 17                   rla
1161+ 9F83 DA 91 9F             jp c,do_wall3r            ;if bit 7=128 theres a wall
1162+ 9F86
1163+ 9F86
1164+ 9F86              go_back3r:
1165+ 9F86 E1                   pop hl
1166+ 9F87 D5                   push de
1167+ 9F88 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1168+ 9F8C 19                   add hl,de                ; go right 1 block in the maze
1169+ 9F8D D1                   pop de
1170+ 9F8E 10 C5                djnz loop11r
1171+ 9F90 C9                   ret
1172+ 9F91              ;now do the next maze position
1173+ 9F91
1174+ 9F91
1175+ 9F91              do_wall3r:
1176+ 9F91
1177+ 9F91                      ;check if bit 1 is set as thats an end wall
1178+ 9F91                      ;and b must then be changed to 1 to stop drawing.
1179+ 9F91
1180+ 9F91                      ;2020 draw layers according to how close to the middle
1181+ 9F91              ;         bit 1,a                 ; is this a side wall? (129 but we rla'd accumulator)
1182+ 9F91              ;         jr z,wall3_start
1183+ 9F91              ;         ld b,1                  ;it IS a sidewall so set b so we exit on return
1184+ 9F91
1185+ 9F91              ;**** Whats this for? Does it work!
1186+ 9F91              ;         ld a,(blockid)
1187+ 9F91              ;         cp 16
1188+ 9F91              ;         jp z,draw_10r          ;16 = a side wall
1189+ 9F91
1190+ 9F91              ;now draw the wall based on bc value
1191+ 9F91              wall3_start:
1192+ 9F91
1193+ 9F91
1194+ 9F91 78                  ld a,b			               ;b is the loop count i.e # of walls to draw
1195+ 9F92 D6 01               	sub 1			               ;3 = the wall imediately right
1196+ 9F94 CA 85 A0             jp z,draw_10r_3          ;draw an end wall if blockid=16
1197+ 9F97
1198+ 9F97 78                   ld a,b
1199+ 9F98 D6 03                sub 3
1200+ 9F9A CA A5 9F             jp z,draw_10r         		;draw the 1st wall to the right
1201+ 9F9D
1202+ 9F9D 78                   ld a,b
1203+ 9F9E D6 02                sub 2
1204+ 9FA0 CA 13 A0             jp z,draw_10r_2	       	;draw the 2nd wall to the right
1205+ 9FA3
1206+ 9FA3 E1                   pop hl                  ;nothing to draw so return
1207+ 9FA4 C9                   ret
1208+ 9FA5
1209+ 9FA5
1210+ 9FA5              draw_10r:
1211+ 9FA5 C5                    push bc                ;save loop count
1212+ 9FA6 11 19 C1              ld de,$c119             ;start of print position
1213+ 9FA9 D5                    push de                 ;save our display pointer
1214+ 9FAA
1215+ 9FAA 06 08                 ld b,8                  ;block is 8 blocks high
1216+ 9FAC 21 21 00              ld hl,$0021             ;load with 32 to jump to line below us
1217+ 9FAF 3E B5                 ld a, _mediumwall       ;wall on sides facing us
1218+ 9FB1 12           loop12r: ld (de),a               ; insert the part of the wall.
1219+ 9FB2 13                    inc de
1220+ 9FB3 12                    ld (de),a               ;put grey side to our right
1221+ 9FB4 13                    inc de
1222+ 9FB5 12                    ld (de),a               ;put grey side to our right
1223+ 9FB6 13                    inc de
1224+ 9FB7 12                    ld (de),a               ;put grey side to our right
1225+ 9FB8 13                    inc de
1226+ 9FB9 12                    ld (de),a               ;put grey side to our right
1227+ 9FBA 13                    inc de
1228+ 9FBB 12                    ld (de),a               ;put grey side to our right
1229+ 9FBC
1230+ 9FBC 13                    inc de
1231+ 9FBD 12                    ld (de),a
1232+ 9FBE 13                    inc de
1233+ 9FBF 12                    ld (de),a
1234+ 9FC0 1B                    dec de
1235+ 9FC1 1B                    dec de
1236+ 9FC2
1237+ 9FC2 1B                    dec de
1238+ 9FC3 1B                    dec de
1239+ 9FC4 1B                    dec de
1240+ 9FC5 1B                    dec de
1241+ 9FC6 1B                    dec de
1242+ 9FC7 EB                    ex de,hl
1243+ 9FC8 19                    add  hl,de              ; advance to the next row of the display file.
1244+ 9FC9 EB                    ex de,hl
1245+ 9FCA 10 E5                 djnz loop12r            ;do this 3 times
1246+ 9FCC
1247+ 9FCC              ;now draw the blank face to the leftt of the block
1248+ 9FCC              ;create first column of left face characters
1249+ 9FCC
1250+ 9FCC D1                    pop de                  ;back to our original position
1251+ 9FCD D5                    push de
1252+ 9FCE 1B                    dec de                  ;move ahead 1 space in the display (right)
1253+ 9FCF
1254+ 9FCF              ;check if the char to our left is a wall block.
1255+ 9FCF              ;if so, do not draw a black face as we need to hide it or it will
1256+ 9FCF              ;ovewrite the already drawn block
1257+ 9FCF
1258+ 9FCF 1A                    ld a,(de)
1259+ 9FD0 FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1260+ 9FD2 C2 D9 9F              jp nz,cont_2r            ;there is no block so draw black edge
1261+ 9FD5 D1                    pop de
1262+ 9FD6 C1                    pop bc
1263+ 9FD7 18 AD                 jr go_back3r             ;otherwise quit this draw
1264+ 9FD9
1265+ 9FD9
1266+ 9FD9 EB           cont_2r: ex  de,hl
1267+ 9FDA 11 21 00              ld de,$0021
1268+ 9FDD
1269+ 9FDD              ;loop for 2 columns
1270+ 9FDD
1271+ 9FDD 06 02                ld b,2                  ; loop 2 times for 2 columns
1272+ 9FDF 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1273+ 9FE2 3E 07                ld a,7
1274+ 9FE4 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1275+ 9FE7
1276+ 9FE7              loop12br:
1277+ 9FE7 C5                   push bc                 ;save count
1278+ 9FE8 3A 04 FA             ld a,(var1)
1279+ 9FEB 47                   ld b,a                  ;holds the column height in chars
1280+ 9FEC 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
1281+ 9FEE 77                   ld  (hl),a
1282+ 9FEF
1283+ 9FEF              loop12ar:                   ;we must start at5 to draw 4 face blocks on right
1284+ 9FEF 19                   add hl,de
1285+ 9FF0 3E AF                ld  a,_black      ;triangle sloping to right bottom
1286+ 9FF2 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1287+ 9FF3 10 FA                djnz loop12ar
1288+ 9FF5
1289+ 9FF5
1290+ 9FF5 3E B1                ld  a,_topcorner2
1291+ 9FF7 77                   ld  (hl),a
1292+ 9FF8
1293+ 9FF8                      ;now change column count
1294+ 9FF8 3A 04 FA             ld a,(var1)
1295+ 9FFB D6 02                sub 2                   ;subtract 2
1296+ 9FFD 32 04 FA             ld (var1),a
1297+ A000 C1                   pop bc
1298+ A001
1299+ A001 2A 13 FA             ld hl,(var5)
1300+ A004 2B                   dec hl                  ;move print position to the left
1301+ A005 11 21 00             ld de,$21               ;move top of next column down and across 1
1302+ A008 19                   add hl,de
1303+ A009 22 13 FA             ld (var5),hl
1304+ A00C
1305+ A00C 10 D9                djnz loop12br
1306+ A00E D1                   pop de
1307+ A00F C1                   pop bc
1308+ A010 C3 86 9F             jp go_back3r              ; jump back to main loop
1309+ A013
1310+ A013              ;**********************************
1311+ A013              ;     draw the 2nd right block
1312+ A013              ;***********************************
1313+ A013
1314+ A013              draw_10r_2:
1315+ A013
1316+ A013 C5                    push bc
1317+ A014 11 19 C1              ld de, $c119           ;start print position of wall
1318+ A017 D5                   push de
1319+ A018              ;dont draw a front wall as we never see it.
1320+ A018
1321+ A018 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1322+ A01B 19                   add hl,de
1323+ A01C EB                   ex de,hl
1324+ A01D              ;we do not need a front wall for this row as it is never seen.
1325+ A01D              ;below jp code can be removed :) Because a square block here
1326+ A01D              ;is 8 x 8
1327+ A01D
1328+ A01D 1B                    dec de                  ;move ahead 1 space in the display (right)
1329+ A01E
1330+ A01E              ;check if the char to our left is a wall block.
1331+ A01E              ;if so, do not draw a black face as we need to hide it or it will
1332+ A01E              ;ovewrite the already drawn block
1333+ A01E 1A                    ld a,(de)
1334+ A01F FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1335+ A021 C2 29 A0              jp nz,cont_2r_2            ;there is no block so draw black edge
1336+ A024 D1                    pop de
1337+ A025 C1                    pop bc
1338+ A026 C3 86 9F              jp go_back3r             ;otherwise quit this draw
1339+ A029
1340+ A029
1341+ A029              ;draw the black edge wall
1342+ A029
1343+ A029              cont_2r_2:
1344+ A029 EB                    ex  de,hl
1345+ A02A 11 21 00              ld de,$0021
1346+ A02D
1347+ A02D              ;need to loop 2 times drawing 2 lots of 3 top
1348+ A02D              ;& bottom chars- move down 1after 1st 3 top chars drawn
1349+ A02D              ;
1350+ A02D
1351+ A02D 3E 02                ld a,2
1352+ A02F 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1353+ A032
1354+ A032              ;loop for 3 black wall columns
1355+ A032 3E 07                ld a,7                  ;column start height
1356+ A034 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1357+ A037
1358+ A037 06 03        loop_x: ld b,3                  ;loop 3 times for 3 columns
1359+ A039 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1360+ A03C 3E 91                ld a,$91
1361+ A03E 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1362+ A041
1363+ A041              loop12br_2:
1364+ A041 C5                   push bc                 ;save count
1365+ A042 3A 04 FA             ld a,(var1)             ;column height
1366+ A045 47                   ld b,a                  ;holds the column height in chars
1367+ A046 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1368+ A049 F5                   push af                 ;save a for bottom corners
1369+ A04A 77                   ld  (hl),a
1370+ A04B
1371+ A04B              loop12ar_2:
1372+ A04B 19                   add hl,de
1373+ A04C 3E AF                ld  a,_black            ;black wall fill
1374+ A04E 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1375+ A04F 10 FA                djnz loop12ar_2
1376+ A051
1377+ A051 F1                   pop af                  ;retrivetop corner
1378+ A052 3D                   dec a                   ;prep for next top corner
1379+ A053 32 05 FA             ld (var2),a             ;re-save it for next corner
1380+ A056 C6 04                add a,4                 ;get the correct char to print
1381+ A058 77                   ld  (hl),a              ;draw the bottom of the wall
1382+ A059
1383+ A059                      ;now change column count
1384+ A059 3A 04 FA             ld a,(var1)
1385+ A05C C1                   pop bc
1386+ A05D
1387+ A05D 2A 13 FA             ld hl,(var5)
1388+ A060 2B                   dec hl                  ;move print position to the left
1389+ A061 22 13 FA             ld (var5),hl
1390+ A064
1391+ A064 10 DB                djnz loop12br_2
1392+ A066
1393+ A066              ;1st set of 3 top bits drawn
1394+ A066              ;now jump down the display 1 line
1395+ A066              ;then draw another 3 columns
1396+ A066
1397+ A066 3A 18 FA             ld a,(var7)             ;get our loop counter
1398+ A069 3D                   dec a
1399+ A06A 28 12                jr z,exit_1             ;exit after 2 loops
1400+ A06C 32 18 FA             ld (var7),a             ;save it
1401+ A06F 2A 13 FA             ld hl,(var5)
1402+ A072              ;get our last print position
1403+ A072                                              ;need to go to next line -1 char
1404+ A072 19                   add hl,de
1405+ A073                                              ; now move back in the display
1406+ A073                                              ;1 char
1407+ A073 22 13 FA             ld (var5),hl            ;re save it for use above
1408+ A076
1409+ A076 3E 05                ld a,5                  ;reduce black wall column height
1410+ A078 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1411+ A07B
1412+ A07B C3 37 A0             jp loop_x
1413+ A07E
1414+ A07E
1415+ A07E D1           exit_1: pop de
1416+ A07F C1                   pop bc
1417+ A080 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1418+ A082 C3 86 9F             jp go_back3r              ; jump back to main loop
1419+ A085
1420+ A085
1421+ A085              ;#############################################
1422+ A085              ;*Draw the 3rd RIGHT block of section3
1423+ A085              ;#############################################
1424+ A085
1425+ A085
1426+ A085              	; we only need to draw 2 columns of black sides.
1427+ A085                  ; if theres no brick pattern !
1428+ A085
1429+ A085              draw_10r_3:
1430+ A085 C5                   push bc
1431+ A086 D5                   push de                 ;save our display pointer
1432+ A087
1433+ A087 21 41 C1             ld hl,$C18C-66-30-3+24  ;start of drawing
1434+ A08A 7E                   ld a,(hl)               ;read what char is there
1435+ A08B FE B5                cp _mediumwall
1436+ A08D 20 05                jr nz,cont_1r_4        ;exit if a wall is already there
1437+ A08F D1                   pop de
1438+ A090 C1                   pop bc
1439+ A091 C3 86 9F             jp go_back3r             ;otherwise quit this draw
1440+ A094
1441+ A094              cont_1r_4:
1442+ A094
1443+ A094 3E C9                ld a,$c9
1444+ A096 77                   ld (hl),a
1445+ A097
1446+ A097 3E AF                ld a,_black
1447+ A099 11 21 00             ld de,33                ;1 line width
1448+ A09C
1449+ A09C CD 0A 95             CALL black_wall         ;draw 4 black blocks
1450+ A09F
1451+ A09F 19                   add hl,de               ;jump to next line below
1452+ A0A0
1453+ A0A0
1454+ A0A0              ;top half done - so do bottom half - 2 blacks first
1455+ A0A0
1456+ A0A0              ;de already holds 32
1457+ A0A0
1458+ A0A0 3E CE                ld a,$ce
1459+ A0A2 77                   ld (hl),a
1460+ A0A3
1461+ A0A3 D1                   pop de
1462+ A0A4 C1                   pop bc
1463+ A0A5 C3 86 9F             jp go_back3r
1464+ A0A8
1465+ A0A8              ;draw 2 black walls across 1 line
1466+ A0A8              ;black_wall:
1467+ A0A8              ;        add hl,de      ;jump 1 line below
1468+ A0A8              ;        ld (hl),a
1469+ A0A8              ;        add hl,de      ;jump 1 line below
1470+ A0A8              ;        ld (hl),a
1471+ A0A8              ;        add hl,de      ;jump 1 line below
1472+ A0A8              ;        ld (hl),a
1473+ A0A8              ;        add hl,de      ;jump 1 line below
1474+ A0A8              ;        ld (hl),a
1475+ A0A8
1476+ A0A8 C9                   ret
1477+ A0A9
1478+ A0A9
1479+ A0A9
1480+ A0A9              ;#############################################
1481+ A0A9              ;#############################################
1482+ A0A9              ; draw  layer 2
1483+ A0A9              ;#############################################
1484+ A0A9              ;#############################################
1485+ A0A9
1486+ A0A9              draw_2r:
1487+ A0A9
1488+ A0A9
1489+ A0A9              ; hl=maze location being drawn.
1490+ A0A9              ; now determine what to draw for this section.
1491+ A0A9              test
1492+ A0A9
1493+ A0A9 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1494+ A0AC
1495+ A0AC CD 24 8E             call load_de            ;get left and right and front jump into de reg
1496+ A0AF
1497+ A0AF 19                   add hl,de               ;jump backwards along the user view 1 space
1498+ A0B0 22 25 FA             ld (furthest_point),hl ;re save it
1499+ A0B3
1500+ A0B3 11 01 00             ld de,$0001             ;to move the display position +1
1501+ A0B6 ED 53 11 FA          ld (var4),de
1502+ A0BA
1503+ A0BA ED 5B 0D FA          ld de,(right)
1504+ A0BE
1505+ A0BE              ;we need to move pointer 1 to the left for wall checking
1506+ A0BE 19                   add hl,de
1507+ A0BF 22 15 FA             ld (var6),hl
1508+ A0C2
1509+ A0C2 ED 53 0F FA          ld (var3),de
1510+ A0C6 11 B9 00             ld  de,$0b9           ; offset to right of centre of the 3d view.
1511+ A0C9 CD CF A0             call do_draw_2r
1512+ A0CC
1513+ A0CC C3 44 A1             jp draw_1r           ;now draw the 2nd level
1514+ A0CF
1515+ A0CF              do_draw_2r:
1516+ A0CF
1517+ A0CF 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
1518+ A0D2 19                   add  hl,de
1519+ A0D3
1520+ A0D3
1521+ A0D3 06 01                ld b,1                 ; count for 1 blocks left or right of display file
1522+ A0D5                                              ; 0 is not counted so loops 12 times
1523+ A0D5 ED 5B 15 FA          ld de,(var6)
1524+ A0D9
1525+ A0D9 EB                   ex   de,hl              ; transfer de to hl.
1526+ A0DA
1527+ A0DA
1528+ A0DA E5           loop14r: push hl
1529+ A0DB
1530+ A0DB              ;*#########################################
1531+ A0DB              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1532+ A0DB
1533+ A0DB 3A 28 FA             ld a,(maze_highbyte)
1534+ A0DE BC                   cp h                    ;are we at the top part of the maze?
1535+ A0DF CA EA A0             jp z,cont_2a
1536+ A0E2                                              ;if we are on a different maze boundary
1537+ A0E2                                              ;then draw a maze wall as we are the top
1538+ A0E2                                              ;or north wall but maze data has no
1539+ A0E2                                              ;wall data.
1540+ A0E2
1541+ A0E2 3E 01                ld a,1
1542+ A0E4 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1543+ A0E5 C6 7F                add a,127               ;make sure we set a wall!
1544+ A0E7 C3 F1 A0             jp draw_11r             ;jump straight to making an end wall
1545+ A0EA
1546+ A0EA              ;*#########################################
1547+ A0EA              cont_2a:
1548+ A0EA 7E                   ld a,(hl)
1549+ A0EB 17                   rla
1550+ A0EC DA F1 A0             jp c,do_wall2r            ;bit 7 (128)
1551+ A0EF
1552+ A0EF
1553+ A0EF              go_back2r:
1554+ A0EF E1                   pop hl
1555+ A0F0 C9                   ret
1556+ A0F1              ;now do the 2nd position
1557+ A0F1
1558+ A0F1
1559+ A0F1
1560+ A0F1              do_wall2r:
1561+ A0F1                      ;check if bit 2 is set as thats an end wall.
1562+ A0F1                      ;and b must then be changed to 1 to stop drawing.
1563+ A0F1              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1564+ A0F1              ;        jr z,draw_11r
1565+ A0F1              ;        ld b,1                  ;set b so we exit on return
1566+ A0F1
1567+ A0F1              ;?? 2020 do we need this??????
1568+ A0F1              ;        ld a,(blockid)
1569+ A0F1              ;        cp 16
1570+ A0F1              ;        jp z,draw_11r           ;draw an endwall if blockid=16
1571+ A0F1              ;        pop hl
1572+ A0F1              ;        ret
1573+ A0F1
1574+ A0F1
1575+ A0F1              draw_11r:
1576+ A0F1              ;        push bc
1577+ A0F1 D5                   push de                 ;save our display pointer
1578+ A0F2 06 0E                ld b,14                  ;block is 14 blocks high
1579+ A0F4 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1580+ A0F7 3E B6                ld   a,_largewall            ;wall on sides facing us
1581+ A0F9
1582+ A0F9              ;draw 4 columns of bricks
1583+ A0F9              loop13r:
1584+ A0F9 12                   ld (de),a             ; insert the part of the wall.
1585+ A0FA 13                   inc de
1586+ A0FB 12                   ld (de),a               ;draw brick side
1587+ A0FC 13                   inc de
1588+ A0FD 12                   ld (de),a
1589+ A0FE 13                   inc de
1590+ A0FF 12                   ld (de),a
1591+ A100 13                   inc de
1592+ A101 12                   ld (de),a
1593+ A102 1B                   dec de
1594+ A103 1B                   dec de
1595+ A104 1B                   dec de
1596+ A105 1B                   dec de
1597+ A106 EB                   ex de,hl
1598+ A107 19                   add  hl,de              ; advance to the next row of the display file.
1599+ A108 EB                   ex de,hl
1600+ A109 10 EE               djnz loop13r             ;do this 3 times
1601+ A10B
1602+ A10B
1603+ A10B
1604+ A10B                      ;now draw the blank face to the left of the block
1605+ A10B                      ;create first column of left face characters
1606+ A10B D1                   pop de                  ;back to our original position
1607+ A10C 1B                   dec de
1608+ A10D EB                   ex  de,hl
1609+ A10E 11 21 00             ld de,$0021
1610+ A111
1611+ A111 06 03                ld b,3                  ; for 4 face columns to draw to draw
1612+ A113 22 13 FA             ld (var5),hl
1613+ A116 3E 0D                ld a,13                 ; for 14 blocks high per column
1614+ A118 32 04 FA             ld (var1),a
1615+ A11B
1616+ A11B              ;draw the black sides
1617+ A11B              loop13br:
1618+ A11B C5                   push bc
1619+ A11C 3A 04 FA             ld a,(var1)
1620+ A11F 47                   ld b,a
1621+ A120 3E B2                ld a,_topcorner3
1622+ A122 77                   ld (hl),a
1623+ A123
1624+ A123              loop13ar:
1625+ A123 19                   add hl,de
1626+ A124 3E AF                ld  a,_black
1627+ A126 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1628+ A127 10 FA                djnz loop13ar
1629+ A129
1630+ A129 3E B1                ld  a,_topcorner2
1631+ A12B 77                   ld  (hl),a
1632+ A12C
1633+ A12C              ; now change the column count
1634+ A12C 3A 04 FA             ld a,(var1)
1635+ A12F D6 02                sub 2
1636+ A131 32 04 FA             ld (var1),a
1637+ A134 C1                   pop bc
1638+ A135
1639+ A135 2A 13 FA             ld hl,(var5)
1640+ A138 2B                   dec hl
1641+ A139 11 21 00             ld de,$21
1642+ A13C 19                   add hl,de
1643+ A13D 22 13 FA             ld (var5),hl
1644+ A140
1645+ A140 10 D9                djnz loop13br
1646+ A142
1647+ A142 18 AB                jr go_back2r              ; jump back to main loop
1648+ A144
1649+ A144
1650+ A144
1651+ A144              ;#############################################
1652+ A144              ;#############################################
1653+ A144              ; draw 1st layer right
1654+ A144              ;#############################################
1655+ A144              ;#############################################
1656+ A144
1657+ A144              draw_1r:
1658+ A144
1659+ A144              ; hl=maze location being drawn.
1660+ A144              ; now determine what to draw for this section.
1661+ A144
1662+ A144
1663+ A144 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1664+ A147
1665+ A147 CD 24 8E             call load_de            ;get left and right and front jump into de reg
1666+ A14A
1667+ A14A 19                   add hl,de               ;jump backwards along the user view 1 space
1668+ A14B 22 25 FA             ld (furthest_point),hl ;re save it
1669+ A14E
1670+ A14E 11 01 00             ld de,$0001             ;to move the display position +1
1671+ A151 ED 53 11 FA          ld (var4),de
1672+ A155
1673+ A155 ED 5B 0D FA          ld de,(right)
1674+ A159
1675+ A159              ;we need to move pointer 1 to the left for wall checking
1676+ A159 19                   add hl,de
1677+ A15A 22 15 FA             ld (var6),hl
1678+ A15D
1679+ A15D              ;        ld de,$0001             ;to move the display position +1
1680+ A15D ED 53 0F FA          ld (var3),de
1681+ A161 11 38 00             ld  de,$038           ; offset to row 1 column 0 - left of  centre of the 3d view.
1682+ A164 CD 6A A1             call do_draw_1r
1683+ A167
1684+ A167
1685+ A167 C3 DA A1             jp draw_0r           ;now draw the 2nd level
1686+ A16A
1687+ A16A              do_draw_1r:
1688+ A16A
1689+ A16A 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
1690+ A16D 19                   add  hl,de
1691+ A16E
1692+ A16E 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1693+ A170                                              ; 0 is not counted so loops 12 times
1694+ A170 ED 5B 15 FA          ld de,(var6)
1695+ A174 EB                   ex   de,hl              ; transfer de to hl.
1696+ A175
1697+ A175              ;       hl = furthest point in the maze
1698+ A175              ;       de = d_file location to store byte to display
1699+ A175
1700+ A175 E5           loop15r: push hl
1701+ A176
1702+ A176              ;*#########################################
1703+ A176              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1704+ A176
1705+ A176 3A 28 FA             ld a,(maze_highbyte)
1706+ A179 BC                   cp h                    ;are we at the top part of the maze?
1707+ A17A CA 85 A1             jp z,cont_1a
1708+ A17D                                              ;if we are on a different maze boundary
1709+ A17D                                              ;then draw a maze wall as we are the top
1710+ A17D                                              ;or north wall but maze data has no
1711+ A17D                                              ;wall data.
1712+ A17D
1713+ A17D 3E 01                ld a,1
1714+ A17F 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1715+ A180 C6 7F                add a,127               ;make sure we set a wall!
1716+ A182 C3 92 A1             jp draw_12r             ;jump straight to making an end wall
1717+ A185
1718+ A185              ;*#########################################
1719+ A185              cont_1a:
1720+ A185 7E                   ld a,(hl)
1721+ A186 17                   rla
1722+ A187 DA 8C A1             jp c,do_wall1r            ;bit 7 (128)
1723+ A18A
1724+ A18A              go_back1r:
1725+ A18A E1                   pop hl
1726+ A18B C9                   ret
1727+ A18C
1728+ A18C              do_wall1r:
1729+ A18C                      ;check if bit 2 is set as thats an end
1730+ A18C                      ;and b must then be changed to 1 to stop drawing.
1731+ A18C
1732+ A18C CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1733+ A18E 28 02                jr z,draw_12r
1734+ A190 06 01                ld b,1                  ;set b so we exit on return
1735+ A192
1736+ A192              ;**** Whats this for? Does it work!
1737+ A192
1738+ A192              ;        ld a,(blockid)
1739+ A192              ;        cp 16
1740+ A192              ;        jp z,draw_12r           ;draw an end wall if blockid=16
1741+ A192              ;        pop hl
1742+ A192              ;        ret
1743+ A192
1744+ A192
1745+ A192              ;draw the corridor bit to the left (1 column)
1746+ A192              draw_12r:
1747+ A192 D5                   push de                 ;save our display pointer
1748+ A193 06 16                ld b,22                  ;block is 22 blocks high
1749+ A195 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1750+ A198 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1751+ A19A              loop16r:                        ; insert thepart of the wall.
1752+ A19A 13                   inc de
1753+ A19B 12                   ld (de),a               ;put grey side to our right
1754+ A19C 1B                   dec de
1755+ A19D EB                   ex de,hl
1756+ A19E 19                   add  hl,de              ; advance to the next row of the display file.
1757+ A19F EB                   ex de,hl
1758+ A1A0 10 F8                djnz loop16r             ;do this 3 times
1759+ A1A2
1760+ A1A2                      ;now draw the blank face to the right of the block
1761+ A1A2                      ;create first column of right face characters
1762+ A1A2 D1                   pop de                  ;back to our original position
1763+ A1A3 EB                   ex  de,hl
1764+ A1A4 11 21 00             ld de,$0021
1765+ A1A7
1766+ A1A7              ;now draw the face we see on our left as we walk forward
1767+ A1A7 06 04                ld b,4                  ; for 8 face columns to draw to draw
1768+ A1A9 22 13 FA             ld (var5),hl
1769+ A1AC 3E 15                ld a,21                 ; for 14 blocks high per column
1770+ A1AE 32 04 FA             ld (var1),a
1771+ A1B1
1772+ A1B1              loop14br:
1773+ A1B1 C5                   push bc
1774+ A1B2 3A 04 FA             ld a,(var1)
1775+ A1B5 47                   ld b,a
1776+ A1B6 3E B2                ld a,_topcorner3
1777+ A1B8 77                   ld (hl),a
1778+ A1B9
1779+ A1B9              loop14ar:
1780+ A1B9 19                   add hl,de
1781+ A1BA 3E AF                ld  a,_black            ;triangle sloping to right bottom
1782+ A1BC 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1783+ A1BD 10 FA                djnz loop14ar
1784+ A1BF
1785+ A1BF 3E B1                ld  a,_topcorner2
1786+ A1C1 77                   ld  (hl),a
1787+ A1C2
1788+ A1C2              ; now change the column count
1789+ A1C2 3A 04 FA             ld a,(var1)
1790+ A1C5 D6 02                sub 2
1791+ A1C7 32 04 FA             ld (var1),a
1792+ A1CA C1                   pop bc
1793+ A1CB
1794+ A1CB 2A 13 FA             ld hl,(var5)
1795+ A1CE 2B                   dec hl
1796+ A1CF 11 21 00             ld de,$21
1797+ A1D2 19                   add hl,de
1798+ A1D3 22 13 FA             ld (var5),hl
1799+ A1D6
1800+ A1D6 10 D9                djnz loop14br
1801+ A1D8
1802+ A1D8 18 B0                jr go_back1r              ; jump back to main loop
1803+ A1DA
1804+ A1DA
1805+ A1DA              ;#############################################
1806+ A1DA              ;#############################################
1807+ A1DA              ; draw layer 0 right
1808+ A1DA              ;#############################################
1809+ A1DA              ;#############################################
1810+ A1DA
1811+ A1DA              draw_0r:
1812+ A1DA              ;ret
1813+ A1DA
1814+ A1DA
1815+ A1DA              ; hl=maze location being drawn.
1816+ A1DA              ; now determine what to draw for this section.
1817+ A1DA
1818+ A1DA 2A 25 FA             ld   hl,(furthest_point); retrieve the maze location.
1819+ A1DD
1820+ A1DD CD 24 8E             call load_de
1821+ A1E0
1822+ A1E0              ;**think we can lose these 2 lines.
1823+ A1E0                                  ;get left and right and front jump into de reg
1824+ A1E0 19                   add  hl,de
1825+ A1E1
1826+ A1E1              ;need to move pointer right for wall checking
1827+ A1E1 ED 5B 0D FA          ld de,(right)
1828+ A1E5 19                   add hl,de
1829+ A1E6 22 15 FA             ld (var6),hl
1830+ A1E9
1831+ A1E9 ED 53 0F FA          ld (var3),de
1832+ A1ED 11 18 00             ld  de,$18              ;offset to row0 column 24 - left of  centre of the 3d view.
1833+ A1F0                                              ;1 column of left face to draw
1834+ A1F0              ;draw the wall
1835+ A1F0 2A 74 81             ld   hl,(d_file)        ; fetch the location of the display file.
1836+ A1F3 19                   add  hl,de
1837+ A1F4
1838+ A1F4
1839+ A1F4 ED 5B 15 FA          ld   de,(var6)
1840+ A1F8 EB                   ex   de,hl              ; transfer de to hl.
1841+ A1F9
1842+ A1F9
1843+ A1F9              loop17r:
1844+ A1F9
1845+ A1F9              ;*#########################################
1846+ A1F9              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1847+ A1F9
1848+ A1F9 3A 28 FA             ld a,(maze_highbyte)
1849+ A1FC BC                   cp h                    ;are we at the top part of the maze?
1850+ A1FD CA 08 A2             jp z,cont_0a
1851+ A200                                              ;if we are on a different maze boundary
1852+ A200                                              ;then draw a maze wall as we are the top
1853+ A200                                              ;or north wall but maze data has no
1854+ A200                                              ;wall data.
1855+ A200
1856+ A200 3E 01                ld a,1
1857+ A202 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1858+ A203 C6 7F                add a,127               ;make sure we set a wall!
1859+ A205 C3 16 A2             jp draw_13r             ;jump straight to making an end wall
1860+ A208
1861+ A208              ;*#########################################
1862+ A208              cont_0a:
1863+ A208 7E                   ld a,(hl)
1864+ A209 17                   rla
1865+ A20A DA 0E A2             jp c,do_wall0r           ;bit 7 (128)
1866+ A20D C9                   ret
1867+ A20E
1868+ A20E
1869+ A20E              do_wall0r:
1870+ A20E                      ;check if bit 2 is set as thats an end wall
1871+ A20E                      ;and b must then be changed to 1 to stop drawing.
1872+ A20E
1873+ A20E CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1874+ A210 DA 16 A2             jp c,draw_13r          ;yes if bit 2 = 1
1875+ A213 C3 2D A2             jp draw_wall0r           ;its a wall but not a side wall.
1876+ A216
1877+ A216
1878+ A216
1879+ A216
1880+ A216              ;we need to draw 1 vertical line from pos 1,1 to show
1881+ A216              ;the side of the block.
1882+ A216
1883+ A216              ;draw sidewall brick pattern
1884+ A216              draw_13r:
1885+ A216 3E B2                ld a,_topcorner3
1886+ A218 EB                   ex de,hl
1887+ A219
1888+ A219 77                   ld (hl),a
1889+ A21A 11 21 00             ld de,$21                ;jp to next line below
1890+ A21D 19                   add hl,de
1891+ A21E 06 16                ld b,22                  ;block is 22 blocks high
1892+ A220 11 21 00             ld de,$021           ;load with 32 to jump to line below us
1893+ A223 3E AF                ld a,_black            ;wall on sides facing us;
1894+ A225              loop18r:
1895+ A225 77                   ld (hl),a             ; insert the part of the wall.
1896+ A226 19                   add  hl,de              ; advance to the next row of the display file.
1897+ A227 10 FC                djnz loop18r
1898+ A229
1899+ A229              ;###this bit causes the direction indicator to fail
1900+ A229 3E B1                ld a,_topcorner2
1901+ A22B 77                   ld (hl),a
1902+ A22C C9                   ret                     ;return to main program
1903+ A22D
1904+ A22D              draw_wall0r:                     ;draw brick pattern only
1905+ A22D
1906+ A22D 11 21 00             ld de,$21                ;jp to next line below
1907+ A230 19                   add hl,de
1908+ A231                     ; ex de,hl
1909+ A231
1910+ A231 06 16                ld b,22                  ;block is 24 blocks high
1911+ A233 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
1912+ A236 3E B6                ld a,_largewall            ;wall on sides facing us;
1913+ A238              loop19r:
1914+ A238 77                   ld (hl),a             ; insert the part of the wall.
1915+ A239                     ; ex de,hl
1916+ A239 19                   add  hl,de              ; advance to the next row of the display file.
1917+ A23A                     ; ex de,hl
1918+ A23A 10 FC                djnz loop19r
1919+ A23C
1920+ A23C C9                   ret                     ;return to main program
1921+ A23D
# file closed: src/6-rd3dmazeV6.asm
 452  A23D
 453  A23D              ;#####################################################
 454  A23D
 455  A23D
 456  A23D              ;###################################################
 457  A23D              ; Get Keystroke Routine from Your Sinclair Magazine
 458  A23D              ; From Your Sinclair #22 (Oct.1987)
 459  A23D              ;###################################################
 460  A23D
 461  A23D
 462  A23D              get_keys:
 463  A23D               ;
 464  A23D               ;      YS_KEYS
 465  A23D               ;
 466  A23D               ;A,HL,DE corrupt
 467  A23D               ;B=0, key in C
 468  A23D
 469  A23D
 470  A23D               ;Keyboard Scanning
 471  A23D               ;by Pete Cooke
 472  A23D               ;from Your Sinclair #22 (Oct.1987)
 473  A23D
 474  A23D               ;prog for Your Sinclair
 475  A23D               ;
 476  A23D               ;file for Hisoft GENS
 477  A23D               ;assembler but should
 478  A23D               ;be suitable for most
 479  A23D               ;assemblers on the market
 480  A23D               ;
 481  A23D               ;Reads the keyboard
 482  A23D               ;Returns with C
 483  A23D               ;holding L/R/U/D/F
 484  A23D               ;
 485  A23D               ;bit 4,C left
 486  A23D               ;bit 3,C right
 487  A23D               ;bit 2,C up
 488  A23D               ;bit 1,C down
 489  A23D               ;bit 0,C fire
 490  A23D               ;
 491  A23D               ;bit set to 1 if pressed
 492  A23D               ;
 493  A23D               ;keys are chosen by
 494  A23D               ;values in KEYTAB
 495  A23D               ;
 496  A23D 21 84 A2     readke  ld   hl,keytab
 497  A240 01 00 05             ld   bc,$0500
 498  A243               ;
 499  A243               ;5 keys to read
 500  A243               ;
 501  A243 7E           read_1  ld   a,(hl)
 502  A244 1F                   rra
 503  A245 1F                   rra
 504  A246 E6 1E                and  $1e
 505  A248 5F                   ld   e,a
 506  A249 16 00                ld   d,0
 507  A24B               ;
 508  A24B               ;2*the row number
 509  A24B               ;
 510  A24B 7E                   ld   a,(hl)
 511  A24C 23                   inc  hl
 512  A24D E5                   push hl
 513  A24E               ;
 514  A24E               ;save place in KEYTAB
 515  A24E               ;
 516  A24E 21 72 A2             ld   hl,keyadd
 517  A251 19                   add  hl,de
 518  A252 57                   ld   d,a
 519  A253               ;
 520  A253               ;index port addresses
 521  A253               ;
 522  A253 C5                   push bc
 523  A254 4E                   ld   c,(hl)
 524  A255 23                   inc  hl
 525  A256 46                   ld   b,(hl)
 526  A257 ED 78                in   a,(c)
 527  A259 04                   inc  b
 528  A25A 05                   dec  b
 529  A25B 28 01                jr   z,read_2
 530  A25D 2F                   cpl
 531  A25E 5F           read_2  ld   e,a
 532  A25F               ;
 533  A25F               ;read the port
 534  A25F               ;and flip bits if not
 535  A25F               ;Kempston
 536  A25F               ;
 537  A25F C1                   pop  bc
 538  A260 E1                   pop  hl
 539  A261               ;
 540  A261               ;and get back BC+HL
 541  A261               ;
 542  A261 7A                   ld   a,d
 543  A262 E6 07                and  $07
 544  A264 28 05                jr   z,read_4
 545  A266               ;
 546  A266 CB 1B        read_3  rr   e
 547  A268 3D                   dec  a
 548  A269 20 FB                jr   nz,read_3
 549  A26B               ;
 550  A26B               ;rotate L so bit needed
 551  A26B               ;is in bit 0
 552  A26B               ;
 553  A26B CB 1B        read_4  rr   e
 554  A26D CB 11                rl   c
 555  A26F               ;
 556  A26F               ;rotate the bit into C
 557  A26F               ;
 558  A26F 10 D2                djnz read_1
 559  A271 C9                   ret
 560  A272               ;
 561  A272               ;exit B=0
 562  A272               ;     C=keys
 563  A272               ;
 564  A272               ;A,HL,DE corrupt
 565  A272               ;
 566  A272               ;
 567  A272               ;port addresses of
 568  A272               ;the keyboard rows
 569  A272               ;
 570  A272 FE F7 FE FB  keyadd dw 63486,64510,65022,65278,61438,57342,49150,32766
 570  A276 FE FD FE FE
 570  A27A FE EF FE DF
 570  A27E FE BF FE 7F
 571  A282 1F 00                dw 31 ;*Kempston*
 572  A284               ;
 573  A284               ;
 574  A284               ;KEYTAB holds the position
 575  A284               ;of each key as
 576  A284               ;1/2 row number*8 plus
 577  A284               ;distance from the edge
 578  A284               ;eg. P = 5*8+0
 579  A284               ;    O = 5*8+1
 580  A284               ;    Q = 1*8+0
 581  A284               ;    4 = 0*8+3
 582  A284               ;
 583  A284 04 24 23 22  keytab db 0*8+4,4*8+4,4*8+3,4*8+2,4*8+0
 583  A288 20
 584  A289               ;           5      6     7      8   0
 585  A289               ;;bit values: 1 = 0 fire
 586  A289               ;             2 = 8 right
 587  A289               ;             4 = 7 up
 588  A289               ;             8 = 6 down
 589  A289               ;            16 = 5 left
 590  A289
 591  A289              ; keytab db 5*8+1,5*8+0,2*8+1,3*8+2,7*8+0
 592  A289               ;
 593  A289               ;set for O,P,S,X,space
 594  A289               ;
 595  A289               ;for a Kempston joystick
 596  A289               ;substitute
 597  A289               ;
 598  A289               ;       db 8*8+1,8*8+0,8*8+3,8*8+2,8*8+4
 599  A289               ;
 600  A289 00           end_k nop
 601  A28A
 602  A28A              ;##############################################
 603  A28A              ;##############################################
 604  A28A
 605  A28A              ;set map - sets hl to start of map to draw
 606  A28A              ;a holds the map number = 0 to 15
 607  A28A
 608  A28A              set_map:
 609  A28A
 610  A28A 21 00 A3             ld hl,map_0             ;start of map data 256 bytes each
 611  A28D 32 22 FA             ld (cur_map),a          ;save our cur map
 612  A290 22 23 FA             ld (map_start),hl
 613  A293
 614  A293 3D                   dec a
 615  A294 3C                   inc a                   ;exit if its map 0
 616  A295
 617  A295 7C                   ld a,h
 618  A296 32 28 FA             ld (maze_highbyte),a
 619  A299 C8                   ret z       ;if a is 0, just return for map_0
 620  A29A
 621  A29A 3A 22 FA             ld a,(cur_map)
 622  A29D 24           loop3   inc h                   ; times by 256
 623  A29E 3D                   dec a
 624  A29F 20 FC                jr nz, loop3
 625  A2A1 22 23 FA             ld (map_start),hl
 626  A2A4 7C                   ld a, h
 627  A2A5 32 28 FA             ld (maze_highbyte),a
 628  A2A8 C9                   ret
 629  A2A9
 630  A2A9              ;#################################################################
 631  A2A9              ;Character screen reservation
 632  A2A9                      org $c000
 633  C000 00 00 00...  char_screen:   block 768    ;view screen built here from characters
 634  C300
 635  C300 00 00 00...  attr_screen:   block 768    ;colours held here for door animation
 636  C600
 637  C600              ;################################################
 638  C600
 639  C600
 640  C600              ;##############################################
 641  C600              ; Alternate Character set
 642  C600              ;from https://www.jimblimey.com/blog/24-zx-spectrum-fonts/
 643  C600              ;##############################################
 644  C600              charset_1:
 645  C600 00 00 00 00    defb 0,0,0,0,0,0,0,0
 645  C604 00 00 00 00
 646  C608 10 38 38 38    defb 16,56,56,56,16,0,16,0
 646  C60C 10 00 10 00
 647  C610 66 33 33 00    defb 102,51,51,0,0,0,0,0
 647  C614 00 00 00 00
 648  C618 66 66 FF 66    defb 102,102,255,102,102,255,102,102
 648  C61C 66 FF 66 66
 649  C620 14 7E D4 7E    defb 20,126,212,126,149,126,20,0
 649  C624 95 7E 14 00
 650  C628 60 94 68 10    defb 96,148,104,16,44,82,140,0
 650  C62C 2C 52 8C 00
 651  C630 30 48 30 48    defb 48,72,48,72,142,140,120,0
 651  C634 8E 8C 78 00
 652  C638 0C 0C 18 00    defb 12,12,24,0,0,0,0,0
 652  C63C 00 00 00 00
 653  C640 01 02 04 04    defb 1,2,4,4,4,4,2,1
 653  C644 04 04 02 01
 654  C648 80 40 20 20    defb 128,64,32,32,32,32,64,128
 654  C64C 20 20 40 80
 655  C650 00 54 38 FE    defb 0,84,56,254,56,84,0,0
 655  C654 38 54 00 00
 656  C658 00 18 18 7E    defb 0,24,24,126,24,24,0,0
 656  C65C 18 18 00 00
 657  C660 00 00 00 00    defb 0,0,0,0,0,0,48,96
 657  C664 00 00 30 60
 658  C668 00 00 00 7E    defb 0,0,0,126,0,0,0,0
 658  C66C 00 00 00 00
 659  C670 00 00 00 00    defb 0,0,0,0,0,0,48,0
 659  C674 00 00 30 00
 660  C678 01 02 04 08    defb 1,2,4,8,16,32,64,128
 660  C67C 10 20 40 80
 661  C680 7C 86 8A 92    defb 124,134,138,146,162,194,124,0
 661  C684 A2 C2 7C 00
 662  C688 10 30 70 10    defb 16,48,112,16,16,16,124,0
 662  C68C 10 10 7C 00
 663  C690 78 84 08 30    defb 120,132,8,48,64,128,252,0
 663  C694 40 80 FC 00
 664  C698 78 84 04 38    defb 120,132,4,56,4,132,120,0
 664  C69C 04 84 78 00
 665  C6A0 80 44 48 48    defb 128,68,72,72,252,8,8,0
 665  C6A4 FC 08 08 00
 666  C6A8 FE 80 80 7C    defb 254,128,128,124,2,130,124,0
 666  C6AC 02 82 7C 00
 667  C6B0 7A 84 80 BC    defb 122,132,128,188,194,130,124,0
 667  C6B4 C2 82 7C 00
 668  C6B8 FE 84 08 10    defb 254,132,8,16,56,16,16,0
 668  C6BC 38 10 10 00
 669  C6C0 7C 82 7C 82    defb 124,130,124,130,130,130,124,0
 669  C6C4 82 82 7C 00
 670  C6C8 7C 82 86 7A    defb 124,130,134,122,2,130,124,0
 670  C6CC 02 82 7C 00
 671  C6D0 00 30 00 00    defb 0,48,0,0,0,48,0,0
 671  C6D4 00 30 00 00
 672  C6D8 00 30 00 00    defb 0,48,0,0,0,48,32,0
 672  C6DC 00 30 20 00
 673  C6E0 08 10 20 40    defb 8,16,32,64,32,16,8,0
 673  C6E4 20 10 08 00
 674  C6E8 00 00 7E 00    defb 0,0,126,0,126,0,0,0
 674  C6EC 7E 00 00 00
 675  C6F0 20 10 08 04    defb 32,16,8,4,8,16,32,0
 675  C6F4 08 10 20 00
 676  C6F8 7C 82 04 08    defb 124,130,4,8,16,0,16,0
 676  C6FC 10 00 10 00
 677  C700 7C 82 9A AA    defb 124,130,154,170,170,158,124,0
 677  C704 AA 9E 7C 00
 678  C708 F8 44 42 FE    defb 248,68,66,254,66,66,198,0
 678  C70C 42 42 C6 00
 679  C710 FC 42 42 FC    defb 252,66,66,252,66,66,252,0
 679  C714 42 42 FC 00
 680  C718 7A 84 80 80    defb 122,132,128,128,128,130,124,0
 680  C71C 80 82 7C 00
 681  C720 FC 42 42 42    defb 252,66,66,66,66,66,252,0
 681  C724 42 42 FC 00
 682  C728 FE 42 40 70    defb 254,66,64,112,192,66,254,0
 682  C72C C0 42 FE 00
 683  C730 FE 42 40 70    defb 254,66,64,112,192,64,224,0
 683  C734 C0 40 E0 00
 684  C738 7A 84 80 80    defb 122,132,128,128,156,130,126,2
 684  C73C 9C 82 7E 02
 685  C740 82 44 44 5E    defb 130,68,68,94,244,68,130,0
 685  C744 F4 44 82 00
 686  C748 10 08 08 08    defb 16,8,8,8,8,8,4,0
 686  C74C 08 08 04 00
 687  C750 7E 08 04 04    defb 126,8,4,4,4,132,120,0
 687  C754 04 84 78 00
 688  C758 CC 44 48 F0    defb 204,68,72,240,72,68,198,0
 688  C75C 48 44 C6 00
 689  C760 C0 40 40 40    defb 192,64,64,64,64,66,254,0
 689  C764 40 42 FE 00
 690  C768 C6 6A 5A 4A    defb 198,106,90,74,74,66,198,0
 690  C76C 4A 42 C6 00
 691  C770 CC 64 54 54    defb 204,100,84,84,84,84,204,0
 691  C774 54 54 CC 00
 692  C778 78 84 84 84    defb 120,132,132,132,132,132,120,0
 692  C77C 84 84 78 00
 693  C780 F8 44 44 F8    defb 248,68,68,248,64,64,224,0
 693  C784 40 40 E0 00
 694  C788 78 84 84 84    defb 120,132,132,132,132,140,125,2
 694  C78C 84 8C 7D 02
 695  C790 FC 42 42 FC    defb 252,66,66,252,66,66,198,0
 695  C794 42 42 C6 00
 696  C798 74 88 80 78    defb 116,136,128,120,4,132,120,0
 696  C79C 04 84 78 00
 697  C7A0 7C 54 10 10    defb 124,84,16,16,16,16,48,0
 697  C7A4 10 10 30 00
 698  C7A8 C6 44 44 82    defb 198,68,68,130,130,130,124,0
 698  C7AC 82 82 7C 00
 699  C7B0 CC 44 44 44    defb 204,68,68,68,68,40,16,0
 699  C7B4 44 28 10 00
 700  C7B8 C6 42 42 4A    defb 198,66,66,74,90,106,204,0
 700  C7BC 5A 6A CC 00
 701  C7C0 82 44 28 10    defb 130,68,40,16,40,68,130,0
 701  C7C4 28 44 82 00
 702  C7C8 CC 44 44 38    defb 204,68,68,56,16,16,48,0
 702  C7CC 10 10 30 00
 703  C7D0 FE 84 08 10    defb 254,132,8,16,32,66,254,0
 703  C7D4 20 42 FE 00
 704  C7D8 1C 10 10 10    defb 28,16,16,16,16,16,28,0
 704  C7DC 10 10 1C 00
 705  C7E0 80 40 20 10    defb 128,64,32,16,8,4,2,1
 705  C7E4 08 04 02 01
 706  C7E8 38 08 08 08    defb 56,8,8,8,8,8,56,0
 706  C7EC 08 08 38 00
 707  C7F0 00 00 10 38    defb 0,0,16,56,108,198,0,0
 707  C7F4 6C C6 00 00
 708  C7F8 00 00 00 00    defb 0,0,0,0,0,0,0,255
 708  C7FC 00 00 00 FF
 709  C800 30 30 18 00    defb 48,48,24,0,0,0,0,0
 709  C804 00 00 00 00
 710  C808 00 00 7A 04    defb 0,0,122,4,124,132,122,0
 710  C80C 7C 84 7A 00
 711  C810 80 40 40 5C    defb 128,64,64,92,98,66,188,0
 711  C814 62 42 BC 00
 712  C818 00 00 7A 84    defb 0,0,122,132,128,130,124,0
 712  C81C 80 82 7C 00
 713  C820 02 04 74 8C    defb 2,4,116,140,132,132,122,0
 713  C824 84 84 7A 00
 714  C828 00 00 BC 42    defb 0,0,188,66,124,64,62,0
 714  C82C 7C 40 3E 00
 715  C830 34 48 40 E0    defb 52,72,64,224,64,64,128,0
 715  C834 40 40 80 00
 716  C838 00 00 7A 84    defb 0,0,122,132,140,116,4,120
 716  C83C 8C 74 04 78
 717  C840 80 40 78 44    defb 128,64,120,68,68,68,136,0
 717  C844 44 44 88 00
 718  C848 10 00 10 08    defb 16,0,16,8,8,8,4,0
 718  C84C 08 08 04 00
 719  C850 00 10 00 10    defb 0,16,0,16,8,8,136,112
 719  C854 08 08 88 70
 720  C858 C0 40 48 50    defb 192,64,72,80,224,80,200,0
 720  C85C E0 50 C8 00
 721  C860 30 10 10 10    defb 48,16,16,16,16,16,56,0
 721  C864 10 10 38 00
 722  C868 00 00 AC 54    defb 0,0,172,84,84,68,204,0
 722  C86C 54 44 CC 00
 723  C870 00 00 B8 44    defb 0,0,184,68,68,68,204,0
 723  C874 44 44 CC 00
 724  C878 00 00 78 84    defb 0,0,120,132,132,132,120,0
 724  C87C 84 84 78 00
 725  C880 00 00 B8 44    defb 0,0,184,68,68,120,64,128
 725  C884 44 78 40 80
 726  C888 00 00 74 88    defb 0,0,116,136,136,120,4,2
 726  C88C 88 78 04 02
 727  C890 00 00 B0 48    defb 0,0,176,72,64,64,64,0
 727  C894 40 40 40 00
 728  C898 00 00 78 80    defb 0,0,120,128,112,8,240,0
 728  C89C 70 08 F0 00
 729  C8A0 00 20 10 7C    defb 0,32,16,124,16,16,8,0
 729  C8A4 10 10 08 00
 730  C8A8 00 00 90 48    defb 0,0,144,72,132,132,120,0
 730  C8AC 84 84 78 00
 731  C8B0 00 00 82 44    defb 0,0,130,68,68,40,16,0
 731  C8B4 44 28 10 00
 732  C8B8 00 00 84 42    defb 0,0,132,66,82,106,70,0
 732  C8BC 52 6A 46 00
 733  C8C0 00 00 88 50    defb 0,0,136,80,32,80,136,0
 733  C8C4 20 50 88 00
 734  C8C8 00 00 82 44    defb 0,0,130,68,68,60,4,120
 734  C8CC 44 3C 04 78
 735  C8D0 00 00 7C 88    defb 0,0,124,136,48,68,248,0
 735  C8D4 30 44 F8 00
 736  C8D8 0E 10 10 60    defb 14,16,16,96,16,16,14,0
 736  C8DC 10 10 0E 00
 737  C8E0 18 18 18 00    defb 24,24,24,0,24,24,24,0
 737  C8E4 18 18 18 00
 738  C8E8 E0 10 10 0C    defb 224,16,16,12,16,16,224,0
 738  C8EC 10 10 E0 00
 739  C8F0 00 00 70 9A    defb 0,0,112,154,12,0,0,0
 739  C8F4 0C 00 00 00
 740  C8F8 00 00 18 3C    defb 0,0,24,60,102,255,0,0
 740  C8FC 66 FF 00 00
 741  C900
 742  C900
 743  C900
 744  C900                  include 7-rd3dmazeV6.asm    ;the maze itself and other routines
# file opened: src/7-rd3dmazeV6.asm
   1+ C900              ;this is the maze data and colour exit routine
   2+ C900
   3+ C900              ;##########################################################
   4+ C900              ;maze data
   5+ C900
   6+ C900                      org $a300   ;41728
   7+ A300
   8+ A300              ;################################################################
   9+ A300              ; maze data
  10+ A300              ;################################################################
  11+ A300
  12+ A300              ; the maze lies on a page boundary, allowing the code to check only the low byte of its address.
  13+ A300              ; the maze is 18 positions north-to-south (rows 0 to 17) and 16 positions west-to-east (columns 0 to 15).
  14+ A300              ;
  15+ A300              ;    n
  16+ A300              ;    |
  17+ A300              ; w -+- e
  18+ A300              ;    |
  19+ A300              ;    s
  20+ A300              ;
  21+ A300              ; key: x=wall, space=passageway, e=exit.
  22+ A300
  23+ A300
  24+ A300                 ;   org 34288 ;($85F0) for maze start
  25+ A300
  26+ A300                     ; org 28928               ;$7100 256 byte boundary
  27+ A300
  28+ A300              ;#####################################################################################
  29+ A300              ;This is our 16 Maze's maze data = numbered 0 to 15
  30+ A300              ;#####################################################################################
  31+ A300
  32+ A300              ; maze constants
  33+ A300              ; --------------
  34+ A300              ; the code for the wall must have bit 7 set whereas the other codes must have bit 7 reset except switch and exit
  35+ A300              ;as we still need to draw a wall.
  36+ A300
  37+ A300              _mw     equ  128   ;bin 10000000              ; wall.
  38+ A300              _mp     equ  32    ;bin 00100000              ; passageway.
  39+ A300              _me     equ  192   ;bin 11000000              ; exit.
  40+ A300              _sp     equ  32    ;bin 00100000              ; passageway.
  41+ A300              _mh     equ  129   ;bin 10000001              ; seperator or end wall
  42+ A300              _ms     equ  224   ;bin 11100000              ; switch     ($e0)
  43+ A300
  44+ A300
  45+ A300              ; _mh - outside wall
  46+ A300              ; _mw - inner maze wall
  47+ A300              ; _mp - space=passageway
  48+ A300              ; _me - exit door
  49+ A300              ; _ms - switch
  50+ A300              ; maze starts at 34288 on a 256 byte boundary
  51+ A300
  52+ A300              ;col  1    2     3    4    5   6    7   8    9    10   11   12   13   14   15   16
  53+ A300              map_0:
  54+ A300 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  54+ A304 20 20 20 20
  54+ A308 20 20 20 20
  54+ A30C 20 20 20 20
  55+ A310 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;2
  55+ A314 80 20 80 20
  55+ A318 80 20 80 20
  55+ A31C 80 20 80 20
  56+ A320 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  56+ A324 20 20 20 20
  56+ A328 20 20 20 20
  56+ A32C 20 20 20 20
  57+ A330 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;4
  57+ A334 80 20 80 20
  57+ A338 80 20 80 20
  57+ A33C 80 20 80 20
  58+ A340 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  58+ A344 20 20 20 20
  58+ A348 20 20 20 20
  58+ A34C 20 20 20 20
  59+ A350 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;6
  59+ A354 80 20 80 20
  59+ A358 80 20 80 20
  59+ A35C 80 20 80 20
  60+ A360 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  60+ A364 80 80 80 20
  60+ A368 20 20 20 20
  60+ A36C 20 20 20 20
  61+ A370 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;8
  61+ A374 80 20 20 20
  61+ A378 80 20 80 20
  61+ A37C 80 20 80 20
  62+ A380 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _me, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  62+ A384 20 20 C0 80
  62+ A388 20 20 20 20
  62+ A38C 20 20 20 20
  63+ A390 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;10
  63+ A394 80 20 80 20
  63+ A398 20 20 80 80
  63+ A39C 20 20 80 20
  64+ A3A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _me, _mw, _mp, _mp, _mp ;11
  64+ A3A4 20 20 20 20
  64+ A3A8 80 20 20 C0
  64+ A3AC 80 20 20 20
  65+ A3B0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;12
  65+ A3B4 80 20 80 20
  65+ A3B8 20 20 80 80
  65+ A3BC 20 20 80 20
  66+ A3C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  66+ A3C4 20 20 20 20
  66+ A3C8 20 20 20 20
  66+ A3CC 20 20 20 20
  67+ A3D0 81 20 C0 20   db _mh, _mp, _me, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;14
  67+ A3D4 80 20 80 20
  67+ A3D8 80 20 80 20
  67+ A3DC 80 20 80 20
  68+ A3E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  68+ A3E4 20 20 20 20
  68+ A3E8 20 20 20 20
  68+ A3EC 20 20 20 20
  69+ A3F0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;16
  69+ A3F4 80 20 80 20
  69+ A3F8 80 20 80 20
  69+ A3FC 80 20 80 20
  70+ A400
  71+ A400              map_1:
  72+ A400 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  72+ A404 20 20 20 20
  72+ A408 20 20 20 20
  72+ A40C 20 20 20 20
  73+ A410 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;2
  73+ A414 20 20 20 20
  73+ A418 20 80 20 20
  73+ A41C 20 20 20 20
  74+ A420 81 C0 20 80   db _mh, _me, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  74+ A424 20 80 80 80
  74+ A428 20 20 20 20
  74+ A42C 20 20 20 20
  75+ A430 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;4
  75+ A434 20 20 20 20
  75+ A438 20 80 20 20
  75+ A43C 20 20 20 20
  76+ A440 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  76+ A444 20 20 80 20
  76+ A448 20 20 20 20
  76+ A44C 20 20 20 20
  77+ A450 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  77+ A454 20 80 80 80
  77+ A458 20 80 20 20
  77+ A45C 20 20 20 20
  78+ A460 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  78+ A464 20 80 20 20
  78+ A468 20 20 20 20
  78+ A46C 20 20 20 20
  79+ A470 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mp, _me, _mw, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;8
  79+ A474 80 80 20 C0
  79+ A478 80 80 20 80
  79+ A47C 80 80 20 20
  80+ A480 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  80+ A484 80 80 20 80
  80+ A488 20 20 20 20
  80+ A48C 20 20 20 20
  81+ A490 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
  81+ A494 20 80 20 20
  81+ A498 20 80 20 20
  81+ A49C 20 20 20 20
  82+ A4A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
  82+ A4A4 20 20 80 20
  82+ A4A8 20 20 20 20
  82+ A4AC 20 20 20 20
  83+ A4B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;12
  83+ A4B4 20 20 20 20
  83+ A4B8 20 80 20 20
  83+ A4BC 20 20 20 20
  84+ A4C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  84+ A4C4 20 20 20 20
  84+ A4C8 20 20 20 20
  84+ A4CC 20 20 20 20
  85+ A4D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;14
  85+ A4D4 20 20 20 20
  85+ A4D8 20 80 20 20
  85+ A4DC 20 20 20 20
  86+ A4E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  86+ A4E4 20 20 20 20
  86+ A4E8 20 20 20 20
  86+ A4EC 20 20 20 20
  87+ A4F0 81 E0 20 20   db _mh, _ms, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;16
  87+ A4F4 20 20 20 20
  87+ A4F8 20 80 20 20
  87+ A4FC 20 20 20 20
  88+ A500
  89+ A500
  90+ A500              map_2:
  91+ A500 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  91+ A504 20 20 20 20
  91+ A508 20 20 20 20
  91+ A50C 20 20 20 20
  92+ A510 81 C0 20 80   db _mh, _me, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
  92+ A514 80 80 80 80
  92+ A518 80 20 20 20
  92+ A51C 20 20 20 20
  93+ A520 81 80 20 80   db _mh, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  93+ A524 20 20 20 20
  93+ A528 20 20 20 20
  93+ A52C 20 20 20 20
  94+ A530 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
  94+ A534 20 20 20 20
  94+ A538 20 20 20 20
  94+ A53C 20 20 20 20
  95+ A540 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  95+ A544 20 20 80 20
  95+ A548 20 20 20 20
  95+ A54C 20 20 20 20
  96+ A550 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  96+ A554 20 20 20 20
  96+ A558 20 80 20 20
  96+ A55C 20 20 20 20
  97+ A560 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  97+ A564 80 80 80 80
  97+ A568 20 20 20 20
  97+ A56C 20 20 20 20
  98+ A570 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
  98+ A574 20 20 80 20
  98+ A578 20 20 20 80
  98+ A57C 80 80 20 20
  99+ A580 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  99+ A584 20 C0 20 20
  99+ A588 20 20 20 20
  99+ A58C 20 20 20 20
 100+ A590 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 100+ A594 20 80 20 20
 100+ A598 20 80 20 20
 100+ A59C 20 20 20 20
 101+ A5A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 101+ A5A4 20 20 20 20
 101+ A5A8 80 20 20 20
 101+ A5AC 20 20 20 20
 102+ A5B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 102+ A5B4 20 20 20 20
 102+ A5B8 80 20 20 20
 102+ A5BC 20 20 20 20
 103+ A5C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 103+ A5C4 20 20 20 20
 103+ A5C8 20 20 20 20
 103+ A5CC 20 20 20 20
 104+ A5D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 104+ A5D4 20 20 20 20
 104+ A5D8 20 20 20 20
 104+ A5DC 20 20 20 20
 105+ A5E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 105+ A5E4 20 20 20 20
 105+ A5E8 20 20 20 20
 105+ A5EC 20 20 20 20
 106+ A5F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 106+ A5F4 20 20 20 20
 106+ A5F8 20 20 20 20
 106+ A5FC 20 20 20 20
 107+ A600
 108+ A600              map_3
 109+ A600 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 109+ A604 20 20 20 20
 109+ A608 20 20 20 20
 109+ A60C 20 20 20 20
 110+ A610 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 110+ A614 20 20 20 80
 110+ A618 20 20 20 20
 110+ A61C 20 20 20 20
 111+ A620 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 111+ A624 20 20 20 80
 111+ A628 20 20 20 20
 111+ A62C 20 20 20 20
 112+ A630 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;4
 112+ A634 20 20 20 80
 112+ A638 20 20 20 20
 112+ A63C 20 20 80 20
 113+ A640 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 113+ A644 20 20 20 20
 113+ A648 20 20 20 20
 113+ A64C 20 20 80 20
 114+ A650 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 114+ A654 20 20 20 80
 114+ A658 20 20 20 20
 114+ A65C 20 20 20 20
 115+ A660 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 115+ A664 20 20 20 20
 115+ A668 20 20 20 20
 115+ A66C 20 20 20 20
 116+ A670 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 116+ A674 20 20 20 80
 116+ A678 20 20 20 20
 116+ A67C 20 20 20 20
 117+ A680 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 117+ A684 20 20 20 20
 117+ A688 20 20 20 20
 117+ A68C 20 20 20 20
 118+ A690 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 118+ A694 80 80 20 80
 118+ A698 20 20 20 20
 118+ A69C 20 20 20 20
 119+ A6A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 119+ A6A4 20 20 80 20
 119+ A6A8 20 20 20 20
 119+ A6AC 20 20 20 20
 120+ A6B0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 120+ A6B4 20 C0 20 80
 120+ A6B8 20 20 20 20
 120+ A6BC 20 20 20 20
 121+ A6C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 121+ A6C4 20 20 20 20
 121+ A6C8 20 20 20 20
 121+ A6CC 20 20 20 20
 122+ A6D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 122+ A6D4 20 20 20 80
 122+ A6D8 20 20 20 20
 122+ A6DC 20 20 20 20
 123+ A6E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 123+ A6E4 20 20 20 80
 123+ A6E8 20 20 20 20
 123+ A6EC 20 20 20 20
 124+ A6F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 124+ A6F4 20 20 20 80
 124+ A6F8 20 20 20 20
 124+ A6FC 20 20 20 20
 125+ A700
 126+ A700              map_4:
 127+ A700 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 127+ A704 20 20 20 20
 127+ A708 20 20 20 20
 127+ A70C 20 20 20 20
 128+ A710 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;2
 128+ A714 80 80 80 80
 128+ A718 80 80 80 80
 128+ A71C 80 80 20 20
 129+ A720 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp ;3
 129+ A724 20 20 20 20
 129+ A728 20 20 20 80
 129+ A72C 20 80 20 20
 130+ A730 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp ;4
 130+ A734 20 20 20 20
 130+ A738 80 80 20 80
 130+ A73C 20 20 20 20
 131+ A740 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp ;5
 131+ A744 80 80 80 80
 131+ A748 20 80 20 80
 131+ A74C 20 80 20 20
 132+ A750 81 20 80 80   db _mh, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;6
 132+ A754 20 20 20 20
 132+ A758 20 80 20 80
 132+ A75C 80 80 20 20
 133+ A760 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;7
 133+ A764 20 20 80 80
 133+ A768 20 20 20 80
 133+ A76C 20 20 20 20
 134+ A770 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
 134+ A774 80 80 20 20
 134+ A778 20 20 20 80
 134+ A77C 80 80 20 20
 135+ A780 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 135+ A784 20 20 20 80
 135+ A788 20 80 80 80
 135+ A78C 80 80 80 20
 136+ A790 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 136+ A794 80 80 20 20
 136+ A798 20 80 20 20
 136+ A79C 20 20 20 20
 137+ A7A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp ;11
 137+ A7A4 20 20 80 20
 137+ A7A8 20 20 20 20
 137+ A7AC 20 80 80 20
 138+ A7B0 81 80 20 80   db _mh, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;12
 138+ A7B4 80 80 80 80
 138+ A7B8 80 80 80 80
 138+ A7BC 80 80 20 20
 139+ A7C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp ;13
 139+ A7C4 20 80 20 20
 139+ A7C8 80 20 20 20
 139+ A7CC 80 80 20 20
 140+ A7D0 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp ;14
 140+ A7D4 20 80 20 20
 140+ A7D8 20 20 20 20
 140+ A7DC 20 80 20 20
 141+ A7E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mp, _mp ;15
 141+ A7E4 20 80 80 80
 141+ A7E8 80 80 20 20
 141+ A7EC 80 80 20 20
 142+ A7F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 142+ A7F4 20 20 20 20
 142+ A7F8 20 20 20 20
 142+ A7FC 20 20 20 20
 143+ A800
 144+ A800              map_5:
 145+ A800 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 145+ A804 20 20 20 20
 145+ A808 20 20 20 20
 145+ A80C 20 20 20 20
 146+ A810 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;2
 146+ A814 80 80 80 20
 146+ A818 80 80 80 80
 146+ A81C 80 80 80 20
 147+ A820 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 147+ A824 20 20 20 20
 147+ A828 20 20 20 20
 147+ A82C 20 20 20 20
 148+ A830 81 20 C0 20   db _mh, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 148+ A834 20 20 20 20
 148+ A838 20 20 20 20
 148+ A83C 20 20 20 20
 149+ A840 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;5
 149+ A844 80 80 80 20
 149+ A848 80 80 80 80
 149+ A84C 80 80 80 20
 150+ A850 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 150+ A854 20 20 20 20
 150+ A858 20 20 20 20
 150+ A85C 20 20 20 20
 151+ A860 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 151+ A864 20 20 20 20
 151+ A868 20 20 20 20
 151+ A86C 20 20 20 20
 152+ A870 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 152+ A874 20 20 20 20
 152+ A878 20 20 20 20
 152+ A87C 20 20 20 20
 153+ A880 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 153+ A884 80 80 80 20
 153+ A888 80 80 80 80
 153+ A88C 80 80 80 20
 154+ A890 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;10
 154+ A894 20 20 20 20
 154+ A898 20 20 80 20
 154+ A89C 80 20 20 20
 155+ A8A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;11
 155+ A8A4 20 20 20 20
 155+ A8A8 20 80 20 20
 155+ A8AC 20 80 20 20
 156+ A8B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mw, _mp ;12
 156+ A8B4 20 20 20 20
 156+ A8B8 80 20 20 80
 156+ A8BC 20 20 80 20
 157+ A8C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;13
 157+ A8C4 20 20 20 80
 157+ A8C8 20 20 80 20
 157+ A8CC 80 20 20 20
 158+ A8D0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;14
 158+ A8D4 80 80 80 20
 158+ A8D8 20 80 20 20
 158+ A8DC 20 80 80 20
 159+ A8E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;15
 159+ A8E4 20 20 20 20
 159+ A8E8 80 80 80 80
 159+ A8EC 20 20 20 20
 160+ A8F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;16
 160+ A8F4 20 20 20 80
 160+ A8F8 80 80 80 80
 160+ A8FC 80 80 20 20
 161+ A900
 162+ A900              map_6:
 163+ A900 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 163+ A904 20 20 20 20
 163+ A908 20 20 20 20
 163+ A90C 20 20 20 20
 164+ A910 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mw, _mp ;2
 164+ A914 80 80 80 80
 164+ A918 80 80 20 20
 164+ A91C 80 80 80 20
 165+ A920 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;3
 165+ A924 80 20 20 20
 165+ A928 80 80 20 20
 165+ A92C 20 80 20 20
 166+ A930 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _ms, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;4
 166+ A934 80 20 E0 20
 166+ A938 80 80 80 80
 166+ A93C 80 80 20 20
 167+ A940 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;5
 167+ A944 80 20 80 20
 167+ A948 80 80 20 20
 167+ A94C 20 20 20 20
 168+ A950 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;6
 168+ A954 80 20 80 20
 168+ A958 20 80 20 20
 168+ A95C 20 80 80 20
 169+ A960 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;7
 169+ A964 20 20 20 20
 169+ A968 20 80 20 20
 169+ A96C 20 80 20 20
 170+ A970 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;8
 170+ A974 80 80 80 80
 170+ A978 20 80 80 80
 170+ A97C 80 80 80 20
 171+ A980 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 171+ A984 20 20 20 80
 171+ A988 20 20 20 20
 171+ A98C 20 20 20 20
 172+ A990 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mw, _mw, _mp ;10
 172+ A994 80 80 20 80
 172+ A998 20 80 80 20
 172+ A99C 80 80 80 20
 173+ A9A0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;11
 173+ A9A4 20 80 20 80
 173+ A9A8 20 20 80 20
 173+ A9AC 80 20 80 20
 174+ A9B0 81 20 80 20   db _mh, _mp, _mw, _mp, _me, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp ;12
 174+ A9B4 C0 80 20 80
 174+ A9B8 20 80 20 80
 174+ A9BC 20 20 80 20
 175+ A9C0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;13
 175+ A9C4 80 80 20 80
 175+ A9C8 20 80 20 20
 175+ A9CC 20 20 20 20
 176+ A9D0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;14
 176+ A9D4 20 20 20 80
 176+ A9D8 20 80 80 80
 176+ A9DC 20 20 20 20
 177+ A9E0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp ;15
 177+ A9E4 80 80 80 80
 177+ A9E8 20 80 80 80
 177+ A9EC 80 20 80 20
 178+ A9F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 178+ A9F4 20 20 20 20
 178+ A9F8 20 20 20 20
 178+ A9FC 20 20 20 20
 179+ AA00
 180+ AA00              map_7
 181+ AA00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 181+ AA04 20 20 20 20
 181+ AA08 20 20 20 20
 181+ AA0C 20 20 20 20
 182+ AA10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 182+ AA14 20 20 20 80
 182+ AA18 20 20 20 20
 182+ AA1C 20 20 20 20
 183+ AA20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 183+ AA24 20 20 20 80
 183+ AA28 20 20 20 20
 183+ AA2C 20 20 20 20
 184+ AA30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 184+ AA34 20 20 20 80
 184+ AA38 20 20 20 20
 184+ AA3C 20 20 20 20
 185+ AA40 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 185+ AA44 20 20 20 20
 185+ AA48 20 20 20 20
 185+ AA4C 20 20 80 20
 186+ AA50 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;6
 186+ AA54 20 20 20 20
 186+ AA58 20 20 20 20
 186+ AA5C 20 20 80 20
 187+ AA60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 187+ AA64 20 20 20 20
 187+ AA68 20 20 20 20
 187+ AA6C 20 20 20 20
 188+ AA70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 188+ AA74 20 20 20 20
 188+ AA78 20 20 20 20
 188+ AA7C 20 20 20 20
 189+ AA80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 189+ AA84 20 20 20 20
 189+ AA88 20 20 20 20
 189+ AA8C 20 20 20 20
 190+ AA90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;10
 190+ AA94 20 20 20 20
 190+ AA98 20 20 20 80
 190+ AA9C 20 20 20 20
 191+ AAA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 191+ AAA4 20 20 20 20
 191+ AAA8 20 20 20 20
 191+ AAAC 20 20 20 20
 192+ AAB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 192+ AAB4 20 20 20 20
 192+ AAB8 20 20 20 20
 192+ AABC 20 20 20 20
 193+ AAC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 193+ AAC4 20 20 20 20
 193+ AAC8 20 20 20 20
 193+ AACC 20 20 20 20
 194+ AAD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 194+ AAD4 20 20 20 20
 194+ AAD8 20 20 20 20
 194+ AADC 20 20 20 20
 195+ AAE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 195+ AAE4 20 20 20 20
 195+ AAE8 20 20 20 20
 195+ AAEC 20 20 20 20
 196+ AAF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 196+ AAF4 20 20 20 20
 196+ AAF8 20 20 20 20
 196+ AAFC 20 20 20 20
 197+ AB00
 198+ AB00              map_8:
 199+ AB00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 199+ AB04 20 20 20 20
 199+ AB08 20 20 20 20
 199+ AB0C 20 20 20 20
 200+ AB10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 200+ AB14 20 20 20 80
 200+ AB18 20 20 20 20
 200+ AB1C 20 20 20 20
 201+ AB20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 201+ AB24 20 20 20 80
 201+ AB28 20 20 20 20
 201+ AB2C 20 20 20 20
 202+ AB30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 202+ AB34 20 20 20 80
 202+ AB38 20 20 20 20
 202+ AB3C 20 20 20 20
 203+ AB40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 203+ AB44 20 20 20 20
 203+ AB48 20 20 20 20
 203+ AB4C 20 20 20 20
 204+ AB50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 204+ AB54 20 20 20 20
 204+ AB58 20 20 20 20
 204+ AB5C 20 20 20 20
 205+ AB60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 205+ AB64 20 20 20 20
 205+ AB68 20 20 20 20
 205+ AB6C 20 20 20 20
 206+ AB70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 206+ AB74 20 20 20 20
 206+ AB78 20 20 20 20
 206+ AB7C 20 20 20 20
 207+ AB80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 207+ AB84 20 20 20 20
 207+ AB88 20 20 20 20
 207+ AB8C 20 20 20 20
 208+ AB90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 208+ AB94 20 20 20 20
 208+ AB98 20 20 20 20
 208+ AB9C 20 20 20 20
 209+ ABA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 209+ ABA4 20 20 80 20
 209+ ABA8 20 20 20 20
 209+ ABAC 20 20 20 20
 210+ ABB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 210+ ABB4 20 20 20 80
 210+ ABB8 20 20 20 20
 210+ ABBC 20 20 20 20
 211+ ABC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 211+ ABC4 20 20 80 20
 211+ ABC8 20 20 20 20
 211+ ABCC 20 20 20 20
 212+ ABD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 212+ ABD4 20 20 20 20
 212+ ABD8 20 20 20 20
 212+ ABDC 20 20 20 20
 213+ ABE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 213+ ABE4 20 20 20 20
 213+ ABE8 20 20 20 20
 213+ ABEC 20 20 20 20
 214+ ABF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 214+ ABF4 20 20 20 20
 214+ ABF8 20 20 20 20
 214+ ABFC 20 20 20 20
 215+ AC00
 216+ AC00              map_9:
 217+ AC00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 217+ AC04 20 20 20 20
 217+ AC08 20 20 20 20
 217+ AC0C 20 20 20 20
 218+ AC10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 218+ AC14 20 20 20 20
 218+ AC18 20 20 20 20
 218+ AC1C 20 20 20 20
 219+ AC20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 219+ AC24 20 20 20 20
 219+ AC28 20 20 20 20
 219+ AC2C 20 20 20 20
 220+ AC30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 220+ AC34 20 20 20 20
 220+ AC38 20 20 20 20
 220+ AC3C 20 20 20 20
 221+ AC40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 221+ AC44 20 20 20 20
 221+ AC48 20 20 20 20
 221+ AC4C 20 20 20 20
 222+ AC50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 222+ AC54 20 20 20 20
 222+ AC58 20 20 20 20
 222+ AC5C 20 20 20 20
 223+ AC60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 223+ AC64 20 20 20 20
 223+ AC68 20 20 20 20
 223+ AC6C 20 20 20 20
 224+ AC70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 224+ AC74 20 20 20 20
 224+ AC78 20 20 20 20
 224+ AC7C 20 20 20 20
 225+ AC80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 225+ AC84 20 20 20 20
 225+ AC88 20 20 20 20
 225+ AC8C 20 20 20 20
 226+ AC90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 226+ AC94 20 20 20 20
 226+ AC98 20 20 20 20
 226+ AC9C 20 20 20 20
 227+ ACA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 227+ ACA4 20 20 20 20
 227+ ACA8 20 20 20 20
 227+ ACAC 20 20 20 20
 228+ ACB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 228+ ACB4 20 20 20 20
 228+ ACB8 20 20 20 20
 228+ ACBC 20 20 20 20
 229+ ACC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 229+ ACC4 20 20 20 20
 229+ ACC8 20 20 20 20
 229+ ACCC 20 20 20 20
 230+ ACD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 230+ ACD4 20 20 20 20
 230+ ACD8 20 20 20 20
 230+ ACDC 20 20 20 20
 231+ ACE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 231+ ACE4 20 20 20 20
 231+ ACE8 20 20 20 20
 231+ ACEC 20 20 20 20
 232+ ACF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 232+ ACF4 20 20 20 20
 232+ ACF8 20 20 20 20
 232+ ACFC 20 20 20 20
 233+ AD00
 234+ AD00              map_10:
 235+ AD00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 235+ AD04 20 20 20 20
 235+ AD08 20 20 20 20
 235+ AD0C 20 20 20 20
 236+ AD10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 236+ AD14 20 20 20 20
 236+ AD18 20 20 20 20
 236+ AD1C 20 20 20 20
 237+ AD20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 237+ AD24 20 20 20 20
 237+ AD28 20 20 20 20
 237+ AD2C 20 20 20 20
 238+ AD30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 238+ AD34 20 20 20 20
 238+ AD38 20 20 20 20
 238+ AD3C 20 20 20 20
 239+ AD40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 239+ AD44 20 20 20 20
 239+ AD48 20 20 20 20
 239+ AD4C 20 20 20 20
 240+ AD50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 240+ AD54 20 20 20 20
 240+ AD58 20 20 20 20
 240+ AD5C 20 20 20 20
 241+ AD60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 241+ AD64 20 20 20 20
 241+ AD68 20 20 20 20
 241+ AD6C 20 20 20 20
 242+ AD70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 242+ AD74 20 20 20 20
 242+ AD78 20 20 20 20
 242+ AD7C 20 20 20 20
 243+ AD80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 243+ AD84 20 20 20 20
 243+ AD88 20 20 20 20
 243+ AD8C 20 20 20 20
 244+ AD90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 244+ AD94 20 20 20 20
 244+ AD98 20 20 20 20
 244+ AD9C 20 20 20 20
 245+ ADA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 245+ ADA4 20 20 20 20
 245+ ADA8 20 20 20 20
 245+ ADAC 20 20 20 20
 246+ ADB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 246+ ADB4 20 20 20 20
 246+ ADB8 20 20 20 20
 246+ ADBC 20 20 20 20
 247+ ADC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 247+ ADC4 20 20 20 20
 247+ ADC8 20 20 20 20
 247+ ADCC 20 20 20 20
 248+ ADD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 248+ ADD4 20 20 20 20
 248+ ADD8 20 20 20 20
 248+ ADDC 20 20 20 20
 249+ ADE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 249+ ADE4 20 20 20 20
 249+ ADE8 20 20 20 20
 249+ ADEC 20 20 20 20
 250+ ADF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 250+ ADF4 20 20 20 20
 250+ ADF8 20 20 20 20
 250+ ADFC 20 20 20 20
 251+ AE00
 252+ AE00              map_11:
 253+ AE00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 253+ AE04 20 20 20 20
 253+ AE08 20 20 20 20
 253+ AE0C 20 20 20 20
 254+ AE10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 254+ AE14 20 20 20 20
 254+ AE18 20 20 20 20
 254+ AE1C 20 20 20 20
 255+ AE20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 255+ AE24 20 20 20 20
 255+ AE28 20 20 20 20
 255+ AE2C 20 20 20 20
 256+ AE30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 256+ AE34 20 20 20 20
 256+ AE38 20 20 20 20
 256+ AE3C 20 20 20 20
 257+ AE40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 257+ AE44 20 20 20 20
 257+ AE48 20 20 20 20
 257+ AE4C 20 20 20 20
 258+ AE50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 258+ AE54 20 20 20 20
 258+ AE58 20 20 20 20
 258+ AE5C 20 20 20 20
 259+ AE60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 259+ AE64 20 20 20 20
 259+ AE68 20 20 20 20
 259+ AE6C 20 20 20 20
 260+ AE70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 260+ AE74 20 20 20 20
 260+ AE78 20 20 20 20
 260+ AE7C 20 20 20 20
 261+ AE80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 261+ AE84 20 20 20 20
 261+ AE88 20 20 20 20
 261+ AE8C 20 20 20 20
 262+ AE90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 262+ AE94 20 20 20 20
 262+ AE98 20 20 20 20
 262+ AE9C 20 20 20 20
 263+ AEA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 263+ AEA4 20 20 20 20
 263+ AEA8 20 20 20 20
 263+ AEAC 20 20 20 20
 264+ AEB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 264+ AEB4 20 20 20 20
 264+ AEB8 20 20 20 20
 264+ AEBC 20 20 20 20
 265+ AEC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 265+ AEC4 20 20 20 20
 265+ AEC8 20 20 20 20
 265+ AECC 20 20 20 20
 266+ AED0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 266+ AED4 20 20 20 20
 266+ AED8 20 20 20 20
 266+ AEDC 20 20 20 20
 267+ AEE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 267+ AEE4 20 20 20 20
 267+ AEE8 20 20 20 20
 267+ AEEC 20 20 20 20
 268+ AEF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 268+ AEF4 20 20 20 20
 268+ AEF8 20 20 20 20
 268+ AEFC 20 20 20 20
 269+ AF00
 270+ AF00              map_12:
 271+ AF00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 271+ AF04 20 20 20 20
 271+ AF08 20 20 20 20
 271+ AF0C 20 20 20 20
 272+ AF10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 272+ AF14 20 20 20 20
 272+ AF18 20 20 20 20
 272+ AF1C 20 20 20 20
 273+ AF20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 273+ AF24 20 20 20 20
 273+ AF28 20 20 20 20
 273+ AF2C 20 20 20 20
 274+ AF30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 274+ AF34 20 20 20 20
 274+ AF38 20 20 20 20
 274+ AF3C 20 20 20 20
 275+ AF40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 275+ AF44 20 20 20 20
 275+ AF48 20 20 20 20
 275+ AF4C 20 20 20 20
 276+ AF50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 276+ AF54 20 20 20 20
 276+ AF58 20 20 20 20
 276+ AF5C 20 20 20 20
 277+ AF60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 277+ AF64 20 20 20 20
 277+ AF68 20 20 20 20
 277+ AF6C 20 20 20 20
 278+ AF70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 278+ AF74 20 20 20 20
 278+ AF78 20 20 20 20
 278+ AF7C 20 20 20 20
 279+ AF80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 279+ AF84 20 20 20 20
 279+ AF88 20 20 20 20
 279+ AF8C 20 20 20 20
 280+ AF90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 280+ AF94 20 20 20 20
 280+ AF98 20 20 20 20
 280+ AF9C 20 20 20 20
 281+ AFA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 281+ AFA4 20 20 20 20
 281+ AFA8 20 20 20 20
 281+ AFAC 20 20 20 20
 282+ AFB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 282+ AFB4 20 20 20 20
 282+ AFB8 20 20 20 20
 282+ AFBC 20 20 20 20
 283+ AFC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 283+ AFC4 20 20 20 20
 283+ AFC8 20 20 20 20
 283+ AFCC 20 20 20 20
 284+ AFD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 284+ AFD4 20 20 20 20
 284+ AFD8 20 20 20 20
 284+ AFDC 20 20 20 20
 285+ AFE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 285+ AFE4 20 20 20 20
 285+ AFE8 20 20 20 20
 285+ AFEC 20 20 20 20
 286+ AFF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 286+ AFF4 20 20 20 20
 286+ AFF8 20 20 20 20
 286+ AFFC 20 20 20 20
 287+ B000
 288+ B000              map_13:
 289+ B000 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 289+ B004 20 20 20 20
 289+ B008 20 20 20 20
 289+ B00C 20 20 20 20
 290+ B010 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 290+ B014 20 20 20 20
 290+ B018 20 20 20 20
 290+ B01C 20 20 20 20
 291+ B020 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 291+ B024 20 20 20 20
 291+ B028 20 20 20 20
 291+ B02C 20 20 20 20
 292+ B030 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 292+ B034 20 20 20 20
 292+ B038 20 20 20 20
 292+ B03C 20 20 20 20
 293+ B040 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 293+ B044 20 20 20 20
 293+ B048 20 20 20 20
 293+ B04C 20 20 20 20
 294+ B050 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 294+ B054 20 20 20 20
 294+ B058 20 20 20 20
 294+ B05C 20 20 20 20
 295+ B060 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 295+ B064 20 20 20 20
 295+ B068 20 20 20 20
 295+ B06C 20 20 20 20
 296+ B070 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 296+ B074 20 20 20 20
 296+ B078 20 20 20 20
 296+ B07C 20 20 20 20
 297+ B080 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 297+ B084 20 20 20 20
 297+ B088 20 20 20 20
 297+ B08C 20 20 20 20
 298+ B090 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 298+ B094 20 20 20 20
 298+ B098 20 20 20 20
 298+ B09C 20 20 20 20
 299+ B0A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 299+ B0A4 20 20 20 20
 299+ B0A8 20 20 20 20
 299+ B0AC 20 20 20 20
 300+ B0B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 300+ B0B4 20 20 20 20
 300+ B0B8 20 20 20 20
 300+ B0BC 20 20 20 20
 301+ B0C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 301+ B0C4 20 20 20 20
 301+ B0C8 20 20 20 20
 301+ B0CC 20 20 20 20
 302+ B0D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 302+ B0D4 20 20 20 20
 302+ B0D8 20 20 20 20
 302+ B0DC 20 20 20 20
 303+ B0E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 303+ B0E4 20 20 20 20
 303+ B0E8 20 20 20 20
 303+ B0EC 20 20 20 20
 304+ B0F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 304+ B0F4 20 20 20 20
 304+ B0F8 20 20 20 20
 304+ B0FC 20 20 20 20
 305+ B100
 306+ B100              map_14:
 307+ B100 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 307+ B104 20 20 20 20
 307+ B108 20 20 20 20
 307+ B10C 20 20 20 20
 308+ B110 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 308+ B114 20 20 20 20
 308+ B118 20 20 20 20
 308+ B11C 20 20 20 20
 309+ B120 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 309+ B124 20 20 20 20
 309+ B128 20 20 20 20
 309+ B12C 20 20 20 20
 310+ B130 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 310+ B134 20 20 20 20
 310+ B138 20 20 20 20
 310+ B13C 20 20 20 20
 311+ B140 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 311+ B144 20 20 20 20
 311+ B148 20 20 20 20
 311+ B14C 20 20 20 20
 312+ B150 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 312+ B154 20 20 20 20
 312+ B158 20 20 20 20
 312+ B15C 20 20 20 20
 313+ B160 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 313+ B164 20 20 20 20
 313+ B168 20 20 20 20
 313+ B16C 20 20 20 20
 314+ B170 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 314+ B174 20 20 20 20
 314+ B178 20 20 20 20
 314+ B17C 20 20 20 20
 315+ B180 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 315+ B184 20 20 20 20
 315+ B188 20 20 20 20
 315+ B18C 20 20 20 20
 316+ B190 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 316+ B194 20 20 20 20
 316+ B198 20 20 20 20
 316+ B19C 20 20 20 20
 317+ B1A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 317+ B1A4 20 20 20 20
 317+ B1A8 20 20 20 20
 317+ B1AC 20 20 20 20
 318+ B1B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 318+ B1B4 20 20 20 20
 318+ B1B8 20 20 20 20
 318+ B1BC 20 20 20 20
 319+ B1C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 319+ B1C4 20 20 20 20
 319+ B1C8 20 20 20 20
 319+ B1CC 20 20 20 20
 320+ B1D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 320+ B1D4 20 20 20 20
 320+ B1D8 20 20 20 20
 320+ B1DC 20 20 20 20
 321+ B1E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 321+ B1E4 20 20 20 20
 321+ B1E8 20 20 20 20
 321+ B1EC 20 20 20 20
 322+ B1F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 322+ B1F4 20 20 20 20
 322+ B1F8 20 20 20 20
 322+ B1FC 20 20 20 20
 323+ B200
 324+ B200              map_15:
 325+ B200 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 325+ B204 20 20 20 20
 325+ B208 20 20 20 20
 325+ B20C 20 20 20 20
 326+ B210 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 326+ B214 20 20 20 20
 326+ B218 20 20 20 20
 326+ B21C 20 20 20 20
 327+ B220 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 327+ B224 20 20 20 20
 327+ B228 20 20 20 20
 327+ B22C 20 20 20 20
 328+ B230 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 328+ B234 20 20 20 20
 328+ B238 20 20 20 20
 328+ B23C 20 20 20 20
 329+ B240 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 329+ B244 20 20 20 20
 329+ B248 20 20 20 20
 329+ B24C 20 20 20 20
 330+ B250 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 330+ B254 20 20 20 20
 330+ B258 20 20 20 20
 330+ B25C 20 20 20 20
 331+ B260 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 331+ B264 20 20 20 20
 331+ B268 20 20 20 20
 331+ B26C 20 20 20 20
 332+ B270 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 332+ B274 20 20 20 20
 332+ B278 20 20 20 20
 332+ B27C 20 20 20 20
 333+ B280 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 333+ B284 20 20 20 20
 333+ B288 20 20 20 20
 333+ B28C 20 20 20 20
 334+ B290 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 334+ B294 20 20 20 20
 334+ B298 20 20 20 20
 334+ B29C 20 20 20 20
 335+ B2A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 335+ B2A4 20 20 20 20
 335+ B2A8 20 20 20 20
 335+ B2AC 20 20 20 20
 336+ B2B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 336+ B2B4 20 20 20 20
 336+ B2B8 20 20 20 20
 336+ B2BC 20 20 20 20
 337+ B2C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 337+ B2C4 20 20 20 20
 337+ B2C8 20 20 20 20
 337+ B2CC 20 20 20 20
 338+ B2D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 338+ B2D4 20 20 20 20
 338+ B2D8 20 20 20 20
 338+ B2DC 20 20 20 20
 339+ B2E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 339+ B2E4 20 20 20 20
 339+ B2E8 20 20 20 20
 339+ B2EC 20 20 20 20
 340+ B2F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 340+ B2F4 20 20 20 20
 340+ B2F8 20 20 20 20
 340+ B2FC 20 20 20 20
 341+ B300
 342+ B300              ;map start positions
 343+ B300
 344+ B300              ;map0
 345+ B300 00 00                dw  00
 346+ B302              ;map1
 347+ B302 00 00                dw  00
 348+ B304              ;map2
 349+ B304 00 00                dw  00
 350+ B306              ;map3
 351+ B306 00 00                dw  00
 352+ B308              ;map4
 353+ B308 00 00                dw  00
 354+ B30A              ;map5
 355+ B30A 00 00                dw  00
 356+ B30C              ;map6
 357+ B30C 00 00                dw  00
 358+ B30E              ;map7
 359+ B30E 00 00                dw  00
 360+ B310              ;map8
 361+ B310 00 00                dw  00
 362+ B312              ;map9
 363+ B312 00 00                dw  00
 364+ B314              ;map10
 365+ B314 00 00                dw  00
 366+ B316              ;map11
 367+ B316 00 00                dw  00
 368+ B318              ;map12
 369+ B318 00 00                dw  00
 370+ B31A              ;map13
 371+ B31A 00 00                dw  00
 372+ B31C              ;map14
 373+ B31C 00 00                dw  00
 374+ B31E              ;map15
 375+ B31E 00 00                dw  00
 376+ B320
 377+ B320 00                   nop
 378+ B321 00                   nop
 379+ B322 00                   nop
 380+ B323
 381+ B323
 382+ B323              ;##################################################################################
 383+ B323              ;door exit animation
 384+ B323              ;the idea here is that the following will happen when you reach the exit:-
 385+ B323              ;    0 turn off the buffer screen via reg $69
 386+ B323              ;    1 draw a black box growing ever bigger to fill the screen - thats exit_anim routine
 387+ B323              ;    2 leave that screen on show
 388+ B323              ;    3 point to the buffer screen
 389+ B323              ;    4 draw the first screen of the next level - unless its the last level (level 255 when you finish the game!)
 390+ B323              ;    5 copy the attributes to a place in memory - probably after the char screen at $c000
 391+ B323              ;    6 switch the buffer screen back on via reg $69
 392+ B323              ;    7 make all the buffer screen colours black
 393+ B323              ;    8 switch in the buffer screen
 394+ B323              ;    9 turn off the buffer screen because we want to see the colours materialise!
 395+ B323              ;    9 draw the colours back in from the copied colours earlier but from the outside in - new_maze_anim routine
 396+ B323              ;    10 go back to normal!
 397+ B323              ;
 398+ B323              ;
 399+ B323              exit_anim:
 400+ B323 DD 01                    BREAK
 401+ B325 ED 91 69 00              nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 402+ B329                          ;set processor speed to max while we do behind the scenes work
 403+ B329                         ; nextreg 7,3
 404+ B329                          ;get our current screen memory map
 405+ B329 3E 52                    ld a,$52
 406+ B32B CD 98 81                 call readnextreg
 407+ B32E 32 09 B4                 ld (cur_screen),a   ;save it
 408+ B331 3E 69                    ld a,$69
 409+ B333 CD 98 81                 call readnextreg
 410+ B336 32 0A B4                 ld (cur_page),a   ;save it
 411+ B339
 412+ B339                          ;see if we are already showing the main ULA screen - ULABank will = $0A
 413+ B339                         ; sub $0a
 414+ B339                         ; jr z,cont_12        ;if yes, draw the exit
 415+ B339                          ;its a no - so we need to redraw our screen in the alternate buffer memory which is page 10
 416+ B339                          ;as page 14 is currently paged into view
 417+ B339              ;redraw the existing screen to page 10 currently bufferred
 418+ B339                         ; call redraw_screen
 419+ B339
 420+ B339              ;now we can draw our exit as normal
 421+ B339                          ;page in our ULA screen
 422+ B339                        ;  nextreg $52,10
 423+ B339                        ;  ld a,10
 424+ B339                        ;  ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 425+ B339
 426+ B339              ;            nextreg $69,0      ;turn off screen buffering so we write directly to the screen
 427+ B339
 428+ B339              cont_12:    ;nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 429+ B339 ED 91 07 00              nextreg 7,0
 430+ B33D CD 74 B3                 call do_exit_anim
 431+ B340 CD 61 81                 call pause
 432+ B343
 433+ B343              ;need to make the screen black, draw ink bits, copy colours to somewhere else then copy back
 434+ B343
 435+ B343                        ;  nextreg $69,64       ;turn ON screen buffering so we write directly to the ALTERNATE screen our new maze start
 436+ B343 CD 5B B3                 call redraw_screen
 437+ B346 CD 61 81                 call pause
 438+ B349 CD 61 81                 call pause
 439+ B34C CD 0B B4                 call new_maze_anim
 440+ B34F CD 61 81                 call pause
 441+ B352 CD 61 81                 call pause
 442+ B355                    ;      nextreg $52,10
 443+ B355 3E 0A                    ld a,10
 444+ B357 32 C0 81                 ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 445+ B35A
 446+ B35A              ;            call readnextreg
 447+ B35A               ;           ld a,(cur_screen)   ;get original screen
 448+ B35A               ;           xor 10^14       ; alternate between 10 and 14
 449+ B35A               ;           nextreg $52,a
 450+ B35A
 451+ B35A               ;           nextreg $69,64       ;turn on screen buffering so we write directly to the screen
 452+ B35A C9                       ret                 ;return to normal game
 453+ B35B              ;------------------------------------------------------------------------------------------
 454+ B35B              redraw_screen:
 455+ B35B CD 76 81                   call clear_char_screen    ;clear screen @c000
 456+ B35E
 457+ B35E CD 67 8D                   call get_distance ; get distance we can see
 458+ B361                                              ; and save depth we can see
 459+ B361                            ; load de is done when getting the distance above
 460+ B361                            ; we need de to hold the jump value in the maze direction
 461+ B361                            ; we are looking
 462+ B361
 463+ B361 CD 3B 8F                   call draw_left_side   ; start drawing the left side of the maze
 464+ B364
 465+ B364                            ;we need to repopulate var furthest_point
 466+ B364
 467+ B364 CD 67 8D                   call get_distance     ; get distance we can see
 468+ B367                                                  ; and set de accordingly
 469+ B367                                                  ; and save depth we can see
 470+ B367
 471+ B367 CD 54 9B                   call draw_right_side  ; start drawing the right side of the maze
 472+ B36A
 473+ B36A CD DE 96                   call draw_front_view  ; draw wall in front of player
 474+ B36D
 475+ B36D                            ;check if we are at an end wall. If so, draw walls left
 476+ B36D                            ;and right to simulate the long outside edge wall
 477+ B36D
 478+ B36D CD 6A 97                   call draw_side_walls
 479+ B370
 480+ B370                            ;draw screen at mem location 0000
 481+ B370                            ;my print used to print screen @c000 to 16384 inc udg's
 482+ B370 CD 62 8C                   call my_print         ;copy to screen from c000
 483+ B373
 484+ B373                     ;       call draw_colours     ;colourise the display
 485+ B373
 486+ B373 C9                           ret
 487+ B374              ;end drawing the new screen
 488+ B374              ;----------------------------------------------------------------------------------
 489+ B374              do_exit_anim:
 490+ B374
 491+ B374              ;Original base code by David Saphier from Facebook May 2018
 492+ B374
 493+ B374 97                       sub a
 494+ B375 32 06 B4                 ld (in_out),a       ;indicate we are drawing out from the middle
 495+ B378
 496+ B378
 497+ B378              ;reset the boxes to default
 498+ B378              ; this must be the same as the size of the square to draw
 499+ B378 3E 02                    ld a,2    ; reduce the size of the square to draw
 500+ B37A 32 07 B4                 ld (size1),a
 501+ B37D
 502+ B37D              ; this must equal the number of squares to draw
 503+ B37D 3E 02                    ld a,2  ;number of boxes to draw
 504+ B37F 32 08 B4                 ld (num2draw1),a
 505+ B382
 506+ B382 21 6C 59                 ld hl,256+11+22528+65+32 ;start point - middle of the screen nearly!
 507+ B385
 508+ B385
 509+ B385 3E 00        d_box1:	    ld a,0              ;set colour
 510+ B387 CD A9 B3                 call box1           ;draw the box
 511+ B38A                   ;       call FlipULABuffers_peter
 512+ B38A 11 E0 FF                	ld de,65504         ; 65504  (-32)
 513+ B38D
 514+ B38D 19                       add hl,de           ;next box to draw
 515+ B38E CD 61 81                 call pause
 516+ B391 CD 61 81                 call pause
 517+ B394
 518+ B394 3A 07 B4                 ld a,(size1)     ; increase the size of the square to draw
 519+ B397 3C                       inc a
 520+ B398 3C                       inc a
 521+ B399 32 07 B4                 ld (size1),a
 522+ B39C
 523+ B39C
 524+ B39C 3A 08 B4                 ld a,(num2draw1)  ;number of boxes to draw
 525+ B39F 3C                       inc a
 526+ B3A0 32 08 B4                 ld (num2draw1),a
 527+ B3A3 FE 0E                    cp 14
 528+ B3A5 C2 85 B3                 jp nz, d_box1     ; exit when we get to 2 as routine fails after that.
 529+ B3A8
 530+ B3A8 C9                       ret
 531+ B3A9
 532+ B3A9              ;davids code here amended by me....
 533+ B3A9              box1:
 534+ B3A9 3A 07 B4                 ld a,(size1)
 535+ B3AC 47                       ld b,a
 536+ B3AD
 537+ B3AD              ml11:
 538+ B3AD CD EE B3     	call docol1
 539+ B3B0 77           	ld (hl),a
 540+ B3B1 23           	inc hl
 541+ B3B2 10 F9        	djnz ml11
 542+ B3B4 F5               push af
 543+ B3B5 3A 07 B4         ld a,(size1)
 544+ B3B8 3D               dec a
 545+ B3B9 47              	ld b,a
 546+ B3BA F1               pop af
 547+ B3BB 2B           	dec hl
 548+ B3BC
 549+ B3BC              ml21:
 550+ B3BC CD EE B3     	call docol1
 551+ B3BF 11 20 00     	ld de,32     ;was 32
 552+ B3C2 19           	add hl,de
 553+ B3C3 77           	ld (hl),a
 554+ B3C4 10 F6        	djnz ml21
 555+ B3C6 F5               push af
 556+ B3C7 3A 07 B4         ld a,(size1)
 557+ B3CA 47              	ld b,a
 558+ B3CB F1               pop af
 559+ B3CC 2D           	dec l
 560+ B3CD
 561+ B3CD              ml31:
 562+ B3CD CD EE B3     	call docol1
 563+ B3D0 77            	ld (hl),a
 564+ B3D1 2B            	dec hl
 565+ B3D2 10 F9         	djnz ml31
 566+ B3D4 F5               push af
 567+ B3D5 3A 07 B4         ld a,(size1)
 568+ B3D8 3D               dec a
 569+ B3D9 47              	ld b,a
 570+ B3DA F1               pop af
 571+ B3DB 2C            	inc l
 572+ B3DC
 573+ B3DC              ml41:
 574+ B3DC CD EE B3     	call docol1
 575+ B3DF 11 E0 FF     	ld de,65504; was 65504  (-32)
 576+ B3E2 19           	add hl,de
 577+ B3E3 77           	ld (hl),a
 578+ B3E4 10 F6        	djnz ml41
 579+ B3E6 F5               push af
 580+ B3E7 3A 07 B4         ld a,(size1)
 581+ B3EA 3D                dec a
 582+ B3EB 47              	ld b,a
 583+ B3EC F1               pop af
 584+ B3ED C9           	ret
 585+ B3EE
 586+ B3EE              ;end of davids code...
 587+ B3EE
 588+ B3EE              ;set square colours
 589+ B3EE              docol1:
 590+ B3EE 3A 06 B4             ld a,(in_out)
 591+ B3F1 3D                   dec a                          ;check if a=0
 592+ B3F2 28 03                jr z,do_out
 593+ B3F4 3E F0                ld a,240
 594+ B3F6 C9                   ret
 595+ B3F7              do_out
 596+ B3F7 E5                   push hl
 597+ B3F8 2A 04 B4             ld hl,(fadein)
 598+ B3FB 7E                   ld a,(hl)
 599+ B3FC 23                   inc hl
 600+ B3FD 3E B4                ld a,180   ;test
 601+ B3FF 22 04 B4             ld (fadein),hl
 602+ B402 E1                   pop hl
 603+ B403 C9                   ret
 604+ B404
 605+ B404 00 00        fadein     dw 0   ;holds address of colours to fetch for screen colouring
 606+ B406 00           in_out:    db 0   ;1=draw inward, 0=draw outward
 607+ B407 02           size1:     db 2   ; size of square to draw ;double the number to draw
 608+ B408 02           num2draw1: db 2   ;number of squares to draw
 609+ B409 00           cur_screen db 0   ;hold the current screen in view for the exit screen
 610+ B40A 00           cur_page   db 0   ;hold the current screen thats paged in view for the exit screen
 611+ B40B
 612+ B40B              ;###########################################################################
 613+ B40B
 614+ B40B              new_maze_anim:
 615+ B40B              ;    nextreg $69,0
 616+ B40B              ; nextreg $52,10
 617+ B40B 3E 01                    ld a,1
 618+ B40D 32 06 B4                 ld (in_out),a       ;indicate we are drawing in to the middle
 619+ B410
 620+ B410              ;set hl yo point to screen colours to colour in
 621+ B410 21 00 00                 ld hl,0             ;ROM for now
 622+ B413 22 04 B4                 ld (fadein),hl
 623+ B416
 624+ B416
 625+ B416              ;reset the boxes to default
 626+ B416              ; this must be the same as the size of the square to draw
 627+ B416 3E 18                    ld a,24    ; reduce the size of the square to draw
 628+ B418 32 07 B4                 ld (size1),a
 629+ B41B
 630+ B41B              ; this must equal the number of squares to draw
 631+ B41B 3E 0C                    ld a,12  ;number of boxes to draw
 632+ B41D 32 08 B4                 ld (num2draw1),a
 633+ B420
 634+ B420 21 01 58                 ld hl,22529;    22528+65-32-32 ;start point - middle of the screen nearly!
 635+ B423
 636+ B423
 637+ B423              d_box_1:
 638+ B423 CD A9 B3                 call box1           ;draw the box
 639+ B426                        ;  call FlipULABuffers_peter
 640+ B426 11 22 00                	ld de,34
 641+ B429
 642+ B429 19                       add hl,de           ;next box to draw
 643+ B42A CD 61 81                 call pause
 644+ B42D CD 61 81                 call pause
 645+ B430
 646+ B430 3A 07 B4                 ld a,(size1)     ; increase the size of the square to draw
 647+ B433 3D                       dec a
 648+ B434 3D                       dec a
 649+ B435 32 07 B4                 ld (size1),a
 650+ B438
 651+ B438
 652+ B438 3A 08 B4                 ld a,(num2draw1)  ;number of boxes to draw
 653+ B43B 3D                       dec a
 654+ B43C 32 08 B4                 ld (num2draw1),a
 655+ B43F FE 00                    cp 0
 656+ B441 C2 23 B4                 jp nz, d_box_1     ; exit when we get to 2 as routine fails after that.
 657+ B444
 658+ B444 C9                       ret
 659+ B445
 660+ B445              ;*********************************************************************
 661+ B445              ; Making LDIR 21% faster
 662+ B445              ;taken from MSX Assembly page - http://map.grauw.nl/articles/fast_loops.php
 663+ B445
 664+ B445
 665+ B445              ;LDI Performs a "LD (DE),(HL)", then increments DE and HL, and decrements BC.
 666+ B445
 667+ B445              ;Now, on with the lesson. Aside from OTIR you can also unroll other things. INIR, LDIR and LDDR will also greatly benefit from this method, and sometimes it is also ;beneficial to unroll normal loops which use DJNZ, JR or JP.
 668+ B445
 669+ B445              ;In the case of LDIR however, the number of loops is often too large to simply use an LDI that number of times. That would take up too much space. So what we can do ;instead is to unroll only part of the loop. Say, we need to LDIR something 256 (100H) times. Instead of LDIR we could write:
 670+ B445
 671+ B445              ;we need to move 768 bytes = 48 x 16
 672+ B445              copy_colours:
 673+ B445
 674+ B445               ;       ld hl,$c300
 675+ B445               ;       ld bc,768
 676+ B445               ;       ld de,22528
 677+ B445               ;       ld a,(hl)
 678+ B445               ;       ld (de),a
 679+ B445               ;       ldir
 680+ B445               ;       ret
 681+ B445
 682+ B445
 683+ B445 01 00 03                   ld bc,768             ;number of cells to copy
 684+ B448 21 00 C3                   ld hl,attr_screen     ;address of colours screen to copy
 685+ B44B 11 00 58                   ld de,22528           ;attributes on main screen
 686+ B44E              Loop_col:
 687+ B44E ED A0            ldi  ; 16x LDI
 688+ B450 ED A0            ldi
 689+ B452 ED A0            ldi
 690+ B454 ED A0            ldi
 691+ B456 ED A0            ldi
 692+ B458 ED A0            ldi
 693+ B45A ED A0            ldi
 694+ B45C ED A0            ldi
 695+ B45E ED A0            ldi
 696+ B460 ED A0            ldi
 697+ B462 ED A0            ldi
 698+ B464 ED A0            ldi
 699+ B466 ED A0            ldi
 700+ B468 ED A0            ldi
 701+ B46A ED A0            ldi
 702+ B46C ED A0            ldi
 703+ B46E EA 4E B4         jp pe,Loop_col  ; Loop until bc = zero
 704+ B471              ;        ld a,c
 705+ B471              ;        dec a
 706+ B471              ;        jp nz, loop_col
 707+ B471 C9                         ret
 708+ B472
 709+ B472
# file closed: src/7-rd3dmazeV6.asm
 745  B472
 746  B472              ;##############################################
 747  B472              ;misc data
 748  B472              ;various variables
 749  B472              ;udg charachter set
 750  B472              ;##############################################
 751  B472
 752  B472                      org 64000       ;fa00
 753  FA00
 754  FA00              ;variables
 755  FA00              ;-----------------------------------------------
 756  FA00
 757  FA00 00 00        player_pos: dw $0                  ; only when in the main game loop
 758  FA02                                             ; holds the low byte of the current insertion location when inserting a passageway into the maze.
 759  FA02
 760  FA02              ;l4083:  db 134               ; high byte of the maze location data
 761  FA02              ;l4084:  db 08                ; holds the desired length of the passageway beign inserted when constructing the maze.
 762  FA02 06           maxview: db 6                   ;holds how far we can see before
 763  FA03                                              ;hitting a wall
 764  FA03              ;l4085:  db $01               ; holds the passageway direction when inserting a passageway into the maze ($00=north, $01=west, $02=south, $03=east).
 765  FA03
 766  FA03 00           flags:  db 0                 ; flags:
 767  FA04                                           ;na   bit 7: 1=the player has been caught.
 768  FA04                                           ;na   bit 6: 1=the player has moved forwards.408a
 769  FA04                                           ;na   bit 5: 1=the player has not moved and so there is no need to redraw the view of the maze.
 770  FA04                                           ;na   bit 4: 1=the exit is visible.
 771  FA04                                           ;na   bit 3: 1=rex has moved.
 772  FA04                                           ;na   bit 2: 1=rex has moved into a new location.
 773  FA04                                           ;na   bit 1: 1=rex has his left foot forward, 0=rex has his right foot forward.
 774  FA04                                           ; bit 0: maxview used bit
 775  FA04
 776  FA04 00           var1:   db 0  ; used for printing
 777  FA05
 778  FA05 00           var2:   db 0  ; used for printing
 779  FA06
 780  FA06 00           depth:  db 0  ; stores our depth of field when we are looking
 781  FA07 00           l4086:  db 0
 782  FA08
 783  FA08              player_dir:
 784  FA08 00                   db 0  ;; only when in the main game loop
 785  FA09              de_count:
 786  FA09 00 00                dw 0  ;used to hold 2 bytes of reg de for maze locating info
 787  FA0B
 788  FA0B 00 00        left     dw 0000
 789  FA0D 00 00        right    dw 0000
 790  FA0F 00 00        var3     dw 0000     ;misc. used in drawing walls
 791  FA11 00 00        var4     dw 0000     ;misc. used in drawing walls
 792  FA13 00 00        var5     dw 0000     ;misc - used in drawing walls
 793  FA15 00 00        var6     dw 0000     ;stores current maze block check position
 794  FA17
 795  FA17 00           end_wall db 0        ;stores whether current wall being draw is
 796  FA18                                   ;an outside maze wall or not (as we want to treat
 797  FA18                                   ;this differnetly when drawn in future
 798  FA18 00 00        var7     dw 0        ;misc loop counter in walls
 799  FA1A 00 00        var8     dw 0        ;not used
 800  FA1C 00 00        var9     dw 0        ;not used
 801  FA1E 00           var10    db 0        ;used for maze wall drawing at depth 5
 802  FA1F 00           lr_wall  db 0        ;used for left and right wall drawing in draw_side_walls routine
 803  FA20 00 00        w5_start dw 0        ;not used
 804  FA22 00           cur_map  db 0        ;stores current map to draw or show
 805  FA23 00 00        map_start dw 0       ;tores the map start address
 806  FA25
 807  FA25 00 00        furthest_point dw 0 ;store the address of the furthest point
 808  FA27                                  ;we can see in the maze from our position.
 809  FA27 00           blockid  db 0        ;stores  block position of layer 5 for wall drawing
 810  FA28 71           maze_highbyte db $71 ;holds high byte of current maze in use
 811  FA29 00           map_show    db  0    ;tells is if we are already showing the map
 812  FA2A 00           show_exit       db 0 ;used to say whether to draw the full size exit door or not
 813  FA2B                                   ;0 = draw a closed exit door
 814  FA2B                                   ;1 = draw an open exit door
 815  FA2B 00           switch_pulled   db  0 ; 0 and 1 for on and off - default off
 816  FA2C 00 00        sp_store        dw  0   ;save and restore the SP
 817  FA2E
 818  FA2E              ;#############################################################
 819  FA2E              ;reserve 200 bytes for the stack - points here from BASIC
 820  FA2E              ;stack pointer lives here
 821  FA2E 00 00 00...  stack_p        block 200
 822  FAF6
 823  FAF6              ;stack pointer is at 64511
 824  FAF6
 825  FAF6              ;##############################################
 826  FAF6              ;udg charachter set starts at 64512
 827  FAF6              ;##############################################
 828  FAF6
 829  FAF6                      org 64512
 830  FC00
 831  FC00              ;##############################################
 832  FC00                    ;UDG Characher Defs
 833  FC00              ;##############################################
 834  FC00              _chars:
 835  FC00 48 4B 97 93   db	72,75,151,147,137,68,36,18      ;80	65080	;door wood effect 1
 835  FC04 89 44 24 12
 836  FC08 A8 44 A2 A9   db	168,68,162,169,41,66,148,164	;81	65088   ;door wood effect 2
 836  FC0C 29 42 94 A4
 837  FC10 11 2A 52 54   db	17,42,82,84,78,78,37,18  	    ;82	65096   ;door wood effect 3
 837  FC14 4E 4E 25 12
 838  FC18 28 48 A4 94   db	40,72,164,148,74,146,36,72  	;83	65104   ;door wood effect 4
 838  FC1C 4A 92 24 48
 839  FC20 34 34 34 F7   db	52,52,52,247,247,52,52,52     	;84	65112	;Door Barsvertical
 839  FC24 F7 34 34 34
 840  FC28 00 00 00 FF   db	0,0,0,255,255,0,0,0   	        ;85	65120   ;Door Bars Crossbars
 840  FC2C FF 00 00 00
 841  FC30 AC EC 6C 2C   db	172,236,108,44,44,46,47,45	    ;86	65128	;door bars left side
 841  FC34 2C 2E 2F 2D
 842  FC38 35 37 36 34   db	53,55,54,52,52,116,244,180	    ;87	65136	;door bars right side
 842  FC3C 34 74 F4 B4
 843  FC40              ;rest of door graphic chars are at $b9 onwards below
 844  FC40
 845  FC40 C0 F0 FC FF   db	192,240,252,255,255,252,240,192 ;88	65144   left hand triangle pointed
 845  FC44 FF FC F0 C0
 846  FC48 03 0F 3F FF   db	3,15,63,255,255,63,15,3         ;89	65152	right hand triangle pointed
 846  FC4C FF 3F 0F 03
 847  FC50 00 00 00 00   db	0,0,0,0,0,0,0,0	                ;8a	65160
 847  FC54 00 00 00 00
 848  FC58 FF 55 FF AF   db	255,85,255,175,255,95,255,255   ;8b	65168	upper wall 5 right bottom
 848  FC5C FF 5F FF FF
 849  FC60 FF D5 FF FA   db	255,213,255,250,255,253,255,255	;8c	upper wall 5 left bottom
 849  FC64 FF FD FF FF
 850  FC68
 851  FC68              ;extra layer 5 chars
 852  FC68 FF 3F F3 9F   db	255,63,243,159,244,47,249,143 	 ;8d	small wall stretched (layer 3)
 852  FC6C F4 2F F9 8F
 853  FC70 FF 8C FF 26   db	255,140,255,38,255,140,255,38 	 ;8e	small wall stretched (layer 3)
 853  FC74 FF 8C FF 26
 854  FC78
 855  FC78               ;Section 2 left and right UDG
 856  FC78 00 00 00 00   DB 0,0,0,0,0,3,31,255              ;8f 65200  top right Section 2 (1)
 856  FC7C 00 03 1F FF
 857  FC80 00 00 01 0F   DB 0,0,1,15,127,255,255,255        ;90 65208  top right Section 2 (2)
 857  FC84 7F FF FF FF
 858  FC88 07 3F FF FF   DB 7,63,255,255,255,255,255,255    ;91 65216  top right Section 2 (3)
 858  FC8C FF FF FF FF
 859  FC90
 860  FC90 FF 1F 03 00   DB 255,31,3,0,0,0,0,0              ;92 65224   bottom right Section 2 (1)
 860  FC94 00 00 00 00
 861  FC98 FF FF FF 7F   DB 255,255,255,127,15,1,0,0        ;93 65232   bottom right Section 2 (2)
 861  FC9C 0F 01 00 00
 862  FCA0 FF FF FF FF   DB 255,255,255,255,255,255,63,7    ;94 65240   bottom right Section 2 (3)
 862  FCA4 FF FF 3F 07
 863  FCA8
 864  FCA8 E0 FC FF FF   DB 224,252,255,255,255,255,255,255 ;95 65248   top left Section 2 (1)
 864  FCAC FF FF FF FF
 865  FCB0 00 00 80 F0   DB 0,0,128,240,254,255,255,255     ;96 65256   top left Section 2 (2)
 865  FCB4 FE FF FF FF
 866  FCB8 00 00 00 00   DB 0,0,0,0,0,192,248,255           ;97 65264   top left Section 2 (3)
 866  FCBC 00 C0 F8 FF
 867  FCC0
 868  FCC0 FF FF FF FF   DB 255,255,255,255,255,255,252,224 ;98 65272   bottom left Section 2 (1)
 868  FCC4 FF FF FC E0
 869  FCC8 FF FF FF FE   DB 255,255,255,254,240,128,0,0     ;99 65280   bottom left Section 2 (2)
 869  FCCC F0 80 00 00
 870  FCD0 FF F8 C0 00   DB 255,248,192,0,0,0,0,0           ;9a 65288   bottom left Section 2 (3)
 870  FCD4 00 00 00 00
 871  FCD8
 872  FCD8 80 C0 E0 F0   DB	128,192,224,240,245,250,245,250	;9b	65296	layer 5 left top
 872  FCDC F5 FA F5 FA
 873  FCE0 F5 FA F5 FA   DB	245,250,245,250,240,224,192,128	;9c	65304	layer 5 left bottom
 873  FCE4 F0 E0 C0 80
 874  FCE8 01 03 07 0F   DB	1,3,7,15,95,175,95,175         	;9d	65312   layer 5 right top
 874  FCEC 5F AF 5F AF
 875  FCF0 5F AF 5F AF   DB	95,175,95,175,15,7,3,1         	;9e	65320	layer 5 right bottom
 875  FCF4 0F 07 03 01
 876  FCF8 55 AA 55 AA   DB	85,170,85,170,85,170,85,170    	;9f	65328	chequer
 876  FCFC 55 AA 55 AA
 877  FD00 55 AA 55 AA   DB	85,170,85,170,0,0,0,0          	;a0	65336	top chequer
 877  FD04 00 00 00 00
 878  FD08 00 00 00 00   DB	0,0,0,0,85,170,85,170          	;a1	65344	bottom chequer
 878  FD0C 55 AA 55 AA
 879  FD10 00 00 00 00   DB	0,0,0,0,255,255,255,255        	;a2	65352		bottom black
 879  FD14 FF FF FF FF
 880  FD18 FF FF FF FF   DB	255,255,255,255,0,0,0,0        	;a3	65360		top black
 880  FD1C 00 00 00 00
 881  FD20 FF 08 08 08   DB	255,8,8,8,255,128,128,255      	;a4	65368		brick pattern
 881  FD24 FF 80 80 FF
 882  FD28 99 C8 64 32   DB	153,200,100,50,25,140,206,171  	;a5	65376		top left brick diag
 882  FD2C 19 8C CE AB
 883  FD30 10 28 10 7C   DB	16,40,16,124,16,40,40,68       	;a6	65384		man
 883  FD34 10 28 28 44
 884  FD38 00 78 6B 7E   DB	0,120,107,126,124,104,120,0    	;a7	65392		switch
 884  FD3C 7C 68 78 00
 885  FD40 FF A5 FF A5   DB	255,165,255,165,165,255,165,255	;a8	65400		fancy square
 885  FD44 A5 FF A5 FF
 886  FD48 80 C0 E0 F0   DB	128,192,224,240,255,255,255,255	;a9	65408		top left 5
 886  FD4C FF FF FF FF
 887  FD50 01 03 07 0F   DB	1,3,7,15,255,255,255,255       	;aa	65416		top right 5
 887  FD54 FF FF FF FF
 888  FD58 FF FF FF FF   DB	255,255,255,255,240,224,192,128	;ab	65424		bot left  5
 888  FD5C F0 E0 C0 80
 889  FD60 FF FF FF FF   DB	255,255,255,255,15,7,3,1       	;ac	65432		bot right 5
 889  FD64 0F 07 03 01
 890  FD68 FF E5 FF FD   DB	255,229,255,253,253,255,255,255	;ad	65440		top right fancy
 890  FD6C FD FF FF FF
 891  FD70 FF A7 FF BF   DB	255,167,255,191,191,255,255,255	;ae	65448		top left fancy
 891  FD74 BF FF FF FF
 892  FD78 FF FF FF FF   DB	255,255,255,255,255,255,255,255	;af	65456		all black
 892  FD7C FF FF FF FF
 893  FD80 FF FE FC F8   DB	255,254,252,248,240,224,192,128	;b0	65464		top left triangle
 893  FD84 F0 E0 C0 80
 894  FD88 FF 7F 3F 1F   DB	255,127,63,31,15,7,3,1         	;b1	65472		top right triangle
 894  FD8C 0F 07 03 01
 895  FD90 01 03 07 0F   DB	1,3,7,15,31,63,127,255         	;b2	65480		bot right triangle
 895  FD94 1F 3F 7F FF
 896  FD98 80 C0 E0 F0   DB	128,192,224,240,248,252,254,255	;b3	65488		bot right triangle
 896  FD9C F8 FC FE FF
 897  FDA0
 898  FDA0 FF 55 FF AA   DB	255,85,255,170,255,85,255,170	;b4	65496		small wall
 898  FDA4 FF 55 FF AA
 899  FDA8 FF 88 88 FF   DB	255,136,136,255,162,162,255,128	;b5	65504		mediumwall
 899  FDAC A2 A2 FF 80
 900  FDB0 FF 88 88 88   DB	255,136,136,136,255,224,192,128	;b6	65512		largewall
 900  FDB4 FF E0 C0 80
 901  FDB8 FF AA FF AA   DB	255,170,255,170,255,170,255,170 ;b7	65520		mediumwall_1
 901  FDBC FF AA FF AA
 902  FDC0 FF 88 88 88   DB	255,136,136,136,255,128,128,128 ;b8	65528		hugewall
 902  FDC4 FF 80 80 80
 903  FDC8
 904  FDC8              ;layer 5 section 3 right TOP
 905  FDC8
 906  FDC8 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;b9 top right section 3 (4)
 906  FDCC FF FF FF FF
 907  FDD0 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;ba top right section 3 (3)
 907  FDD4 FF FF FF FF
 908  FDD8 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;bb top right section 3 (2)
 908  FDDC FF FF FF FF
 909  FDE0 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;bc top right section 3 (1)
 909  FDE4 FF FF FF FF
 910  FDE8
 911  FDE8              ;layer 5 section 3 right BOTTOM
 912  FDE8
 913  FDE8 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;bd top right section 3 (6)
 913  FDEC FF 00 00 00
 914  FDF0 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;be top right section 3 (6)
 914  FDF4 FF FF 00 00
 915  FDF8 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;bf top right section 3 (6)
 915  FDFC FF FF FF 00
 916  FE00 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c0 top right section 3 (6)
 916  FE04 FF FF FF FF
 917  FE08
 918  FE08              ;layer 5 section 3 left TOP TBD
 919  FE08
 920  FE08 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;c1 bottom right section 3 (5)
 920  FE0C FF 00 00 00
 921  FE10 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;c2 bottom right section 3 (6)
 921  FE14 FF FF 00 00
 922  FE18 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;c3 bottom right section 3 (6)
 922  FE1C FF FF FF 00
 923  FE20 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c4 bottom right section 3 (6)
 923  FE24 FF FF FF FF
 924  FE28
 925  FE28              ;layer 5 section 3 left BOTTOM TBD
 926  FE28
 927  FE28 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;c5 bottom right section 3 (5)
 927  FE2C FF FF FF FF
 928  FE30 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;c6 bottom right section 3 (6)
 928  FE34 FF FF FF FF
 929  FE38 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;c7 bottom right section 3 (6)
 929  FE3C FF FF FF FF
 930  FE40 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c8 bottom right section 3 (6)
 930  FE44 FF FF FF FF
 931  FE48
 932  FE48
 933  FE48              ;layer 5 section 4 right TOP
 934  FE48
 935  FE48 00 00 00 00   DB 0,0,0,0,0,0,0,255               ;c9 top right section 3 (4)
 935  FE4C 00 00 00 FF
 936  FE50 00 00 00 00   DB 0,0,0,0,0,0,255,255             ;ca top right section 3 (4)
 936  FE54 00 00 FF FF
 937  FE58 00 00 00 00   DB 0,0,0,0,255,255,255,255         ;cb top right section 3 (3)
 937  FE5C FF FF FF FF
 938  FE60 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;cc top right section 3 (2)
 938  FE64 FF FF FF FF
 939  FE68 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;cd top right section 3 (1)
 939  FE6C FF FF FF FF
 940  FE70
 941  FE70              ;layer 5 section 4 right BOTTOM
 942  FE70
 943  FE70 FF 00 00 00   db 255,0,0,0,0,0,0,0               ;ce top right section 3 (6)
 943  FE74 00 00 00 00
 944  FE78 FF FF 00 00   db 255,255,0,0,0,0,0,0             ;cf top right section 3 (6)
 944  FE7C 00 00 00 00
 945  FE80 FF FF FF FF   db 255,255,255,255,0,0,0,0         ;d0 top right section 3 (6)
 945  FE84 00 00 00 00
 946  FE88 FF FF FF FF   db 255,255,255,255,255,255,0,0     ;d1 top right section 3 (6)
 946  FE8C FF FF 00 00
 947  FE90 FF FF FF FF   db 255,255,255,255,255,255,255,0   ;d2 top right section 3 (6)
 947  FE94 FF FF FF 00
 948  FE98
 949  FE98
 950  FE98              ;Extra wall5
 951  FE98              ; db	249,63,243,159,244,47,249,143 	;c9	small wall stretched more
 952  FE98              ; db 255,15,255,31,255,15,255,15	   	;ca	small wall stretched
 953  FE98              ; db 240,15,224,31,224,15,112,15	   	;cb	small wall stretched
 954  FE98
 955  FE98              ;triangular door wood parts
 956  FE98 FF FF FE FB   db	255,255,254,251,249,228,228,146     ;d3	   ;door wood effect top corner 1 right side($80)
 956  FE9C F9 E4 E4 92
 957  FEA0 88 CB E7 F3   db	136,203,231,243,249,252,254,255	    ;d4	   ;door wood effect bottom corner 1 (80)
 957  FEA4 F9 FC FE FF
 958  FEA8 FF FE FE FC   db	255,254,254,252,254,238,229,146     ;d5	   ;door wood effect top corner 3 right side($82)
 958  FEAC FE EE E5 92
 959  FEB0 91 CA E2 F4   db	145,202,226,244,250,252,254,255    	;d6    ;door wood effect bottom corner 1 (82)
 959  FEB4 FA FC FE FF
 960  FEB8
 961  FEB8              ;additional characters for level numbers printed on right of display
 962  FEB8              ;single caracter 10,11,12,13,14,15
 963  FEB8 00 4C 52 52    db  0,76,82,82,82,82,76,0             ;d7
 963  FEBC 52 52 4C 00
 964  FEC0 00 48 48 48    db  0,72,72,72,72,72,72,0             ;d8
 964  FEC4 48 48 48 00
 965  FEC8 00 4C 52 42    db  0,76,82,66,68,72,94,0             ;d9
 965  FECC 44 48 5E 00
 966  FED0 00 4C 52 46    db  0,76,82,70,66,82,76,0             ;da
 966  FED4 42 52 4C 00
 967  FED8 00 42 46 4A    db  0,66,70,74,94,66,66,0             ;db
 967  FEDC 5E 42 42 00
 968  FEE0 00 4E 50 4C    db  0,78,80,76,66,82,76,0             ;dc
 968  FEE4 42 52 4C 00
 969  FEE8
 970  FEE8              ;characters to print around the switch
 971  FEE8 FF 00 FF 00    db  255,0,255,0,255,0,255,0           ;dd  ;horizontal bars x 4
 971  FEEC FF 00 FF 00
 972  FEF0 FF 80 BF A0    db  255,128,191,160,175,168,171,170   ;de  ;top left corner
 972  FEF4 AF A8 AB AA
 973  FEF8 AA AB A8 AF    db  170,171,168,175,160,191,128,255   ;df  ;bot left corner
 973  FEFC A0 BF 80 FF
 974  FF00 AA AA AA AA    db  170,170,170,170,170,170,170,170   ;e0  ;vertical bars
 974  FF04 AA AA AA AA
 975  FF08 FF 01 FD 05    db  255,1,253,5,245,21,213,85         ;e1  ;top right corner
 975  FF0C F5 15 D5 55
 976  FF10 55 D5 15 F5    db  85,213,21,245,5,253,1,255         ;e2  ;bot right corner
 976  FF14 05 FD 01 FF
 977  FF18 00 FF 00 FF    db  0,255,0,255,0,255,0,255           ;e3  ;bot horizontal bars
 977  FF1C 00 FF 00 FF
 978  FF20 55 55 55 55    db  85,85,85,85,85,85,85,85           ;e4  ;right vertical bars
 978  FF24 55 55 55 55
 979  FF28
 980  FF28              ;side view switch chars
 981  FF28 FF FF FE FC    db  255,255,254,252,249,242,228,201   ;e5 ;top triangle bit
 981  FF2C F9 F2 E4 C9
 982  FF30 92 A4 A9 AA    db  146,164,169,170,170,170,170,170   ;e6 ; top left corner
 982  FF34 AA AA AA AA
 983  FF38 FF 01 7D 85    db  255,1,125,133,53,85,149,21        ;e7 ;top right corner
 983  FF3C 35 55 95 15
 984  FF40 55 D5 55 55    db  85,213,85,85,85,85,85,85          ;e8 ;2nd top line bottom right bit
 984  FF44 55 55 55 55
 985  FF48 40 80 00 00    db  64,128,0,0,0,0,0,0                ;e9 ;3rd top line bottom 2nd right bit
 985  FF4C 00 00 00 00
 986  FF50 92 24 49 92    db  146,36,73,146,36,72,144,32        ;ea ;top horizontal line
 986  FF54 24 48 90 20
 987  FF58
 988  FF58 C9 E4 F2 F9    db  201,228,242,249,252,254,255,255  ;eb   ;bottom triangle bit
 988  FF5C FC FE FF FF
 989  FF60 15 95 55 35    db  21,149,85,53,133,125,1,255       ;ec ;bottom right corner
 989  FF64 85 7D 01 FF
 990  FF68 55 55 55 55    db  85,85,85,85,85,85,213,85         ;ed ;2nd bottom line bottom right bit
 990  FF6C 55 55 D5 55
 991  FF70 AA AA AA AA    db  170,170,170,170,170,169,164,146  ;ee   ;bottom left corner
 991  FF74 AA A9 A4 92
 992  FF78 00 00 00 00    db  0,0,0,0,0,0,128,64               ;ef ;3rd top line bottom 2nd right bit
 992  FF7C 00 00 80 40
 993  FF80 20 90 48 24    db  32,144,72,36,146,73,36,146       ;f0 ;bottom horizontal line
 993  FF84 92 49 24 92
 994  FF88
 995  FF88
 996  FF88
 997  FF88              ;END_PROGRAM
 998  FF88
 999  FF88
1000  FF88              ;for SJASMPLUS
1001  FF88              ;;
1002  FF88              ;; Set up the Nex output
1003  FF88              ;;
1004  FF88
1005  FF88                      ; This sets the name of the project, the start address,
1006  FF88                      ; and the initial stack pointer.
1007  FF88               ;       SAVENEX OPEN "3dmaze.nex";, start_game  ;, END_PROGRAM
1008  FF88                      SAVEBIN "3dmaze.bin",32768,32767
1009  FF88
1010  FF88                      ; This asserts the minimum core version.  Set it to the core version
1011  FF88                      ; you are developing on.
1012  FF88              ;        SAVENEX CORE 2,0,0
1013  FF88
1014  FF88                      ; This sets the border colour while loading (in this case white),
1015  FF88                      ; what to do with the file handle of the nex file when starting (0 =
1016  FF88                      ; close file handle as we're not going to access the project.nex
1017  FF88                      ; file after starting.  See sjasmplus documentation), whether
1018  FF88                      ; we preserve the next registers (0 = no, we set to default), and
1019  FF88                      ; whether we require the full 2MB expansion (0 = no we don't).
1020  FF88              ;        SAVENEX CFG 7,0,0,0
1021  FF88
1022  FF88                      ; Generate the Nex file automatically based on which pages you use.
1023  FF88              ;        SAVENEX AUTO
1024  FF88
# file closed: src/rd3dmazeV6-sj.asm
