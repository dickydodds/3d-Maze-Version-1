# file opened: src/rd3dmazeV6-sj.asm
   1  0000              ; written by me, richard dodds (dickydodds.com) beginning may 2018
   2  0000
   3  0000              ; some useful info:-
   4  0000              ; the zx81 character based screen is drawn in memory and then copied to the spectrum screen.
   5  0000
   6  0000              ;2nd oct 2018 - layer 6 completed - can print udg and spectrum
   7  0000              ;             character set now.
   8  0000              ;20th oct 2018 - left side completed except for multiple blocks in
   9  0000              ;layer 2, 3 & 4
  10  0000              ;11th oct - left side done and colours added.
  11  0000              ;V3. 22 nov - left side properly fixed - had bugs on top and bottom of maze
  12  0000              ;V4 27 nov. Removed the maze generation code from Malcolm Evans
  13  0000              ;V6 - 20 June 2018 - fixed end wall distance. Started chopping into manageable chunks.
  14  0000              ;2019 - done a load of stuff!
  15  0000              ;Oct 2020 - moved to SJASMPlus and implemented backbuffer
  16  0000              ;Oct 19 2020 - added ULANext colours and removed maze printing routine that used ROM - implemented M/C one.
  17  0000              ;Nov 23rd 2020 - got switch graphics working.
  18  0000              ;dec 2nd 2020 - added rudimentary sound and got the maze exit transition working
  19  0000              ;dec 4th 2020 - exit to basic done when you exit level 0
  20  0000              ;dec 10th 2020 - added BC exit value to signal endgame sequence & virtually finished. Need to make the map editor now
  21  0000
  22  0000
  23  0000
  24  0000              ;For SJASMPLUS
  25  0000
  26  0000                      ; Allow the Next paging and instructions
  27  0000                      DEVICE ZXSPECTRUMNEXT
  28  0000
  29  0000                      ; Generate a map file for use with Cspect
  30  0000                      CSPECTMAP "project.map"
  31  0000
  32  0000
  33  0000                ;      INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
  34  0000                ;      INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
  35  0000
  36  0000
  37  0000              ;for info...
  38  0000              ;load "4-rd3dmazeV6.asm" ; draw left side of maze
  39  0000              ;load "5-rd3dmazeV6.asm" ; draw wall in front of player
  40  0000              ;load "6-rd3dmazeV6.asm" ; draw right side of maze
  41  0000
  42  0000
  43  0000              ;##################################################
  44  0000              ;##################################################
  45  0000              ;##################################################
  46  0000              ;##################################################
  47  0000              ;##################################################
  48  0000              ;#                                                #
  49  0000              ;#               main game loop here              #
  50  0000              ;#                                                #
  51  0000              ;##################################################
  52  0000              ;##################################################
  53  0000              ;##################################################
  54  0000              ;##################################################
  55  0000              ;##################################################
  56  0000
  57  0000              main:           org 32768
  58  8000
  59  8000              ;set the player direction based on keypress
  60  8000              ; 0=north, 1=west, 2=south, 3=east
  61  8000
  62  8000 F3           start_game:    di       ;disable interrupts
  63  8001
  64  8001              ;save the contents of bank 14
  65  8001 CD 2C C8                   call save_bank_14
  66  8004
  67  8004              ;first, clear the 2 ULA bank screens as they are at ROM location 0
  68  8004
  69  8004 ED 91 50 0A                NEXTREG $50,10
  70  8008 CD 77 81                   CALL clsULA
  71  800B ED 91 50 0E                NEXTREG $50,14
  72  800F CD 77 81                   CALL clsULA
  73  8012 ED 91 50 FF                NEXTREG $50,$FF
  74  8016
  75  8016
  76  8016              ;setup ULA Plus Palette
  77  8016
  78  8016 CD 89 82                   call Setup_palette
  79  8019
  80  8019              ;SET DEFAULT PLAYER POSITION AND DIRECTION
  81  8019              ; 0=north, 1=west, 2=south, 3=east
  82  8019              ;              ld a,2            ;set default to be south
  83  8019              ;              ld (player_dir),a
  84  8019
  85  8019                            ;make sure our exit door is closed
  86  8019 AF                         xor a                 ;reg a=0
  87  801A 32 2A FA                   ld (show_exit),a
  88  801D                            ;make sure our switch is up = 0 = not pulled
  89  801D 32 2B FA                   ld (switch_pulled),a
  90  8020
  91  8020              ;remember to set maze_highbyte for current maze
  92  8020
  93  8020              ;start on maze map 15
  94  8020
  95  8020 3E 0F                      ld a,15
  96  8022 CD 0D C8                   call set_map           ;set our map
  97  8025 CD 9F C7                   call set_map_start_pos ;set player start position
  98  8028
  99  8028
 100  8028              main_loop:
 101  8028
 102  8028
 103  8028              ;set border to black - the beep sound makes it red so cant use this :(
 104  8028                         ;   ld c,254
 105  8028                          ;  ld a,39  ;black
 106  8028                          ;  ld a,64
 107  8028                          ;  out (c),a
 108  8028              ;0=red
 109  8028              ;32=red
 110  8028              ;34 purple
 111  8028              ;64 = red
 112  8028              ;254 = off white
 113  8028              ;244 cyan
 114  8028              ;234 purple
 115  8028              ;224 red
 116  8028              ;214 whitish
 117  8028              ;204 cyan
 118  8028              ;203 purple
 119  8028
 120  8028              ;set CPU Speed
 121  8028                            ;set CPU Speed Mhz
 122  8028                            ;0 = 3.5
 123  8028                            ;1 = 7
 124  8028                            ;2 = 14
 125  8028                            ;3 = 28
 126  8028 ED 91 07 01                nextreg 7,1
 127  802C
 128  802C                            ;put standard printing back to black text & white paper
 129  802C 3E 62                      ld a,98
 130  802E 32 47 8C                   ld (att),a
 131  8031
 132  8031 CD 69 81                   call clear_char_screen    ;clear screen @c000
 133  8034
 134  8034 CD A0 8D                   call get_distance ; get distance we can see
 135  8037                                              ; and save depth we can see
 136  8037                            ; load de is done when getting the distance above
 137  8037                            ; we need de to hold the jump value in the maze direction
 138  8037                            ; we are looking
 139  8037
 140  8037 CD 74 8F                   call draw_left_side   ; start drawing the left side of the maze
 141  803A
 142  803A                            ;we need to repopulate var furthest_point
 143  803A
 144  803A CD A0 8D                   call get_distance     ; get distance we can see
 145  803D                                                  ; and set de accordingly
 146  803D                                                  ; and save depth we can see
 147  803D
 148  803D CD 8A 9B                   call draw_right_side  ; start drawing the right side of the maze
 149  8040
 150  8040 CD 17 97                   call draw_front_view  ; draw wall in front of player
 151  8043
 152  8043                            ;check if we are at an end wall. If so, draw walls left
 153  8043                            ;and right to simulate the long outside edge wall
 154  8043
 155  8043 CD A3 97                   call draw_side_walls
 156  8046
 157  8046                            ;draw screen at mem location 0000
 158  8046                            ;my print used to print screen @c000 to 16384 inc udg's
 159  8046
 160  8046 CD 9B 8C                   call my_print         ;copy to screen from c000
 161  8049
 162  8049                            ;we need to copy the colours to an alternate memory screen then copy them back to the main screen
 163  8049                            ;we do this because we use the alternate colour screen when we transition between levels
 164  8049
 165  8049 CD 22 99                   call draw_colours     ;colourise the display but store at address 'attr_screen'
 166  804C
 167  804C CD 5C C7                   call copy_colours     ;copy colour map to screen
 168  804F
 169  804F                            ;make sure we point to our character set
 170  804F 21 9C C7                   ld hl,charset_1-256
 171  8052 22 43 8C                   ld (base),hl
 172  8055 CD EE 8C                   call compass          ; draw compass
 173  8058
 174  8058              ;------------------------------------------------------------------------
 175  8058                            ;see if we need to draw the door or switch
 176  8058                  ;debug line
 177  8058                 ;ld a,0
 178  8058                 ;ld (switch_pulled),a
 179  8058
 180  8058 CD D9 8E                   call draw_door        ;see if we need to draw a door
 181  805B CD 2C 8F                   call draw_switch     ;see if we need to draw a switch
 182  805E              ;----------------------------------------------------------------------
 183  805E              ;setup right hand side of the screen
 184  805E CD 9D 9A                   call draw_screen_right
 185  8061
 186  8061                            ;do the walking sound
 187  8061 1E 0A        	          ld e,10		;10 for the walk sound
 188  8063 CD 89 C7                   call walk_sound
 189  8066
 190  8066                            ;now flip the screen into the visible screen
 191  8066 CD B5 81                   call FlipULABuffers_peter
 192  8069
 193  8069
 194  8069              ;set CPU Speed
 195  8069                            ;set CPU Speed Mhz
 196  8069                            ;0 = 3.5
 197  8069                            ;1 = 7
 198  8069                            ;2 = 14
 199  8069                            ;4 = 28
 200  8069 ED 91 07 00                nextreg 7,0
 201  806D
 202  806D              ;#######################################
 203  806D              ;now move based on keypress
 204  806D              ;#######################################
 205  806D
 206  806D              ;Now set our view direction based on keypress
 207  806D
 208  806D              ;c bit values: 1 = 0 fire
 209  806D               ;             2 = 5 right
 210  806D               ;             4 = 7 up (forward)
 211  806D               ;             8 = 6 down
 212  806D               ;            16 = 8 left
 213  806D
 214  806D
 215  806D              ;set the player direction based on keypress
 216  806D              ; 0=north, 1=west, 2=south, 3=east
 217  806D
 218  806D
 219  806D              ;######################################
 220  806D              ;speed of game set here
 221  806D              ;######################################
 222  806D
 223  806D CD 54 81                   call pause            ;slow down the game here
 224  8070
 225  8070              wait4key:
 226  8070 CD C0 C7                   call get_keys         ;keypress in C register
 227  8073 79                         ld a,c
 228  8074 B7                         or a                  ;clear flags
 229  8075 CA 70 80                   jp z,wait4key         ;wait for a keypress b4 continuing
 230  8078
 231  8078                            ;check if its the map key and have we already pressed it
 232  8078 47                         ld b,a                ;save our key
 233  8079 3A 29 FA                   ld a,(map_show)       ;get our last pressed map key
 234  807C 90                         sub b                 ;map key is 0 =1 in reg a
 235  807D                                                  ;1= we are already showing the map, 0 says we are not
 236  807D 28 F1                      jr z,wait4key         ;zero flag set if map_show=1 so do nothing
 237  807F
 238  807F AF                         xor a                 ;make reg a zero
 239  8080 32 29 FA                   ld (map_show),a
 240  8083 78                         ld a,b                ;now carry on :)
 241  8084
 242  8084 FE 20                      cp $20             ; 8 (right) pressed
 243  8086 CA BE 80                   jp z,plus
 244  8089
 245  8089 FE 01        key_x         cp 1               ;x pressed. (old) 8=6 (down) pressed
 246  808B C2 94 80                   jp nz, comp_4         ;carry on if not pressed otherwise return to BASIC
 247  808E 01 01 00                   ld bc,1               ;set bc to non ZERO to indicate we hit the EXIT key and need to return to BASIC
 248  8091                                                  ;and NOT to play the exit game routine
 249  8091 C3 6D C8                   jp ret_to_basic       ;exit to BASIC
 250  8094
 251  8094 FE 08        comp_4:       cp 8                ;7 (forward) pressed
 252  8096 CA D9 80                   jp z,move_forward
 253  8099
 254  8099 FE 04                      cp 4                ; 5 (left) pressed
 255  809B CA CB 80                   jp z,minus
 256  809E
 257  809E FE 10                      cp 16                 ; 6 pressed
 258  80A0 CA 70 80                   jp z,wait4key
 259  80A3
 260  80A3                            ;0 was pressed or we never get here!
 261  80A3 A8                         xor b                 ;make b zero
 262  80A4 3A 29 FA                   ld a,(map_show)
 263  80A7 90 97                      sub b,a               ;exit if b=1 as we are already showing the map!
 264  80A9 C2 70 80                   jp nz,wait4key
 265  80AC 3C                         inc a
 266  80AD                           ; ld (map_show),a       ;save it
 267  80AD E5                         push hl
 268  80AE
 269  80AE 32 29 FA                   ld (map_show),a       ;save that we have pressed 6 - reg a = 1
 270  80B1
 271  80B1 CD 2C 8B                   CALL DRAW_MAP
 272  80B4
 273  80B4 E1                         pop hl
 274  80B5
 275  80B5 C3 70 80                   jp wait4key
 276  80B8
 277  80B8 32 08 FA     go1:          ld (player_dir),a
 278  80BB C3 28 80                   jp main_loop      ;start again
 279  80BE
 280  80BE
 281  80BE              plus:
 282  80BE 3A 08 FA                   ld a,(player_dir)
 283  80C1 3C                         inc a
 284  80C2 FE 04                      cp 4          ;if its 4, make it 0 as it cant be >3
 285  80C4 C2 B8 80                   jp nz,go1     ;start game loop if its not 4
 286  80C7 97                         sub a         ;make it 0 (wraparound
 287  80C8 C3 B8 80                   jp go1
 288  80CB
 289  80CB 3A 08 FA     minus:        ld a,(player_dir)
 290  80CE 3D                         dec a
 291  80CF FE FF                      cp 255
 292  80D1 C2 B8 80                   jp nz,go1         ;continue game if not 0
 293  80D4 3E 03                      ld a,3            ;wraparound
 294  80D6 C3 B8 80                   jp go1
 295  80D9
 296  80D9
 297  80D9              ;how do i implement a less-than/greater-than test in assembly?
 298  80D9
 299  80D9              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
 300  80D9              ;a and the argument were equal, else if the carry is set the argument was greater,
 301  80D9              ;and finally, if neither is set, then reg 'a' must be greater
 302  80D9              ;(cp does nothing to the registers, only the f (flag) register is changed).
 303  80D9
 304  80D9              move_forward:
 305  80D9
 306  80D9              ;----------------------------------------------------------------------------
 307  80D9              ;1st, check if we are trying to enter an open exit door
 308  80D9              ;so, is the door open?
 309  80D9
 310  80D9              ; door will always face NORTH.
 311  80D9              ; show door type = 0 = front, 1 = side
 312  80D9
 313  80D9                           ;are we facing south?
 314  80D9 3A 08 FA                  ld a,(player_dir)
 315  80DC D6 02                     sub 2                  ;2 = south
 316  80DE 20 2C                     jr nz,cont_a           ;if not, just continue in the normal way
 317  80E0
 318  80E0 2A 00 FA                  ld hl,(player_pos)
 319  80E3 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 320  80E6 19                        add hl,de
 321  80E7 7E                        ld a,(hl)
 322  80E8 FE C0                     cp _me                 ;is it our DOOR block?
 323  80EA 20 20                     jr nz,cont_a           ;if not, just continue in the normal way
 324  80EC
 325  80EC                           ;YES its a door - so exit through it - but only if we are looking south
 326  80EC 3A 2B FA                  ld a,(switch_pulled)
 327  80EF A7                        and a
 328  80F0 28 1A                     jr z,cont_a            ;if not, just continue in the normal way
 329  80F2
 330  80F2              ;Door is in front of us AND open so lets exit!
 331  80F2
 332  80F2                         ; reset the switch pulled back to off position
 333  80F2 AF                       xor a
 334  80F3 32 2B FA                 ld (switch_pulled),a
 335  80F6
 336  80F6              ;reset switch sound variable
 337  80F6 32 2E FA                 ld (switch_sound ),a
 338  80F9
 339  80F9              ;need to set the player start position now.  - MOVED TO EXIT_ANIM ROUTINE
 340  80F9
 341  80F9               ;           ld a,(cur_map)
 342  80F9               ;           dec a               ;point to our next map
 343  80F9               ;           call set_map      ;set our map
 344  80F9               ;           ld l,01              ;top left of maze
 345  80F9               ;           ld (player_pos),hl
 346  80F9
 347  80F9              ;draw exit animation
 348  80F9                          ;we moved forward and overwrote the door so redraw it
 349  80F9 ED 91 07 03              nextreg 7,3             ;set cpu speed to max
 350  80FD
 351  80FD CD 00 C6                 call exit_anim
 352  8100
 353  8100              ;**********************************************************************
 354  8100              ;GAME EXIT CHECK
 355  8100              ;check if we got past level 0 - if so exit to BASIC
 356  8100 3A 30 FA                 ld a,(game_exit)
 357  8103 FE 00                    cp 0
 358  8105 C8                       ret z
 359  8106              ;**********************************************************************
 360  8106
 361  8106                          ;now flip the screen into the visible screen
 362  8106 CD B5 81                 call FlipULABuffers_peter
 363  8109
 364  8109 C3 70 80                 jp wait4key             ;screen is already drawn so dont draw it again.
 365  810C              ;--------------------------------------------------------------------------------
 366  810C              cont_a:
 367  810C              ;1st, check if we are trying to flick the switch on
 368  810C              ;so, is the door open?
 369  810C
 370  810C              ; switch will always face NORTH.
 371  810C              ; show switch type = 0 = off, 1 = on
 372  810C
 373  810C                           ;are we facing south?
 374  810C 3A 08 FA                  ld a,(player_dir)
 375  810F D6 02                     sub 2                  ;2 = south
 376  8111 20 17                     jr nz,cont_b           ;if not, just continue in the normal way
 377  8113
 378  8113 2A 00 FA                  ld hl,(player_pos)
 379  8116 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 380  8119 19                        add hl,de
 381  811A 7E                        ld a,(hl)
 382  811B FE E0                     cp _ms                 ;is it our SWITCH block?
 383  811D 20 0B                     jr nz,cont_b           ;if not, just continue in the normal way
 384  811F                           ;YES its a switch - so mark it as switched on
 385  811F 3E 01                     ld a,1
 386  8121 32 2B FA                  ld (switch_pulled),a
 387  8124
 388  8124              ;draw switch
 389  8124 CD 2C 8F                 call draw_switch      ;draw our switch
 390  8127 C3 28 80                 jp main_loop          ;jump to our next level
 391  812A              ;--------------------------------------------------------------------------------
 392  812A
 393  812A 3A 02 FA     cont_b:       ld a,(maxview)         ;if our maximum view depth = 0 ie we are
 394  812D                                                  ;in front of a wall face
 395  812D                                                  ;then do nothing
 396  812D 3C                         inc a
 397  812E 3D                         dec a
 398  812F CA 70 80                   jp z,wait4key
 399  8132
 400  8132 CD B7 8E                   call load_walk        ; get walk forward value to add
 401  8135 2A 00 FA                   ld hl,(player_pos)    ;get our current position
 402  8138 7C                         ld a,h                ;save our current H value for comparing later
 403  8139 19                         add hl,de              ;move our position forward in our view
 404  813A
 405  813A BC                         cp h              ;have we crossed 256 byte boundry?
 406  813B C2 28 80                   jp nz,main_loop   ;we have exited our boundry so dont
 407  813E                                              ;move our view anywhere.
 408  813E                            ;now test if l=0
 409  813E              ;              ld a,l
 410  813E 2C                         inc l
 411  813F 2D                         dec l             ;are we at position 0? Exit if yes and do nothing
 412  8140                            ;cp 0
 413  8140 CA 28 80                   jp z,main_loop   ;we are at location 0 in the maze, so, again do nothing
 414  8143                                              ;and just exit so we stay at position 1
 415  8143
 416  8143                            ;we ARE at the bottom row so DO NOT MOVE FORWARD
 417  8143 22 00 FA                   ld (player_pos),hl
 418  8146 C3 28 80                   jp main_loop          ;continue to the game loop
 419  8149
 420  8149
 421  8149              ;we get here as we are not at the bottom of the maze.
 422  8149 FE 10        move_1:       cp 16                 ;are we at the top edge of the maze?
 423  814B D2 28 80                   jp nc,main_loop
 424  814E 22 00 FA                   ld (player_pos),hl    ;save our new position
 425  8151
 426  8151              ;we are at the TOP of the maze so dont saaveour addition to HL
 427  8151 C3 28 80                   jp main_loop          ;continue to the game loop
 428  8154
 429  8154              ;##########################################################################
 430  8154              ;Pause routine for slowing down the game
 431  8154
 432  8154 E5           pause:        push hl
 433  8155 C5                         push bc
 434  8156 06 01                      ld b,1           ;delay loop
 435  8158              loop19:       ;halt             ;no interrupts!
 436  8158 21 10 27                   ld hl,10000
 437  815B 2B           abc:          dec hl
 438  815C 7C                         ld a,h
 439  815D 3D                         dec a
 440  815E                            ;dec h
 441  815E 20 FB                      jr nz,abc
 442  8160 05                         dec b
 443  8161 C2 58 81                   jp nz,loop19
 444  8164 C1                         pop bc
 445  8165 E1                         pop hl
 446  8166 C9                         ret
 447  8167              ;##########################################################################
 448  8167
 449  8167              ;load other programs
 450  8167
 451  8167              ;for SJASMPLUS
 452  8167
 453  8167                  INCLUDE "1-rd3dmazeV6.asm"  ; init and maze itself
# file opened: src/1-rd3dmazeV6.asm
   1+ 8167
   2+ 8167              ;variables
   3+ 8167
   4+ 8167              chan_open: equ 5633
   5+ 8167              cl_line:   equ 3652 ; clear screen not changing print pos
   6+ 8167              print:     equ 8252 ; print text line
   7+ 8167              at         equ 22   ; the 'print 'at' directive
   8+ 8167              paper      equ $11  ; paper directive
   9+ 8167              ink        equ $10  ; ink directive
  10+ 8167              flash      equ $12  ; flash directive
  11+ 8167              bright     equ $13
  12+ 8167              over       equ $15
  13+ 8167              blue       equ $02
  14+ 8167              red        equ $00
  15+ 8167              magenta    equ $06
  16+ 8167              green      equ $80
  17+ 8167              cyan       equ $02
  18+ 8167              yellow     equ 26
  19+ 8167              white      equ 255
  20+ 8167              black      equ 253
  21+ 8167              ;rex_pos    equ 32904
  22+ 8167
  23+ 8167              udg_start  equ 63480+8 ;63488  ;= 1024 less than real address for the display printing routine
  24+ 8167
  25+ 8167
  26+ 8167              screen_add equ 16384
  27+ 8167              screen_atr equ screen_add + 6144
  28+ 8167              screen_bot equ 23659
  29+ 8167              screen_mem equ $c000   ;49152
  30+ 8167              df_cc      equ $5c84
  31+ 8167
  32+ 8167 00 C0        d_file   dw $c000    ;char display in memory at 49152
  33+ 8169
  34+ 8169
  35+ 8169              ;maze_highbyte           equ  $71  ;H value (of HL) of current maze being drawn
  36+ 8169              _hugewall               equ  $b8
  37+ 8169              _chequerboard           equ  $9f
  38+ 8169              _space                  equ  32
  39+ 8169              _bottomblack            equ  $a2
  40+ 8169              _topblack               equ  $a3
  41+ 8169              _topwhitebottomchequer  equ  $a1
  42+ 8169              _topchequerbottomwhite  equ  $a0
  43+ 8169              _topleftwhite           equ  39
  44+ 8169              _bottomleftwhite        equ  40
  45+ 8169              _toprightwhite          equ  41
  46+ 8169              _bottomrightwhite       equ  42
  47+ 8169              _black                  equ  $af
  48+ 8169              _topcorner1             equ  $b0  ;bottom corner left slope to righttop
  49+ 8169              _topcorner2             equ  $b1  ;left corner slope to right bottom from left
  50+ 8169              _topcorner3             equ  $b2  ;bottom corner slope to right top
  51+ 8169              _topcorner4             equ  $b3  ;top corner left slope to right bottom
  52+ 8169              _wall                   equ  $a4  ;wall pattern
  53+ 8169              _leftinnerwall          equ  $a5  ;diagonal brick pattern left
  54+ 8169              _topleft5               equ  $a9  ;next 4 are for far view on layer 5
  55+ 8169              _bottomleft5            equ  $ab  ;
  56+ 8169              _topright5              equ  $aa
  57+ 8169              _bottomright5           equ  $ac
  58+ 8169              _smallwall              equ  $b4  ;far away wall
  59+ 8169              _mediumwall             equ  $b5  ;middle wall
  60+ 8169              _mediumwall_1           equ  $b7  ;middle wall_1
  61+ 8169              _largewall              equ  $b6  ;close view wall
  62+ 8169              _layer5lefttop          equ  $9b  ;layer 5 top left chevron
  63+ 8169              _layer5leftbottom       equ  $9c  ;layer 5 bottom left chevron
  64+ 8169
  65+ 8169
  66+ 8169
  67+ 8169              ;*******  NO MORE CODE HERE PLEASE AS IT WILL SHIFT THE MEMORY UP ****************
  68+ 8169
  69+ 8169              ;################################################################
  70+ 8169              ; some routines here in the 1.5k before the maze data
  71+ 8169              ;################################################################
  72+ 8169
  73+ 8169              ;============================================
  74+ 8169              ;clear the character maze in memory
  75+ 8169              ;============================================
  76+ 8169
  77+ 8169              clear_char_screen:
  78+ 8169
  79+ 8169 21 00 C0             ld hl,$c000
  80+ 816C 01 16 03             ld bc,790;767
  81+ 816F 11 01 C0             ld de,$c001
  82+ 8172 36 20                ld (hl),32      ;space
  83+ 8174 ED B0                ldir
  84+ 8176 C9                   ret
  85+ 8177              ;################################################################
  86+ 8177              ;rom routine for cls of the 2 video pages
  87+ 8177              ;################################################################
  88+ 8177
  89+ 8177              clsULA:                 ;Clear Ula Buffer:
  90+ 8177 21 00 00         ld  hl,$0000
  91+ 817A 11 01 00         ld  de,1;$0001
  92+ 817D 01 FF 17         ld  bc,$17ff
  93+ 8180 36 00            ld  (hl),0
  94+ 8182 ED B0            ldir
  95+ 8184 36 00            ld  (hl),0;240    ;black was $48    ; black paper, cyan ink
  96+ 8186 01 FF 02         ld  bc,$02FF
  97+ 8189 ED B0            ldir
  98+ 818B C9               ret
  99+ 818C
 100+ 818C              ; ******************************************************************************
 101+ 818C              ; from Mike Daily
 102+ 818C              ; Function: Read a next register
 103+ 818C              ; Out: a = register to read
 104+ 818C              ; Out: a = value in register
 105+ 818C
 106+ 818C              ; call with reg value in reg a
 107+ 818C              ; ******************************************************************************
 108+ 818C              readnextreg:
 109+ 818C 01 3B 24             ld bc,$243b ; select NEXT register
 110+ 818F ED 79                out (c),a
 111+ 8191 04                   inc b ; $253b to access (read or write) value
 112+ 8192 ED 78                in a,(c)
 113+ 8194 C9                   ret
 114+ 8195              ;#################################################################################
 115+ 8195              FlipULABuffers:
 116+ 8195                              ; Flip ULA/Alt UA screen (double buffer ULA screen)
 117+ 8195
 118+ 8195                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 119+ 8195
 120+ 8195 3A B4 81                     ld      a,(ULABank)             ; Get screen to display this frame
 121+ 8198 FE 0A                        cp      10
 122+ 819A 28 07                        jr      z,@DisplayAltULA
 123+ 819C
 124+ 819C 3E 40                        ld      a,64                    ; set CURRENT screen to Alternate ULA (bit 6
 125+ 819E 06 0A                        ld      b,10                    ; set target screen to ULA
 126+ 81A0 C3 A6 81                     jp      @DisplayULA
 127+ 81A3
 128+ 81A3 06 0E        @DisplayAltULA: ld      b,14                    ; set target screen to Alternate ULA screen
 129+ 81A5 AF                           xor     a                       ; zero the a reg
 130+ 81A6 ED 92 69     @DisplayULA:    nextreg $69,a                   ; Select Timex/ULA screen to show
 131+ 81A9 78                           ld      a,b                     ; get bank to render to next frame
 132+ 81AA 32 B4 81                     ld      (ULABank),a             ; store it...
 133+ 81AD
 134+ 81AD              ; swap the ula bank we are writing out buffer screen to
 135+ 81AD              swap_bank:                          ;load bank 10 or 14 to location 0 to write to
 136+ 81AD 3A B4 81                     ld a,(ULABank)
 137+ 81B0 ED 92 52                     nextreg $52,a       ;was $50
 138+ 81B3 C9                           ret
 139+ 81B4
 140+ 81B4 0A           ULABank         defb 10   ;holds current ULA screen in use
 141+ 81B5              ;#################################################################################
 142+ 81B5
 143+ 81B5
 144+ 81B5
 145+ 81B5              ;##################################################################################
 146+ 81B5              FlipULABuffers_peter:     ; Flip ULA/Alt ULA screen (double buffer ULA screen)
 147+ 81B5                                        ; from Peter Ped Helcmanovsky on the Next Team
 148+ 81B5
 149+ 81B5 3A B4 81         ld a,(ULABank)  ; Get screen to display this frame
 150+ 81B8
 151+ 81B8                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 152+ 81B8                  ; its %0000'1110 vs %0000'1010 in binary, so extract bit2 and move it to bit6
 153+ 81B8
 154+ 81B8 E6 04            and %0000'0100  ; $04 from A=14, $00 from A=10
 155+ 81BA ED 23            swapnib         ; bit6 set from bit2
 156+ 81BC ED 92 69         nextreg $69,a   ; Select Timex/ULA screen to show
 157+ 81BF
 158+ 81BF                  ; flip the drawing buffer mapped at $4000
 159+ 81BF 3A B4 81         ld a,(ULABank)
 160+ 81C2 EE 04            xor 10^14       ; alternate between 10 and 14
 161+ 81C4 32 B4 81         ld (ULABank),a
 162+ 81C7 ED 92 52         nextreg $52,a   ; map the new "backbuffer" to $4000 (for next drawing)
 163+ 81CA C9               ret
 164+ 81CB
 165+ 81CB              ;##################################################################################
 166+ 81CB
 167+ 81CB
 168+ 81CB
 169+ 81CB              ;##################################################################
 170+ 81CB              ;print a line of text on screen
 171+ 81CB              ;##################################################################
 172+ 81CB
 173+ 81CB              ; enter with IX pointing to the message
 174+ 81CB
 175+ 81CB              ;message format    row,col,colour,"message",end char
 176+ 81CB
 177+ 81CB              print_message:  ;make sure we point to our character set
 178+ 81CB DD 46 00                     ld b,(ix)           ;row
 179+ 81CE DD 23                        inc ix
 180+ 81D0 DD 4E 00                     ld c,(ix)           ;column
 181+ 81D3 DD 23                        inc ix
 182+ 81D5 DD 7E 00                     ld a,(ix)           ;set attribute colour
 183+ 81D8 32 47 8C                     ld (att),a
 184+ 81DB
 185+ 81DB
 186+ 81DB CD 29 8C                     call locate
 187+ 81DE DD 23                        inc ix              ;point to characters to print
 188+ 81E0 21 9C C7     mesg_rept:      ld hl,charset_1-256 ; point to our character set
 189+ 81E3 22 43 8C                     ld (base),hl
 190+ 81E6 DD 7E 00                     ld a,(ix)           ;load our character to print
 191+ 81E9
 192+ 81E9                              ;check if we are printing a UDG
 193+ 81E9                              ;we are currently pointing at the ram char set
 194+ 81E9 CB 7F                        bit 7,a                 ;are we printing udg's?
 195+ 81EB                                                      ;if bit 7=0 then zero test = false
 196+ 81EB 28 09                        jr z,no_udg             ;exit if theres no graphic to print
 197+ 81ED D6 80                        sub $80                 ;point to the first character of udg's
 198+ 81EF 11 00 FC                     ld de,_chars;           ;start of udg's in memory
 199+ 81F2 ED 53 43 8C                  ld (base),de
 200+ 81F6
 201+ 81F6 FE 7F        no_udg:         cp 127               ;check flags to see if a=zero
 202+ 81F8 C8                           ret z               ;quit when char = 0
 203+ 81F9 F5                           push af
 204+ 81FA CD 4B 8C                     call print1         ;print the message - auto increments the column
 205+ 81FD F1                           pop af
 206+ 81FE DD 23                        inc ix
 207+ 8200 20 DE                        jr nz,mesg_rept
 208+ 8202 C9                           ret
 209+ 8203
 210+ 8203              ;#################################################################
 211+ 8203
 212+ 8203
 213+ 8203
 214+ 8203
 215+ 8203              ;###############################################################
 216+ 8203              ;Message list
 217+ 8203              ;message format    row,col,colour,"message",end char
 218+ 8203
 219+ 8203 00 19 94 B0  message_border1:      db 0,25,148,$b0,$b1,$b0,$20,$b1,$b0,$b1,$7f
 219+ 8207 B1 B0 20 B1
 219+ 820B B0 B1 7F
 220+ 820E 01 19 57 88  message_get:          db 1,25,87,$88,"G E T",$89,$7f
 220+ 8212 47 20 45 20
 220+ 8216 54 89 7F
 221+ 8219 02 19 57 88  message_out:          db 2,25,87,$88,"O U T",$89,$7F
 221+ 821D 4F 20 55 20
 221+ 8221 54 89 7F
 222+ 8224 03 19 94 B3  message_border4:      db 3,25,148,$b3,$b2,$b3,$20,$b2,$b3,$b2,$7f
 222+ 8228 B2 B3 20 B2
 222+ 822C B3 B2 7F
 223+ 822F 17 02 3C 20  message_closed:       db 23,2,60," Go flick the switch ",$7F
 223+ 8233 47 6F 20 66
 223+ 8237 6C 69 63 6B
 223+ 823B 20 74 68 65
 223+ 823F 20 73 77 69
 223+ 8243 74 63 68 20
 223+ 8247 7F
 224+ 8248 17 01 48 20  message_switchon:     db 23,1,72," The Door is now Open! ",$7F
 224+ 824C 54 68 65 20
 224+ 8250 44 6F 6F 72
 224+ 8254 20 69 73 20
 224+ 8258 6E 6F 77 20
 224+ 825C 4F 70 65 6E
 224+ 8260 21 20 7F
 225+ 8263 17 01 64 20  message_leave:        db 23,1,100," Woohoo! Time to leave ",$7F
 225+ 8267 57 6F 6F 68
 225+ 826B 6F 6F 21 20
 225+ 826F 54 69 6D 65
 225+ 8273 20 74 6F 20
 225+ 8277 6C 65 61 76
 225+ 827B 65 20 7F
 226+ 827E 0F 19 57 20  message_level         db 15,25,87," LEVEL ",$7f
 226+ 8282 4C 45 56 45
 226+ 8286 4C 20 7F
 227+ 8289
 228+ 8289
 229+ 8289              ;##########################################################################
 230+ 8289              ;setup ULANext palette data - code from Matt Davies early version of Ed.s
 231+ 8289
 232+ 8289              Setup_palette:
 233+ 8289
 234+ 8289              ;       nextreg $43,%00000001   ; Set ULANext palette ON
 235+ 8289 ED 91 43 43         nextreg $43,%01000011   ; Set ULANext palette ON, change 2nd ula palette and use 2nd palette
 236+ 828D ED 91 40 00         nextreg $40,%00000000    ; set index to 0 which = start of palette
 237+ 8291 ED 91 42 01         nextreg $42,%00000001   ; Set 2 ink & 254 paper
 238+ 8295
 239+ 8295              ;poke in the pallete data
 240+ 8295 21 A3 82             ld hl, .palette_data    ;get the start of .palette_data
 241+ 8298 7E           .lp1    ld a, (hl)
 242+ 8299 FE 01                cp $01                   ;99 is the end of the data
 243+ 829B C8                   ret z                   ;exit if a=99
 244+ 829C ED 92 41             nextreg $41,a           ;this auto increments
 245+ 829F 23                   inc hl
 246+ 82A0 C3 98 82             jp .lp1
 247+ 82A3
 248+ 82A3              .palette_data:
 249+ 82A3              ;ink colours - only first 16 which are standard spectrum colours
 250+ 82A3
 251+ 82A3 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 251+ 82A7 4A CB 1B F9
 251+ 82AB DF 00 07 E0
 251+ 82AF E7 1F FC FE
 252+ 82B3 E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 252+ 82B7 24 49 92 B6
 252+ 82BB FE DB 96 6E
 252+ 82BF 49 25 00 00
 253+ 82C3 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 253+ 82C7 AD F1 FA FE
 253+ 82CB F5 EC C8 84
 253+ 82CF E8 EC F4 F8
 254+ 82D3 FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 254+ 82D7 31 0D 09 05
 254+ 82DB 05 0E 13 1B
 254+ 82DF 1F 9F FB F3
 255+ 82E3 C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 255+ 82E7 00 21 65 86
 255+ 82EB CB CA F2 E9
 255+ 82EF E4 C4 80 40
 256+ 82F3 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 256+ 82F7 00 00 00 00
 256+ 82FB 00 00 00 00
 256+ 82FF 00 00 00 00
 257+ 8303 00 00 00 00      db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 257+ 8307 00 00 00 00
 257+ 830B 00 00 00 00
 257+ 830F 00 00 00 00
 258+ 8313 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 258+ 8317 00 00 00 00
 258+ 831B 00 00 00 00
 258+ 831F 00 00
 259+ 8321
 260+ 8321 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 260+ 8325 4A CB 1B F9
 260+ 8329 DF 00 07 E0
 260+ 832D E7 1F FC FE
 261+ 8331 00 02 A0 36  	db $0, $2, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 261+ 8335 4A CB 1B F9
 261+ 8339 DF 00 07 E0
 261+ 833D E7 1F FC FE
 262+ 8341 E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 262+ 8345 24 49 92 B6
 262+ 8349 FE DB 96 6E
 262+ 834D 49 25 00 00
 263+ 8351 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 263+ 8355 AD F1 FA FE
 263+ 8359 F5 EC C8 84
 263+ 835D E8 EC F4 F8
 264+ 8361 FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 264+ 8365 31 0D 09 05
 264+ 8369 05 0E 13 1B
 264+ 836D 1F 9F FB F3
 265+ 8371 C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 265+ 8375 00 21 65 86
 265+ 8379 CB CA F2 E9
 265+ 837D E4 C4 80 40
 266+ 8381
 267+ 8381              ;these are the red wall graduations - 6 colours
 268+ 8381 C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $0, $0, $0, $0, $0, $7, $6, $4, $2, $0
 268+ 8385 40 20 00 00
 268+ 8389 00 00 00 07
 268+ 838D 06 04 02 00
 269+ 8391 C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $ff, $ff, $ff, $ff, $0, $0, $0, $0, $ff, $01
 269+ 8395 40 20 FF FF
 269+ 8399 FF FF 00 00
 269+ 839D 00 00 FF 01
 270+ 83A1
 271+ 83A1              palette_end:
 272+ 83A1              ;##################################################################################
 273+ 83A1
 274+ 83A1              draw_exit_door_closed:
 275+ 83A1                             ; exit_closed 20 lines of 17 chars
 276+ 83A1 06 14                        ld b,20
 277+ 83A3 21 11 84                     ld hl,exit_closed
 278+ 83A6 C5           abcd:           push bc
 279+ 83A7 E5                           push hl
 280+ 83A8 E5 DD E1                     ld ix,hl        ;point to our data to print
 281+ 83AB CD CB 81                     CALL print_message
 282+ 83AE E1                           pop hl
 283+ 83AF 11 11 00                     ld de,17
 284+ 83B2 19                           add hl,de
 285+ 83B3 E5 DD E1                     ld ix,hl
 286+ 83B6 C1                           pop bc
 287+ 83B7 10 ED                        djnz abcd
 287+ 83B9
 288+ 83B9              ;call the colouring routine
 289+ 83B9 CD ED 83                     call colour_door
 290+ 83BC              ;print the middle bars again as we overote them above
 291+ 83BC DD 21 CB 83                  ld ix,over1
 292+ 83C0 CD CB 81                     CALL print_message
 293+ 83C3 DD 21 DC 83                  ld ix,over2
 294+ 83C7 CD CB 81                     CALL print_message
 295+ 83CA C9                           ret
 296+ 83CB
 297+ 83CB 09 06 86 80  over1:          db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 297+ 83CF 81 80 81 80
 297+ 83D3 81 80 81 80
 297+ 83D7 81 80 81 80
 297+ 83DB 7F
 298+ 83DC 0A 06 84 82  over2:          db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 298+ 83E0 83 82 83 82
 298+ 83E4 83 82 83 82
 298+ 83E8 83 82 83 81
 298+ 83EC 7F
 299+ 83ED
 300+ 83ED
 301+ 83ED              ;this routine below will be used by the right wall closed door drawing routine as well as now
 302+ 83ED              ;now colour the bars white ink - this will overwrite the 2 dark bars at line 7 and 8 - will sort later
 303+ 83ED 21 A8 58     colour_door:    ld hl,22696         ;start of bar bit at the top of the door
 304+ 83F0 11 20 00                     ld de,32            ;to jump 1 line down
 305+ 83F3 3E 09                        ld a,9              ;draw 9 characters across
 306+ 83F5 32 10 84                     ld (att_count),a
 307+ 83F8 3E C7                        ld a,199
 308+ 83FA 4F                           ld c,a              ;set colour to white ink, black paper
 309+ 83FB 3E 10                        ld a,16             ;do 16 lines
 310+ 83FD E5           rept_5:         push hl
 311+ 83FE F5           rept_4:         push af
 312+ 83FF 3A 10 84                     ld a,(att_count)    ;9
 313+ 8402 47                           ld b,a
 314+ 8403 F1                           pop af
 315+ 8404 71           rept_3:         ld (hl),c           ;set the attribute colour
 316+ 8405 23                           inc hl
 317+ 8406 10 FC                        djnz rept_3
 318+ 8408 E1                           pop hl
 319+ 8409 19                           add hl,de           ;jump to next line below
 320+ 840A E5                           push hl
 321+ 840B 3D                           dec a
 322+ 840C 20 F0                        jr nz,rept_4
 323+ 840E E1                           pop hl
 324+ 840F C9                           ret
 325+ 8410
 326+ 8410 09           att_count       db  9
 327+ 8411
 328+ 8411              ;###############################################################
 329+ 8411              ;door graphic
 330+ 8411              ;message format    row,col,colour,"message",end char (127 ($7f) )
 331+ 8411              exit_closed:    ;20 lines
 332+ 8411 03 06 88 80                  db 3,6,136, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 332+ 8415 81 80 81 80
 332+ 8419 81 80 81 80
 332+ 841D 81 80 81 80
 332+ 8421 7F
 333+ 8422 04 06 86 82                  db 4,6,134, $82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 333+ 8426 83 82 83 82
 333+ 842A 83 82 83 82
 333+ 842E 83 82 83 81
 333+ 8432 7F
 334+ 8433 05 06 84 80                  db 5,6,132, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 334+ 8437 81 84 84 84
 334+ 843B 84 84 84 84
 334+ 843F 84 84 81 80
 334+ 8443 7F
 335+ 8444 06 06 82 82                  db 6,6,130, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 335+ 8448 83 84 84 84
 335+ 844C 84 84 84 84
 335+ 8450 84 84 83 81
 335+ 8454 7F
 336+ 8455 07 06 80 80                  db 7,6,128, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 336+ 8459 81 84 84 84
 336+ 845D 84 84 84 84
 336+ 8461 84 84 81 80
 336+ 8465 7F
 337+ 8466 08 06 7E 82                  db 8,6,126, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 337+ 846A 83 84 84 84
 337+ 846E 84 84 84 84
 337+ 8472 84 84 83 81
 337+ 8476 7F
 338+ 8477 09 06 86 80                  db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 338+ 847B 81 80 81 80
 338+ 847F 81 80 81 80
 338+ 8483 81 80 81 80
 338+ 8487 7F
 339+ 8488 0A 06 84 82                  db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 339+ 848C 83 82 83 82
 339+ 8490 83 82 83 82
 339+ 8494 83 82 83 81
 339+ 8498 7F
 340+ 8499 0B 06 82 80                  db 11,6,130,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 340+ 849D 81 84 84 84
 340+ 84A1 84 84 84 84
 340+ 84A5 84 84 81 80
 340+ 84A9 7F
 341+ 84AA 0C 06 80 82                  db 12,6,128,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 341+ 84AE 83 84 84 84
 341+ 84B2 84 84 84 84
 341+ 84B6 84 84 83 81
 341+ 84BA 7F
 342+ 84BB 0D 06 7E 80                  db 13,6,126,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 342+ 84BF 81 84 84 84
 342+ 84C3 84 84 84 84
 342+ 84C7 84 84 81 80
 342+ 84CB 7F
 343+ 84CC 0E 06 86 82                  db 14,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 343+ 84D0 83 84 84 84
 343+ 84D4 84 84 84 84
 343+ 84D8 84 84 83 81
 343+ 84DC 7F
 344+ 84DD 0F 06 84 80                  db 15,6,132,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 344+ 84E1 81 84 84 84
 344+ 84E5 84 84 84 84
 344+ 84E9 84 84 81 80
 344+ 84ED 7F
 345+ 84EE 10 06 82 82                  db 16,6,130,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 345+ 84F2 83 84 84 84
 345+ 84F6 84 84 84 84
 345+ 84FA 84 84 83 81
 345+ 84FE 7F
 346+ 84FF 11 06 80 80                  db 17,6,128,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 346+ 8503 81 84 84 84
 346+ 8507 84 84 84 84
 346+ 850B 84 84 81 80
 346+ 850F 7F
 347+ 8510 12 06 7E 82                  db 18,6,126,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 347+ 8514 83 84 84 84
 347+ 8518 84 84 84 84
 347+ 851C 84 84 83 81
 347+ 8520 7F
 348+ 8521 13 06 88 80                  db 19,6,136,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 348+ 8525 81 84 84 84
 348+ 8529 84 84 84 84
 348+ 852D 84 84 81 80
 348+ 8531 7F
 349+ 8532 14 06 86 82                  db 20,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 349+ 8536 83 84 84 84
 349+ 853A 84 84 84 84
 349+ 853E 84 84 83 81
 349+ 8542 7F
 350+ 8543 15 06 84 80                  db 21,6,132,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 350+ 8547 81 80 81 80
 350+ 854B 81 80 81 80
 350+ 854F 81 80 81 80
 350+ 8553 7F
 351+ 8554 16 06 82 82                  db 22,6,130,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 351+ 8558 83 82 83 82
 351+ 855C 83 82 83 82
 351+ 8560 83 82 83 81
 351+ 8564 7F
 352+ 8565              ;------------------------------------------------------------------------------------
 353+ 8565              draw_exit_door_open:
 354+ 8565                             ; exit_closed 20 lines of 17 chars
 355+ 8565 06 14                        ld b,20
 356+ 8567 21 91 85                     ld hl,exit_open
 357+ 856A C5           abcde:          push bc
 358+ 856B E5                           push hl
 359+ 856C E5 DD E1                     ld ix,hl        ;point to our data to print
 360+ 856F CD CB 81                     CALL print_message
 361+ 8572 E1                           pop hl
 362+ 8573 11 11 00                     ld de,17
 363+ 8576 19                           add hl,de
 364+ 8577 E5 DD E1                     ld ix,hl
 365+ 857A C1                           pop bc
 366+ 857B 10 ED                        djnz abcde
 367+ 857D
 368+ 857D              ;now colour the attributes in the middle of the door to black paper, white text
 369+ 857D                              ;do white colour bars first
 370+ 857D 21 C9 58                     ld hl,22749-32+5+7     ;start of bar bit at the top of the door
 371+ 8580 11 20 00                     ld de,32            ;to jump 1 line down after each print
 372+ 8583 3E 07                        ld a,7              ;draw 1 attribute across
 373+ 8585 32 10 84                     ld (att_count),a
 374+ 8588 3E A5                        ld a,165           ; colour to print (199=white)
 375+ 858A 4F                           ld c,a              ;set colour to white ink, black paper
 376+ 858B 3E 0E                        ld a,14             ;do 15 lines
 377+ 858D CD FD 83                     call rept_5         ;colour our door correctly
 378+ 8590 C9                           ret
 379+ 8591
 380+ 8591              exit_open:    ;20 lines
 381+ 8591 03 06 BF B1                  db 3,6,191, $b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$7F
 381+ 8595 AF AF AF AF
 381+ 8599 AF AF AF AF
 381+ 859D AF AF AF B0
 381+ 85A1 7F
 382+ 85A2 04 06 BF 20                  db 4,6,191, $20,$b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$7F
 382+ 85A6 B1 AF AF AF
 382+ 85AA AF AF AF AF
 382+ 85AE AF AF B0 20
 382+ 85B2 7F
 383+ 85B3 05 06 BF 20                  db 5,6,191, $20,$20,$b1,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$20,$7F
 383+ 85B7 20 B1 AF AF
 383+ 85BB AF AF AF AF
 383+ 85BF AF B0 20 20
 383+ 85C3 7F
 384+ 85C4 06 06 BE 20                  db 6,6,190, $20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 384+ 85C8 20 20 F1 F2
 384+ 85CC F1 F2 F1 F2
 384+ 85D0 F1 20 20 20
 384+ 85D4 7F
 385+ 85D5 07 06 BE 20                  db 7,6,190, $20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 385+ 85D9 20 20 F2 F1
 385+ 85DD F2 F1 F2 F1
 385+ 85E1 F2 20 20 20
 385+ 85E5 7F
 386+ 85E6 08 06 BE 20                  db 8,6,190, $20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 386+ 85EA 20 20 F1 F2
 386+ 85EE F1 F2 F1 F2
 386+ 85F2 F1 20 20 20
 386+ 85F6 7F
 387+ 85F7 09 06 BE 20                  db 9,6,190, $20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 387+ 85FB 20 20 F2 F1
 387+ 85FF F2 F1 F2 F1
 387+ 8603 F2 20 20 20
 387+ 8607 7F
 388+ 8608 0A 06 BE 20                  db 10,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 388+ 860C 20 20 F1 F2
 388+ 8610 F1 F2 F1 F2
 388+ 8614 F1 20 20 20
 388+ 8618 7F
 389+ 8619 0B 06 BE 20                  db 11,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 389+ 861D 20 20 F2 F1
 389+ 8621 F2 F1 F2 F1
 389+ 8625 F2 20 20 20
 389+ 8629 7F
 390+ 862A 0C 06 BE 20                  db 12,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 390+ 862E 20 20 F1 F2
 390+ 8632 F1 F2 F1 F2
 390+ 8636 F1 20 20 20
 390+ 863A 7F
 391+ 863B 0D 06 BE 20                  db 13,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 391+ 863F 20 20 F2 F1
 391+ 8643 F2 F1 F2 F1
 391+ 8647 F2 20 20 20
 391+ 864B 7F
 392+ 864C 0E 06 BE 20                  db 14,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 392+ 8650 20 20 F1 F2
 392+ 8654 F1 F2 F1 F2
 392+ 8658 F1 20 20 20
 392+ 865C 7F
 393+ 865D 0F 06 BE 20                  db 15,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 393+ 8661 20 20 F2 F1
 393+ 8665 F2 F1 F2 F1
 393+ 8669 F2 20 20 20
 393+ 866D 7F
 394+ 866E 10 06 BE 20                  db 16,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 394+ 8672 20 20 F1 F2
 394+ 8676 F1 F2 F1 F2
 394+ 867A F1 20 20 20
 394+ 867E 7F
 395+ 867F 11 06 BE 20                  db 17,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 395+ 8683 20 20 F2 F1
 395+ 8687 F2 F1 F2 F1
 395+ 868B F2 20 20 20
 395+ 868F 7F
 396+ 8690 12 06 BE 20                  db 18,6,190,$20,$20,$20,$f1,$f2,$f1,$f2,$f1,$f2,$f1,$20,$20,$20,$7F
 396+ 8694 20 20 F1 F2
 396+ 8698 F1 F2 F1 F2
 396+ 869C F1 20 20 20
 396+ 86A0 7F
 397+ 86A1 13 06 BE 20                  db 19,6,190,$20,$20,$20,$f2,$f1,$f2,$f1,$f2,$f1,$f2,$20,$20,$20,$7F
 397+ 86A5 20 20 F2 F1
 397+ 86A9 F2 F1 F2 F1
 397+ 86AD F2 20 20 20
 397+ 86B1 7F
 398+ 86B2 14 06 BF 20                  db 20,6,191,$20,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$20,$7F
 398+ 86B6 20 B2 AF AF
 398+ 86BA AF AF AF AF
 398+ 86BE AF B3 20 20
 398+ 86C2 7F
 399+ 86C3 15 06 BF 20                  db 21,6,191,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$7F
 399+ 86C7 B2 AF AF AF
 399+ 86CB AF AF AF AF
 399+ 86CF AF AF B3 20
 399+ 86D3 7F
 400+ 86D4 16 06 BF B2                  db 22,6,191,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$7F
 400+ 86D8 AF AF AF AF
 400+ 86DC AF AF AF AF
 400+ 86E0 AF AF AF B3
 400+ 86E4 7F
 401+ 86E5
 402+ 86E5              ;--------------------------------------------------------------------------------------
 403+ 86E5              draw_door_right_closed:
 404+ 86E5                             ; exit_closed 14 lines of 7 chars
 405+ 86E5 06 0D                        ld b,13
 406+ 86E7 21 62 87                     ld hl,right_door_closed
 407+ 86EA C5           abc_a:          push bc
 408+ 86EB E5                           push hl
 409+ 86EC E5 DD E1                     ld ix,hl        ;point to our data to print
 410+ 86EF CD CB 81                     CALL print_message
 411+ 86F2 E1                           pop hl
 412+ 86F3 11 07 00                     ld de,7
 413+ 86F6 19                           add hl,de
 414+ 86F7 E5 DD E1                     ld ix,hl
 415+ 86FA C1                           pop bc
 416+ 86FB 10 ED                        djnz abc_a
 417+ 86FD
 418+ 86FD              ;draw top angled bit of the door on right wall
 419+ 86FD DD 21 49 87                  ld ix,top_right_1        ;point to our data to print
 420+ 8701 CD CB 81                     CALL print_message
 421+ 8704 DD 21 4E 87                  ld ix,top_right_2        ;point to our data to print
 422+ 8708 CD CB 81                     CALL print_message
 423+ 870B DD 21 54 87                  ld ix,top_right_3        ;point to our data to print
 424+ 870F CD CB 81                     CALL print_message
 425+ 8712 DD 21 5B 87                  ld ix,top_right_4        ;point to our data to print
 426+ 8716 CD CB 81                     CALL print_message
 427+ 8719
 428+ 8719              ;draw bottom angled bit of the door on right wall
 429+ 8719 DD 21 B6 87                  ld ix,bot_right_1        ;point to our data to print
 430+ 871D CD CB 81                     CALL print_message
 431+ 8720 DD 21 BD 87                  ld ix,bot_right_2        ;point to our data to print
 432+ 8724 CD CB 81                     CALL print_message
 433+ 8727 DD 21 C4 87                  ld ix,bot_right_3        ;point to our data to print
 434+ 872B CD CB 81                     CALL print_message
 435+ 872E DD 21 CA 87                  ld ix,bot_right_4        ;point to our data to print
 436+ 8732 CD CB 81                     CALL print_message
 437+ 8735
 438+ 8735              ;now colour the attributes correctly to look diagonal
 439+ 8735                              ;do white colour bars first
 440+ 8735 21 B6 58                     ld hl,22710         ;start of bar bit at the top of the door
 441+ 8738 11 20 00                     ld de,32            ;to jump 1 line down
 442+ 873B 3E 01                        ld a,1              ;draw 1 attribute across
 443+ 873D 32 10 84                     ld (att_count),a
 444+ 8740 3E C7                        ld a,199
 445+ 8742 4F                           ld c,a              ;set colour to white ink, black paper
 446+ 8743 3E 0E                        ld a,14             ;do 16 lines
 447+ 8745                             ; push hl
 448+ 8745 CD FD 83                     call rept_5         ;colour our door correctly
 449+ 8748 C9                           ret
 450+ 8749
 451+ 8749
 452+ 8749              ;top 2 parts of the door
 453+ 8749 02 17 88 D3  top_right_1:    db 2,23,136,         $d3,$7F
 453+ 874D 7F
 454+ 874E 03 16 88 D5  top_right_2:    db 3,22,136,     $d5,$80,$7F
 454+ 8752 80 7F
 455+ 8754 04 15 88 D3  top_right_3:    db 4,21,136, $d3,$83,$82,$7F
 455+ 8758 83 82 7F
 456+ 875B 05 15 88 80  top_right_4:    db 5,21,136, $80,$87,$80,$7F
 456+ 875F 87 80 7F
 457+ 8762              ;middle of the closed door
 458+ 8762              right_door_closed:      ;15 lines
 459+ 8762 06 15 82 82                  db 6,21,130, $82,$87,$82,$7F
 459+ 8766 87 82 7F
 460+ 8769 07 15 80 80                  db 7,21,128, $80,$87,$80,$7F
 460+ 876D 87 80 7F
 461+ 8770 08 15 7E 82                  db 8,21,126, $82,$87,$82,$7F
 461+ 8774 87 82 7F
 462+ 8777 09 15 88 80                  db 9,21,136, $80,$87,$80,$7F
 462+ 877B 87 80 7F
 463+ 877E 0A 15 86 82                  db 10,21,134,$82,$87,$82,$7F
 463+ 8782 87 82 7F
 464+ 8785 0B 15 84 80                  db 11,21,132,$80,$87,$80,$7F
 464+ 8789 87 80 7F
 465+ 878C 0C 15 82 82                  db 12,21,130,$82,$87,$82,$7F
 465+ 8790 87 82 7F
 466+ 8793 0D 15 80 80                  db 13,21,128,$80,$87,$80,$7F
 466+ 8797 87 80 7F
 467+ 879A 0E 15 7E 82                  db 14,21,126,$82,$87,$82,$7F
 467+ 879E 87 82 7F
 468+ 87A1 0F 15 88 80                  db 15,21,136,$80,$87,$80,$7F
 468+ 87A5 87 80 7F
 469+ 87A8 10 15 86 82                  db 16,21,134,$82,$87,$82,$7F
 469+ 87AC 87 82 7F
 470+ 87AF 11 15 84 80                  db 17,21,132,$80,$87,$80,$7F
 470+ 87B3 87 80 7F
 471+ 87B6              ;                db 18,21,130,$82,$87,$82,$7F
 472+ 87B6              ;bottom 2 parts of the door
 473+ 87B6 12 15 80 80  bot_right_1:    db 18,21,128, $80,$87,$80,$7F
 473+ 87BA 87 80 7F
 474+ 87BD 13 15 80 D4  bot_right_2:    db 19,21,128, $d4,$83,$82,$7F
 474+ 87C1 83 82 7F
 475+ 87C4 14 16 80 D6  bot_right_3:    db 20,22,128,     $d6,$80,$7F
 475+ 87C8 80 7F
 476+ 87CA 15 17 80 D4  bot_right_4:    db 21,23,128,         $d4,$7F
 476+ 87CE 7F
 477+ 87CF
 478+ 87CF              ;--------------------------------------------------------------------
 479+ 87CF              draw_door_right_open:
 480+ 87CF                             ; exit_closed 14 lines of 7 chars
 481+ 87CF 06 0D                        ld b,13
 482+ 87D1 21 26 88                     ld hl,right_door_open
 483+ 87D4 C5           abc_b:          push bc
 484+ 87D5 E5                           push hl
 485+ 87D6 E5 DD E1                     ld ix,hl        ;point to our data to print
 486+ 87D9 CD CB 81                     CALL print_message
 487+ 87DC E1                           pop hl
 488+ 87DD 11 07 00                     ld de,7
 489+ 87E0 19                           add hl,de
 490+ 87E1 E5 DD E1                     ld ix,hl
 491+ 87E4 C1                           pop bc
 492+ 87E5 10 ED                        djnz abc_b
 493+ 87E7
 494+ 87E7              ;draw top angled bit of the door on right wall
 495+ 87E7 DD 21 12 88                  ld ix,top_right_op2        ;point to our data to print
 496+ 87EB CD CB 81                     CALL print_message
 497+ 87EE DD 21 18 88                  ld ix,top_right_op3        ;point to our data to print
 498+ 87F2 CD CB 81                     CALL print_message
 499+ 87F5 DD 21 1F 88                  ld ix,top_right_op4        ;point to our data to print
 500+ 87F9 CD CB 81                     CALL print_message
 501+ 87FC
 502+ 87FC              ;draw bottom angled bit of the door on right wall - basically, all spaces so floor colour is drawn
 503+ 87FC DD 21 81 88                  ld ix,bot_right_op1        ;point to our data to print
 504+ 8800 CD CB 81                     CALL print_message
 505+ 8803 DD 21 88 88                  ld ix,bot_right_op2        ;point to our data to print
 506+ 8807 CD CB 81                     CALL print_message
 507+ 880A DD 21 8F 88                  ld ix,bot_right_op3        ;point to our data to print
 508+ 880E CD CB 81                     CALL print_message
 509+ 8811
 510+ 8811 C9                           ret
 511+ 8812
 512+ 8812              ;top 2 parts of the door
 513+ 8812 03 16 C0 B0  top_right_op2:    db 3,22,192,     $b0,$7F,$7F;;$20,$7F
 513+ 8816 7F 7F
 514+ 8818 04 15 C0 B0  top_right_op3:    db 4,21,192, $b0,$20,$7F,$7F;$20,$7F
 514+ 881C 20 7F 7F
 515+ 881F 05 15 BC 20  top_right_op4:    db 5,21,188, $20,$20,$7F,$7F;$20,$7F
 515+ 8823 20 7F 7F
 516+ 8826              ;middle of the open door
 517+ 8826              right_door_open:      ;15 lines
 518+ 8826 06 15 BC 20                  db 6,21,188, $20,$20,$7F,$7F;$20,$7F
 518+ 882A 20 7F 7F
 519+ 882D 07 15 BC 20                  db 7,21,188, $20,$20,$7F,$7F;,$20,$7F
 519+ 8831 20 7F 7F
 520+ 8834 08 15 BC 20                  db 8,21,188, $20,$20,$7F,$7F;,$20,$7F
 520+ 8838 20 7F 7F
 521+ 883B 09 15 BC 20                  db 9,21,188, $20,$20,$7F,$7F;$20,$7F
 521+ 883F 20 7F 7F
 522+ 8842 0A 15 BC 20                  db 10,21,188,$20,$20,$7F,$7F;$20,$7F
 522+ 8846 20 7F 7F
 523+ 8849 0B 15 BC 20                  db 11,21,188,$20,$20,$7F,$7F;$20,$7F
 523+ 884D 20 7F 7F
 524+ 8850 0C 15 BC 20                  db 12,21,188,$20,$20,$7F,$7F;$20,$7F
 524+ 8854 20 7F 7F
 525+ 8857 0D 15 BC 20                  db 13,21,188,$20,$20,$7F,$7F;$20,$7F
 525+ 885B 20 7F 7F
 526+ 885E 0E 15 BC 20                  db 14,21,188,$20,$20,$7F,$7F;$20,$7F
 526+ 8862 20 7F 7F
 527+ 8865 0F 15 BC 20                  db 15,21,188,$20,$20,$7F,$7F;$20,$7F
 527+ 8869 20 7F 7F
 528+ 886C 10 15 BC 20                  db 16,21,188,$20,$20,$7F,$7F;$20,$7F
 528+ 8870 20 7F 7F
 529+ 8873 11 15 BC 20                  db 17,21,188,$20,$20,$7F,$7F;$20,$7F
 529+ 8877 20 7F 7F
 530+ 887A 12 15 BC 20                  db 18,21,188,$20,$20,$7F,$7F;$20,$7F
 530+ 887E 20 7F 7F
 531+ 8881
 532+ 8881              ;bottom 2 parts of the door
 533+ 8881 13 15 BC 20  bot_right_op1:    db 19,21,188, $20,$20,$7F,$7F;$20,$7F
 533+ 8885 20 7F 7F
 534+ 8888 14 15 62 20  bot_right_op2:    db 20,21,98, $20,$20,$7F,$7F;$20,$7F
 534+ 888C 20 7F 7F
 535+ 888F 15 16 62 20  bot_right_op3:    db 21,22,98,     $20,$7F,$7F;$20,$7F
 535+ 8893 7F 7F
 536+ 8895
 537+ 8895              ;--------------------------------------------------------------------
 538+ 8895              ;--------------------------------------------------------------------
 539+ 8895              ;switch animation below - neds to be switched on
 540+ 8895              ;--------------------------------------------------------------------
 541+ 8895              ;--------------------------------------------------------------------
 542+ 8895              ;switch_anim:
 543+ 8895
 544+ 8895              draw_switch_off:
 545+ 8895                             ; exit_closed 13 lines of 5 chars
 546+ 8895 06 0C                        ld b,12
 547+ 8897 21 C1 88                     ld hl,switch_off_g      ;start of switch off graphic
 548+ 889A C5           abc_b1:          push bc
 549+ 889B E5                           push hl
 550+ 889C E5 DD E1                     ld ix,hl                ;point to our data to print
 551+ 889F CD CB 81                     CALL print_message
 552+ 88A2 E1                           pop hl
 553+ 88A3 11 07 00                     ld de,7                 ;each line is 9 chars long
 554+ 88A6 19                           add hl,de
 555+ 88A7 E5 DD E1                     ld ix,hl
 556+ 88AA C1                           pop bc
 557+ 88AB 10 ED                        djnz abc_b1
 558+ 88AD
 559+ 88AD              ;now colour the attributes to show switch is in the OFF position - colour it blue
 560+ 88AD                              ;do white colour bars first
 561+ 88AD 21 0C 59                     ld hl,22764+32   ;start of bar bit at the top of the door
 562+ 88B0 11 20 00                     ld de,32            ;to jump 1 line down after each print
 563+ 88B3 3E 01                        ld a,1              ;draw 1 attribute across
 564+ 88B5 32 10 84                     ld (att_count),a
 565+ 88B8 3E B8                        ld a,184            ; colour to print (199=white)
 566+ 88BA 4F                           ld c,a              ;set colour to white ink, black paper
 567+ 88BB 3E 04                        ld a,4             ;do 5 lines
 568+ 88BD CD FD 83                     call rept_5         ;colour our door correctly
 569+ 88C0
 570+ 88C0 C9                           ret
 571+ 88C1
 572+ 88C1              ;switch in off position
 573+ 88C1              switch_off_g:      ;13 lines
 574+ 88C1 06 0B 9E DE                  db 6,11,158, $de,$dd,$e1,$7F
 574+ 88C5 DD E1 7F
 575+ 88C8 07 0B 9E E0                  db 7,11,158, $e0," ",$e4,$7F
 575+ 88CC 20 E4 7F
 576+ 88CF 08 0B 9E E0                  db 8,11,158, $e0," ",$e4,$7F
 576+ 88D3 20 E4 7F
 577+ 88D6 09 0B 9E E0                  db 9,11,158, $e0," ",$e4,$7F
 577+ 88DA 20 E4 7F
 578+ 88DD 0A 0B 9E E0                  db 10,11,158,$e0," ",$e4,$7F
 578+ 88E1 20 E4 7F
 579+ 88E4 0B 0B 9E E0                  db 11,11,158,$e0," ",$e4,$7F
 579+ 88E8 20 E4 7F
 580+ 88EB 0C 0B 9E E0                  db 12,11,158,$e0,"|",$e4,$7F
 580+ 88EF 7C E4 7F
 581+ 88F2 0D 0B 9E E0                  db 13,11,158,$e0,"|",$e4,$7F
 581+ 88F6 7C E4 7F
 582+ 88F9 0E 0B 9E E0                  db 14,11,158,$e0,"|",$e4,$7F
 582+ 88FD 7C E4 7F
 583+ 8900 0F 0B 9E E0                  db 15,11,158,$e0,"|",$e4,$7F
 583+ 8904 7C E4 7F
 584+ 8907 10 0B 9E E0                  db 16,11,158,$e0," ",$e4,$7F
 584+ 890B 20 E4 7F
 585+ 890E 11 0B 9E DF                  db 17,11,158,$df,$e3,$e2,$7F
 585+ 8912 E3 E2 7F
 586+ 8915
 587+ 8915
 588+ 8915              ;--------------------------------------------------------------------
 589+ 8915
 590+ 8915              draw_switch_on:
 591+ 8915
 592+ 8915                             ; exit_closed 13 lines of 5 chars
 593+ 8915 06 0C                        ld b,12
 594+ 8917 21 50 89                     ld hl,switch_on_g      ;start of switch off graphic
 595+ 891A C5           abc_b2:         push bc
 596+ 891B E5                           push hl
 597+ 891C
 598+ 891C E5 DD E1                     ld ix,hl                ;point to our data to print
 599+ 891F CD CB 81                     CALL print_message
 600+ 8922
 601+ 8922 E1                           pop hl
 602+ 8923 11 07 00                     ld de,7                 ;each line is 9 chars long
 603+ 8926 19                           add hl,de
 604+ 8927 E5 DD E1                     ld ix,hl
 605+ 892A C1                           pop bc
 606+ 892B 10 ED                        djnz abc_b2
 607+ 892D
 608+ 892D              ;now colour the attributes to show switch is in the OFF position - colour it blue
 609+ 892D                              ;do white colour bars first
 610+ 892D 21 8C 59                     ld hl,22924;+32      ;start of bar bit at the top of the door
 611+ 8930 11 20 00                     ld de,32            ;to jump 1 line down after each print
 612+ 8933 3E 01                        ld a,1              ;draw 1 attribute across
 613+ 8935 32 10 84                     ld (att_count),a
 614+ 8938 3E 82                        ld a,130            ; colour to print (199=white)
 615+ 893A 4F                           ld c,a              ;set colour to white ink, black paper
 616+ 893B 3E 04                        ld a,4             ;do 5 lines
 617+ 893D CD FD 83                     call rept_5         ;colour our door correctly
 618+ 8940
 619+ 8940                              ;check if the switch has pulled - if yes, dont play the sound again!
 620+ 8940 3A 2E FA                     ld a,(switch_sound )
 621+ 8943 3D                           dec a               ;check if a = 0. Will be 255 if not zero
 622+ 8944 C8                           ret z
 623+ 8945                              ;do the switch on sound
 624+ 8945 1E 9B        	            ld e,155		;10 for the walk sound
 625+ 8947 CD 89 C7                     call walk_sound
 626+ 894A AF                           xor a
 627+ 894B 3C                           inc a
 628+ 894C 32 2E FA                     ld (switch_sound),a
 629+ 894F C9                           ret
 630+ 8950
 631+ 8950              ;switch in off position
 632+ 8950              switch_on_g:      ;12 lines
 633+ 8950 06 0B 9E DE                  db 6,11,158, $de,$dd,$e1,$7F
 633+ 8954 DD E1 7F
 634+ 8957 07 0B 9E E0                  db 7,11,158, $e0," ",$e4,$7F
 634+ 895B 20 E4 7F
 635+ 895E 08 0B 9E E0                  db 8,11,158, $e0,"|",$e4,$7F
 635+ 8962 7C E4 7F
 636+ 8965 09 0B 9E E0                  db 9,11,158, $e0,"|",$e4,$7F
 636+ 8969 7C E4 7F
 637+ 896C 0A 0B 9E E0                  db 10,11,158,$e0,"|",$e4,$7F
 637+ 8970 7C E4 7F
 638+ 8973 0B 0B 9E E0                  db 11,11,158,$e0,"|",$e4,$7F
 638+ 8977 7C E4 7F
 639+ 897A 0C 0B 9E E0                  db 12,11,158,$e0," ",$e4,$7F
 639+ 897E 20 E4 7F
 640+ 8981 0D 0B 9E E0                  db 13,11,158,$e0," ",$e4,$7F
 640+ 8985 20 E4 7F
 641+ 8988 0E 0B 9E E0                  db 14,11,158,$e0," ",$e4,$7F
 641+ 898C 20 E4 7F
 642+ 898F 0F 0B 9E E0                  db 15,11,158,$e0," ",$e4,$7F
 642+ 8993 20 E4 7F
 643+ 8996 10 0B 9E E0                  db 16,11,158,$e0," ",$e4,$7F
 643+ 899A 20 E4 7F
 644+ 899D 11 0B 9E DF                  db 17,11,158,$df,$e3,$e2,$7F
 644+ 89A1 E3 E2 7F
 645+ 89A4              ;-----------------------------------------------------------------------------------
 646+ 89A4
 647+ 89A4              draw_switch_right_off:
 648+ 89A4
 649+ 89A4                             ; exit_closed 14 lines of 7 chars
 650+ 89A4 06 06                        ld b,6
 651+ 89A6 21 23 8A                     ld hl,switch_right_off
 652+ 89A9 C5           abc_b3:         push bc
 653+ 89AA E5                           push hl
 654+ 89AB E5 DD E1                     ld ix,hl        ;point to our data to print
 655+ 89AE CD CB 81                     CALL print_message
 656+ 89B1 E1                           pop hl
 657+ 89B2 11 07 00                     ld de,7         ;7 chars to read
 658+ 89B5 19                           add hl,de
 659+ 89B6 E5 DD E1                     ld ix,hl
 660+ 89B9 C1                           pop bc
 661+ 89BA 10 ED                        djnz abc_b3
 662+ 89BC
 663+ 89BC              ;draw top angled bit of the door on right wall
 664+ 89BC DD 21 08 8A                  ld ix,top_right_1a        ;point to our data to print
 665+ 89C0 CD CB 81                     CALL print_message
 666+ 89C3 DD 21 0E 8A                  ld ix,top_right_2a        ;point to our data to print
 667+ 89C7 CD CB 81                     CALL print_message
 668+ 89CA DD 21 15 8A                  ld ix,top_right_3a        ;point to our data to print
 669+ 89CE CD CB 81                     CALL print_message
 670+ 89D1 DD 21 1C 8A                  ld ix,top_right_4a        ;point to our data to print
 671+ 89D5 CD CB 81                     CALL print_message
 672+ 89D8
 673+ 89D8              ;draw bottom angled bit of the door on right wall
 674+ 89D8 DD 21 4D 8A                  ld ix,bot_right_1a        ;point to our data to print
 675+ 89DC CD CB 81                     CALL print_message
 676+ 89DF DD 21 54 8A                  ld ix,bot_right_2a        ;point to our data to print
 677+ 89E3 CD CB 81                     CALL print_message
 678+ 89E6 DD 21 5B 8A                  ld ix,bot_right_3a        ;point to our data to print
 679+ 89EA CD CB 81                     CALL print_message
 680+ 89ED DD 21 62 8A                  ld ix,bot_right_4a        ;point to our data to print
 681+ 89F1 CD CB 81                     CALL print_message
 682+ 89F4
 683+ 89F4              ;now colour the attributes correctly to look diagonal
 684+ 89F4                              ;do white colour bars first
 685+ 89F4 21 16 59                     ld hl,22710 +96       ;start of bar bit at the top of the door
 686+ 89F7 11 20 00                     ld de,32            ;to jump 1 line down
 687+ 89FA 3E 01                        ld a,1              ;draw 1 attribute across
 688+ 89FC 32 10 84                     ld (att_count),a
 689+ 89FF 3E B8                        ld a,184            ;set colour of switxch
 690+ 8A01 4F                           ld c,a              ;set colour to white ink, black paper
 691+ 8A02 3E 04                        ld a,4             ; # of lines to do
 692+ 8A04 CD FD 83                     call rept_5         ;colour our door correctly
 693+ 8A07 C9                           ret
 694+ 8A08
 695+ 8A08
 696+ 8A08              ;top 2 parts of the switch
 697+ 8A08 05 16 9E E5  top_right_1a:    db 5,22,158,    $e5,$e7,$7F
 697+ 8A0C E7 7F
 698+ 8A0E 06 15 9E E5  top_right_2a:    db 6,21,158,$e5,$ea,$e8,$7F
 698+ 8A12 EA E8 7F
 699+ 8A15 07 15 9E E6  top_right_3a:    db 7,21,158,$e6,$e9,$e4,$7F
 699+ 8A19 E9 E4 7F
 700+ 8A1C 08 15 9E E0  top_right_4a:    db 8,21,158,$e0," ",$e4,$7F
 700+ 8A20 20 E4 7F
 701+ 8A23              ;middle of the OFF switch
 702+ 8A23              switch_right_off:
 703+ 8A23 09 15 9E E0                  db 9,21,158, $e0," ",$e4,$7F
 703+ 8A27 20 E4 7F
 704+ 8A2A 0A 15 9E E0                  db 10,21,158,$e0," ",$e4,$7F
 704+ 8A2E 20 E4 7F
 705+ 8A31 0B 15 9E E0                  db 11,21,158,$e0," ",$e4,$7F
 705+ 8A35 20 E4 7F
 706+ 8A38 0C 15 9E E0                  db 12,21,158,$e0,"|",$e4,$7F
 706+ 8A3C 7C E4 7F
 707+ 8A3F 0D 15 9E E0                  db 13,21,158,$e0,"|",$e4,$7F
 707+ 8A43 7C E4 7F
 708+ 8A46 0E 15 9E E0                  db 14,21,158,$e0,"|",$e4,$7F
 708+ 8A4A 7C E4 7F
 709+ 8A4D
 710+ 8A4D              ;bottom 2 parts of the switch
 711+ 8A4D 0F 15 9E E0  bot_right_1a:   db 15,21,158,$e0,"|",$e4,$7F
 711+ 8A51 7C E4 7F
 712+ 8A54 10 15 9E EE  bot_right_2a:   db 16,21,158,$ee,$ef,$e4,$7F
 712+ 8A58 EF E4 7F
 713+ 8A5B 11 15 9E EB  bot_right_3a:   db 17,21,158,$eb,$f0,$ed,$7F
 713+ 8A5F F0 ED 7F
 714+ 8A62 12 16 9E EB  bot_right_4a:   db 18,22,158,    $eb,$ec,$7F
 714+ 8A66 EC 7F
 715+ 8A68
 716+ 8A68              ;--------------------------------------------------------------------------------
 717+ 8A68
 718+ 8A68              draw_switch_right_on:
 719+ 8A68
 720+ 8A68 06 06                        ld b,6
 721+ 8A6A 21 E7 8A                     ld hl,switch_right_on
 722+ 8A6D C5           abc_b4:         push bc
 723+ 8A6E E5                           push hl
 724+ 8A6F E5 DD E1                     ld ix,hl        ;point to our data to print
 725+ 8A72 CD CB 81                     CALL print_message
 726+ 8A75              ;set border to flash
 727+ 8A75                         ;   ld c,254
 728+ 8A75                         ;   ld a,39       ;set a red border
 729+ 8A75                         ;   out (c),a
 730+ 8A75
 731+ 8A75 E1                           pop hl
 732+ 8A76 11 07 00                     ld de,7         ;7 chars to read
 733+ 8A79 19                           add hl,de
 734+ 8A7A E5 DD E1                     ld ix,hl
 735+ 8A7D C1                           pop bc
 736+ 8A7E 10 ED                        djnz abc_b4
 737+ 8A80
 738+ 8A80              ;draw top angled bit of the door on right wall
 739+ 8A80 DD 21 CC 8A                  ld ix,top_right_1b        ;point to our data to print
 740+ 8A84 CD CB 81                     CALL print_message
 741+ 8A87 DD 21 D2 8A                  ld ix,top_right_2b        ;point to our data to print
 742+ 8A8B CD CB 81                     CALL print_message
 743+ 8A8E DD 21 D9 8A                  ld ix,top_right_3b        ;point to our data to print
 744+ 8A92 CD CB 81                     CALL print_message
 745+ 8A95 DD 21 E0 8A                  ld ix,top_right_4b        ;point to our data to print
 746+ 8A99 CD CB 81                     CALL print_message
 747+ 8A9C
 748+ 8A9C              ;draw bottom angled bit of the door on right wall
 749+ 8A9C DD 21 11 8B                  ld ix,bot_right_1b        ;point to our data to print
 750+ 8AA0 CD CB 81                     CALL print_message
 751+ 8AA3 DD 21 18 8B                  ld ix,bot_right_2b        ;point to our data to print
 752+ 8AA7 CD CB 81                     CALL print_message
 753+ 8AAA DD 21 1F 8B                  ld ix,bot_right_3b        ;point to our data to print
 754+ 8AAE CD CB 81                     CALL print_message
 755+ 8AB1 DD 21 26 8B                  ld ix,bot_right_4b        ;point to our data to print
 756+ 8AB5 CD CB 81                     CALL print_message
 757+ 8AB8
 758+ 8AB8              ;now colour the attributes correctly to look diagonal
 759+ 8AB8                              ;do white colour bars first
 760+ 8AB8 21 96 59                     ld hl,22710 +96+96+32       ;start of bar bit at the top of the door
 761+ 8ABB 11 20 00                     ld de,32            ;to jump 1 line down
 762+ 8ABE 3E 01                        ld a,1              ;draw 1 attribute across
 763+ 8AC0 32 10 84                     ld (att_count),a
 764+ 8AC3 3E 82                        ld a,130            ;set colour of switxch
 765+ 8AC5 4F                           ld c,a              ;set colour to white ink, black paper
 766+ 8AC6 3E 04                        ld a,4             ; # of lines to do
 767+ 8AC8 CD FD 83                     call rept_5         ;colour our door correctly
 768+ 8ACB C9                           ret
 769+ 8ACC
 770+ 8ACC
 771+ 8ACC              ;top 2 parts of the switch
 772+ 8ACC 05 16 9E E5  top_right_1b:    db 5,22,158,    $e5,$e7,$7F
 772+ 8AD0 E7 7F
 773+ 8AD2 06 15 9E E5  top_right_2b:    db 6,21,158,$e5,$ea,$e8,$7F
 773+ 8AD6 EA E8 7F
 774+ 8AD9 07 15 9E E6  top_right_3b:    db 7,21,158,$e6,$e9,$e4,$7F
 774+ 8ADD E9 E4 7F
 775+ 8AE0 08 15 9E E0  top_right_4b:    db 8,21,158,$e0,"|",$e4,$7F
 775+ 8AE4 7C E4 7F
 776+ 8AE7              ;middle of the ON switch
 777+ 8AE7              switch_right_on:
 778+ 8AE7 09 15 9E E0                  db 9,21,158, $e0,"|",$e4,$7F
 778+ 8AEB 7C E4 7F
 779+ 8AEE 0A 15 9E E0                  db 10,21,158,$e0,"|",$e4,$7F
 779+ 8AF2 7C E4 7F
 780+ 8AF5 0B 15 9E E0                  db 11,21,158,$e0,"|",$e4,$7F
 780+ 8AF9 7C E4 7F
 781+ 8AFC 0C 15 9E E0                  db 12,21,158,$e0," ",$e4,$7F
 781+ 8B00 20 E4 7F
 782+ 8B03 0D 15 9E E0                  db 13,21,158,$e0," ",$e4,$7F
 782+ 8B07 20 E4 7F
 783+ 8B0A 0E 15 9E E0                  db 14,21,158,$e0," ",$e4,$7F
 783+ 8B0E 20 E4 7F
 784+ 8B11
 785+ 8B11              ;bottom 2 parts of the switch
 786+ 8B11 0F 15 9E E0  bot_right_1b:   db 15,21,158,$e0," ",$e4,$7F
 786+ 8B15 20 E4 7F
 787+ 8B18 10 15 9E EE  bot_right_2b:   db 16,21,158,$ee,$ef,$e4,$7F
 787+ 8B1C EF E4 7F
 788+ 8B1F 11 15 9E EB  bot_right_3b:   db 17,21,158,$eb,$f0,$ed,$7F
 788+ 8B23 F0 ED 7F
 789+ 8B26 12 16 9E EB  bot_right_4b:   db 18,22,158,    $eb,$ec,$7F
 789+ 8B2A EC 7F
 790+ 8B2C
 791+ 8B2C
 792+ 8B2C
 793+ 8B2C
 794+ 8B2C
 795+ 8B2C
 796+ 8B2C
 797+ 8B2C
 798+ 8B2C
# file closed: src/1-rd3dmazeV6.asm
 454  8B2C                  INCLUDE "2-rd3dmazeV6.asm" ; draw maze on screen, player direction,
# file opened: src/2-rd3dmazeV6.asm
   1+ 8B2C
   2+ 8B2C              ;##############################################
   3+ 8B2C              ;Draw the current map on screen
   4+ 8B2C              ;##############################################
   5+ 8B2C
   6+ 8B2C              ;max row=21, max column = 31
   7+ 8B2C
   8+ 8B2C              DRAW_MAP:
   9+ 8B2C
  10+ 8B2C                      ;set max speed!
  11+ 8B2C ED 91 07 03          nextreg 7,3
  12+ 8B30
  13+ 8B30                      ;turn off the buffering so we
  14+ 8B30 ED 91 52 0A          nextreg $52,10      ;page in the spectrum screen
  15+ 8B34
  16+ 8B34              ;       nextreg $69,0       ;turn off screen buffering so we write directly to the screen
  17+ 8B34
  18+ 8B34                      ;now redraw our current screen in case we need to as we draw the map over the top
  19+ 8B34 CD 55 C6                 call redraw_screen
  20+ 8B37 CD 5C C7                 call copy_colours
  21+ 8B3A CD 9D 9A                 call draw_screen_right
  22+ 8B3D 21 9C C7                 ld hl,charset_1-256
  23+ 8B40 22 43 8C                 ld (base),hl
  24+ 8B43 CD EE 8C                 call compass          ; draw compass
  25+ 8B46
  26+ 8B46              map_from_Basic: ;called from Basic Mapmaker
  27+ 8B46                      ;set our colours
  28+ 8B46 3E B2                ld a,178            ;red
  29+ 8B48 32 1C 99             ld (wallcol),a
  30+ 8B4B
  31+ 8B4B              ;first draw a top wall line
  32+ 8B4B 3E 11                ld a,17          ;draw 16 wall chars
  33+ 8B4D 01 04 02             ld bc,$0204      ;print at 2,4;
  34+ 8B50 CD F9 8B             call topbotline
  35+ 8B53
  36+ 8B53              ;now draw the map data
  37+ 8B53 01 04 03             ld bc,$0304      ;set row and column to 2,4
  38+ 8B56 2A 23 FA             ld hl,(map_start)
  39+ 8B59 22 18 FA             ld (var7),hl   ;save it
  40+ 8B5C              rep1:
  41+ 8B5C C5                   push bc
  42+ 8B5D CD 29 8C             call locate
  43+ 8B60 C1                   pop bc           ;restore our counter
  44+ 8B61 C5                   push bc          ;resave it
  45+ 8B62
  46+ 8B62 CD A3 8B             call get_maze_data
  47+ 8B65 CD 4B 8C             call print1      ;print character
  48+ 8B68 C1                   pop bc
  49+ 8B69 0C                   inc c
  50+ 8B6A 79                   ld a,c
  51+ 8B6B D6 14                sub 20          ;just draw 16 characters (we start at loc 4)
  52+ 8B6D C2 5C 8B             jp nz,rep1
  53+ 8B70
  54+ 8B70              ;now draw a final wall at the end of the line
  55+ 8B70 C5                   push bc
  56+ 8B71 11 00 F8             ld de,udg_start  ;point to udg chars
  57+ 8B74 ED 53 43 8C          ld (base),de
  58+ 8B78 CD 29 8C             call locate      ;set print position
  59+ 8B7B CD 2C 9A             call set_wall_col   ;set our wall colour
  60+ 8B7E 3A 1C 99             ld a,(wallcol)
  61+ 8B81 32 47 8C             ld (att),a
  62+ 8B84 3E B4                ld a,_smallwall  ;draw wall char
  63+ 8B86 CD 4B 8C             call print1
  64+ 8B89 C1                   pop bc
  65+ 8B8A 78                   ld a,b
  66+ 8B8B FE 12                cp 18            ;draw 18 lines (starting at line 2)
  67+ 8B8D 28 05                jr z,ret2        ;exit after 18 lines
  68+ 8B8F 04                   inc b
  69+ 8B90 0E 04                ld c,4           ;start row from pos 4 again
  70+ 8B92 18 C8                jr rep1          ;start again
  71+ 8B94
  72+ 8B94              ;now draw a bottom line wall
  73+ 8B94 3E 11        ret2:   ld a,17          ;draw 16 wall chars
  74+ 8B96 01 04 13             ld bc,$1304      ;print at 2,4;
  75+ 8B99 CD F9 8B             call topbotline
  76+ 8B9C
  77+ 8B9C              ;put our char set back to normal!
  78+ 8B9C 21 9C C7             ld hl,charset_1-256
  79+ 8B9F 22 43 8C             ld (base),hl
  80+ 8BA2 C9                   ret
  81+ 8BA3
  82+ 8BA3              ;cycle through the maze drawing blocks, player, exit etc
  83+ 8BA3              get_maze_data:
  84+ 8BA3 2A 18 FA             ld hl,(var7)    ;get our current map position
  85+ 8BA6 3E 28                ld a,40         ;cyan paper, black ink
  86+ 8BA8 32 47 8C             ld (att),a
  87+ 8BAB
  88+ 8BAB              ;set charset to non udg
  89+ 8BAB 11 9C C8             ld de,charset_1
  90+ 8BAE 15                   dec d
  91+ 8BAF ED 53 43 8C          ld (base),de    ;set char set start for ptint1 routine
  92+ 8BB3 7E                   ld a,(hl)       ;get our character to print
  93+ 8BB4 23                   inc hl           ;jump to next maze location
  94+ 8BB5 22 18 FA             ld (var7),hl
  95+ 8BB8 67                   ld h,a          ;save reg a - we dont need reg h anymore
  96+ 8BB9
  97+ 8BB9              ;Now check if its a player, a wall or an Exit or switch,
  98+ 8BB9 ED 5B 00 FA          ld de,(player_pos)      ;get player location
  99+ 8BBD 2D                   dec l                   ;put back hl as we inc'd it earlier
 100+ 8BBE 7B                   ld a,e                  ;go back 1 position as we already incremented it
 101+ 8BBF BD                   cp l
 102+ 8BC0 7C                   ld a,h             ;restore reg a for further compares
 103+ 8BC1 20 02                jr nz,go_1          ;no match for a player
 104+ 8BC3 3E A6                ld a,$a6           ;set a to  our little man character which is a graphic
 105+ 8BC5 FE 20        go_1:   cp ' '
 106+ 8BC7 C8                   ret z
 107+ 8BC8
 108+ 8BC8              ;its a graphic character - assume its a wall no matter what
 109+ 8BC8 67                   ld h,a             ;save reg a
 110+ 8BC9 3E 0A                ld a,10             ;yellow paper, black ink
 111+ 8BCB 32 47 8C             ld (att),a         ;red ink, blue background
 112+ 8BCE 7C                   ld a,h
 113+ 8BCF
 114+ 8BCF
 115+ 8BCF              ;Now check if its a player, a wall or an Exit or switch
 116+ 8BCF 1E A6                ld e, $a6           ;our little man graphic
 117+ 8BD1 BB                   cp e
 118+ 8BD2 28 1B                jr z,go_on          ;do next check
 119+ 8BD4
 120+ 8BD4              ;check for an exit....
 121+ 8BD4 1E C0                ld e,_me            ;exit char = 192
 122+ 8BD6 7C                   ld a,h
 123+ 8BD7 BB                   cp e               ;needs to be a compare so a is left intact
 124+ 8BD8 3E A8                ld a,$a8            ;load exit character
 125+ 8BDA 28 13                jr z,go_on
 126+ 8BDC              ;
 127+ 8BDC              ;a7 check for a switch...
 128+ 8BDC 1E E0                ld e,_ms           ;exit char = 192
 129+ 8BDE 7C                   ld a,h
 130+ 8BDF BB                   cp e               ;needs to be a compare so a is left intact
 131+ 8BE0 3E A7                ld a,$a7            ;load exit character
 132+ 8BE2 28 0B                jr z,go_on
 133+ 8BE4
 134+ 8BE4              ;default to a wall....
 135+ 8BE4              carry_on1:
 136+ 8BE4 CD 2C 9A             call set_wall_col   ;set our wall colour
 137+ 8BE7 3A 1C 99             ld a,(wallcol)
 138+ 8BEA 32 47 8C             ld (att),a         ;red ink, blue background
 139+ 8BED 3E B4                ld a,_smallwall         ;return wall char
 140+ 8BEF
 141+ 8BEF
 142+ 8BEF              go_on:
 143+ 8BEF D6 80                sub $80          ;subtract 128 to point to correct graphic char
 144+ 8BF1              ;set char set to udg's
 145+ 8BF1 11 00 FC             ld de,_chars;$fc00
 146+ 8BF4 ED 53 43 8C          ld (base),de
 147+ 8BF8 C9                   ret
 148+ 8BF9
 149+ 8BF9              topbotline:
 150+ 8BF9              ;draws a single line of 16 wall chars
 151+ 8BF9              ;set char set to udg's
 152+ 8BF9 11 00 FC             ld de,$fc00             ;point to udg's
 153+ 8BFC ED 53 43 8C          ld (base),de
 154+ 8C00
 155+ 8C00 F5           rep3:   push af
 156+ 8C01 CD 29 8C             call locate             ;set print position
 157+ 8C04              ;set wall colour. Print 1 uses whats stored in (att)
 158+ 8C04 CD 2C 9A             call set_wall_col   ;set our wall colour
 159+ 8C07 3A 1C 99             ld a,(wallcol)
 160+ 8C0A 32 47 8C             ld (att),a
 161+ 8C0D 3E B4                ld a,_smallwall
 162+ 8C0F D6 80                sub $80
 163+ 8C11 C5                   push bc
 164+ 8C12 CD 4B 8C             call print1      ;print the character
 165+ 8C15 C1                   pop bc
 166+ 8C16 0C                   inc c
 167+ 8C17 F1                   pop af
 168+ 8C18 3D                   dec a
 169+ 8C19 20 E5                jr nz,rep3        ;exit when a=0
 170+ 8C1B
 171+ 8C1B ED 91 69 00          nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 172+ 8C1F 3E 0E                ld a,14
 173+ 8C21 32 B4 81             ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 174+ 8C24                      ;set min speed!
 175+ 8C24 ED 91 07 00          nextreg 7,0
 176+ 8C28
 177+ 8C28 C9                   ret
 178+ 8C29
 179+ 8C29
 180+ 8C29              ;==================================================
 181+ 8C29              ;from advanced spectrum machine code book
 182+ 8C29              ;==================================================
 183+ 8C29
 184+ 8C29              ;locate routine for use with print routine
 185+ 8C29
 186+ 8C29              ;   entry: b=line  c=column
 187+ 8C29              ;   preserved = bc
 188+ 8C29              ;   on exit -   hl = display file address
 189+ 8C29              ;               de = attr address
 190+ 8C29              ;               a  = attr (b,c)
 191+ 8C29              ;   df_cc is altered
 192+ 8C29
 193+ 8C29
 194+ 8C29 78           locate: ld a,b
 195+ 8C2A E6 18                and $18
 196+ 8C2C 67                   ld h,a
 197+ 8C2D CB F4                set 6,h
 198+ 8C2F 0F                   rrca
 199+ 8C30 0F                   rrca
 200+ 8C31 0F                   rrca
 201+ 8C32 F6 58                or $58
 202+ 8C34 57                   ld d,a
 203+ 8C35 78                   ld a,b
 204+ 8C36 E6 07                and 7
 205+ 8C38 0F                   rrca
 206+ 8C39 0F                   rrca
 207+ 8C3A 0F                   rrca
 208+ 8C3B 81                   add a,c
 209+ 8C3C 6F                   ld l,a
 210+ 8C3D 5F                   ld e,a
 211+ 8C3E 1A                   ld a,(de)
 212+ 8C3F 22 84 5C             ld (df_cc),hl
 213+ 8C42 C9                   ret
 214+ 8C43
 215+ 8C43              ;here is the new print routine
 216+ 8C43
 217+ 8C43              ;   entry: a=char code to be printed
 218+ 8C43              ;   preserved = c
 219+ 8C43              ;   exit -  b=0
 220+ 8C43              ;           de = attribute address
 221+ 8C43
 222+ 8C43              ; variable base is initialised to 3c00h = normal spectrum character set
 223+ 8C43              ; att is place immediately before mask so that
 224+ 8C43              ; the two can be accessed with one ld instuction
 225+ 8C43
 226+ 8C43 00 3C        base    dw $3c00 ; start of speccy characer set
 227+ 8C45 00 40        dfcc    dw $4000 ;start of spectrum screen mem
 228+ 8C47              ;dfcc    dw $0000 ;start of spectrum screen mem slot 0
 229+ 8C47 38 00        att     dw $38
 230+ 8C49 00 00        mask    dw 0
 231+ 8C4B
 232+ 8C4B
 233+ 8C4B
 234+ 8C4B              print1: ; construct character data address
 235+ 8C4B
 236+ 8C4B
 237+ 8C4B 6F                   ld l,a
 238+ 8C4C 26 00                ld h,0
 239+ 8C4E 29                   add hl,hl
 240+ 8C4F 29                   add hl,hl
 241+ 8C50 29                   add hl,hl
 242+ 8C51 ED 5B 43 8C          ld de,(base)                ;char set data
 243+ 8C55 19                   add hl,de
 244+ 8C56
 245+ 8C56                      ; take display file address
 246+ 8C56 ED 5B 84 5C          ld de,(df_cc)
 247+ 8C5A 06 08                ld b,8
 248+ 8C5C
 249+ 8C5C                      ; print character row by row
 250+ 8C5C 7E           nxtrow: ld a,(hl)
 251+ 8C5D 12                   ld (de),a
 252+ 8C5E 23                   inc hl
 253+ 8C5F 14                   inc d
 254+ 8C60 10 FA                djnz nxtrow
 255+ 8C62
 256+ 8C62                      ; construct attribute address
 257+ 8C62 7A                   ld a,d
 258+ 8C63 0F                   rrca
 259+ 8C64 0F                   rrca
 260+ 8C65 0F                   rrca
 261+ 8C66 3D                   dec a
 262+ 8C67 E6 03                and 3
 263+ 8C69 F6 58                or $58
 264+ 8C6B 57                   ld d,a
 265+ 8C6C 2A 47 8C             ld hl,(att)    ; h=mask, l=attribute
 266+ 8C6F
 267+ 8C6F                      ; take old attribute
 268+ 8C6F 1A                   ld a,(de)
 269+ 8C70
 270+ 8C70                      ; construct new one
 271+ 8C70 AD                   xor l
 272+ 8C71 A4                   and h
 273+ 8C72 AD                   xor l
 274+ 8C73
 275+ 8C73                      ; replace attribute
 276+ 8C73 12                   ld (de),a
 277+ 8C74
 278+ 8C74                      ; finally, set dfcc to next print position
 279+ 8C74 21 84 5C             ld hl,df_cc
 280+ 8C77 34                   inc (hl)
 281+ 8C78 C0                   ret nz
 282+ 8C79 23                   inc hl
 283+ 8C7A 7E                   ld a,(hl)
 284+ 8C7B C6 08                add a,8
 285+ 8C7D 77                   ld (hl),a
 286+ 8C7E C9                   ret
 287+ 8C7F
 288+ 8C7F
 289+ 8C7F              ; print routine - print screen at c000 to 16384
 290+ 8C7F              ; uses locate routine
 291+ 8C7F
 292+ 8C7F              my_print_info:  ; set dfcc to line , column
 293+ 8C7F
 294+ 8C7F              ;1st, check if we are printing a udg
 295+ 8C7F              ;reg a holds our character to print. udg's are char $90 onwards
 296+ 8C7F
 297+ 8C7F              ; the carry will be set if the cp argument > than a
 298+ 8C7F
 299+ 8C7F
 300+ 8C7F              setbase:
 301+ 8C7F F5                   push af
 302+ 8C80 C5                   push bc
 303+ 8C81 E5                   push hl
 304+ 8C82
 305+ 8C82              ;point to our character set
 306+ 8C82 21 9C C8             ld hl,charset_1
 307+ 8C85 25                   dec h
 308+ 8C86 22 43 8C             ld (base),hl
 309+ 8C89
 310+ 8C89                      ;we are now pointing at the rom char set
 311+ 8C89 0A                   ld a,(bc)               ;get our char to print
 312+ 8C8A               ;       nop ;or a
 313+ 8C8A CB 7F                bit 7,a                 ;are we printing udg's?
 314+ 8C8C                      ; bit 7=1 so zero =false
 315+ 8C8C 28 09                jr z,ret_1              ;exit if theres no graphic to print
 316+ 8C8E D6 80                sub $80                 ;point to the first character of udg's
 317+ 8C90 01 00 F8             ld bc,udg_start         ;start of udg's in memory
 318+ 8C93 ED 43 43 8C          ld (base),bc
 319+ 8C97                      ;ld hl,(base)
 320+ 8C97 E1           ret_1   pop hl
 321+ 8C98 C1                   pop bc
 322+ 8C99 F1                   pop af
 323+ 8C9A
 324+ 8C9A C9                   ret
 325+ 8C9B
 326+ 8C9B              my_print:           ;bc=line,col
 327+ 8C9B 06 00        lp4:    ld b,0
 328+ 8C9D 0E 00                ld c,0
 329+ 8C9F CD 29 8C             call locate ; set print pos and attribute
 330+ 8CA2 97                   sub a       ;make reg a=0
 331+ 8CA3 32 ED 8C             ld (lc),a   ;line counter
 332+ 8CA6
 333+ 8CA6                      ; remember, print1 preserves the c register
 334+ 8CA6 01 FF BF             ld bc, $bfff ;c000  ; 1 less than display in memory
 335+ 8CA9 2E 00                ld l,0
 336+ 8CAB              lp3:
 337+ 8CAB
 338+ 8CAB C5                   push bc
 339+ 8CAC E5                   push hl
 340+ 8CAD 03                   inc bc
 341+ 8CAE 0A                   ld a,(bc)
 342+ 8CAF CD 7F 8C             call setbase ; set char set
 343+ 8CB2 3E F0                ld a,240
 344+ 8CB4 32 47 8C             ld (att),a          ;set black ink and paper
 345+ 8CB7 0A                   ld a,(bc)           ;reload our character to print
 346+ 8CB8 2A 43 8C             ld hl,(base)
 347+ 8CBB
 348+ 8CBB              ;charset test
 349+ 8CBB 2A 9C C8             ld hl,(charset_1)
 350+ 8CBE
 351+ 8CBE CD 4B 8C             call print1  ; print char in a
 352+ 8CC1 E1                   pop hl
 353+ 8CC2 C1                   pop bc
 354+ 8CC3
 355+ 8CC3 03                   inc bc
 356+ 8CC4 2C                   inc l
 357+ 8CC5 7D                   ld a,l
 358+ 8CC6 FE 19                cp 25       ; print 26 chars
 359+ 8CC8 C2 AB 8C             jp nz,lp3
 360+ 8CCB
 361+ 8CCB C5                   push bc
 362+ 8CCC E1                   pop hl
 363+ 8CCD 16 00                ld d,0
 364+ 8CCF 1E 08                ld e,8
 365+ 8CD1 19                   add hl,de
 366+ 8CD2
 367+ 8CD2 E5                   push hl
 368+ 8CD3 C1                   pop bc
 369+ 8CD4 2E 00                ld l,0       ;start at 0 for the next line
 370+ 8CD6 3A ED 8C             ld a,(lc)
 371+ 8CD9 3C                   inc  a
 372+ 8CDA
 373+ 8CDA              ;we only draw the first 24 columns x 24 lines
 374+ 8CDA FE 18                cp 24      ; x lines to print
 375+ 8CDC
 376+ 8CDC C8                   ret z
 377+ 8CDD
 378+ 8CDD              ; reset position to next line. locate can do attributes too
 379+ 8CDD D9                   exx
 380+ 8CDE E5                   push hl
 381+ 8CDF 32 ED 8C             ld (lc),a  ; save counter
 382+ 8CE2 47                   ld b,a
 383+ 8CE3 0E 00                ld c,0
 384+ 8CE5 CD 29 8C             call locate
 385+ 8CE8 E1                   pop hl
 386+ 8CE9 D9                   exx
 387+ 8CEA C3 AB 8C             jp lp3
 388+ 8CED
 389+ 8CED
 390+ 8CED 00           lc      db 0
 391+ 8CEE
 392+ 8CEE
 393+ 8CEE              ;============================================
 394+ 8CEE              ; draw player direction text on screen
 395+ 8CEE              ;===========================================
 396+ 8CEE
 397+ 8CEE              ; loop 7 times for 7 lines
 398+ 8CEE              ; start at column 14
 399+ 8CEE              ; print 7 characters
 400+ 8CEE
 401+ 8CEE              compass:
 402+ 8CEE              ;first colour in the background - 7 lines starting at 17,25
 403+ 8CEE              ;              ld b,17           ;row 21
 404+ 8CEE              ;              ld c,25           ;col 25
 405+ 8CEE
 406+ 8CEE              ;loc_1:        push bc
 407+ 8CEE              ;              call locate    ;set print position
 408+ 8CEE              ;              pop bc
 409+ 8CEE              ;              ;de holds the attribute position
 410+ 8CEE              ;              ld a,151          ;set colour
 411+ 8CEE              ;              call colour1
 412+ 8CEE              ;              ld a,23
 413+ 8CEE              ;              sub b
 414+ 8CEE              ;              inc b
 415+ 8CEE              ;              jr nz,loc_1
 416+ 8CEE              ;              jr draw_compass
 417+ 8CEE
 418+ 8CEE              ;colour1:      ld l,7
 419+ 8CEE              ;colour2:      ld (de),a
 420+ 8CEE              ;              inc de
 421+ 8CEE              ;              dec l
 422+ 8CEE              ;              ret z
 423+ 8CEE              ;              jr colour2
 424+ 8CEE
 425+ 8CEE              ;now draw the compass
 426+ 8CEE 06 17        draw_compass: ld b,23           ;row 21
 427+ 8CF0 0E 19                      ld c,25           ;col 25
 428+ 8CF2
 429+ 8CF2 C5                         push bc
 430+ 8CF3 CD 1D 8D                   call print_pos    ;set print position
 431+ 8CF6 C1                         pop bc
 432+ 8CF7
 433+ 8CF7              ; now print our characters
 434+ 8CF7 11 64 8D                   ld de,c_dat-1       ;data start
 435+ 8CFA 1A           loop1:        ld a,(de)
 436+ 8CFB FE 78                      cp 'x';120            ; = "x" data end
 437+ 8CFD CA 0F 8D                   jp z,nxt_line
 438+ 8D00 FE 46                      cp 'F';70             ; "F" finished so exit
 439+ 8D02 CA 28 8D                   jp z, do_exit
 440+ 8D05
 441+ 8D05 D5                         push de
 442+ 8D06 C5                         push bc
 443+ 8D07 CD 4B 8C                   call print1       ; print the character
 444+ 8D0A C1                         pop bc
 445+ 8D0B D1                         pop de
 446+ 8D0C
 447+ 8D0C 1B                         dec de
 448+ 8D0D 18 EB                      jr loop1
 449+ 8D0F
 450+ 8D0F C5           nxt_line:     push bc
 451+ 8D10 D5                         push de
 452+ 8D11 0E 19                      ld c,25
 453+ 8D13 05                         dec b
 454+ 8D14 CD 1D 8D                   call print_pos
 455+ 8D17 D1                         pop de
 456+ 8D18 C1                         pop bc
 457+ 8D19 1B                         dec de
 458+ 8D1A 05                         dec b
 459+ 8D1B 18 DD                      jr loop1
 460+ 8D1D
 461+ 8D1D              ; set print position
 462+ 8D1D C5           print_pos:    push bc
 463+ 8D1E CD 29 8C                   call locate
 464+ 8D21 3E A5                      ld a,165          ;set ink and paper colour
 465+ 8D23 32 47 8C                   ld (att),a
 466+ 8D26 C1                         pop bc
 467+ 8D27 C9                         ret
 468+ 8D28
 469+ 8D28 CD 65 8D     do_exit:  call show_dir     ; highlight player direction
 470+ 8D2B
 471+ 8D2B C9                         ret
 472+ 8D2C
 473+ 8D2C
 474+ 8D2C 46                   db "F"
 475+ 8D2D              ;        db "x       "
 476+ 8D2D 78 73 73 61          db "xssapmoC"
 476+ 8D31 70 6D 6F 43
 477+ 8D35 78 20 20 20          db "x       "
 477+ 8D39 20 20 20 20
 478+ 8D3D 78 20 20 20          db "x   N   "
 478+ 8D41 4E 20 20 20
 479+ 8D45 78 20 20 20          db "x   |   "
 479+ 8D49 7C 20 20 20
 480+ 8D4D 78 20 45 2D          db "x E-+-W "
 480+ 8D51 2B 2D 57 20
 481+ 8D55 78 20 20 20          db "x   |   "
 481+ 8D59 7C 20 20 20
 482+ 8D5D 78 20 20 20          db "x   S   "
 482+ 8D61 53 20 20 20
 483+ 8D65              c_dat:
 484+ 8D65
 485+ 8D65
 486+ 8D65              ;===========================================
 487+ 8D65              ; highlight player direction
 488+ 8D65              ;===========================================
 489+ 8D65
 490+ 8D65              ;l4085 holdsplayer view  direction
 491+ 8D65
 492+ 8D65              ;00= north, 01=west, 02=south, 03=east
 493+ 8D65
 494+ 8D65 3E A5        show_dir:     ld a,165;185             ;white txt, brown background
 495+ 8D67              ;now clear the settings to none
 496+ 8D67 21 FC 5A                   ld hl,23228+64       ;s
 497+ 8D6A 77                         ld (hl),a
 498+ 8D6B 21 BE 5A                   ld hl,23166+64       ;e
 499+ 8D6E 77                         ld (hl),a
 500+ 8D6F 21 BA 5A                   ld hl,23162+64       ;w
 501+ 8D72 77                         ld (hl),a
 502+ 8D73 21 7C 5A                   ld hl,23100+64       ;n
 503+ 8D76 77                         ld (hl),a
 504+ 8D77
 505+ 8D77
 506+ 8D77              ;now colour the direction indicator
 507+ 8D77
 508+ 8D77 3A 08 FA                   ld a,(player_dir)
 509+ 8D7A FE 00                      cp 0              ;n
 510+ 8D7C C2 85 8D                   jp nz,c1
 511+ 8D7F 21 7C 5A                   ld hl,23100+64       ;n
 512+ 8D82 C3 9C 8D                   jp poke_it
 513+ 8D85 FE 01        c1:           cp 1              ;w
 514+ 8D87 20 06                      jr nz,c2
 515+ 8D89 21 BA 5A                   ld hl,23162+64       ;w
 516+ 8D8C C3 9C 8D                   jp poke_it
 517+ 8D8F FE 02        c2:           cp 2              ;s
 518+ 8D91 20 06                      jr nz,c3
 519+ 8D93 21 FC 5A                   ld hl,23228+64       ;s
 520+ 8D96 C3 9C 8D                   jp poke_it
 521+ 8D99              ;it must be east                ;e
 522+ 8D99 21 BE 5A     c3            ld hl,23166+64       ;e
 523+ 8D9C
 524+ 8D9C 3E 96        poke_it:      ld a,150          ;cyan paper, black writing
 525+ 8D9E 77                         ld(hl),a
 526+ 8D9F C9           q1:           ret
 527+ 8DA0
# file closed: src/2-rd3dmazeV6.asm
 455  8DA0                  INCLUDE "3-rd3dmazeV6.asm" ; check walls in front of player
# file opened: src/3-rd3dmazeV6.asm
   1+ 8DA0
   2+ 8DA0
   3+ 8DA0              ;##################################################
   4+ 8DA0              ; Start to draw the maze in memory
   5+ 8DA0              ;##################################################
   6+ 8DA0
   7+ 8DA0              ;hl will hold the player location in the maze
   8+ 8DA0
   9+ 8DA0              ;now draw the maze position
  10+ 8DA0
  11+ 8DA0              ;1 get our location from player_pos 16 bit but only the low byte used
  12+ 8DA0              ;  since our maze is max 256 bytes.
  13+ 8DA0              ;2 get our direction from player_dir 0 - 3 only.
  14+ 8DA0              ;  0=north
  15+ 8DA0              ;  1=west
  16+ 8DA0              ;  2=south
  17+ 8DA0              ;  3=east
  18+ 8DA0              ;3 work out how far away the wall is in front of our view-
  19+ 8DA0              ;  if its greater or less that 6 blocks since thats the max depth
  20+ 8DA0              ;  we will draw on screen (6 blocks)
  21+ 8DA0              ;4 start drawing from the back to the front
  22+ 8DA0              ;  so everything is overwritten (separate routine).
  23+ 8DA0              ;
  24+ 8DA0
  25+ 8DA0
  26+ 8DA0              ;screen is built in memory from c000 (49152) using characters
  27+ 8DA0
  28+ 8DA0              get_distance:
  29+ 8DA0
  30+ 8DA0 2A 00 FA                   ld hl,(player_pos)    ;get player location
  31+ 8DA3
  32+ 8DA3 3A 08 FA                   ld a,(player_dir)     ; get player direction
  33+ 8DA6
  34+ 8DA6
  35+ 8DA6              ;00= north, 01=west, 02=south, 03=east
  36+ 8DA6
  37+ 8DA6              ;if 0 decrease by -16 n
  38+ 8DA6              ;if 1 decrease by -1  w
  39+ 8DA6              ;if 2 increase by +16 s
  40+ 8DA6              ;if 3 increase by +1  e
  41+ 8DA6
  42+ 8DA6              ;when checking distance, if you are looking south and your current location
  43+ 8DA6              ;is >240 then you are at the south wall.
  44+ 8DA6
  45+ 8DA6
  46+ 8DA6              ;if you are at the top of the maze facing north, and you current location
  47+ 8DA6              ; is <16 you are at the far north wall of the maze
  48+ 8DA6
  49+ 8DA6              ;for east amd west you can detect a wall is chr $80 except for 255 (bottom
  50+ 8DA6              ; right) as the next  right location is outside the maze.
  51+ 8DA6
  52+ 8DA6              ; find out how far away we are from a wall
  53+ 8DA6                      ;are we facing north?
  54+ 8DA6 FE 00                      cp 0
  55+ 8DA8 CA 50 8E                   jp z, north2
  56+ 8DAB FE 01                      cp 1
  57+ 8DAD CA 4A 8E                   jp z, west2
  58+ 8DB0 FE 02                      cp 2
  59+ 8DB2 CA 56 8E                   jp z, south2
  60+ 8DB5                      ;it must be facing east if we get heret
  61+ 8DB5
  62+ 8DB5                      ;check if were at the bottom right hand corner (255)
  63+ 8DB5                      ;if so we implicitly have a wall.
  64+ 8DB5
  65+ 8DB5
  66+ 8DB5
  67+ 8DB5                      ;we are facing east
  68+ 8DB5 11 01 00                   ld de, $0001      ; (+1) to go to next line in front of us
  69+ 8DB8
  70+ 8DB8              ;clear maxview flag and data
  71+ 8DB8              check_dist:
  72+ 8DB8 3E 06                      ld a,6
  73+ 8DBA 32 02 FA                   ld (maxview),a
  74+ 8DBD 3A 03 FA                   ld a,(flags)
  75+ 8DC0 CB 87                      res 0,a
  76+ 8DC2 32 03 FA                   ld (flags),a
  77+ 8DC5
  78+ 8DC5 06 FF                      ld b,255            ;make accum 1 - counter
  79+ 8DC7
  80+ 8DC7              ;check if maxview set - if so, dont check for wall
  81+ 8DC7              ;in front of player anymore as there alreay is a wall set
  82+ 8DC7
  83+ 8DC7 3A 03 FA     loop2:        ld a,(flags)
  84+ 8DCA CB 47                      bit 0,a           ;if 1, then already set
  85+ 8DCC C2 EF 8D                   jp nz,check_mh
  86+ 8DCF
  87+ 8DCF 7E                         ld a,(hl)         ; this is the furthest point we can see
  88+ 8DD0 FE 80                      cp _mw ;=128      ;is it a wall here
  89+ 8DD2 28 0A                      jr z,j2
  90+ 8DD4
  91+ 8DD4              ;check for an exit wall and treat as if its a wall
  92+ 8DD4 FE C0                      cp _me
  93+ 8DD6 CA DE 8D                   jp z, j2   ;if no wall check for end wall
  94+ 8DD9
  95+ 8DD9              ;check for an switch wall and treat as if its a wall
  96+ 8DD9 FE E0                      cp _ms
  97+ 8DDB C2 EF 8D                   jp nz, check_mh   ;if no wall check for end wall
  98+ 8DDE
  99+ 8DDE 78           j2:           ld a,b            ;there is a wall if we get here
 100+ 8DDF                            ;is it 255? if so make it 0
 101+ 8DDF 3C                         inc a             ;if a=0, it was 255
 102+ 8DE0 CA E4 8D                   jp z,j1
 103+ 8DE3 3D                         dec a             ;put back to original value
 104+ 8DE4
 105+ 8DE4 32 02 FA     j1:           ld (maxview),a    ;save how far we can actually see
 106+ 8DE7 3A 03 FA                   ld a,(flags)
 107+ 8DEA CB C7                      set 0,a
 108+ 8DEC 32 03 FA                   ld (flags),a      ;set that we have set the flag
 109+ 8DEF
 110+ 8DEF
 111+ 8DEF 7E           check_mh:     ld a,(hl)
 112+ 8DF0 FE 81                      cp _mh ;=129      ; is it an end wall?
 113+ 8DF2 28 39                      jr z, end_loop    ; if yes, exit now
 114+ 8DF4 04                         inc b
 115+ 8DF5
 116+ 8DF5              ;check if we are at location 0 in the maze - if so do nothing
 117+ 8DF5 7D                         ld a,l
 118+ 8DF6 3C                         inc a
 119+ 8DF7 3D                         dec a             ;zero flag set if = to zero
 120+ 8DF8 CA 2A 8E                   jp z,end_loop2
 121+ 8DFB
 122+ 8DFB              ;##########################################################
 123+ 8DFB
 124+ 8DFB              ;now check if we are at the top end of the maze or the bottom
 125+ 8DFB              ;end of the maze as there are no blocks to check for there.
 126+ 8DFB              ;do bottom end first.
 127+ 8DFB
 128+ 8DFB
 129+ 8DFB 3A 08 FA                   ld a,(player_dir)
 130+ 8DFE 3D                         dec a                 ;is it 0 which = north
 131+ 8DFF 3C                         inc a
 132+ 8E00 C2 0E 8E                   jp nz,cont_6a          ;carry on if not at north wall
 133+ 8E03
 134+ 8E03                            ;are we trying to read data outside the 256 byte boundary?
 135+ 8E03 7D                         ld a,l
 136+ 8E04 FE 11                      cp 17
 137+ 8E06 D2 21 8E                   jp nc,cont_9
 138+ 8E09
 139+ 8E09 19                         add hl,de         ;now jump to next location in front of us
 140+ 8E0A 78                         ld a,b            ;get our depth
 141+ 8E0B C3 2D 8E                   jp end_loop       ;exit routine
 142+ 8E0E
 143+ 8E0E
 144+ 8E0E 3A 08 FA     cont_6a       ld a,(player_dir)
 145+ 8E11 D6 02                      sub 2              ;are we facing south?
 146+ 8E13 C2 21 8E                   jp nz,cont_9        ;z means yes
 147+ 8E16
 148+ 8E16 7D                         ld a,l
 149+ 8E17 FE F0                      cp 240
 150+ 8E19 DA 21 8E                   jp c,cont_9      ;carry set if cp >a
 151+ 8E1C
 152+ 8E1C 19                         add hl,de         ;now jump to next location in front of us
 153+ 8E1D 78                         ld a,b            ;get our depth
 154+ 8E1E C3 2D 8E                   jp end_loop       ;exit routine
 155+ 8E21
 156+ 8E21
 157+ 8E21              ;###########################################################
 158+ 8E21
 159+ 8E21 78           cont_9        ld a,b
 160+ 8E22 FE 06                      cp 6              ;only do a max of 6 loops as
 161+ 8E24 19                         add hl,de         ;now jump to next location in front of
 162+ 8E25 20 A0                      jr nz,loop2
 163+ 8E27 C3 2D 8E                   jp end_loop
 164+ 8E2A                      ;we have hit a wall or 6 loops
 165+ 8E2A
 166+ 8E2A 06 FF        end_loop2:    ld b,255          ;we are here as we are at the end wall
 167+ 8E2C                                              ;top and bottom of the maze so make our
 168+ 8E2C                                              ;depth 0
 169+ 8E2C 04           end_loop1:    inc b
 170+ 8E2D
 171+ 8E2D              end_loop:
 172+ 8E2D              ;first check if we hit an end wall - our maxview flag will =0
 173+ 8E2D 3A 03 FA                   ld a,(flags)
 174+ 8E30 CB 47                      bit 0,a
 175+ 8E32 C2 39 8E                   jp nz,cont_8      ;continue on if not 0
 176+ 8E35 78                         ld a,b
 177+ 8E36 32 02 FA                   ld (maxview),a    ;if it is make maxview 0
 178+ 8E39              cont_8:
 179+ 8E39              ;check if b=255, if so, make it 0
 180+ 8E39 04                         inc b
 181+ 8E3A CA 3E 8E                   jp z,here1
 182+ 8E3D 05                         dec b             ;put back original value
 183+ 8E3E 78           here1:        ld a,b
 184+ 8E3F 32 06 FA                   ld (depth),a         ; -save how far we can see
 185+ 8E42 ED 53 09 FA                ld (de_count),de     ;save the de value for adding / subtracting later
 186+ 8E46 22 25 FA                   ld (furthest_point),hl
 187+ 8E49 C9                         ret
 188+ 8E4A
 189+ 8E4A              west2:
 190+ 8E4A 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the left
 191+ 8E4D C3 B8 8D                   jp check_dist
 192+ 8E50
 193+ 8E50              north2:
 194+ 8E50 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind
 195+ 8E53 C3 B8 8D                   jp check_dist
 196+ 8E56              south2:
 197+ 8E56 11 10 00                   ld de, $0010      ; (+16) to go to next line to the left
 198+ 8E59 C3 B8 8D                   jp check_dist
 199+ 8E5C
 200+ 8E5C C9                         ret
 201+ 8E5D
 202+ 8E5D
 203+ 8E5D              ;############################################
 204+ 8E5D              ; ld de with the value to use to check the walls in front
 205+ 8E5D              ; or the sides of the player
 206+ 8E5D              ;############################################
 207+ 8E5D
 208+ 8E5D              ; reg a must contain the direction you want to look at
 209+ 8E5D
 210+ 8E5D              load_de:
 211+ 8E5D 3A 08 FA                 ld a,(player_dir)     ; get player direction
 212+ 8E60              ; 00= north, 01=west, 02=south, 03=east
 213+ 8E60
 214+ 8E60              ;if 0 decrease by -16 n
 215+ 8E60              ;if 1 decrease by -1  w
 216+ 8E60              ;if 2 increase by +16 s
 217+ 8E60              ;if 3 increase by +1  e
 218+ 8E60
 219+ 8E60              ;when checking distance, if you are looking south and your current location
 220+ 8E60              ;is >240 then you are at the south wall.
 221+ 8E60
 222+ 8E60
 223+ 8E60              ;if you are at the top of the maze facing north, and you current location
 224+ 8E60              ; is <16 you are at the far north wall of the maze
 225+ 8E60
 226+ 8E60              ;for east and west you can detect a wall is $80 except for 255 (bottom
 227+ 8E60              ; right) as the next  right location is outside the maze.
 228+ 8E60
 229+ 8E60              ; find out how far away we are from a wall
 230+ 8E60                      ;are we facing north?
 231+ 8E60 FE 00                      cp 0
 232+ 8E62 C2 77 8E                   jp nz,de_1
 233+ 8E65 11 FF FF                   ld de, $ffff  ; (-1) to go to the left of north
 234+ 8E68 ED 53 0B FA                ld (left),de
 235+ 8E6C 11 01 00                   ld de, $0001  ; (+1) to go to next line right  - north
 236+ 8E6F ED 53 0D FA                ld (right),de
 237+ 8E73 11 10 00                   ld de, $0010  ; (+16) to go to next line behind - north
 238+ 8E76 C9                         ret
 239+ 8E77
 240+ 8E77 FE 01        de_1:         cp 1          ;west
 241+ 8E79 C2 8E 8E                   jp nz,de_2
 242+ 8E7C 11 10 00                   ld de, $0010  ; (+16) to go to next line to the left - west
 243+ 8E7F ED 53 0B FA                ld (left),de
 244+ 8E83 11 F0 FF                   ld de, $fff0  ; (-16) to go to next line to the right - west
 245+ 8E86 ED 53 0D FA                ld (right),de
 246+ 8E8A 11 01 00                   ld de, $0001  ; (+1) to go to next line behind - west
 247+ 8E8D C9                         ret
 248+ 8E8E
 249+ 8E8E FE 02        de_2:         cp 2          ; south
 250+ 8E90 C2 A5 8E                   jp nz,de_3
 251+ 8E93 11 01 00                   ld de, $001  ; (+1) to go to next line to the left - south
 252+ 8E96 ED 53 0B FA                ld (left),de
 253+ 8E9A 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the right - south
 254+ 8E9D ED 53 0D FA                ld (right),de
 255+ 8EA1 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind - south
 256+ 8EA4 C9                         ret
 257+ 8EA5
 258+ 8EA5                            ;we must be facing east if we get here
 259+ 8EA5 11 F0 FF     de_3:         ld de, $fff0      ; (-16) to go to next line left - east
 260+ 8EA8 ED 53 0B FA                ld (left),de
 261+ 8EAC 11 10 00                   ld de, $0010      ; (+16) to go to next line right - east
 262+ 8EAF ED 53 0D FA                ld (right),de
 263+ 8EB3 11 FF FF                   ld de, $ffff      ; (-1) to go to next line behind - east
 264+ 8EB6 C9                         ret
 265+ 8EB7
 266+ 8EB7
 267+ 8EB7              ;#######################################################
 268+ 8EB7              ;load walk - load de with the amount to jump in the maze
 269+ 8EB7              ;as we walk forward
 270+ 8EB7              ;#######################################################
 271+ 8EB7
 272+ 8EB7              load_walk:
 273+ 8EB7 3A 08 FA                   ld a,(player_dir)   ;find out which way we are looking
 274+ 8EBA
 275+ 8EBA                            ;are we facing north?
 276+ 8EBA FE 00                      cp 0
 277+ 8EBC C2 C3 8E                   jp nz,de1
 278+ 8EBF 11 F0 FF                   ld de, $fff0 ; (-16) to go to next line behind - north
 279+ 8EC2 C9                         ret
 280+ 8EC3
 281+ 8EC3 FE 01        de1:          cp 1          ;west
 282+ 8EC5 C2 CC 8E                   jp nz,de2
 283+ 8EC8 11 FF FF                   ld de, $ffff  ; (-1) to go to next line behind - west
 284+ 8ECB C9                         ret
 285+ 8ECC
 286+ 8ECC FE 02        de2:          cp 2          ; south
 287+ 8ECE C2 D5 8E                   jp nz,de3
 288+ 8ED1 11 10 00                   ld de, $0010     ; (+16) to go to next line behind - south
 289+ 8ED4 C9                         ret
 290+ 8ED5
 291+ 8ED5                            ;we must be facing east if we get here
 292+ 8ED5 11 01 00     de3:          ld de, $0001      ; (+1) to go to next line behind - east
 293+ 8ED8 C9                         ret
 294+ 8ED9
 295+ 8ED9
 296+ 8ED9
 297+ 8ED9              ;#################################################################################
 298+ 8ED9              ;DOOR & SWITCH DRAWING ROUTINES
 299+ 8ED9
 300+ 8ED9              ;#################################################################################
 301+ 8ED9              ;see if we need to draw an open or closed door
 302+ 8ED9
 303+ 8ED9              ; show door type = 0 = front, 1 = side
 304+ 8ED9
 305+ 8ED9              draw_door:   ;check to see if we need to show the exit door
 306+ 8ED9                           ;door will always face NORTH.
 307+ 8ED9 AF                        xor a                  ;make reg a zero to say no door
 308+ 8EDA 32 2A FA                  ld (show_exit),a
 309+ 8EDD                           ;are we facing south?
 310+ 8EDD 3A 08 FA                  ld a,(player_dir)
 311+ 8EE0 D6 02                     sub 2                  ;2 = south
 312+ 8EE2 20 28                     jr nz,check_east      ;if not check if door is to our right hand side
 313+ 8EE4                           ;we must be facing south and be in front of the door
 314+ 8EE4                           ;dec a
 315+ 8EE4                           ;ld (show_exit),a
 316+ 8EE4 2A 00 FA                  ld hl,(player_pos)
 317+ 8EE7 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 318+ 8EEA 19                        add hl,de
 319+ 8EEB 7E                        ld a,(hl)
 320+ 8EEC FE C0                     cp _me                 ;is it our DOOR?
 321+ 8EEE 20 1C                     jr nz,check_east      ;if not check if door is to our right hand side
 322+ 8EF0                           ;YES its a door - so draw it - but only if we are looking south
 323+ 8EF0 3A 2B FA                  ld a,(switch_pulled)
 324+ 8EF3 A7                        and a
 325+ 8EF4 28 0B                     jr z,not_open
 326+ 8EF6 CD 65 85                  call  draw_exit_door_open
 327+ 8EF9                           ;print the door message
 328+ 8EF9 DD 21 63 82               ld ix,message_leave
 329+ 8EFD CD CB 81                  CALL print_message
 330+ 8F00 C9                        ret
 331+ 8F01 CD A1 83     not_open:    call draw_exit_door_closed
 332+ 8F04
 333+ 8F04                           ;print the door message
 334+ 8F04 DD 21 2F 82               ld ix,message_closed        ;exit_closed
 335+ 8F08 CD CB 81                  CALL print_message
 336+ 8F0B C9                        ret
 337+ 8F0C
 338+ 8F0C              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 339+ 8F0C              check_east:
 340+ 8F0C                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 341+ 8F0C                           ; so we have to be facing EAST
 342+ 8F0C 3A 08 FA                  ld a,(player_dir)
 343+ 8F0F D6 03                     sub 3              ;EAST = 3
 344+ 8F11 C0                        ret nz             ;exit as theres no door to our right
 345+ 8F12
 346+ 8F12 2A 00 FA                  ld hl,(player_pos)
 347+ 8F15 23                        inc hl             ;move test point to 1 place in front of us
 348+ 8F16 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 349+ 8F19 19                        add hl,de
 350+ 8F1A 7E                        ld a,(hl)
 351+ 8F1B FE C0                     cp _me             ;;is it our DOOR?
 352+ 8F1D C0                        ret nz
 353+ 8F1E                           ;there IS a door and it will always face NORTH and be on our right
 354+ 8F1E                           ;yes its our door - so draw it
 355+ 8F1E
 356+ 8F1E                           ;determine if its open or closed
 357+ 8F1E 3A 2B FA                  ld a,(switch_pulled)
 358+ 8F21 A7                        and a
 359+ 8F22 20 04                     jr nz,_open           ;0=closed 1 = open
 360+ 8F24 CD E5 86                  call draw_door_right_closed
 361+ 8F27 C9                        ret
 362+ 8F28 CD CF 87     _open:       call draw_door_right_open
 363+ 8F2B C9                        ret
 364+ 8F2C
 365+ 8F2C              ;#########################################################################################
 366+ 8F2C              ;SWITCH Drawing Routine - I am being very lazy here and copying the code from the door
 367+ 8F2C              ;drawing as its the same thing to do for both the door and switch and  cant be bothered atm to
 368+ 8F2C              ;modify the door routine and save bytes! (nov 2020)
 369+ 8F2C              ;-----------------------------------------------------------------------------------------
 370+ 8F2C
 371+ 8F2C              draw_switch:
 372+ 8F2C
 373+ 8F2C               ;check to see if we need to show the Switch
 374+ 8F2C                           ;switch will always face NORTH.
 375+ 8F2C                         ;  xor a                  ;make reg a zero to say no switch
 376+ 8F2C                         ;  ld (show_switch),a
 377+ 8F2C                           ;are we facing south?
 378+ 8F2C
 379+ 8F2C 3A 08 FA                  ld a,(player_dir)
 380+ 8F2F D6 02                     sub 2                  ;2 = south
 381+ 8F31 20 21                     jr nz,check_sw_east      ;if not check if switch is to our right hand side
 382+ 8F33 2A 00 FA                  ld hl,(player_pos)
 383+ 8F36 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 384+ 8F39 19                        add hl,de
 385+ 8F3A 7E                        ld a,(hl)
 386+ 8F3B FE E0                     cp _ms                 ;is it our SWITCH?
 387+ 8F3D 20 15                     jr nz,check_sw_east      ;if not check if the SWITCH is to our right hand side
 388+ 8F3F                           ;YES its a switch - so draw it - but only if we are looking south
 389+ 8F3F 3A 2B FA                  ld a,(switch_pulled)
 390+ 8F42 A7                        and a
 391+ 8F43 28 0B                     jr z,switch_off
 392+ 8F45 CD 15 89                  call  draw_switch_on
 393+ 8F48                           ;print the switch on message
 394+ 8F48 DD 21 48 82               ld ix,message_switchon
 395+ 8F4C CD CB 81                  CALL print_message
 396+ 8F4F C9                        ret
 397+ 8F50
 398+ 8F50 CD 95 88     switch_off:  call draw_switch_off
 399+ 8F53 C9                        ret
 400+ 8F54
 401+ 8F54              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 402+ 8F54              check_sw_east:
 403+ 8F54                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 404+ 8F54                           ; so we have to be facing EAST
 405+ 8F54 3A 08 FA                  ld a,(player_dir)
 406+ 8F57 D6 03                     sub 3              ;EAST = 3
 407+ 8F59 C0                        ret nz             ;exit as theres no door to our right
 408+ 8F5A
 409+ 8F5A 2A 00 FA                  ld hl,(player_pos)
 410+ 8F5D 23                        inc hl             ;move test point to 1 place in front of us
 411+ 8F5E 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 412+ 8F61 19                        add hl,de
 413+ 8F62 7E                        ld a,(hl)
 414+ 8F63 FE E0                     cp _ms             ;;is it our DOOR?
 415+ 8F65 C0                        ret nz
 416+ 8F66                           ;there IS a door and it will always face NORTH and be on our right
 417+ 8F66                           ;yes its our door - so draw it
 418+ 8F66
 419+ 8F66                           ;determine if its open or closed
 420+ 8F66 3A 2B FA                  ld a,(switch_pulled)
 421+ 8F69 A7                        and a
 422+ 8F6A 20 04                     jr nz,open_a           ;0=closed 1 = open
 423+ 8F6C CD A4 89                  call draw_switch_right_off
 424+ 8F6F C9                        ret
 425+ 8F70 CD 68 8A     open_a:      call draw_switch_right_on
 426+ 8F73 C9                        ret
 427+ 8F74
 428+ 8F74
 429+ 8F74
# file closed: src/3-rd3dmazeV6.asm
 456  8F74                  INCLUDE "4-rd3dmazeV6.asm" ; draw left side of maze
# file opened: src/4-rd3dmazeV6.asm
   1+ 8F74
   2+ 8F74              ;============================================
   3+ 8F74              ;start to draw the maze from current location
   4+ 8F74              ;============================================
   5+ 8F74
   6+ 8F74
   7+ 8F74              draw_left_side:
   8+ 8F74
   9+ 8F74
  10+ 8F74
  11+ 8F74              ;       (depth) will hold how far we can see - max 6 squares in front of our view
  12+ 8F74
  13+ 8F74              ;              ld hl,(player_pos)    ;get player position
  14+ 8F74
  15+ 8F74              ;              ld a,l
  16+ 8F74                      ; if l=255  we are at the bottom right hand corner facing east to a end wall
  17+ 8F74                      ; if l>240 we are at the south wall
  18+ 8F74                      ; if l<16 we are at the north wall
  19+ 8F74
  20+ 8F74
  21+ 8F74              ;how do i implement a less-than/greater-than test in assembly?
  22+ 8F74
  23+ 8F74              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
  24+ 8F74              ;a and the argument were equal, else if the carry is set the argument was greater,
  25+ 8F74              ;and finally, if neither is set, then a must be greater
  26+ 8F74              ;(cp does nothing to the registers, only the f (flag) register is changed).
  27+ 8F74
  28+ 8F74              ;we need to draw from the furthest distance so
  29+ 8F74              ;point hl to furthest position - only need to use l reg in the subtraction
  30+ 8F74              ;              ld a,l
  31+ 8F74              ;              sub a,b           ;will never be >255 or less than 1
  32+ 8F74              ;hl now points to furthest visible point in front of the player
  33+ 8F74
  34+ 8F74
  35+ 8F74              ;no matter what, always draw layer 6 view so theres always a wall in front of us
  36+ 8F74
  37+ 8F74              ;        ld   de,$C177
  38+ 8F74              ;        ld   a,_topblack
  39+ 8F74              ;;        ld   a,_topwhitebottomchequer
  40+ 8F74              ;        ld   (de),a                             ; insert the top of the wall face.
  41+ 8F74              ;        ld   hl,$0021
  42+ 8F74              ;        add  hl,de                              ; advance to the next row of the display file.
  43+ 8F74              ;        ld   (hl),_bottomblack        ; insert the bottom of the wall face.
  44+ 8F74              ;;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
  45+ 8F74
  46+ 8F74              ;draw a complete line of chequerboard to emulate seeing the outside
  47+ 8F74              ;maze wall regardless of what blocks are seen.
  48+ 8F74
  49+ 8F74 21 6A C1             ld hl,$c16A
  50+ 8F77 11 6B C1             ld de,$C16b              ; offset to row 11, col 0
  51+ 8F7A 01 19 00             ld bc,25
  52+ 8F7D                    ; ld (hl),_topwhitebottomchequer
  53+ 8F7D 36 A2                ld (hl),_bottomblack        ; insert the bottom of the wall face.
  54+ 8F7F
  55+ 8F7F ED B0                ldir
  56+ 8F81 21 8B C1             ld hl,$c18b
  57+ 8F84 11 8C C1             ld de,$C18c              ; offset to row 12, col 0
  58+ 8F87 01 19 00             ld bc,25
  59+ 8F8A                    ; ld (hl),_topchequerbottomwhite
  60+ 8F8A 36 A3                ld (hl),_topblack        ; insert the bottom of the wall face.
  61+ 8F8C ED B0                ldir
  62+ 8F8E
  63+ 8F8E              ;now draw the rest of the left side
  64+ 8F8E
  65+ 8F8E 3A 06 FA                   ld a,(depth)
  66+ 8F91 FE 06                      cp 6
  67+ 8F93 CA B3 8F                   jp z,draw_6	;just draw end middle block perhaps??
  68+ 8F96 FE 05                      cp 5
  69+ 8F98 CA F7 8F                   jp z,draw_5	;only need to draw 3 block + 1 part
  70+ 8F9B FE 04                      cp 4
  71+ 8F9D CA A1 91                   jp z,draw_4	;only need to draw 2 block + 1 part
  72+ 8FA0 FE 03                      cp 3
  73+ 8FA2 CA BA 93                   jp z,draw_3	;only need to draw 1 block + 1 part
  74+ 8FA5 FE 02                      cp 2
  75+ 8FA7 CA 4C 95                   jp z,draw_2	;only need to draw 1 block
  76+ 8FAA FE 01                      cp 1
  77+ 8FAC CA 04 96                   jp z,draw_1	;only need to draw 1 block
  78+ 8FAF C3 AD 96                   jp draw_0		;only need to draw edge blocks
  79+ 8FB2              ;end of routine
  80+ 8FB2 C9                         ret
  81+ 8FB3
  82+ 8FB3              draw_6:
  83+ 8FB3
  84+ 8FB3              draw_layer_6:
  85+ 8FB3
  86+ 8FB3
  87+ 8FB3              ;now draw the maze starting at the furthest point we can see
  88+ 8FB3              ; i.e. the middle of the display
  89+ 8FB3
  90+ 8FB3              ; draw section 6
  91+ 8FB3              ; --------------
  92+ 8FB3              ; hl=maze location being drawn.
  93+ 8FB3              ; now determine what to draw for this section.
  94+ 8FB3
  95+ 8FB3 2A 25 FA             ld hl,(furthest_point)
  96+ 8FB6 CD 5D 8E             call load_de
  97+ 8FB9 19                   add hl,de
  98+ 8FBA 22 25 FA             ld (furthest_point),hl  ;increment for the next layer to draw
  99+ 8FBD
 100+ 8FBD 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
 101+ 8FC0 11 77 01             ld   de,$0177           ; offset to row 11 column 12 - the centre of the 3d view.
 102+ 8FC3 19                   add  hl,de
 103+ 8FC4 E5                   push hl                 ;save it
 104+ 8FC5
 105+ 8FC5 ED 5B 25 FA          ld   de,(furthest_point); retrieve the maze location.
 106+ 8FC9 EB                   ex   de,hl              ; transfer de to hl.
 107+ 8FCA
 108+ 8FCA ED 5B 09 FA          ld de,(de_count)
 109+ 8FCE 19                   add hl,de               ;get the block in front of us from the maze.
 110+ 8FCF
 111+ 8FCF              loop6:
 112+ 8FCF
 113+ 8FCF 7E                   ld a,(hl)
 114+ 8FD0 17                   rla
 115+ 8FD1 DA D7 8F             jp c,do_wall            ;bit 7 (128)
 116+ 8FD4
 117+ 8FD4 C3 ED 8F             jp do_no_wall         ; otherwise draw no wall
 118+ 8FD7
 119+ 8FD7
 120+ 8FD7              do_wall:
 121+ 8FD7                      ;check if bit 2 is set as thats an end wall
 122+ 8FD7                      ;and b must then be changed to 1 to stop drawing more than 1 wall.
 123+ 8FD7 17                   rla                     ;rotate next bit into carry.
 124+ 8FD8 D2 E1 8F             jp nc, draw7
 125+ 8FDB CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 126+ 8FDD 28 02                jr z,draw7
 127+ 8FDF 06 01                ld b,1                  ;set b so we exit on return
 128+ 8FE1
 129+ 8FE1 D1           draw7   pop de
 130+ 8FE2 3E A2                ld   a,_bottomblack
 131+ 8FE4 12                   ld   (de),a             ; insert the top of the wall.
 132+ 8FE5 21 21 00             ld   hl,$0021
 133+ 8FE8 19                   add  hl,de              ; advance to the next row of the display file.
 134+ 8FE9 36 A3                ld   (hl),_topblack     ; insert the bottom of the wall.
 135+ 8FEB 18 0A                jr draw_5              ; jump to draw layer 5
 136+ 8FED
 137+ 8FED              ; there is a wall so insert chequerboard for the wall face.
 138+ 8FED
 139+ 8FED              do_no_wall:
 140+ 8FED D1                   pop de
 141+ 8FEE                      ;push de
 142+ 8FEE 3E A2                ld   a,_bottomblack;_topwhitebottomchequer
 143+ 8FF0 12                   ld   (de),a                             ; insert the top of the wall face.
 144+ 8FF1 21 21 00             ld   hl,$0021
 145+ 8FF4 19                   add  hl,de                              ; advance to the next row of the display file.
 146+ 8FF5 36 A3                ld   (hl),_topblack;_topchequerbottomwhite        ; insert the bottom of the wall face.
 147+ 8FF7
 148+ 8FF7              ;now got to draw the 5th row of data
 149+ 8FF7
 150+ 8FF7
 151+ 8FF7              ;############################################
 152+ 8FF7              ;############################################
 153+ 8FF7              ;draw section 5 left
 154+ 8FF7              ;############################################
 155+ 8FF7              ;############################################
 156+ 8FF7
 157+ 8FF7              draw_5:
 158+ 8FF7              ;ret
 159+ 8FF7              ; hl=maze location being drawn.
 160+ 8FF7              ; now determine what to draw for this section.
 161+ 8FF7
 162+ 8FF7              ;first we need to decrement how far we can see to the layer
 163+ 8FF7              ;we are working on
 164+ 8FF7
 165+ 8FF7 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 166+ 8FFA
 167+ 8FFA CD 5D 8E             call load_de            ;get left and right and front jump into de reg
 168+ 8FFD 19                   add hl,de               ;jump backwards along the user view 1 space
 169+ 8FFE
 170+ 8FFE 22 25 FA             ld (furthest_point),hl ;re save it
 171+ 9001
 172+ 9001 11 FF FF             ld de,$ffff             ;to move the display position -1
 173+ 9004 ED 53 11 FA          ld (var4),de
 174+ 9008
 175+ 9008 ED 5B 0B FA          ld de,(left)
 176+ 900C
 177+ 900C              ;move the maze location pointer 1 to the left - used for all
 178+ 900C              ;remaining blocks to test if there is a wall there or not.
 179+ 900C
 180+ 900C 19                   add hl,de
 181+ 900D 22 15 FA             ld (var6),hl
 182+ 9010
 183+ 9010 ED 53 0F FA          ld (var3),de
 184+ 9014 11 75 01             ld   de,$0175           ; offset to row 11 column 10 - left of  centre of the 3d view.
 185+ 9017
 186+ 9017 CD 1D 90             call do_draw_5
 187+ 901A
 188+ 901A C3 A1 91              jp draw_4               ;now draw the 4th level
 189+ 901D
 190+ 901D              do_draw_5:
 191+ 901D
 192+ 901D 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
 193+ 9020 19                   add  hl,de
 194+ 9021
 195+ 9021
 196+ 9021              ; draw left half then right half of the display.
 197+ 9021
 198+ 9021 06 04                ld b,4                ; count for 4 columns left  of maze
 199+ 9023
 200+ 9023 ED 5B 15 FA          ld de,(var6); retrieve the maze location.
 201+ 9027
 202+ 9027
 203+ 9027
 204+ 9027              ;check if we are at the bottom right of the maze
 205+ 9027              ;if so, there is no wall after position 255 so point us to
 206+ 9027              ;position 240 and fake the wall!
 207+ 9027              ;;;        ld a,e
 208+ 9027              ;;;        cp 255
 209+ 9027              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 210+ 9027              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 211+ 9027
 212+ 9027
 213+ 9027              ;now move the maze pointer left (-1) 1 position
 214+ 9027              ;so we can read the type of walls to our left
 215+ 9027
 216+ 9027              cont_3:
 217+ 9027              ;*         push hl
 218+ 9027              ;*        ld hl,(left)
 219+ 9027              ;*        add hl,de
 220+ 9027              ;*        ex de,hl
 221+ 9027              ;*        pop hl
 222+ 9027
 223+ 9027 EB                   ex   de,hl              ; transfer de to hl.
 224+ 9028
 225+ 9028              ;       hl = furthest point in the maze
 226+ 9028              ;       de = d_file location to store byte to display
 227+ 9028
 228+ 9028              ;we have to load the first plot position with a corner bit to show
 229+ 9028              ;the end of the wall at the position we can see next to the center
 230+ 9028              ;plot position on section 6
 231+ 9028              ;then, while we draw the other blocks we can see we just want top and
 232+ 9028              ;bottom blacks pointed so will use var1 and var 2 to hold the
 233+ 9028              ;character block we need to print.
 234+ 9028
 235+ 9028
 236+ 9028 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 237+ 902A 32 04 FA             ld (var1),a
 238+ 902D 3C                   inc a
 239+ 902E 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 240+ 9030
 241+ 9030 32 05 FA             ld (var2),a             ;ld with bottom left char
 242+ 9033
 243+ 9033              loop8:
 244+ 9033 E5                   push hl
 245+ 9034
 246+ 9034
 247+ 9034              ;############################################################################
 248+ 9034              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 249+ 9034
 250+ 9034 3A 28 FA             ld a,(maze_highbyte)
 251+ 9037 BC                   cp h                    ;are we at the top part of the maze?
 252+ 9038 CA 6B 90             jp z,cont_1s
 253+ 903B                                              ;if we are on a different maze boundary
 254+ 903B                                              ;then draw a maze wall as we are the top
 255+ 903B                                              ;or north wall but maze data has no
 256+ 903B                                              ;wall data.
 257+ 903B              ;4 = 2nd left wall
 258+ 903B              ;3 = 2nd left wall
 259+ 903B              ;2 = 3rd left wall
 260+ 903B              ;1 = 4th left wall
 261+ 903B
 262+ 903B 78                   ld a,b                  ;our current wall counter
 263+ 903C FE 04                cp 4
 264+ 903E C2 49 90             jp nz,a5_1                 ;its not wall 4
 265+ 9041 3E 01                ld a,1
 266+ 9043 47                   ld b,a
 267+ 9044 C6 80                add a,128               ;make sure we set a wall!
 268+ 9046 C3 A1 90             jp draw_5S             ;jump straight to making an end wall
 269+ 9049
 270+ 9049 FE 03        a5_1:   cp 3
 271+ 904B C2 56 90             jp nz,a5_2             ;its not wall 3
 272+ 904E 3E 01                ld a,1
 273+ 9050 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 274+ 9051 C6 80                add a,128               ;make sure we set a wall!
 275+ 9053 C3 C8 90             jp do_2ndwall_l        ;draw the 2nd block to the left
 276+ 9056
 277+ 9056 FE 02        a5_2:   cp 2
 278+ 9058 C2 63 90             jp nz,a5_3             ;its not wall 3
 279+ 905B 3E 01                ld a,1
 280+ 905D 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 281+ 905E C6 80                add a,128               ;make sure we set a wall!
 282+ 9060 C3 08 91             jp do_3rdwall_l       ;draw the 2nd block to the left
 283+ 9063
 284+ 9063              ;a must = 1 if we get here.
 285+ 9063 3E 01        a5_3:   ld a,1
 286+ 9065 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 287+ 9066 C6 80                add a,128               ;make sure we set a wall!
 288+ 9068 C3 55 91             jp do_4thwall_l       ;draw the cnd block to the left
 289+ 906B
 290+ 906B              ;############################################################################
 291+ 906B
 292+ 906B              ;are we at a maze edge wall = clear flag?
 293+ 906B              cont_1s:
 294+ 906B 97                   sub a
 295+ 906C 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 296+ 906F
 297+ 906F
 298+ 906F 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 299+ 9070
 300+ 9070 FE 81                cp _mh                  ;maze_wall = 129
 301+ 9072 20 07                jr nz,cont9
 302+ 9074 F5                   push af
 303+ 9075 3E 01                ld a,1
 304+ 9077 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 305+ 907A F1                   pop af
 306+ 907B
 307+ 907B 17           cont9:  rla
 308+ 907C DA 8F 90             jp c,do_wall5            ;bit 7 (128)
 309+ 907F
 310+ 907F
 311+ 907F              go_back5:
 312+ 907F 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 313+ 9082 19                   add hl,de               ; holds current screen position
 314+ 9083 EB                   ex de,hl
 315+ 9084 E1                   pop hl
 316+ 9085 D5                   push de
 317+ 9086 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 318+ 908A 19                   add hl,de                ; go left 1 block in the maze
 319+ 908B D1                   pop de
 320+ 908C 10 A5                djnz loop8
 321+ 908E C9                   ret
 322+ 908F
 323+ 908F
 324+ 908F              ; there is not a wall so insert black to show that the location is too far away to see its detail.
 325+ 908F
 326+ 908F              do_wall5:
 327+ 908F
 328+ 908F              ;check if b=2 - if so we are not at a wall immediately next to our left
 329+ 908F              ;nor are we at an and wall. We are drawing the 2nd block to the left
 330+ 908F              ;b=3 for 3rd block to the left.
 331+ 908F
 332+ 908F 78                   ld a,b
 333+ 9090 D6 01                sub 1
 334+ 9092 CA 55 91             jp z,do_4thwall_l       ;draw the cnd block to the left
 335+ 9095
 336+ 9095 78                   ld a,b                  ;b is our loop count
 337+ 9096 D6 02                sub 2                   ;check if a=2
 338+ 9098 CA 08 91             jp z,do_3rdwall_l       ;draw the 2nd block to the left
 339+ 909B
 340+ 909B 78                   ld a,b
 341+ 909C D6 03                sub 3
 342+ 909E CA C8 90             jp z,do_2ndwall_l       ;draw the cnd block to the left
 343+ 90A1
 344+ 90A1
 345+ 90A1
 346+ 90A1              ;b must = 4 if we get here, so draw the first wall
 347+ 90A1
 348+ 90A1                        ;check if bit 2 is set as thats an end
 349+ 90A1                      ;and b must then be changed to 1 to stop drawing.
 350+ 90A1              draw_5S:
 351+ 90A1 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 352+ 90A3 28 04                jr z,draw8
 353+ 90A5
 354+ 90A5 97                   sub a                   ;we do NOT have an ouside maze wall
 355+ 90A6 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 356+ 90A9              ;b must be 1 if we get here!
 357+ 90A9
 358+ 90A9 D5           draw8:  push de
 359+ 90AA 3A 04 FA             ld   a,(var1)           ;holds _smallwall
 360+ 90AD 12                   ld   (de),a             ; insert the top of the wall.
 361+ 90AE
 362+ 90AE 1B                   dec de
 363+ 90AF 12                   ld   (de),a             ; insert the top of the wall.
 364+ 90B0 13                   inc de                  ;put plot position back to start of wall
 365+ 90B1
 366+ 90B1              ;now check if we need to draw a black side on the right
 367+ 90B1              ;by looking to the character to the right of the wall
 368+ 90B1              ;and if there is not a wall already drawn, then draw a
 369+ 90B1              ;black side
 370+ 90B1
 371+ 90B1 3E A9                ld a,_topleft5          ;draw the top left side
 372+ 90B3 13                   inc de                  ;jump ahead 1 char in the display
 373+ 90B4 12                   ld (de),a               ;draw a black and chevron side
 374+ 90B5 1B                   dec de                  ;go back 1 space again
 375+ 90B6
 376+ 90B6              ;NOW DO THE NEXT LINE BELOW
 377+ 90B6
 378+ 90B6              ;_x1:
 379+ 90B6 21 21 00             ld   hl,$0021           ;jump to the next line below
 380+ 90B9 19                   add  hl,de
 381+ 90BA 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 382+ 90BD 77                   ld   (hl),a             ; insert the bottom of the wall.
 383+ 90BE 2B                   dec hl
 384+ 90BF 77                   ld   (hl),a             ; insert the bottom of the wall.
 385+ 90C0 23                   inc hl
 386+ 90C1 23                   inc hl
 387+ 90C2 3E AB                ld a,_bottomleft5
 388+ 90C4 77                   ld (hl),a
 389+ 90C5
 390+ 90C5              ;_x2
 391+ 90C5 D1                    pop de
 392+ 90C6 18 B7                jr go_back5              ; jump back to main loop
 393+ 90C8
 394+ 90C8
 395+ 90C8              ;************************************
 396+ 90C8
 397+ 90C8              ;draw the wall for 2nd LEFT layer
 398+ 90C8
 399+ 90C8              ;***********************************
 400+ 90C8
 401+ 90C8              do_2ndwall_l:
 402+ 90C8
 403+ 90C8 D5                   push de                 ;save the current acreen position
 404+ 90C9
 405+ 90C9              ;1st check if theres a wall where we need to draw the black side
 406+ 90C9
 407+ 90C9 1B                   dec de
 408+ 90CA 1B                   dec de                  ;move 3 place left to position us correctly
 409+ 90CB
 410+ 90CB              ;now draw a red wall to the right of section 2
 411+ 90CB 13                   inc de
 412+ 90CC 3E B4                ld a,_smallwall
 413+ 90CE 12                   ld (de),a
 414+ 90CF 1B                   dec de
 415+ 90D0 12                   ld (de),a               ;draw 2nd one (4 wide)
 416+ 90D1 1B                   dec de
 417+ 90D2 12                   ld (de),a               ;draw 3rd one (4 wide)
 418+ 90D3
 419+ 90D3 13                   inc de
 420+ 90D4 13                   inc de
 421+ 90D5 13                   inc de
 422+ 90D6                               ;put us back to our start position ready
 423+ 90D6                                              ;to start drawing the black side
 424+ 90D6
 425+ 90D6              ;now check if we need to draw a black side on the right
 426+ 90D6              ;by looking to the character to the right of the wall
 427+ 90D6              ;and if there is not a wall already drawn, then draw a
 428+ 90D6              ;black side
 429+ 90D6
 430+ 90D6 13                   inc de
 431+ 90D7 1A                   ld a,(de)               ;read whats there
 432+ 90D8 FE B4                cp _smallwall           ;is it a wall
 433+ 90DA CA E4 90             jp z,_x1r_2_l           ;if yes, do NOT draw a black side.
 434+ 90DD 1B                   dec de
 435+ 90DE 3E 95                ld a,$95                ;draw top left side
 436+ 90E0 12                   ld (de),a               ;draw middle top bit
 437+ 90E1 3C                   inc a
 438+ 90E2 13                   inc de
 439+ 90E3 12                   ld (de),a               ;draw middle top bit
 440+ 90E4
 441+ 90E4
 442+ 90E4              ;top line done
 443+ 90E4
 444+ 90E4              ;now do the bottom line underneath
 445+ 90E4
 446+ 90E4              ;REMEMBER - 1 block is 2 8 bit squares at the section
 447+ 90E4              _x1r_2_l:
 448+ 90E4 1B                   dec de
 449+ 90E5 1B                   dec de
 450+ 90E6 1B                   dec de                  ;move left 3 places in the display
 451+ 90E7 21 21 00             ld  hl,$0021           ;jump to the next line below + 1 char right
 452+ 90EA 19                   add hl,de
 453+ 90EB
 454+ 90EB
 455+ 90EB              ;now draw a red wall to the right of section 2
 456+ 90EB 23                   inc hl
 457+ 90EC 3E B4                ld a,_smallwall
 458+ 90EE 77                   ld (hl),a
 459+ 90EF 2B                   dec hl
 460+ 90F0 77                   ld (hl),a
 461+ 90F1 2B                   dec hl
 462+ 90F2 77                   ld (hl),a               ;draw 3rd one (3 wide)
 463+ 90F3
 464+ 90F3 23                   inc hl
 465+ 90F4 23                   inc hl
 466+ 90F5 23                   inc hl
 467+ 90F6
 468+ 90F6              ;now check if we need to draw a black side on the left of the lower half wall
 469+ 90F6              ;do this by checking if the next block is already a wall just like above
 470+ 90F6
 471+ 90F6 23                   inc hl      ;look at the right block
 472+ 90F7 7E                   ld a,(hl)
 473+ 90F8 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 474+ 90FA CA 04 91             jp z,_x2r_2_l
 475+ 90FD 3E 98                ld a,$98            ;draw rightmost bottom
 476+ 90FF 2B                   dec hl
 477+ 9100 77                   ld (hl),a
 478+ 9101
 479+ 9101 3C                  inc a
 480+ 9102 23                   inc hl
 481+ 9103 77                   ld (hl),a
 482+ 9104
 483+ 9104 D1           _x2r_2_l  pop de
 484+ 9105 C3 7F 90             jp go_back5              ; jump back to main loop
 485+ 9108
 486+ 9108              ;##########################################
 487+ 9108
 488+ 9108              ;draw the wall for 3rd LEFT layer
 489+ 9108
 490+ 9108              ;##########################################
 491+ 9108
 492+ 9108              do_3rdwall_l:
 493+ 9108
 494+ 9108 D5                   push de                 ;save the current acreen position
 495+ 9109              ;1st check if theres a wall where we need to draw the black side
 496+ 9109
 497+ 9109 1B                  dec de
 498+ 910A 1B                   dec de
 499+ 910B 1B                   dec de
 500+ 910C 1B                   dec de
 501+ 910D 1B                   dec de
 502+ 910E 1B                   dec de
 503+ 910F
 504+ 910F
 505+ 910F              ;now draw a red wall to the left of section 2,  top half
 506+ 910F
 507+ 910F 3E B4                ld a,_smallwall;$8e                ;8e - 3rd wall graphic
 508+ 9111 12                   ld (de),a
 509+ 9112 13                   inc de
 510+ 9113 12                   ld (de),a
 511+ 9114 13                   inc de
 512+ 9115 12                   ld (de),a
 513+ 9116 13                   inc de
 514+ 9117 12                   ld (de),a               ;draw 4th one (4 wide)
 515+ 9118
 516+ 9118
 517+ 9118              ;now check if we need to draw a black side on the right
 518+ 9118              ;by looking to the character to the right of the wall
 519+ 9118              ;and if there is not a wall already drawn, then draw a
 520+ 9118              ;black side
 521+ 9118
 522+ 9118 13                   inc de
 523+ 9119 1A                   ld a,(de)               ;read whats there
 524+ 911A                     ; dec de                  ;put our pointer back to the original position
 525+ 911A FE B4                cp _smallwall           ;is it a wall
 526+ 911C CA 2C 91             jp z,_x1r_3l               ;if yes, do NOT draw a black side.
 527+ 911F 1B                   dec de
 528+ 9120 13                   inc de
 529+ 9121 13                   inc de
 530+ 9122 13                   inc de
 531+ 9123 3E C5                ld a,$c5             ;draw top right side
 532+ 9125 12                   ld (de),a
 533+ 9126 1B                   dec de
 534+ 9127 3C                   inc a
 535+ 9128 12                   ld (de),a
 536+ 9129 3C                   inc a
 537+ 912A 1B                   dec de
 538+ 912B 12                   ld (de),a
 539+ 912C
 540+ 912C              ;Top line done
 541+ 912C              ;now do the bottom line
 542+ 912C
 543+ 912C              _x1r_3l:
 544+ 912C 1B                   dec de
 545+ 912D 1B                   dec de
 546+ 912E 1B                   dec de
 547+ 912F 1B                   dec de
 548+ 9130
 549+ 9130 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 9133 19                   add  hl,de
 551+ 9134 3E B4                ld a,_smallwall;$8e
 552+ 9136 77                   ld (hl),a
 553+ 9137 23                   inc hl
 554+ 9138 77                   ld (hl),a
 555+ 9139 23                   inc hl
 556+ 913A 77                   ld (hl),a
 557+ 913B 23                   inc hl
 558+ 913C 77                   ld (hl),a
 559+ 913D
 560+ 913D 23                   inc hl
 561+ 913E
 562+ 913E
 563+ 913E              ;now check if we need to draw a black side on the left of the lower half wall
 564+ 913E              ;do this by checking if the next block is already a wall just like above
 565+ 913E
 566+ 913E 23                   inc hl      ;look at the right block
 567+ 913F 7E                   ld a,(hl)
 568+ 9140 2B                   dec hl
 569+ 9141 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 570+ 9143 CA 51 91             jp z,_x2r_3l
 571+ 9146 2B                   dec hl
 572+ 9147              ;inc hl
 573+ 9147 3E C3                ld a,$c3            ;draw leftmost bottom
 574+ 9149 23                   inc hl
 575+ 914A 77                   ld (hl),a
 576+ 914B 23                   inc hl
 577+ 914C 3D                   dec a
 578+ 914D 77                   ld (hl),a
 579+ 914E 23                   inc hl
 580+ 914F 3D                   dec a
 581+ 9150 77                   ld (hl),a
 582+ 9151
 583+ 9151 D1           _x2r_3l  pop de
 584+ 9152 C3 7F 90             jp go_back5              ; jump back to main loop
 585+ 9155
 586+ 9155              ;##########################################
 587+ 9155
 588+ 9155              ;draw the wall for 4th (and last!) LEFT layer
 589+ 9155
 590+ 9155              ;##########################################
 591+ 9155
 592+ 9155              do_4thwall_l:
 593+ 9155
 594+ 9155              ;draw top half of wall
 595+ 9155
 596+ 9155 D5                   push de                 ;save the current acreen position
 597+ 9156              ;1st check if theres a wall where we need to draw the black side
 598+ 9156 1B                   dec de
 599+ 9157 1B                   dec de
 600+ 9158 1B                   dec de
 601+ 9159 1B                   dec de
 602+ 915A 1B                   dec de
 603+ 915B 1B                   dec de
 604+ 915C              ;now draw a red wall to the right of section 2,  top half
 605+ 915C
 606+ 915C 3E B4                ld a,_smallwall;$8d
 607+ 915E 12                   ld (de),a
 608+ 915F 1B                   dec de
 609+ 9160 12                   ld (de),a
 610+ 9161 13                   inc de                  ;move print position back for black wall
 611+ 9162
 612+ 9162              ;now check if we need to draw a black side on the right
 613+ 9162              ;by looking to the character to the right of the wall
 614+ 9162              ;and if there is not a wall already drawn, then draw a
 615+ 9162              ;black side
 616+ 9162
 617+ 9162 13                   inc de                  ;jump left 1 char in the display
 618+ 9163 1A                   ld a,(de)               ;read whats there
 619+ 9164 1B                   dec de                  ;put our pointer back to the original position
 620+ 9165 FE B4                cp _smallwall;$8e                 ;is it a wall
 621+ 9167 CA 7B 91             jp z,_x1r_31_l               ;if yes, do NOT draw a black side.
 622+ 916A              ;        dec de
 623+ 916A 3E B9                ld a,$b9              ;draw top right side
 624+ 916C 13                   inc de
 625+ 916D 13                   inc de
 626+ 916E 13                   inc de
 627+ 916F 13                   inc de
 628+ 9170 12                   ld (de),a           ;draw 4 black sides
 629+ 9171 1B                   dec de
 630+ 9172 3C                   inc a
 631+ 9173 12                   ld (de),a
 632+ 9174 3C                   inc a
 633+ 9175 1B                   dec de
 634+ 9176 12                   ld (de),a
 635+ 9177 3C                   inc a
 636+ 9178 1B                   dec de
 637+ 9179 12                   ld (de),a
 638+ 917A
 639+ 917A 1B                   dec de              ;move to wall start
 640+ 917B
 641+ 917B
 642+ 917B              ;top line done
 643+ 917B
 644+ 917B              ;now do the bottom line underneath
 645+ 917B
 646+ 917B              _x1r_31_l
 647+ 917B 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 648+ 917E 19                   add  hl,de
 649+ 917F
 650+ 917F 3E B4                ld a,_smallwall;$8d
 651+ 9181 77                   ld (hl),a
 652+ 9182 2B                   dec hl
 653+ 9183 77                   ld (hl),a
 654+ 9184
 655+ 9184 23                   inc hl
 656+ 9185
 657+ 9185
 658+ 9185              ;now check if we need to draw a black side on the left of the lower half wall
 659+ 9185              ;do this by checking if the next block is already a wall just like above
 660+ 9185
 661+ 9185 23                   inc hl      ;look at the left block
 662+ 9186 7E                   ld a,(hl)
 663+ 9187 2B                   dec hl
 664+ 9188 FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 665+ 918A CA 9D 91             jp z,_x2r_31_l
 666+ 918D
 667+ 918D                   ;  dec hl
 668+ 918D 3E BD                ld a,$bd            ;draw leftmost bottom
 669+ 918F 23                   inc hl
 670+ 9190 23                   inc hl
 671+ 9191 23                   inc hl
 672+ 9192 23                   inc hl
 673+ 9193
 674+ 9193 77                   ld (hl),a
 675+ 9194 2B                   dec hl
 676+ 9195 3C                   inc a
 677+ 9196 77                   ld (hl),a
 678+ 9197 2B                   dec hl
 679+ 9198 3C                   inc a
 680+ 9199 77                   ld (hl),a
 681+ 919A 2B                   dec hl
 682+ 919B 3C                   inc a
 683+ 919C 77                   ld (hl),a
 684+ 919D
 685+ 919D D1           _x2r_31_l  pop de
 686+ 919E C3 7F 90             jp go_back5              ; jump back to main loop
 687+ 91A1
 688+ 91A1
 689+ 91A1              ;############################################
 690+ 91A1              ;############################################
 691+ 91A1              ;draw LEFT layer 4
 692+ 91A1              ;############################################
 693+ 91A1              ;############################################
 694+ 91A1
 695+ 91A1              draw_4
 696+ 91A1
 697+ 91A1              ; hl=maze location being drawn.
 698+ 91A1              ; now determine what to draw for this section.
 699+ 91A1
 700+ 91A1
 701+ 91A1 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 702+ 91A4
 703+ 91A4 CD 5D 8E             call load_de            ;get left and right and front jump into de reg
 704+ 91A7 19                   add hl,de               ;jump backwards along the user view 1 space
 705+ 91A8 22 25 FA             ld (furthest_point),hl  ;re save it
 706+ 91AB
 707+ 91AB              ;we should also move our pointer left to read where the walls are.
 708+ 91AB              ;this will be from this point onwards as we can see the blocks more fully
 709+ 91AB
 710+ 91AB 11 FF FF             ld de,$ffff              ;to move the printed position -3
 711+ 91AE ED 53 11 FA          ld (var4),de            ;as block is 3 chars wide
 712+ 91B2
 713+ 91B2              ;we need to move pointer 1 to the left for wall checking
 714+ 91B2 ED 5B 0B FA          ld de,(left)
 715+ 91B6 19                   add hl,de
 716+ 91B7 22 15 FA             ld (var6),hl ;re save it
 717+ 91BA
 718+ 91BA
 719+ 91BA ED 53 0F FA          ld (var3),de
 720+ 91BE 11 51 01             ld de,$0151            ; offset to row 10 column 16 - left of  centre of the 3d view.
 721+ 91C1 CD C7 91             call do_draw_4
 722+ 91C4
 723+ 91C4
 724+ 91C4 C3 BA 93             jp draw_3              ;now draw the 4th level
 725+ 91C7
 726+ 91C7              do_draw_4:
 727+ 91C7
 728+ 91C7 2A 67 81             ld hl,(d_file)         ; fetch the location of the display file.
 729+ 91CA 19                   add hl,de
 730+ 91CB 06 04                ld b,4                 ; count for 3 blocks left of display file
 731+ 91CD                                             ; 0 is not counted so loops 3 times
 732+ 91CD ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
 733+ 91D1 EB                   ex de,hl
 734+ 91D2
 735+ 91D2              ;       hl = furthest point in the maze
 736+ 91D2              ;       de = d_file location to store byte to display
 737+ 91D2
 738+ 91D2              loop9:
 739+ 91D2 E5                   push hl
 740+ 91D3
 741+ 91D3              ;#############################################################################
 742+ 91D3              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 743+ 91D3
 744+ 91D3 3A 28 FA             ld a,(maze_highbyte)
 745+ 91D6 BC                   cp h                    ;are weoutside of our maze?
 746+ 91D7 CA 0A 92             jp z,cont_5
 747+ 91DA
 748+ 91DA                       ;if we are on a different maze boundary
 749+ 91DA                                              ;then draw a maze wall as we are the top
 750+ 91DA                                              ;or north wall but maze data has no
 751+ 91DA                                              ;wall data.
 752+ 91DA
 753+ 91DA              ;4 = 1st LEFT wall
 754+ 91DA              ;3 = 2nd LEFT wall
 755+ 91DA              ;2 = 3rd LEFT wall
 756+ 91DA              ;1 = 4th LEFT wall
 757+ 91DA
 758+ 91DA 78                   ld a,b                  ;our current wall counter
 759+ 91DB FE 04                cp 4
 760+ 91DD C2 E8 91             jp nz,a4_1              ;its not a wall
 761+ 91E0 3E 01                ld a,1
 762+ 91E2 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 763+ 91E3 C6 80                add a,128               ;make sure we set a wall!
 764+ 91E5 C3 39 92             jp draw_9               ;draw the 1st block to the left
 765+ 91E8
 766+ 91E8              ;        ld a,b
 767+ 91E8 FE 03        a4_1:   cp 3
 768+ 91EA C2 F5 91             jp nz,a4_2              ;its not wall
 769+ 91ED 3E 01                ld a,1
 770+ 91EF 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 771+ 91F0 C6 80                add a,128               ;make sure we set a wall!
 772+ 91F2 C3 79 92             jp draw_9_2L           ;draw the 2nd block to the left
 773+ 91F5
 774+ 91F5 FE 02        a4_2:   cp 2
 775+ 91F7 C2 02 92             jp nz,a4_3              ;its not wall
 776+ 91FA 3E 01                ld a,1
 777+ 91FC 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 778+ 91FD C6 80                add a,128               ;make sure we set a wall!
 779+ 91FF C3 EB 92             jp draw_9_3L           ;draw the 3rd block to the left
 780+ 9202
 781+ 9202              ;a must = 1 if we get here.
 782+ 9202 3E 01        a4_3:   ld a,1
 783+ 9204 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 784+ 9205 C6 80                add a,128               ;make sure we set a wall!
 785+ 9207 C3 4A 93             jp draw_9_4L           ;draw the 4th block to the left
 786+ 920A
 787+ 920A              ;############################################################################
 788+ 920A
 789+ 920A
 790+ 920A              ;now check if we are on the south wall and frig it to draw the
 791+ 920A              ;walls we need.
 792+ 920A              ;reg a already contains l
 793+ 920A
 794+ 920A              ;cont_4s:
 795+ 920A
 796+ 920A
 797+ 920A              cont_5:
 798+ 920A 7E                   ld a,(hl)
 799+ 920B 17                   rla
 800+ 920C DA 1F 92             jp c,do_wall4            ;bit 7 (128)
 801+ 920F
 802+ 920F               ;       call do_no_wall4         ; otherwise draw no wall
 803+ 920F
 804+ 920F              go_back4:
 805+ 920F 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 806+ 9212 19                   add hl,de
 807+ 9213 EB                   ex de,hl
 808+ 9214 E1                   pop hl
 809+ 9215 D5                   push de
 810+ 9216 ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 811+ 921A 19                   add hl,de               ; move to the start of the next block to print
 812+ 921B                                              ;we need to move back 4 blocks
 813+ 921B                                              ;as the first block obscures the view
 814+ 921B                                              ;of the next 3 blocks.
 815+ 921B D1                   pop de
 816+ 921C 10 B4                djnz loop9
 817+ 921E C9                   ret
 818+ 921F
 819+ 921F              do_wall4:
 820+ 921F
 821+ 921F              draw_4s:
 822+ 921F
 823+ 921F              ;Draw wall based on b count
 824+ 921F
 825+ 921F              wall4L_start:
 826+ 921F
 827+ 921F 78                   ld a,b
 828+ 9220 D6 01                sub 1                   ;4th wall  to the left
 829+ 9222 CA 4A 93             jp z,draw_9_4L
 830+ 9225
 831+ 9225 78                   ld a,b
 832+ 9226 D6 02                sub 2                   ;3rd wall to the left
 833+ 9228 CA EB 92             jp z,draw_9_3L
 834+ 922B
 835+ 922B 78                   ld a,b
 836+ 922C D6 03                sub 3                   ;2nd wall immediately wall to the left
 837+ 922E CA 79 92             jp z,draw_9_2L
 838+ 9231
 839+ 9231 78                   ld a,b
 840+ 9232 D6 04                sub 4                   ;1st wall immediately wall to the left
 841+ 9234 CA 39 92             jp z,draw_9
 842+ 9237
 843+ 9237 E1                   pop hl
 844+ 9238 C9                   ret
 845+ 9239
 846+ 9239              draw_9:
 847+ 9239 C5                   push bc
 848+ 923A D5                   push de                 ;save our display pointer
 849+ 923B 06 04                ld b,4                  ;block is 4 blocks high
 850+ 923D 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 851+ 9240 1B                   dec de
 852+ 9241
 853+ 9241 3E B7        loop10: ld   a,_mediumwall_1      ;grey sides facing us
 854+ 9243 12                   ld (de),a               ; insert thepart of the wall.
 855+ 9244 13                   inc de
 856+ 9245 12                   ld (de),a               ;put grey side to our right
 857+ 9246 13                   inc de
 858+ 9247 12                   ld (de),a
 859+ 9248 13                   inc de
 860+ 9249 12                   ld (de),a
 861+ 924A 1B                   dec de
 862+ 924B 1B                   dec de
 863+ 924C 1B                   dec de                  ;go left 1 again
 864+ 924D EB                   ex de,hl
 865+ 924E 19                   add  hl,de              ; advance to the next row of the display file.
 866+ 924F EB                   ex de,hl
 867+ 9250 10 EF                djnz loop10             ;do this 3 times
 868+ 9252
 869+ 9252                      ;now draw the blank face
 870+ 9252 D1                   pop de                  ;back to our original position
 871+ 9253 D5                   push de
 872+ 9254 13                   inc de
 873+ 9255 13                   inc de                  ;move ahead 3 spaces in the display
 874+ 9256 13                   inc de
 875+ 9257              ;        inc de
 876+ 9257
 877+ 9257              ;check if the char to our right is a wall block.
 878+ 9257              ;if so, do not draw a black face as we need to hide it or it will
 879+ 9257              ;ovewrite the already drawn block
 880+ 9257
 881+ 9257 1A                   ld a,(de)
 882+ 9258 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 883+ 925A C2 61 92             jp nz,cont_1            ;there is no block so draw black edge
 884+ 925D D1                   pop de
 885+ 925E C1                   pop bc
 886+ 925F 18 AE                jr go_back4             ;otherwise quit this draw
 887+ 9261
 888+ 9261 EB           cont_1  ex  de,hl
 889+ 9262 11 21 00             ld de,$0021
 890+ 9265 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
 891+ 9267 77                   ld  (hl),a
 892+ 9268 19                   add hl,de
 893+ 9269 3E AF                ld  a,_black      ;triangle sloping to right bottom
 894+ 926B 77                   ld  (hl),a
 895+ 926C 19                   add hl,de
 896+ 926D 3E AF                ld  a,_black      ;triangle sloping to right bottom
 897+ 926F 77                   ld  (hl),a
 898+ 9270 19                   add hl,de
 899+ 9271
 900+ 9271 77                   ld  (hl),a
 901+ 9272 3E B0                ld  a,_topcorner1
 902+ 9274 77                   ld  (hl),a
 903+ 9275 D1                   pop de
 904+ 9276 C1                   pop bc
 905+ 9277 18 96                jr go_back4              ; jump back to main loop
 906+ 9279
 907+ 9279              ;************************************
 908+ 9279              ;*Draw the 2nd LEFT block of section 4
 909+ 9279              ;************************************
 910+ 9279
 911+ 9279              draw_9_2L:
 912+ 9279 C5                   push bc
 913+ 927A 21 FF FF             ld hl,$ffff                 ;move start point (-1) `to correct position
 914+ 927D 19                   add hl,de
 915+ 927E EB                   ex de,hl
 916+ 927F D5                   push de
 917+ 9280
 918+ 9280              ;now draw the 2nd wall itself
 919+ 9280 06 04                ld b,4                  ;block is 4 blocks high
 920+ 9282 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 921+ 9285 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 922+ 9287
 923+ 9287              loop10r_2L:
 924+ 9287 12                   ld (de),a             ; insert thepart of the wall.
 925+ 9288 1B                   dec de
 926+ 9289 12                   ld (de),a               ;put grey side to our right
 927+ 928A 1B                   dec de
 928+ 928B 12                   ld (de),a
 929+ 928C 1B                   dec de
 930+ 928D 12                   ld (de),a
 931+ 928E 1B                   dec de
 932+ 928F 12                   ld (de),a
 933+ 9290 13                   inc de
 934+ 9291 13                   inc de
 935+ 9292 13                   inc de
 936+ 9293 13                   inc de                  ;go left 1 again
 937+ 9294 EB                   ex de,hl
 938+ 9295 19                   add  hl,de              ; advance to the next row of the display file.
 939+ 9296 EB                   ex de,hl
 940+ 9297 10 EE                djnz loop10r_2L             ;do this 3 times
 941+ 9299
 942+ 9299                      ;now draw the blank face
 943+ 9299 D1                   pop de                  ;back to our original position
 944+ 929A D5                   push de
 945+ 929B 13                   inc de                  ;move left 3 space left in the display
 946+ 929C 13                   inc de
 947+ 929D 13                   inc de
 948+ 929E
 949+ 929E              ;check if the char to our right is a wall block.
 950+ 929E              ;if so, do not draw a black face as we need to hide it or it will
 951+ 929E              ;ovewrite the already drawn block
 952+ 929E
 953+ 929E 1A                   ld a,(de)
 954+ 929F FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 955+ 92A1 C2 A9 92             jp nz,cont_1r_2L           ;there is no block so draw black edge
 956+ 92A4 D1                   pop de
 957+ 92A5 C1                   pop bc
 958+ 92A6 C3 0F 92             jp go_back4             ;otherwise quit this draw
 959+ 92A9
 960+ 92A9              cont_1r_2L:
 961+ 92A9 EB                   ex  de,hl
 962+ 92AA 11 21 00             ld de,$0021
 963+ 92AD
 964+ 92AD              ;need to loop 2 times drawing 2 lots of 3 top
 965+ 92AD              ;& bottom chars- move down 1after 1st 3 top chars drawn
 966+ 92AD              ;
 967+ 92AD
 968+ 92AD 3E 02                ld a,2
 969+ 92AF 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 970+ 92B2
 971+ 92B2              ;loop for 2 black wall columns
 972+ 92B2 3E 03                ld a,3                  ;column start height
 973+ 92B4 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 974+ 92B7
 975+ 92B7 06 03                ld b,3                  ;loop 3 times for 3 columns
 976+ 92B9 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 977+ 92BC 3E 97                ld a,$97
 978+ 92BE 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 979+ 92C1
 980+ 92C1              loop10br_2L:
 981+ 92C1 C5                   push bc                 ;save count
 982+ 92C2 3A 04 FA             ld a,(var1)             ;column height
 983+ 92C5 47                   ld b,a                  ;holds the column height in chars
 984+ 92C6 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 985+ 92C9 F5                   push af                 ;save a for bottom corners
 986+ 92CA 77                   ld  (hl),a
 987+ 92CB
 988+ 92CB              loop10ar_2L:
 989+ 92CB 19                   add hl,de
 990+ 92CC 3E AF                ld  a,_black            ;black wall fill
 991+ 92CE 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 992+ 92CF 10 FA                djnz loop10ar_2L
 993+ 92D1
 994+ 92D1 F1                   pop af                  ;retrivetop corner
 995+ 92D2 3D                   dec a                   ;prep for next top corner
 996+ 92D3 32 05 FA             ld (var2),a             ;re-save it for next corner
 997+ 92D6 C6 04                add a,4                 ;get the correct char to print
 998+ 92D8 77                   ld  (hl),a              ;draw the bottom of the wall
 999+ 92D9
1000+ 92D9                      ;now change column count
1001+ 92D9 3A 04 FA             ld a,(var1)
1002+ 92DC C1                   pop bc
1003+ 92DD
1004+ 92DD 2A 13 FA             ld hl,(var5)
1005+ 92E0 2B                   dec hl                  ;move print position to the left
1006+ 92E1 22 13 FA             ld (var5),hl
1007+ 92E4
1008+ 92E4 10 DB                djnz loop10br_2L
1009+ 92E6
1010+ 92E6 D1                   pop de
1011+ 92E7 C1                   pop bc
1012+ 92E8 C3 0F 92             jp go_back4             ; jump back to main loop
1013+ 92EB
1014+ 92EB              ;#############################################
1015+ 92EB              ;*Draw the 3rd LEFT block of section 4
1016+ 92EB              ;#############################################
1017+ 92EB
1018+ 92EB              draw_9_3L:
1019+ 92EB C5                   push bc
1020+ 92EC D5                   push de                 ;save our display pointer
1021+ 92ED 06 04                ld b,4                  ;block is 4 blocks high
1022+ 92EF 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1023+ 92F2 11 4A C1             ld de,$C162-24              ;start of drawing
1024+ 92F5
1025+ 92F5              loop10r_3L:
1026+ 92F5 3E B7                ld a,_mediumwall_1      ;grey sides facing us
1027+ 92F7 12                   ld (de),a               ; insert thepart of the wall.
1028+ 92F8 EB                   ex de,hl
1029+ 92F9 19                   add  hl,de              ; advance to the next row of the display file.
1030+ 92FA EB                   ex de,hl
1031+ 92FB 10 F8                djnz loop10r_3L             ;do this 3 times
1032+ 92FD
1033+ 92FD                      ;now draw the blank face
1034+ 92FD D1                   pop de                  ;back to our original position
1035+ 92FE D5                   push de
1036+ 92FF
1037+ 92FF              ;check if the char to our right is a wall block.
1038+ 92FF              ;if so, do not draw a black face as we need to hide it or it will
1039+ 92FF              ;ovewrite the already drawn block
1040+ 92FF
1041+ 92FF 1A                   ld a,(de)
1042+ 9300 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1043+ 9302 C2 0A 93             jp nz,cont_1r_3L            ;there is no block so draw black edge
1044+ 9305
1045+ 9305 D1                   pop de
1046+ 9306 C1                   pop bc
1047+ 9307 C3 0F 92             jp go_back4             ;otherwise quit this draw
1048+ 930A
1049+ 930A              cont_1r_3L:
1050+ 930A EB                   ex de,hl
1051+ 930B 11 21 00             ld de,$0021
1052+ 930E 21 4B C1             ld hl,$c161-22
1053+ 9311
1054+ 9311              ;need to loop 2 times drawing 2 lots of 3 top
1055+ 9311              ;& bottom chars- move down 1after 1st 3 top chars drawn
1056+ 9311              ;
1057+ 9311
1058+ 9311              ;loop for 5 black wall columns
1059+ 9311 3E 03                ld a,3                  ;column start height
1060+ 9313 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
1061+ 9316
1062+ 9316 06 05                ld b,5                  ;loop 5 times for 3 columns
1063+ 9318 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1064+ 931B 3E CD                ld a,$cd ;91
1065+ 931D 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1066+ 9320
1067+ 9320              loop10br_2aL:
1068+ 9320 C5                   push bc                 ;save count
1069+ 9321 3A 04 FA             ld a,(var1)             ;column height
1070+ 9324 47                   ld b,a                  ;holds the column height in chars
1071+ 9325 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1072+ 9328 F5                   push af                 ;save a for bottom corners
1073+ 9329 77                   ld  (hl),a
1074+ 932A
1075+ 932A              loop10ar_2aL:
1076+ 932A 19                   add hl,de
1077+ 932B 3E AF                ld  a,_black            ;black wall fill
1078+ 932D 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1079+ 932E 10 FA                djnz loop10ar_2aL
1080+ 9330
1081+ 9330 F1                   pop af                  ;retrivetop corner
1082+ 9331 3D                   dec a                   ;prep for next top corner
1083+ 9332 32 05 FA             ld (var2),a             ;re-save it for next corner
1084+ 9335 C6 06                add a,6                 ;get the correct char to print
1085+ 9337 77                   ld  (hl),a              ;draw the bottom of the wall
1086+ 9338
1087+ 9338                      ;now change column count
1088+ 9338 3A 04 FA             ld a,(var1)
1089+ 933B C1                   pop bc
1090+ 933C
1091+ 933C 2A 13 FA             ld hl,(var5)
1092+ 933F 23                   inc hl                  ;move print position to the right
1093+ 9340 22 13 FA             ld (var5),hl
1094+ 9343
1095+ 9343 10 DB                djnz loop10br_2aL
1096+ 9345
1097+ 9345 D1                   pop de
1098+ 9346 C1                   pop bc
1099+ 9347 C3 0F 92             jp go_back4              ; jump back to main loop
1100+ 934A
1101+ 934A              ;#############################################
1102+ 934A              ;*Draw the 4th LEFT block of section 4
1103+ 934A              ;#############################################
1104+ 934A
1105+ 934A              ; we only need to draw 2 columns of black sides.
1106+ 934A
1107+ 934A              draw_9_4L:
1108+ 934A
1109+ 934A              ; we only need to draw up to 2 columns of black sides.
1110+ 934A
1111+ 934A
1112+ 934A C5                   push bc
1113+ 934B D5                   push de                 ;save our display pointer
1114+ 934C
1115+ 934C              ;check if the char to our left is a wall block.
1116+ 934C              ;if so, do not draw a black face as we need to hide it or it will
1117+ 934C              ;ovewrite the already drawn block
1118+ 934C
1119+ 934C 21 4A C1             ld hl,$C151-7              ;start of drawing
1120+ 934F 7E                   ld a,(hl)
1121+ 9350 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1122+ 9352 C2 5A 93             jp nz,cont_3L            ;there is no block so draw black edge
1123+ 9355
1124+ 9355 D1                   pop de
1125+ 9356 C1                   pop bc
1126+ 9357 C3 0F 92             jp go_back4             ;otherwise quit this draw
1127+ 935A
1128+ 935A              cont_3L:
1129+ 935A 11 21 00             ld de,33                ;to jump to next line below
1130+ 935D 3E CA                ld a,$ca                ;top of the wall
1131+ 935F E5                   push hl                 ;save for drawing 2nd black wall
1132+ 9360 77                   ld (hl),a               ;to cover up wall 5
1133+ 9361 19                   add hl,de               ;jump to next line
1134+ 9362 3E AF                ld a,_black
1135+ 9364 77                   ld (hl),a
1136+ 9365 19                   add hl,de
1137+ 9366 77                   ld (hl),a
1138+ 9367 19                   add hl,de
1139+ 9368 3E CF                ld a,$cf                ;draw bottom of the line
1140+ 936A 77                   ld (hl),a
1141+ 936B
1142+ 936B              ;now check if we need to cover wall 5 with a 2nd black line to the left
1143+ 936B              ;hl points to top of the 4 blocks
1144+ 936B E1                   pop hl                  ;restore our pointer in char ram
1145+ 936C 23                   inc hl                  ;go left 1 place
1146+ 936D E5                   push hl
1147+ 936E 19                   add hl,de               ;now we are at the wall 5 top position
1148+ 936F 7E                   ld a,(hl)
1149+ 9370 FE B4                cp _smallwall
1150+ 9372 E1                   pop hl
1151+ 9373 20 0B                jr nz,exit3L
1152+ 9375              ;draw the second wall over section 5 wall
1153+ 9375 36 C9                ld (hl),$c9             ;top of the wall
1154+ 9377 19                   add hl,de
1155+ 9378 36 AF                ld (hl),_black
1156+ 937A 19                   add hl,de
1157+ 937B 36 AF                ld (hl),_black
1158+ 937D 19                   add hl,de
1159+ 937E 36 CE                ld (hl),$ce             ;bottom of the wall
1160+ 9380
1161+ 9380 D1           exit3L:  pop de                  ;now exit
1162+ 9381 C1                   pop bc
1163+ 9382 C3 0F 92             jp go_back4
1164+ 9385
1165+ 9385              ;###################################################
1166+ 9385              ;not needed down here
1167+ 9385
1168+ 9385 C5                   push bc
1169+ 9386 D5                   push de                 ;save our display pointer
1170+ 9387
1171+ 9387              ;check if the char to our right is a wall block.
1172+ 9387              ;if so, do not draw a black face as we need to hide it or it will
1173+ 9387              ;ovewrite the already drawn block
1174+ 9387
1175+ 9387 21 4A C1             ld hl,$C151-7              ;start of drawing
1176+ 938A 7E                   ld a,(hl)
1177+ 938B FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1178+ 938D C2 95 93             jp nz,cont_3L_l            ;there is no block so draw black edge
1179+ 9390
1180+ 9390 D1                   pop de
1181+ 9391 C1                   pop bc
1182+ 9392 C3 0F 92             jp go_back4             ;otherwise quit this draw
1183+ 9395
1184+ 9395              cont_3L_l:
1185+ 9395 06 04                ld b,4                  ;block is 4 blocks high
1186+ 9397 3E CA                ld a,$ca
1187+ 9399 77                   ld (hl),a
1188+ 939A 23                   inc hl
1189+ 939B 3D                   dec a
1190+ 939C 77                   ld (hl),a
1191+ 939D
1192+ 939D              ;need 2 black walls now!
1193+ 939D 3E AF                ld a,_black
1194+ 939F 11 21 00             ld de,33;34                ;1 line width
1195+ 93A2
1196+ 93A2 CD B5 93             CALL black_wall_1         ;draw 2 black blocks
1197+ 93A5 13                   inc de                        ;jump to next line below
1198+ 93A6
1199+ 93A6 CD B5 93             CALL black_wall_1         ;draw 2 black blocks
1200+ 93A9 19                   add hl,de               ;jump to next line below
1201+ 93AA
1202+ 93AA
1203+ 93AA              ;top half done - so do bottom half - 2 blacks first
1204+ 93AA
1205+ 93AA              ;de already holds 34  -1 line plus 2 chars to the right
1206+ 93AA
1207+ 93AA 3E CE                ld a,$ce
1208+ 93AC 77                   ld (hl),a
1209+ 93AD 2B                   dec hl
1210+ 93AE 3C                   inc a
1211+ 93AF 77                   ld (hl),a
1212+ 93B0
1213+ 93B0 D1                   pop de
1214+ 93B1 C1                   pop bc
1215+ 93B2 C3 0F 92             jp go_back4
1216+ 93B5
1217+ 93B5              ;draw 2 black walls across 1 line
1218+ 93B5              black_wall_1:
1219+ 93B5 19                   add hl,de      ;jump 1 line below
1220+ 93B6 77                   ld (hl),a
1221+ 93B7 2B                   dec hl
1222+ 93B8 77                   ld (hl),a
1223+ 93B9 C9                   ret
1224+ 93BA
1225+ 93BA
1226+ 93BA
1227+ 93BA              ;#############################################
1228+ 93BA              ;#############################################
1229+ 93BA              ;# draw LEFT wall 3
1230+ 93BA              ;#############################################
1231+ 93BA              ;#############################################
1232+ 93BA
1233+ 93BA              draw_3:
1234+ 93BA              ;ret
1235+ 93BA              ; hl=maze location being drawn.
1236+ 93BA              ; now determine what to draw for this section.
1237+ 93BA
1238+ 93BA
1239+ 93BA 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1240+ 93BD
1241+ 93BD CD 5D 8E             call load_de            ;get left and right and front jump into de reg
1242+ 93C0
1243+ 93C0 19                   add hl,de               ;jump backwards along the user view 1 space
1244+ 93C1 22 25 FA             ld (furthest_point),hl ;re save it
1245+ 93C4
1246+ 93C4 11 FF FF             ld de,$ffff             ;to move the display position -1
1247+ 93C7 ED 53 11 FA          ld (var4),de
1248+ 93CB
1249+ 93CB ED 5B 0B FA          ld de,(left)            ;move our check position left -1
1250+ 93CF 19                   add hl,de
1251+ 93D0 22 15 FA             ld (var6),hl
1252+ 93D3
1253+ 93D3
1254+ 93D3 ED 53 0F FA          ld (var3),de
1255+ 93D7 11 0A 01             ld de,$10a;10b           ; offset to row 8 column5 - left of  centre of the 3d view.
1256+ 93DA
1257+ 93DA              ;2nd block starts at $109 and is 3 wall chars wide
1258+ 93DA CD E0 93             call do_draw_3
1259+ 93DD
1260+ 93DD C3 4C 95             jp draw_2           ;now draw the 2nd level
1261+ 93E0
1262+ 93E0              do_draw_3:
1263+ 93E0
1264+ 93E0 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
1265+ 93E3 19                   add  hl,de
1266+ 93E4
1267+ 93E4
1268+ 93E4              ; draw left half of the display.
1269+ 93E4
1270+ 93E4 06 03                ld b,3                 ; count for 1 blocks left of display file
1271+ 93E6 ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
1272+ 93EA
1273+ 93EA
1274+ 93EA EB                   ex   de,hl              ; transfer de to hl.
1275+ 93EB
1276+ 93EB              ;       hl = furthest point in the maze
1277+ 93EB              ;       de = d_file location to store byte to display
1278+ 93EB
1279+ 93EB              loop11:
1280+ 93EB E5                   push hl
1281+ 93EC
1282+ 93EC              ;################################################################
1283+ 93EC
1284+ 93EC              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1285+ 93EC              ;and stop drrawing anything else.
1286+ 93EC
1287+ 93EC 3A 28 FA             ld a,(maze_highbyte)
1288+ 93EF BC                   cp h                    ;are we at the top part of the maze?
1289+ 93F0 CA 17 94             jp z,cont_3s
1290+ 93F3                                              ;if we are on a different maze boundary
1291+ 93F3                                              ;then draw a maze wall as we are the top
1292+ 93F3                                              ;or north wall but maze data has no
1293+ 93F3                                              ;wall data.
1294+ 93F3              ;see which wall we are at and draw the correct one before jumping out
1295+ 93F3              ;of the loop and stop drawing past the maze wall.
1296+ 93F3
1297+ 93F3              ;3 = first left wall
1298+ 93F3              ;2 = 2nd left wall
1299+ 93F3              ;1 = 4rd left wall
1300+ 93F3
1301+ 93F3 78                   ld a,b                  ;our current wall counter
1302+ 93F4 D6 03                sub 3
1303+ 93F6 C2 01 94             jp nz,a3                 ;its not wall 1
1304+ 93F9 3E 01                ld a,1
1305+ 93FB 47                   ld b,a
1306+ 93FC C6 80                add a,128               ;make sure we set a wall!
1307+ 93FE C3 3C 94             jp draw_10             ;jump straight to making an end wall
1308+ 9401
1309+ 9401
1310+ 9401 78           a3:     ld a,b                  ;our current wall counter
1311+ 9402 D6 02                sub 2
1312+ 9404 C2 0F 94             jp nz,a3_1                 ;its not wall 1
1313+ 9407 3E 01                ld a,1
1314+ 9409 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1315+ 940A C6 80                add a,128               ;make sure we set a wall!
1316+ 940C C3 AE 94             jp draw_10_2L	       	;draw the 2nd wall to the right
1317+ 940F
1318+ 940F 3E 01        a3_1:   ld a,1
1319+ 9411 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1320+ 9412 C6 80                add a,128               ;make sure we set a wall!
1321+ 9414 C3 20 95             jp draw_10_3L	       	;draw the 2nd wall to the right
1322+ 9417
1323+ 9417              ;################################################################
1324+ 9417
1325+ 9417
1326+ 9417              ;now check if we are on the south wall and frig it to draw the
1327+ 9417              ;walls we need.
1328+ 9417              ;reg a already contains l
1329+ 9417
1330+ 9417              cont_3s:
1331+ 9417              ;        ld a,l
1332+ 9417              ;        cp $FA  ;250
1333+ 9417              ;        jp nz,cont_6
1334+ 9417              ;        ld l,240                ;fake it that we are at
1335+ 9417              ;        jp draw_10             ;the south wall
1336+ 9417
1337+ 9417
1338+ 9417 7E           cont_6: ld a,(hl)
1339+ 9418 17                   rla
1340+ 9419 DA 28 94             jp c,do_wall3            ;bit 7 (128)
1341+ 941C
1342+ 941C                     ; call do_no_wall3         ; otherwise draw no wall
1343+ 941C
1344+ 941C              go_back3:
1345+ 941C                    ;  ld hl,(var4)            ;used for left and right drawing
1346+ 941C                    ;  add hl,de               ; holds current screen position
1347+ 941C                    ;  ex de,hl
1348+ 941C              ;we move the start position of block number 2 to the left of the display
1349+ 941C              ;and although we overwrite the next block, we can still do the
1350+ 941C              ;check to see if a block is already drawn.
1351+ 941C
1352+ 941C                      ;dec de                  ;move our start print position
1353+ 941C                      ;dec de                  ;of block 2 back 3 spaces in the
1354+ 941C 1B                   dec de ;only 1 space back  ;display file
1355+ 941D E1                   pop hl
1356+ 941E D5                   push de
1357+ 941F ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1358+ 9423 19                   add hl,de                ; go left 1 block in the maze
1359+ 9424 D1                   pop de
1360+ 9425 10 C4                djnz loop11
1361+ 9427 C9                   ret
1362+ 9428              ;now do the 2nd position
1363+ 9428
1364+ 9428
1365+ 9428
1366+ 9428              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1367+ 9428
1368+ 9428              do_wall3:
1369+ 9428
1370+ 9428                      ;check if bit 2 is set as thats an end
1371+ 9428                      ;and b must then be changed to 1 to stop drawing.
1372+ 9428
1373+ 9428              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1374+ 9428              ;        jr z,draw_10
1375+ 9428              ;        ld b,1                  ;set b so we exit on return
1376+ 9428
1377+ 9428              ;now draw the wall based on bc value
1378+ 9428              ;wall3_start:
1379+ 9428
1380+ 9428
1381+ 9428 78                   ld a,b			               ;b is the loop count i.e # of walls to draw
1382+ 9429 D6 03               	sub 3			               ;3 = the wall imediately right
1383+ 942B CA 3C 94             jp z,draw_10          ;draw an end wall if blockid=16
1384+ 942E
1385+ 942E 78                   ld a,b
1386+ 942F D6 02                sub 2
1387+ 9431 CA AE 94             jp z,draw_10_2L         		;draw the 1st wall to the right
1388+ 9434
1389+ 9434 78                   ld a,b
1390+ 9435 D6 01                sub 1
1391+ 9437 CA 20 95             jp z,draw_10_3L	       	;draw the 2nd wall to the right
1392+ 943A
1393+ 943A E1                   pop hl                  ;nothing to draw so return
1394+ 943B C9                   ret
1395+ 943C
1396+ 943C
1397+ 943C              draw_10:
1398+ 943C C5                   push bc
1399+ 943D D5                   push de                 ;save our display pointer
1400+ 943E 1B                   dec de
1401+ 943F 1B                   dec de
1402+ 9440
1403+ 9440 06 08                ld b,8                  ;block is 8 blocks high
1404+ 9442 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1405+ 9445 3E B5                ld a, _mediumwall       ;wall on sides facing us
1406+ 9447 12           loop12: ld (de),a               ; insert the part of the wall.
1407+ 9448 13                   inc de
1408+ 9449 12                   ld (de),a               ; insert the part of the wall.
1409+ 944A 13                   inc de
1410+ 944B 12                   ld (de),a               ; insert the part of the wall.
1411+ 944C 13                   inc de
1412+ 944D 12                   ld (de),a               ; insert the part of the wall.
1413+ 944E 13                   inc de
1414+ 944F 12                   ld (de),a               ; insert the part of the wall.
1415+ 9450 13                   inc de
1416+ 9451 12                   ld (de),a               ; insert the part of the wall.
1417+ 9452 13                   inc de
1418+ 9453 12                   ld (de),a
1419+ 9454 13                   inc de
1420+ 9455 12                   ld (de),a
1421+ 9456 1B                   dec de
1422+ 9457 1B                   dec de
1423+ 9458 1B                   dec de
1424+ 9459 1B                   dec de
1425+ 945A 1B                   dec de
1426+ 945B 1B                   dec de
1427+ 945C 1B                   dec de
1428+ 945D EB                   ex de,hl
1429+ 945E 19                   add  hl,de              ; advance to the next row of the display file.
1430+ 945F EB                   ex de,hl
1431+ 9460 10 E5                djnz loop12             ;do this 3 times
1432+ 9462
1433+ 9462                      ;now draw the blank face to the right of the block
1434+ 9462                      ;create first column of right face characters
1435+ 9462 D1                   pop de                  ;back to our original position
1436+ 9463 D5                   push de
1437+ 9464 13                   inc de
1438+ 9465 13                   inc de
1439+ 9466 13                   inc de
1440+ 9467 13                   inc de                  ;move ahead 5 spaces in the display (right)
1441+ 9468 13                   inc de
1442+ 9469 13                   inc de
1443+ 946A
1444+ 946A                  ;    inc de
1445+ 946A                  ;    inc de
1446+ 946A                  ;    inc de
1447+ 946A              ;check if the char to our right is a wall block.
1448+ 946A              ;if so, do not draw a black face as we need to hide it or it will
1449+ 946A              ;ovewrite the already drawn block
1450+ 946A              ;jp cont_2
1451+ 946A 1A                   ld a,(de)
1452+ 946B FE B5                cp _mediumwall        ;is there an already drawn screen block here?
1453+ 946D C2 74 94             jp nz,cont_2            ;there is no block so draw black edge
1454+ 9470 D1                   pop de
1455+ 9471 C1                   pop bc
1456+ 9472 18 A8                jr go_back3             ;otherwise quit this draw
1457+ 9474
1458+ 9474 EB           cont_2: ex  de,hl
1459+ 9475 11 21 00             ld de,$0021
1460+ 9478
1461+ 9478              ;loop for 2 columns
1462+ 9478
1463+ 9478 06 02                ld b,2                  ; loop 2 times for 2 columns
1464+ 947A 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1465+ 947D 3E 07                ld a,7
1466+ 947F 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1467+ 9482
1468+ 9482              loop12b:
1469+ 9482 C5                   push bc                 ;save count
1470+ 9483 3A 04 FA             ld a,(var1)
1471+ 9486 47                   ld b,a                  ;holds the column height in chars
1472+ 9487 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
1473+ 9489 77                   ld  (hl),a
1474+ 948A
1475+ 948A              loop12a:                   ;we must start at 5 to draw 4 face blocks on right
1476+ 948A 19                   add hl,de
1477+ 948B 3E AF                ld  a,_black      ;triangle sloping to right bottom
1478+ 948D 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1479+ 948E 10 FA                djnz loop12a
1480+ 9490
1481+ 9490
1482+ 9490 3E B0                ld  a,_topcorner1
1483+ 9492 77                   ld  (hl),a
1484+ 9493
1485+ 9493                      ;now change column count
1486+ 9493 3A 04 FA             ld a,(var1)
1487+ 9496 D6 02                sub 2                   ;subtract 2
1488+ 9498 32 04 FA             ld (var1),a
1489+ 949B C1                   pop bc
1490+ 949C
1491+ 949C 2A 13 FA             ld hl,(var5)
1492+ 949F 23                   inc hl                  ;move print position to the right
1493+ 94A0 11 21 00             ld de,$21               ;move top of next column down and across 1
1494+ 94A3 19                   add hl,de
1495+ 94A4 22 13 FA             ld (var5),hl
1496+ 94A7
1497+ 94A7 10 D9                djnz loop12b
1498+ 94A9 D1                   pop de
1499+ 94AA C1                   pop bc
1500+ 94AB C3 1C 94             jp go_back3              ; jump back to main loop
1501+ 94AE
1502+ 94AE
1503+ 94AE              ;#############################################
1504+ 94AE              ;     draw the 2nd LEFT block
1505+ 94AE              ;#############################################
1506+ 94AE
1507+ 94AE              draw_10_2L:
1508+ 94AE
1509+ 94AE C5                    push bc
1510+ 94AF 11 FF C0              ld de, $c110-17          ;start print position of wall
1511+ 94B2 D5                   push de
1512+ 94B3              ;dont draw a front wall as we never see it.
1513+ 94B3
1514+ 94B3 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1515+ 94B6 19                   add hl,de
1516+ 94B7 EB                   ex de,hl
1517+ 94B8              ;we do not need a front wall for this row as it is never seen.
1518+ 94B8              ;below jp code can be removed :) Because a square block here
1519+ 94B8              ;is 8 x 8
1520+ 94B8
1521+ 94B8 13                   inc de                  ;move ahead 1 space in the display (right)
1522+ 94B9
1523+ 94B9              ;check if the char to our left is a wall block.
1524+ 94B9              ;if so, do not draw a black face as we need to hide it or it will
1525+ 94B9              ;ovewrite the already drawn block
1526+ 94B9 1A                    ld a,(de)
1527+ 94BA FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1528+ 94BC C2 C4 94              jp nz,cont_2r_2L            ;there is no block so draw black edge
1529+ 94BF D1                    pop de
1530+ 94C0 C1                    pop bc
1531+ 94C1 C3 1C 94              jp go_back3             ;otherwise quit this draw
1532+ 94C4
1533+ 94C4
1534+ 94C4              ;draw the black edge wall
1535+ 94C4
1536+ 94C4              cont_2r_2L:
1537+ 94C4 EB                    ex  de,hl
1538+ 94C5 11 21 00              ld de,$0021
1539+ 94C8
1540+ 94C8              ;need to loop 2 times drawing 2 lots of 3 top
1541+ 94C8              ;& bottom chars- move down 1after 1st 3 top chars drawn
1542+ 94C8              ;
1543+ 94C8
1544+ 94C8 3E 02                ld a,2
1545+ 94CA 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1546+ 94CD
1547+ 94CD              ;loop for 3 black wall columns
1548+ 94CD 3E 07                ld a,7                  ;column start height
1549+ 94CF 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1550+ 94D2
1551+ 94D2 06 03        loop_xL:ld b,3                  ;loop 3 times for 3 columns
1552+ 94D4 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1553+ 94D7 3E 95                ld a,$95
1554+ 94D9 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1555+ 94DC
1556+ 94DC              loop12br_2L:
1557+ 94DC C5                   push bc                 ;save count
1558+ 94DD 3A 04 FA             ld a,(var1)             ;column height
1559+ 94E0 47                   ld b,a                  ;holds the column height in chars
1560+ 94E1 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1561+ 94E4 F5                   push af                 ;save a for bottom corners
1562+ 94E5 77                   ld  (hl),a
1563+ 94E6
1564+ 94E6              loop12ar_2L:
1565+ 94E6 19                   add hl,de
1566+ 94E7 3E AF                ld  a,_black            ;black wall fill
1567+ 94E9 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1568+ 94EA 10 FA                djnz loop12ar_2L
1569+ 94EC
1570+ 94EC F1                   pop af                  ;retrivetop corner
1571+ 94ED 3C                   inc a                   ;prep for next top corner
1572+ 94EE 32 05 FA             ld (var2),a             ;re-save it for next corner
1573+ 94F1 C6 02                add a,2;4                 ;get the correct char to print
1574+ 94F3 77                   ld  (hl),a              ;draw the bottom of the wall
1575+ 94F4
1576+ 94F4                      ;now change column count
1577+ 94F4 3A 04 FA             ld a,(var1)
1578+ 94F7 C1                   pop bc
1579+ 94F8
1580+ 94F8 2A 13 FA             ld hl,(var5)
1581+ 94FB 23                   inc hl                  ;move print position to the left
1582+ 94FC 22 13 FA             ld (var5),hl
1583+ 94FF
1584+ 94FF 10 DB                djnz loop12br_2L
1585+ 9501
1586+ 9501              ;1st set of 3 top bits drawn
1587+ 9501              ;now jump down the display 1 line
1588+ 9501              ;then draw another 3 columns
1589+ 9501
1590+ 9501 3A 18 FA             ld a,(var7)             ;get our loop counter
1591+ 9504 3D                   dec a
1592+ 9505 28 12                jr z,exit_1L             ;exit after 2 loops
1593+ 9507 32 18 FA             ld (var7),a             ;save it
1594+ 950A 2A 13 FA             ld hl,(var5)
1595+ 950D              ;get our last print position
1596+ 950D                                              ;need to go to next line -1 char
1597+ 950D 19                   add hl,de
1598+ 950E                                              ; now move back in the display
1599+ 950E                                              ;1 char
1600+ 950E 22 13 FA             ld (var5),hl            ;re save it for use above
1601+ 9511
1602+ 9511 3E 05                ld a,5                  ;reduce black wall column height
1603+ 9513 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1604+ 9516
1605+ 9516 C3 D2 94             jp loop_xL
1606+ 9519
1607+ 9519
1608+ 9519 D1           exit_1L: pop de
1609+ 951A C1                   pop bc
1610+ 951B 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1611+ 951D
1612+ 951D C3 1C 94             jp go_back3              ; jump back to main loop
1613+ 9520
1614+ 9520              ;#############################################
1615+ 9520              ;*Draw the 3rd LEFT block of section3
1616+ 9520              ;#############################################
1617+ 9520
1618+ 9520              ; we only need to draw 2 columns of black sides.
1619+ 9520              ; if theres no brick pattern !
1620+ 9520
1621+ 9520              draw_10_3L:
1622+ 9520 C5                   push bc
1623+ 9521 D5                   push de                 ;save our display pointer
1624+ 9522
1625+ 9522 21 29 C1             ld hl,$C18C-66-30-3              ;start of drawing
1626+ 9525 7E                   ld a,(hl)               ;read what char is there
1627+ 9526 FE B5                cp _mediumwall
1628+ 9528 20 05                jr nz,cont_1r_4L        ;exit if a wall is already there
1629+ 952A D1                   pop de
1630+ 952B C1                   pop bc
1631+ 952C C3 0F 92             jp go_back4             ;otherwise quit this draw
1632+ 952F
1633+ 952F              cont_1r_4L:
1634+ 952F
1635+ 952F 3E C9                ld a,$c9
1636+ 9531 77                   ld (hl),a
1637+ 9532
1638+ 9532 3E AF                ld a,_black
1639+ 9534 11 21 00             ld de,33                ;1 line width
1640+ 9537
1641+ 9537 CD 43 95             CALL black_wall         ;draw 4 black blocks
1642+ 953A
1643+ 953A 19                   add hl,de               ;jump to next line below
1644+ 953B
1645+ 953B
1646+ 953B              ;top half done - so do bottom half - 2 blacks first
1647+ 953B
1648+ 953B              ;de already holds 32
1649+ 953B
1650+ 953B 3E CE                ld a,$ce
1651+ 953D 77                   ld (hl),a
1652+ 953E
1653+ 953E D1                   pop de
1654+ 953F C1                   pop bc
1655+ 9540 C3 1C 94             jp go_back3
1656+ 9543
1657+ 9543              ;draw 2 black walls across 1 line
1658+ 9543              black_wall:
1659+ 9543 19                   add hl,de      ;jump 1 line below
1660+ 9544 77                   ld (hl),a
1661+ 9545 19                   add hl,de      ;jump 1 line below
1662+ 9546 77                   ld (hl),a
1663+ 9547 19                   add hl,de      ;jump 1 line below
1664+ 9548 77                   ld (hl),a
1665+ 9549 19                   add hl,de      ;jump 1 line below
1666+ 954A 77                   ld (hl),a
1667+ 954B
1668+ 954B
1669+ 954B C9                   ret
1670+ 954C
1671+ 954C
1672+ 954C
1673+ 954C              ;#############################################
1674+ 954C              ;#############################################
1675+ 954C              ; draw 2nd layer
1676+ 954C              ;#############################################
1677+ 954C              ;#############################################
1678+ 954C
1679+ 954C              draw_2:
1680+ 954C              ;
1681+ 954C              ;ret
1682+ 954C              ; hl=maze location being drawn.
1683+ 954C              ; now determine what to draw for this section.
1684+ 954C
1685+ 954C
1686+ 954C 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1687+ 954F
1688+ 954F CD 5D 8E             call load_de            ;get left and right and front jump into de reg
1689+ 9552
1690+ 9552 19                   add hl,de               ;jump backwards along the user view 1 space
1691+ 9553 22 25 FA             ld (furthest_point),hl ;re save it
1692+ 9556
1693+ 9556 11 FF FF             ld de,$ffff             ;to move the display position -1
1694+ 9559 ED 53 11 FA          ld (var4),de
1695+ 955D
1696+ 955D ED 5B 0B FA          ld de,(left)
1697+ 9561
1698+ 9561              ;we need to move pointer 1 to the left for wall checking
1699+ 9561 19                   add hl,de
1700+ 9562 22 15 FA             ld (var6),hl ;re save it
1701+ 9565
1702+ 9565 ED 53 0F FA          ld (var3),de
1703+ 9569
1704+ 9569 11 A4 00             ld  de,$a4           ; offset to row10 column 7 - left of  centre of the 3d view.
1705+ 956C CD 72 95             call do_draw_2
1706+ 956F
1707+ 956F C3 04 96             jp draw_1           ;now draw the 2nd level
1708+ 9572
1709+ 9572              do_draw_2:
1710+ 9572
1711+ 9572 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
1712+ 9575 19                   add  hl,de
1713+ 9576
1714+ 9576
1715+ 9576              ; draw left half then right half of the display.
1716+ 9576
1717+ 9576 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1718+ 9578                                              ; 0 is not counted so loops 12 times
1719+ 9578 ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1720+ 957C EB                   ex   de,hl              ; transfer de to hl.
1721+ 957D
1722+ 957D              ;       hl = furthest point in the maze
1723+ 957D              ;       de = d_file location to store byte to display
1724+ 957D
1725+ 957D E5           loop14: push hl
1726+ 957E
1727+ 957E              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1728+ 957E
1729+ 957E 3A 28 FA             ld a,(maze_highbyte)
1730+ 9581 BC                   cp h                    ;are we at the top part of the maze?
1731+ 9582 CA 8D 95             jp z,cont_2s
1732+ 9585                                              ;if we are on a different maze boundary
1733+ 9585                                              ;then draw a maze wall as we are the top
1734+ 9585                                              ;or north wall but maze data has no
1735+ 9585                                              ;wall data.
1736+ 9585
1737+ 9585 3E 01                ld a,1
1738+ 9587 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1739+ 9588 C6 7F                add a,127               ;make sure we set a wall!
1740+ 958A C3 A2 95             jp do_wall2             ;jump straight to making an end wall
1741+ 958D
1742+ 958D              ;*#########################################
1743+ 958D              cont_2s:
1744+ 958D 7E                   ld a,(hl)
1745+ 958E 17                   rla
1746+ 958F DA A2 95             jp c,do_wall2            ;bit 7 (128)
1747+ 9592
1748+ 9592                     ; call do_no_wall2         ; otherwise draw no wall
1749+ 9592
1750+ 9592              go_back2:
1751+ 9592 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1752+ 9595 19                   add hl,de               ; holds current screen position
1753+ 9596 EB                   ex de,hl
1754+ 9597 E1                   pop hl
1755+ 9598 D5                   push de
1756+ 9599 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1757+ 959D 19                   add hl,de                ; go left 1 block in the maze
1758+ 959E D1                   pop de
1759+ 959F 10 DC                djnz loop14
1760+ 95A1 C9                   ret
1761+ 95A2              ;now do the 2nd position
1762+ 95A2
1763+ 95A2
1764+ 95A2              do_wall2:
1765+ 95A2                      ;check if bit 2 is set as thats an end
1766+ 95A2                      ;and b must then be changed to 1 to stop drawing.
1767+ 95A2
1768+ 95A2 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1769+ 95A4 28 02                jr z,draw_11
1770+ 95A6 06 01                ld b,1                  ;set b so we exit on return
1771+ 95A8
1772+ 95A8              draw_11:
1773+ 95A8                                   ; draw the wall face bit
1774+ 95A8 C5                   push bc
1775+ 95A9 D5                   push de
1776+ 95AA 13                   inc de
1777+ 95AB                                     ;save our display pointer
1778+ 95AB 06 0E                ld b,14                  ;block is 14 blocks high
1779+ 95AD 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1780+ 95B0 3E B6                ld   a,_largewall            ;wall on sides facing us
1781+ 95B2              loop13:
1782+ 95B2 12                   ld (de),a             ; insert the part of the wall.
1783+ 95B3 13                   inc de
1784+ 95B4 12                   ld (de),a               ;put grey side to our right
1785+ 95B5 13                   inc de
1786+ 95B6 12                   ld (de),a               ;put grey side to our right
1787+ 95B7 13                   inc de
1788+ 95B8 12                   ld (de),a               ;put grey side to our right
1789+ 95B9 13                   inc de
1790+ 95BA 12                   ld (de),a               ;put grey side to our right
1791+ 95BB 1B                   dec de
1792+ 95BC 1B                   dec de
1793+ 95BD 1B                   dec de
1794+ 95BE 1B                   dec de
1795+ 95BF EB                   ex de,hl
1796+ 95C0 19                   add  hl,de              ; advance to the next row of the display file.
1797+ 95C1 EB                   ex de,hl
1798+ 95C2 10 EE                djnz loop13             ;do this 3 times
1799+ 95C4
1800+ 95C4                      ;now draw the blank face to the right of the block
1801+ 95C4                      ;create first column of right face characters
1802+ 95C4 D1                   pop de                  ;back to our original position
1803+ 95C5 13                   inc de
1804+ 95C6 13                   inc de
1805+ 95C7 13                   inc de                  ;move ahead 6 spaces in the display (right)
1806+ 95C8 13                   inc de
1807+ 95C9 13                   inc de
1808+ 95CA 13                   inc de
1809+ 95CB EB                   ex  de,hl
1810+ 95CC 11 21 00             ld de,$0021
1811+ 95CF
1812+ 95CF 06 03                ld b,3                  ; for 8 face columns to draw to draw
1813+ 95D1 22 13 FA             ld (var5),hl
1814+ 95D4 3E 0D                ld a,13                 ; for 14 blocks high per column
1815+ 95D6 32 04 FA             ld (var1),a
1816+ 95D9
1817+ 95D9              loop13b:
1818+ 95D9 C5                   push bc
1819+ 95DA 3A 04 FA             ld a,(var1)
1820+ 95DD 47                   ld b,a
1821+ 95DE 3E B3                ld a,_topcorner4
1822+ 95E0 77                   ld (hl),a
1823+ 95E1
1824+ 95E1              loop13a:
1825+ 95E1 19                   add hl,de
1826+ 95E2 3E AF                ld  a,_black  ;leftinnerwall  ;black      ;triangle sloping to right bottom
1827+ 95E4 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1828+ 95E5 10 FA                djnz loop13a
1829+ 95E7
1830+ 95E7                      ;ld  (hl),a
1831+ 95E7 3E B0                ld  a,_topcorner1
1832+ 95E9 77                   ld  (hl),a
1833+ 95EA
1834+ 95EA              ; now change the column count
1835+ 95EA 3A 04 FA             ld a,(var1)
1836+ 95ED D6 02                sub 2
1837+ 95EF 32 04 FA             ld (var1),a
1838+ 95F2 C1                   pop bc
1839+ 95F3
1840+ 95F3 2A 13 FA             ld hl,(var5)
1841+ 95F6 23                   inc hl
1842+ 95F7 11 21 00             ld de,$21
1843+ 95FA 19                   add hl,de
1844+ 95FB 22 13 FA             ld (var5),hl
1845+ 95FE
1846+ 95FE 10 D9                djnz loop13b
1847+ 9600
1848+ 9600 C1                   pop bc
1849+ 9601 C3 92 95             jp go_back2              ; jump back to main loop
1850+ 9604
1851+ 9604
1852+ 9604              ;#############################################
1853+ 9604              ; draw 1st layer
1854+ 9604              ;#############################################
1855+ 9604
1856+ 9604              draw_1:
1857+ 9604
1858+ 9604              ;ret
1859+ 9604              ; hl=maze location being drawn.
1860+ 9604              ; now determine what to draw for this section.
1861+ 9604
1862+ 9604
1863+ 9604 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1864+ 9607
1865+ 9607 CD 5D 8E             call load_de            ;get left and right and front jump into de reg
1866+ 960A
1867+ 960A 19                   add hl,de               ;jump backwards along the user view 1 space
1868+ 960B 22 25 FA             ld (furthest_point),hl ;re save it
1869+ 960E
1870+ 960E 11 FF FF             ld de,$ffff             ;to move the display position -1
1871+ 9611 ED 53 11 FA          ld (var4),de
1872+ 9615
1873+ 9615 ED 5B 0B FA          ld de,(left)
1874+ 9619
1875+ 9619              ;we need to move pointer 1 to the left for wall checking
1876+ 9619 19                   add hl,de
1877+ 961A 22 15 FA             ld (var6),hl
1878+ 961D
1879+ 961D ED 53 0F FA          ld (var3),de
1880+ 9621 11 20 00             ld  de,$020           ; offset to row 1 column 0 - left of  centre of the 3d view.
1881+ 9624 CD 2A 96             call do_draw_1
1882+ 9627
1883+ 9627 C3 AD 96             jp draw_0           ;now draw the 2nd level
1884+ 962A
1885+ 962A              do_draw_1:
1886+ 962A
1887+ 962A 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
1888+ 962D 19                   add  hl,de
1889+ 962E
1890+ 962E
1891+ 962E              ; draw left half then right half of the display.
1892+ 962E
1893+ 962E 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1894+ 9630                                              ; 0 is not counted so loops 12 times
1895+ 9630 ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1896+ 9634 EB                   ex   de,hl              ; transfer de to hl.
1897+ 9635
1898+ 9635              ;       hl = furthest point in the maze
1899+ 9635              ;       de = d_file location to store byte to display
1900+ 9635
1901+ 9635 E5           loop15: push hl
1902+ 9636
1903+ 9636              ;see if we are at the north wall. If we dont, we get a left wall
1904+ 9636              ;drawn because we implicitly draw a wall if we are at the top
1905+ 9636
1906+ 9636              ;        ld a,(player_dir)
1907+ 9636              ;        cp 2                    ;r we looking south
1908+ 9636              ;        jp z,cont_7
1909+ 9636              ;        ld a,l
1910+ 9636              ;        cp 17
1911+ 9636              ;        jp c,do_wall1
1912+ 9636
1913+ 9636              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1914+ 9636
1915+ 9636 3A 28 FA             ld a,(maze_highbyte)
1916+ 9639 BC                   cp h                    ;are we at the top part of the maze?
1917+ 963A CA 45 96             jp z,cont_7
1918+ 963D                                              ;if we are on a different maze boundary
1919+ 963D                                              ;then draw a maze wall as we are the top
1920+ 963D                                              ;or north wall but maze data has no
1921+ 963D                                              ;wall data.
1922+ 963D
1923+ 963D 3E 01                ld a,1
1924+ 963F 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1925+ 9640 C6 7F                add a,127               ;make sure we set a wall!
1926+ 9642 C3 5A 96             jp do_wall1             ;jump straight to making an end wall
1927+ 9645
1928+ 9645              ;#########################################################
1929+ 9645
1930+ 9645 7E           cont_7: ld a,(hl)
1931+ 9646 17                   rla
1932+ 9647 DA 5A 96             jp c,do_wall1            ;bit 7 (128)
1933+ 964A
1934+ 964A                     ; call do_no_wall1         ; otherwise draw no wall
1935+ 964A
1936+ 964A              go_back1:
1937+ 964A 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1938+ 964D 19                   add hl,de               ; holds current screen position
1939+ 964E EB                   ex de,hl
1940+ 964F E1                   pop hl
1941+ 9650 D5                   push de
1942+ 9651 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1943+ 9655 19                   add hl,de                ; go left 1 block in the maze
1944+ 9656 D1                   pop de
1945+ 9657 10 DC                djnz loop15
1946+ 9659
1947+ 9659              ;jp draw_0
1948+ 9659 C9                   ret
1949+ 965A              ;now do the 2nd position
1950+ 965A
1951+ 965A
1952+ 965A
1953+ 965A              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1954+ 965A
1955+ 965A              do_wall1:
1956+ 965A                      ;check if bit 2 is set as thats an end
1957+ 965A                      ;and b must then be changed to 1 to stop drawing.
1958+ 965A
1959+ 965A CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1960+ 965C 28 02                jr z,draw_12
1961+ 965E 06 01                ld b,1                  ;set b so we exit on return
1962+ 9660
1963+ 9660              ;draw the corridor bit to the left (1 column)
1964+ 9660              draw_12:
1965+ 9660 C5                   push bc
1966+ 9661 D5                   push de                 ;save our display pointer
1967+ 9662 06 16                ld b,22                  ;block is 22 blocks high
1968+ 9664 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1969+ 9667 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1970+ 9669 12           loop16: ld   (de),a             ; insert thepart of the wall.
1971+ 966A 13                   inc de
1972+ 966B 12                   ld (de),a               ;put grey side to our right
1973+ 966C                      ;inc de
1974+ 966C                      ;ld (de),a               ;put grey side to our right
1975+ 966C                      ;inc de
1976+ 966C                      ;ld (de),a               ;put grey side to our right
1977+ 966C                      ;inc de
1978+ 966C                      ;ld (de),a               ;put grey side to our right
1979+ 966C                      ;dec de
1980+ 966C                      ;dec de
1981+ 966C                      ;dec de
1982+ 966C 1B                   dec de
1983+ 966D EB                   ex de,hl
1984+ 966E 19                   add  hl,de              ; advance to the next row of the display file.
1985+ 966F EB                   ex de,hl
1986+ 9670 10 F7                djnz loop16             ;do this 3 times
1987+ 9672
1988+ 9672                      ;now draw the blank face to the right of the block
1989+ 9672                      ;create first column of right face characters
1990+ 9672 D1                   pop de                  ;back to our original position
1991+ 9673                      ;inc de
1992+ 9673                      ;inc de
1993+ 9673                      ;inc de                  ;move ahead 4 spaces in the display (right)
1994+ 9673 13                   inc de
1995+ 9674 13                   inc de
1996+ 9675 EB                   ex  de,hl
1997+ 9676 11 21 00             ld de,$0021
1998+ 9679
1999+ 9679              ;now draw the face we see on our left as we walk forward
2000+ 9679 06 04                ld b,4                  ; for 8 face columns to draw to draw
2001+ 967B 22 13 FA             ld (var5),hl
2002+ 967E 3E 15                ld a,21                 ; for 14 blocks high per column
2003+ 9680 32 04 FA             ld (var1),a
2004+ 9683
2005+ 9683              loop14b:
2006+ 9683 C5                   push bc
2007+ 9684 3A 04 FA             ld a,(var1)
2008+ 9687 47                   ld b,a
2009+ 9688 3E B3                ld a,_topcorner4
2010+ 968A 77                   ld (hl),a
2011+ 968B
2012+ 968B              loop14a:
2013+ 968B 19                   add hl,de
2014+ 968C 3E AF                ld  a,_black            ;triangle sloping to right bottom
2015+ 968E 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
2016+ 968F 10 FA                djnz loop14a
2017+ 9691
2018+ 9691                      ;ld  (hl),a
2019+ 9691 3E B0                ld  a,_topcorner1
2020+ 9693 77                   ld  (hl),a
2021+ 9694
2022+ 9694              ; now change the column count
2023+ 9694 3A 04 FA             ld a,(var1)
2024+ 9697 D6 02                sub 2
2025+ 9699 32 04 FA             ld (var1),a
2026+ 969C C1                   pop bc
2027+ 969D
2028+ 969D 2A 13 FA             ld hl,(var5)
2029+ 96A0 23                   inc hl
2030+ 96A1 11 21 00             ld de,$21
2031+ 96A4 19                   add hl,de
2032+ 96A5 22 13 FA             ld (var5),hl
2033+ 96A8
2034+ 96A8 10 D9                djnz loop14b
2035+ 96AA
2036+ 96AA C1                   pop bc
2037+ 96AB 18 9D                jr go_back1              ; jump back to main loop
2038+ 96AD
2039+ 96AD              ;        jp draw_1               ;draw next layer
2040+ 96AD
2041+ 96AD              ; there is a wall so insert chequerboard for the wall face.
2042+ 96AD
2043+ 96AD              ;do_no_wall1:
2044+ 96AD              ;        ret ; no wall so do nothing
2045+ 96AD              ;        push de
2046+ 96AD              ;        ld   a,_topwhitebottomchequer
2047+ 96AD              ;        ld   (de),a                             ; insert the top of the wall face.
2048+ 96AD              ;        ld   hl,$0021
2049+ 96AD              ;        add  hl,de                              ; advance to the next row of the display file.
2050+ 96AD              ;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
2051+ 96AD              ;        pop de
2052+ 96AD              ;        ret
2053+ 96AD
2054+ 96AD
2055+ 96AD
2056+ 96AD
2057+ 96AD              ;#############################################
2058+ 96AD              ; draw layer 0
2059+ 96AD              ;#############################################
2060+ 96AD
2061+ 96AD              draw_0:
2062+ 96AD              ;ret
2063+ 96AD
2064+ 96AD
2065+ 96AD              ; hl=maze location being drawn.
2066+ 96AD              ; now determine what to draw for this section.
2067+ 96AD
2068+ 96AD
2069+ 96AD 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
2070+ 96B0
2071+ 96B0 CD 5D 8E             call load_de            ;get left and right and front jump into de reg
2072+ 96B3
2073+ 96B3 19                   add hl,de               ;jump backwards along the user view 1 space
2074+ 96B4
2075+ 96B4              ;move map pointer left to read the walls
2076+ 96B4              ;;        ld de,(left)
2077+ 96B4              ;;        add hl,de
2078+ 96B4
2079+ 96B4
2080+ 96B4
2081+ 96B4              ;;        ld (furthest_point),hl ;re save it
2082+ 96B4
2083+ 96B4              ;        ld de,$ffff             ;to move the display position -1
2084+ 96B4              ;        ld (var4),de
2085+ 96B4
2086+ 96B4 ED 5B 0B FA          ld de,(left)
2087+ 96B8
2088+ 96B8              ;we need to move pointer 1 to the left for wall checking
2089+ 96B8 19                   add hl,de
2090+ 96B9 22 15 FA             ld (var6),hl
2091+ 96BC
2092+ 96BC ED 53 0F FA          ld (var3),de
2093+ 96C0 11 00 00             ld  de,$00              ;offset to row0 column 0 - left of  centre of the 3d view.
2094+ 96C3                                              ;1 column of left face to draw
2095+ 96C3                  ;    call do_draw_0
2096+ 96C3
2097+ 96C3
2098+ 96C3              do_draw_0:
2099+ 96C3
2100+ 96C3 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
2101+ 96C6 19                   add  hl,de
2102+ 96C7
2103+ 96C7
2104+ 96C7              ; draw left half then right half of the display.
2105+ 96C7
2106+ 96C7 06 01                ld b,1                 ; count for 2 blocks left or right of display file
2107+ 96C9 ED 5B 15 FA          ld de,(var6)           ; 0 is not counted so loops 12 times
2108+ 96CD                     ; ld   de,(furthest_point); retrieve the maze location.
2109+ 96CD EB                   ex   de,hl              ; transfer de to hl.
2110+ 96CE
2111+ 96CE              ;       hl = furthest point in the maze
2112+ 96CE              ;       de = d_file location to store byte to display
2113+ 96CE
2114+ 96CE              loop17: ;push hl
2115+ 96CE
2116+ 96CE
2117+ 96CE              ;check if we are at the north wall
2118+ 96CE
2119+ 96CE              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
2120+ 96CE
2121+ 96CE 3A 28 FA             ld a,(maze_highbyte)
2122+ 96D1 BC                   cp h                    ;are we at the top part of the maze?
2123+ 96D2 CA DD 96             jp z,cont_4
2124+ 96D5                                              ;if we are on a different maze boundary
2125+ 96D5                                              ;then draw a maze wall as we are the top
2126+ 96D5                                              ;or north wall but maze data has no
2127+ 96D5                                              ;wall data.
2128+ 96D5
2129+ 96D5 3E 01                ld a,1
2130+ 96D7 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
2131+ 96D8 C6 7F                add a,127               ;make sure we set a wall!
2132+ 96DA C3 EB 96             jp draw_13             ;jump straight to making an end wall
2133+ 96DD
2134+ 96DD              ;##########################################
2135+ 96DD
2136+ 96DD 7E           cont_4: ld a,(hl)
2137+ 96DE 17                   rla
2138+ 96DF DA E3 96             jp c,do_wall0            ;bit 7 (128)
2139+ 96E2
2140+ 96E2 C9                   ret
2141+ 96E3
2142+ 96E3
2143+ 96E3
2144+ 96E3              do_wall0:
2145+ 96E3                      ;check if bit 2 is set as thats an end
2146+ 96E3                      ;and b must then be changed to 1 to stop drawing.
2147+ 96E3
2148+ 96E3 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
2149+ 96E5 DA EB 96             jp c,draw_13
2150+ 96E8
2151+ 96E8 C3 04 97             jp draw_brick_l         ; otherwise draw no wall
2152+ 96EB
2153+ 96EB              ;we need to draw 1 vertical line from pos 1,1 to show
2154+ 96EB              ;the side of the block.
2155+ 96EB
2156+ 96EB              ;draw the sidewall brick pattern
2157+ 96EB              draw_13:
2158+ 96EB 3E B3                ld a,_topcorner4
2159+ 96ED 12                   ld (de),a
2160+ 96EE 21 21 00             ld hl,$21                ;jp to next line below
2161+ 96F1 19                   add hl,de
2162+ 96F2 EB                   ex de,hl
2163+ 96F3
2164+ 96F3 06 16                ld b,22                  ;block is 24 blocks high
2165+ 96F5 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
2166+ 96F8 3E AF                ld a,_black            ;wall on sides facing us;
2167+ 96FA 12           loop18: ld (de),a             ; insert the part of the wall.
2168+ 96FB EB                   ex de,hl
2169+ 96FC 19                   add  hl,de              ; advance to the next row of the display file.
2170+ 96FD EB                   ex de,hl
2171+ 96FE 10 FA                djnz loop18
2172+ 9700
2173+ 9700 3E B0                ld a,_topcorner1
2174+ 9702 12                   ld (de),a
2175+ 9703 C9                   ret
2176+ 9704
2177+ 9704              draw_brick_l:
2178+ 9704 21 21 00             ld hl,$21                ;jp to next line below
2179+ 9707 19                   add hl,de
2180+ 9708 EB                   ex de,hl
2181+ 9709
2182+ 9709 06 16                ld b,22                  ;block is 24 blocks high
2183+ 970B 21 21 00             ld hl,$021
2184+ 970E                                         ;load with 32 to jump to line below us
2185+ 970E 3E B8                ld a,_hugewall;_largewall            ;wall on sides facing us;
2186+ 9710              loop18l:
2187+ 9710 12                   ld (de),a             ; insert the part of the wall.
2188+ 9711 EB                   ex de,hl
2189+ 9712 19                   add  hl,de              ; advance to the next row of the display file.
2190+ 9713 EB                   ex de,hl
2191+ 9714 10 FA                djnz loop18l
2192+ 9716
2193+ 9716 C9                   ret
2194+ 9717
# file closed: src/4-rd3dmazeV6.asm
 457  9717                  INCLUDE "5-rd3dmazeV6.asm" ; draw wall in front of player+setup right part of screen
# file opened: src/5-rd3dmazeV6.asm
   1+ 9717
   2+ 9717
   3+ 9717              ;#############################################
   4+ 9717              ;original code to draw maze FRONT walls here from 3D Monster Maze
   5+ 9717              ;call it a homage ;)
   6+ 9717              ;#############################################
   7+ 9717
   8+ 9717
   9+ 9717              ; ############################
  10+ 9717              ; draw wall in front of player
  11+ 9717              ; ############################
  12+ 9717
  13+ 9717              ; a wall face must be drawn centred within the view.
  14+ 9717              ; the wall face is one character wider than it is high.
  15+ 9717
  16+ 9717              draw_front_view:
  17+ 9717
  18+ 9717              ;        ld a,(depth)            ;find out how far we can see - will never be higher than 6
  19+ 9717 3A 02 FA             ld a, (maxview)
  20+ 971A FE 06                cp 6
  21+ 971C C8                   ret z				               ;too far away so return doing nothing
  22+ 971D FE 05        	    cp 5
  23+ 971F C8                   ret z
  24+ 9720 C2 2D 97             jp nz,set4
  25+ 9723 0E 0D                ld c,13;12
  26+ 9725 3E B4        		ld a,_smallwall			      ;this is the character to draw (brick pattern)
  27+ 9727 32 04 FA     		ld (var1),a
  28+ 972A C3 70 97             jp draw_wall
  29+ 972D FE 04        set4:   cp 4
  30+ 972F C2 3C 97             jp nz,set3
  31+ 9732 0E 0B                ld c,11
  32+ 9734 3E B4        		ld a,_smallwall 			     ;this is the character to draw (brick pattern)
  33+ 9736 32 04 FA     		ld (var1),a
  34+ 9739 C3 70 97             jp draw_wall
  35+ 973C FE 03        set3:   cp 3
  36+ 973E C2 4B 97             jp nz,set2
  37+ 9741 0E 0A                ld c,10
  38+ 9743 3E B7        		ld a,_mediumwall_1			   ;this is the character to draw (brick pattern)
  39+ 9745 32 04 FA     		ld (var1),a
  40+ 9748 C3 70 97             jp draw_wall
  41+ 974B FE 02        set2:   cp 2
  42+ 974D C2 5A 97             jp nz,set1
  43+ 9750 0E 08                ld c,8
  44+ 9752 3E B5        		ld a,_mediumwall			      ;this is the character to draw (brick pattern)
  45+ 9754 32 04 FA     		ld (var1),a
  46+ 9757 C3 70 97             jp draw_wall
  47+ 975A FE 01        set1:   cp 1
  48+ 975C C2 69 97             jp nz,set0
  49+ 975F 0E 05                ld c,5
  50+ 9761 3E B6        		ld a,_largewall			      ;this is the character to draw (brick pattern)
  51+ 9763 32 04 FA     		ld (var1),a
  52+ 9766 C3 70 97             jp draw_wall
  53+ 9769              ;must be zero if we get here
  54+ 9769 0E 01        set0:   ld c,1
  55+ 976B 3E B8                ld a,_hugewall;_largewall
  56+ 976D 32 04 FA             ld (var1),a
  57+ 9770
  58+ 9770              draw_wall:
  59+ 9770              ;ld c,1 ;section from player
  60+ 9770
  61+ 9770 2A 67 81     l49f6:  ld   hl,(d_file)                        ; fetch the location of the display file.
  62+ 9773 11 21 00             ld   de,$0021                           ; each row is 33 characters wide.
  63+ 9776
  64+ 9776              ;        ld   bc,(l4085)                         ; fetch the details for the section: b=width of section, c=distance of section from player.
  65+ 9776 06 00                ld   b,$00
  66+ 9778 09                   add  hl,bc                              ; advance across the screen to the current distance of the wall.
  67+ 9779
  68+ 9779 3E 19                ld   a,$19                              ; the width of the view.
  69+ 977B 41                   ld   b,c                                ; fetch the distance.
  70+ 977C CB 20                sla  b                                  ; multiply the distance by 2 since the wall be spans to the left and right of the centre column of the view.
  71+ 977E 90                   sub  b                                  ; determine the width of the wall face.
  72+ 977F 47                   ld   b,a                                ; b=width of the wall face (it will be an odd number of characters).
  73+ 9780
  74+ 9780 D6 01                sub  $01                                ; determine the wall height (it will be an even number of characters).
  75+ 9782
  76+ 9782              ; enter a loop to draw each column of the wall face.
  77+ 9782
  78+ 9782 C5           l4a0d:  push bc                                 ; save the wall face width.
  79+ 9783 E5                   push hl                                 ; save the address within the display file.
  80+ 9784
  81+ 9784 41                   ld   b,c                                ; fetch the distance, which corresponds to the number of blank rows to show above the wall face.
  82+ 9785
  83+ 9785 36 20        l4a10:  ld   (hl),_space                        ; insert a space above the wall face.
  84+ 9787 19                   add  hl,de                              ; advance to the next row.
  85+ 9788 10 FB                djnz l4a10                              ; repeat for all rows above the wall face.
  86+ 978A
  87+ 978A 47                   ld   b,a                                ; fetch the wall height.
  88+ 978B
  89+ 978B F5           l4a16:  push af
  90+ 978C 3A 04 FA     		ld a,(var1)
  91+ 978F 77           		ld   (hl),a                             ; insert a wall face character into the display file.
  92+ 9790 F1                   pop af
  93+ 9791 19           		      add  hl,de                              ; advance to the next row.
  94+ 9792 10 F7                djnz l4a16                              ; repeat for all rows forming the height of the wall face.
  95+ 9794
  96+ 9794 41                   ld   b,c                                ; fetch the distance, which corresponds the the number of blank rows to show above the wall face.
  97+ 9795 05                   dec  b                                  ; there is one less blank row below the wall face than above it due to the status message row.
  98+ 9796 28 05                jr   z,l4a24                            ; jump if there are no rows below the wall to blank.
  99+ 9798
 100+ 9798 36 20        l4a1f:  ld   (hl),_space                        ; insert a space below the wall face.
 101+ 979A 19                   add  hl,de                              ; advance to the next row.
 102+ 979B 10 FB                djnz l4a1f                              ; repeat for all rows below the wall face.
 103+ 979D
 104+ 979D E1           l4a24:  pop  hl                                 ; retrieve the address within the display file.
 105+ 979E 23                   inc  hl                                 ; advance to the next column to the right.
 106+ 979F
 107+ 979F C1                   pop  bc                                 ; retrieve the wall face width.
 108+ 97A0 10 E0                djnz l4a0d                              ; repeat for all columns of the wall face.
 109+ 97A2
 110+ 97A2              ;call my_print
 111+ 97A2 C9                   ret
 112+ 97A3
 113+ 97A3              ;#################################################################
 114+ 97A3              ;#################################################################
 115+ 97A3              ; draw maze end walls left and right of the player view
 116+ 97A3              ;#################################################################
 117+ 97A3              ;#################################################################
 118+ 97A3
 119+ 97A3              ;we will just copy parts of the front wall left and right on the screen
 120+ 97A3              ;depending if theres a side wall or not. No side wall, do nothing!
 121+ 97A3
 122+ 97A3              draw_side_walls
 123+ 97A3
 124+ 97A3              ;1st we need to know if the front view is a side wallsurrounding the maze
 125+ 97A3              ;this is $81 (129) if its a side wall
 126+ 97A3
 127+ 97A3              ;so we have an end wall here!
 128+ 97A3
 129+ 97A3              ;1st, check if maxdepth =4 or less. We do not want to draw anything for
 130+ 97A3              ;depth 5 or 6
 131+ 97A3
 132+ 97A3 B7                   or a                    ;clear carry flag
 133+ 97A4 3A 02 FA             ld a,(maxview)          ;how far we can see in front of us
 134+ 97A7               ;       cp 5
 135+ 97A7               ;       ret nc                  ;exit if its 5 or greater
 136+ 97A7                                              ;carry set if <5
 137+ 97A7
 138+ 97A7              ;now check if maxview and depth are the same as this indicates a side wall
 139+ 97A7              ;reg a already contains maxview
 140+ 97A7              ;#        ld b,a
 141+ 97A7              ;#        ld a,(depth)
 142+ 97A7              ;#        sub b                   ;should be 0 if the same
 143+ 97A7              ;#        ret nz                  ;exit if different
 144+ 97A7
 145+ 97A7              ;now we cheat :) we just keep copying lines of the wall left & right
 146+ 97A7              ;untill we hit a non space in the display file!
 147+ 97A7
 148+ 97A7              ;reg a contains our depth
 149+ 97A7              ;        ld a,(maxview)
 150+ 97A7 3A 06 FA             ld a,(depth)
 151+ 97AA
 152+ 97AA FE 00                cp 0
 153+ 97AC                      ;depth 1
 154+ 97AC CA C4 97             jp z,cp_wall_1          ;wall immediately in front of us
 155+ 97AF FE 01                cp 1
 156+ 97B1                      ;depth 2
 157+ 97B1 CA EE 97             jp z,cp_wall_2
 158+ 97B4 FE 02                cp 2
 159+ 97B6                      ;depth 3
 160+ 97B6 CA 36 98             jp z,cp_wall_3
 161+ 97B9 FE 03                cp 3
 162+ 97BB                      ;depth 4
 163+ 97BB CA 7E 98             jp z,cp_wall_4
 164+ 97BE FE 04                cp 4
 165+ 97C0               ;ret
 166+ 97C0                      ;depth 5
 167+ 97C0 CA C9 98             jp z,cp_wall_5
 168+ 97C3 C9                   ret                     ;go back now
 169+ 97C4
 170+ 97C4              cp_wall_1:
 171+ 97C4              ;do left side first - check for char A3 (black block for maze wall at a distance
 172+ 97C4
 173+ 97C4 21 4A C1             ld hl,$c14a             ;we should be 10 lines down(10,0)
 174+ 97C7 7E                   ld a,(hl)               ;check our character
 175+ 97C8 FE 20                cp ' '                  ;should be space indicating nothing there
 176+ 97CA
 177+ 97CA CC DD 97             call  z,loop91
 178+ 97CD                       ;draw left half
 179+ 97CD
 180+ 97CD              ;now do the right side
 181+ 97CD 21 39 C0             ld hl,$c039             ;we should be 10 lines down(10,24)
 182+ 97D0 7E                   ld a,(hl)               ;check our character
 183+ 97D1 FE 20                cp ' '                  ;should be space indicating noting there
 184+ 97D3 C0                   ret nz                  ;exit if no space there
 185+ 97D4 21 39 C0             ld hl,$c039             ;top left face
 186+ 97D7              ;        ld de,$c038             ;1 line right of front wall
 187+ 97D7 06 16                ld b,22                 ;copy 22 lines
 188+ 97D9 C3 E2 97             jp loop90               ;draw right side!
 189+ 97DC C9                   ret                     ;exit altogether
 190+ 97DD
 191+ 97DD 21 21 C0     loop91: ld hl,$c021             ;top left face
 192+ 97E0              ;        ld de,$c022             ;1 line left
 193+ 97E0 06 16                ld b,22                 ;copy 22 lines
 194+ 97E2              loop90: ;ld a,(de)
 195+ 97E2 3E B8                ld a,_hugewall
 196+ 97E4 77                   ld (hl),a
 197+ 97E5 D5                   push de
 198+ 97E6 11 21 00             ld de,33
 199+ 97E9 19                   add hl,de               ;go to next line
 200+ 97EA D1                   pop de
 201+ 97EB 10 F5                djnz loop90
 202+ 97ED C9                   ret
 203+ 97EE
 204+ 97EE              cp_wall_2:
 205+ 97EE              ;do left side first - check for char ' ' showing nothing drawn there
 206+ 97EE
 207+ 97EE 21 A9 C0             ld hl,$c0a9             ;we should be at the top left of the face
 208+ 97F1 DD 21 A9 C0          ld ix,$c0a9
 209+ 97F5              ;        ld de,$c0ab             ;1 line left of our wall face
 210+ 97F5 11 1F FA             ld de,lr_wall
 211+ 97F8 3E B6                ld a,_largewall
 212+ 97FA 12                   ld (de),a
 213+ 97FB
 214+ 97FB 0E 05                ld c,5                  ;draw 5 columns to the border
 215+ 97FD E5           loop80: push hl
 216+ 97FE 06 0E                ld b,14
 217+ 9800 DD 7E 00             ld a,(ix+0)             ;check our character
 218+ 9803 FE 20                cp ' '                  ;should be space indicating noting there
 219+ 9805 CC 11 99             call z,loop93
 220+ 9808 DD 2B                dec ix
 221+ 980A E1                   pop hl
 222+ 980B 2B                   dec hl                 ;move left 1 line in the display
 223+ 980C 0D                   dec c
 224+ 980D C2 FD 97             jp nz,loop80            ;do this 5 times
 225+ 9810
 226+ 9810              ;now do the right side
 227+ 9810 21 B9 C0             ld hl,$c0b9             ;we should be at the top right of the face
 228+ 9813 DD 21 B9 C0          ld ix,$c0b9
 229+ 9817               ;       ld de,$c0b8             ;1 line left of our wall face
 230+ 9817 11 1F FA             ld de,lr_wall
 231+ 981A 3E B6                ld a,_largewall
 232+ 981C 12                   ld (de),a
 233+ 981D
 234+ 981D 0E 05                ld c,5                  ;draw 5 columns to the border
 235+ 981F E5           loop81: push hl
 236+ 9820 06 0E                ld b,14
 237+ 9822 DD 7E 00             ld a,(ix+0)             ;check our character
 238+ 9825 FE 20                cp ' '                  ;should be space indicating noting there
 239+ 9827 C2 2D 98             jp nz,loop82            ;skip over if no space there
 240+ 982A CC 11 99             call z,loop93
 241+ 982D DD 23        loop82  inc ix
 242+ 982F                               ;do the next line
 243+ 982F E1                   pop hl
 244+ 9830 23                   inc hl
 245+ 9831 0D                   dec c
 246+ 9832 C2 1F 98             jp nz,loop81
 247+ 9835 C9                   ret                     ;exit routine totally
 248+ 9836
 249+ 9836              cp_wall_3:
 250+ 9836              ;do left side first - check for char ' ' showing nothing drawn there
 251+ 9836
 252+ 9836 21 0F C1             ld hl,$c10f             ;we should be at the top left of the face
 253+ 9839 DD 21 0F C1          ld ix,$c10f
 254+ 983D              ;        ld de,$c110             ;1 line left of our wall face
 255+ 983D 11 1F FA             ld de,lr_wall
 256+ 9840 3E B5                ld a,_mediumwall
 257+ 9842 12                   ld (de),a
 258+ 9843
 259+ 9843 0E 08                ld c,8                  ;draw 8 columns to the border
 260+ 9845 E5           loop83: push hl
 261+ 9846 06 08                ld b,8                 ;10 chars high
 262+ 9848 DD 7E 00             ld a,(ix+0)             ;check our character
 263+ 984B FE 20                cp ' '                  ;should be space indicating noting there
 264+ 984D CC 11 99             call z,loop93
 265+ 9850 DD 2B                dec ix
 266+ 9852 E1                   pop hl
 267+ 9853 2B                   dec hl                 ;move left 1 line in the display
 268+ 9854 0D                   dec c
 269+ 9855 C2 45 98             jp nz,loop83            ;do this 5 times
 270+ 9858
 271+ 9858              ;now do the right side
 272+ 9858 21 19 C1             ld hl,$c119             ;we should be at the top right of the face
 273+ 985B DD 21 19 C1          ld ix,$c119
 274+ 985F              ;        ld de,$c118             ;1 line left of our wall face
 275+ 985F 11 1F FA             ld de,lr_wall
 276+ 9862 3E B5                ld a,_mediumwall
 277+ 9864 12                   ld (de),a
 278+ 9865
 279+ 9865 0E 08                ld c,8                  ;draw 8 columns to the border
 280+ 9867 E5           loop84: push hl
 281+ 9868 06 08                ld b,8                 ;8 chars high
 282+ 986A DD 7E 00             ld a,(ix+0)             ;check our character
 283+ 986D FE 20                cp ' '                  ;should be space indicating noting there
 284+ 986F C2 75 98             jp nz,loop85            ;skip over if no space there
 285+ 9872 CC 11 99             call z,loop93
 286+ 9875 DD 23        loop85: inc ix
 287+ 9877                               ;do the next line
 288+ 9877 E1                   pop hl
 289+ 9878 23                   inc hl
 290+ 9879 0D                   dec c
 291+ 987A C2 67 98             jp nz,loop84
 292+ 987D C9                   ret                     ;exit routine totally
 293+ 987E
 294+ 987E              cp_wall_4:
 295+ 987E              ;do left side first - check for char ' ' showing nothing drawn there
 296+ 987E
 297+ 987E 21 53 C1             ld hl,$c153;2             ;we should be at the top left of the face
 298+ 9881 DD 21 53 C1          ld ix,$c153;2;c153
 299+ 9885 11 1F FA             ld de,lr_wall
 300+ 9888 3E B7                ld a,_mediumwall_1
 301+ 988A 12                   ld (de),a
 302+ 988B 11 54 C1             ld de,$c154             ;1 line left of our wall face
 303+ 988E 0E 0A                ld c,10                  ;draw 10 columns to the border
 304+ 9890 E5           loop86: push hl
 305+ 9891 06 04                ld b,4                  ;4 chars high
 306+ 9893 DD 7E 00             ld a,(ix+0)             ;check our character
 307+ 9896 FE 20                cp ' '                  ;should be space indicating noting there
 308+ 9898 CC 11 99             call z,loop93
 309+ 989B DD 2B                dec ix
 310+ 989D E1                   pop hl
 311+ 989E 2B                   dec hl                  ;move left 1 line in the display
 312+ 989F 0D                   dec c
 313+ 98A0 C2 90 98             jp nz,loop86            ;do this 5 times
 314+ 98A3
 315+ 98A3              ;now do the right side
 316+ 98A3 21 59 C1             ld hl,$c159             ;we should be at the top right of the face
 317+ 98A6 DD 21 59 C1          ld ix,$c159
 318+ 98AA 11 1F FA             ld de,lr_wall
 319+ 98AD 3E B7                ld a,_mediumwall_1
 320+ 98AF 12                   ld (de),a
 321+ 98B0 0E 0A                ld c,10                  ;draw 10 columns to the border
 322+ 98B2 E5           loop87: push hl
 323+ 98B3 06 04                ld b,4                 ;4 chars high
 324+ 98B5 DD 7E 00             ld a,(ix+0)             ;check our character
 325+ 98B8 FE 20                cp ' '                  ;should be space indicating noting there
 326+ 98BA C2 C0 98             jp nz,loop88            ;skip over if no space there
 327+ 98BD CC 11 99             call z,loop93
 328+ 98C0 DD 23        loop88: inc ix
 329+ 98C2                               ;do the next line
 330+ 98C2 E1                   pop hl
 331+ 98C3 23                   inc hl
 332+ 98C4 0D                   dec c
 333+ 98C5 C2 B2 98             jp nz,loop87
 334+ 98C8 C9                   ret                     ;exit routine totally
 335+ 98C9
 336+ 98C9              cp_wall_5:
 337+ 98C9              ;do left side first - check for char ' ' showing nothing drawn there
 338+ 98C9
 339+ 98C9 21 77 C1             ld hl,$c177             ;we should be at the top left of the face
 340+ 98CC DD 21 77 C1          ld ix,$c177
 341+ 98D0              ;        ld de,$c176             ;1 line left of our wall face
 342+ 98D0 11 1F FA             ld de,lr_wall
 343+ 98D3 3E B4                ld a,_smallwall
 344+ 98D5 12                   ld (de),a
 345+ 98D6
 346+ 98D6 0E 0D                ld c,13                  ;draw 10 columns to the border
 347+ 98D8 E5           loop89: push hl
 348+ 98D9 06 02                ld b,2                  ;4 chars high
 349+ 98DB DD 7E 00             ld a,(ix+0)             ;check our character
 350+ 98DE FE A2                cp _bottomblack         ;should be space indicating noting there
 351+ 98E0 CC 11 99             call z,loop93
 352+ 98E3 DD 2B                dec ix
 353+ 98E5 E1                   pop hl
 354+ 98E6 2B                   dec hl                  ;move left 1 line in the display
 355+ 98E7 0D                   dec c
 356+ 98E8 C2 D8 98             jp nz,loop89            ;do this 5 times
 357+ 98EB
 358+ 98EB              ;now do the right side
 359+ 98EB 21 76 C1             ld hl,$c176             ;we should be at the top right of the face
 360+ 98EE DD 21 76 C1          ld ix,$c176
 361+ 98F2              ;        ld de,$c176             ;1 line left of our wall face
 362+ 98F2 11 1F FA             ld de,lr_wall
 363+ 98F5 3E B4                ld a,_smallwall
 364+ 98F7 12                   ld (de),a
 365+ 98F8
 366+ 98F8 0E 0F                ld c,15                  ;draw 10 columns to the border
 367+ 98FA E5           loop871:push hl
 368+ 98FB 06 02                ld b,2                  ;2 chars high
 369+ 98FD DD 7E 00             ld a,(ix+0)             ;check our character
 370+ 9900 FE A2                cp _bottomblack         ;should be space indicating noting there
 371+ 9902 C2 08 99             jp nz,loop881            ;skip over if no space there
 372+ 9905 CC 11 99             call z,loop93
 373+ 9908 DD 23        loop881:inc ix
 374+ 990A                               ;do the next line
 375+ 990A E1                   pop hl
 376+ 990B 23                   inc hl
 377+ 990C 0D                   dec c
 378+ 990D C2 FA 98             jp nz,loop871
 379+ 9910 C9                   ret                     ;exit routine totally
 380+ 9911
 381+ 9911
 382+ 9911              ;#######################################################
 383+ 9911              ;This routine draws the end wall blocks left & right
 384+ 9911              ;######################################################
 385+ 9911
 386+ 9911              ;it matches so draw a wall face by copying the existing one!
 387+ 9911              loop93:; dec de                  ;go 1 line left
 388+ 9911 1A           loop92: ld a,(de)
 389+ 9912 77                   ld (hl),a
 390+ 9913 D5                   push de
 391+ 9914 11 21 00             ld de,33
 392+ 9917 19                   add hl,de               ;go to next line
 393+ 9918 D1                   pop de
 394+ 9919 10 F6                djnz loop92
 395+ 991B
 396+ 991B C9                   ret
 397+ 991C
 398+ 991C              ;#################################################################
 399+ 991C              ;#################################################################
 400+ 991C              ;draw colours     ; go through char display file and paint colours
 401+ 991C              ;#################################################################
 402+ 991C              ;#################################################################
 403+ 991C
 404+ 991C
 405+ 991C 28 00        wallcol       dw  40             ;bright red
 406+ 991E              skycol        equ 80            ; grey paper, black ink
 407+ 991E              floorcol      equ 98             ; brown paper, black ink
 408+ 991E              ;corridcol     equ 112            ; yellow paper, black ink
 409+ 991E 28           sky_floor     db  40            ;store current sky or floor colour
 410+ 991F 00           wall_temp     db  0             ;temporary store for wall colour graduation
 411+ 9920 00 C3        scr_attr_add  dw $c300  ;22528          ;start of spectrum attributes after char screen or 22528 actual sceen
 412+ 9922
 413+ 9922              ; go through the display file at c000, check the character, change the colour
 414+ 9922              ; if at row 26, start on next line at far left (0)
 415+ 9922              ; do it again until you reach line 24 and column 25
 416+ 9922
 417+ 9922              ; built character display is at location c000
 418+ 9922
 419+ 9922 3E 50        draw_colours: ld a, skycol           ; set the sky colour
 420+ 9924 32 1E 99                   ld (sky_floor),a
 421+ 9927 97                         sub a                 ; make a zero
 422+ 9928 32 0B FA                   ld (left),a
 423+ 992B 01 0F 03                   ld bc,768+15;783             ; 768 attributes to fill
 424+ 992E ED 5B 20 99                ld de,(scr_attr_add)  ; start of spectrum attributes after char screen
 425+ 9932 21 00 C0                   ld hl,$c000           ; start of zx81 display file in memory
 426+ 9935
 427+ 9935 CD 2C 9A     here:         call set_wall_col     ;set the wall colour graduation colour
 428+ 9938 CD 60 99                   call loop_1
 429+ 993B A7                         and a                 ;reset zero
 430+ 993C 23                         inc hl                ;current character memory we are checking
 431+ 993D 13                         inc de                ;current attribute location
 432+ 993E 0B                         dec bc                ;number of attribute cells to traverse
 433+ 993F 78                         ld a,b
 434+ 9940 FE 00                      cp 0
 435+ 9942 20 F1                      jr nz,here
 436+ 9944 79                         ld a,c
 437+ 9945 FE 00                      cp 0             ;dec on single reg affects flags
 438+ 9947
 439+ 9947 28 02                      jr z,lastcol     ;colour in the last block before exiting
 440+ 9949 18 EA                      jr here
 441+ 994B
 442+ 994B 3A 1E 99     lastcol:      ld a,(sky_floor)   ; colour in the last square
 443+ 994E                                               ; plus last 7  squares
 444+ 994E 12                         ld(de),a
 445+ 994F 3E 70                      ld a,112
 446+ 9951 13                         inc de
 447+ 9952 12                         ld (de),a
 448+ 9953 13                         inc de
 449+ 9954 12                         ld (de),a
 450+ 9955 13                         inc de
 451+ 9956 12                         ld (de),a
 452+ 9957 13                         inc de
 453+ 9958 12                         ld (de),a
 454+ 9959 13                         inc de
 455+ 995A 12                         ld (de),a
 456+ 995B 13                         inc de
 457+ 995C 12                         ld (de),a
 458+ 995D 13                         inc de
 459+ 995E 12                         ld (de),a
 460+ 995F
 461+ 995F C9                         ret
 462+ 9960
 463+ 9960              ;start checking chars and setting colours
 464+ 9960
 465+ 9960 7E           loop_1:        ld a, (hl)       ; get value at start of zx81 display file
 466+ 9961 FE B5                       cp _mediumwall            ; top left triangle
 467+ 9963 20 07                       jr nz, next1
 468+ 9965 3A 1C 99                    ld a, (wallcol)
 469+ 9968 12                          ld (de),a        ; colour it if it matches
 470+ 9969 C3 F9 99                    jp next_pos      ; go on to next char position
 471+ 996C
 472+ 996C FE AF        next1:         cp _black            ; top right triangle
 473+ 996E 20 06                       jr nz, next2
 474+ 9970 3E FE                       ld a, 254        ;black paper, black ink
 475+ 9972 12                          ld (de),a        ; colour it if it matches
 476+ 9973 C3 F9 99                    jp next_pos      ; go on to next char position
 477+ 9976
 478+ 9976 FE B3        next2:         cp _topcorner4           ; top left triangle
 479+ 9978 20 06                       jr nz, next3
 480+ 997A 3E 50                       ld a,skycol          ;paper cyan, ink 1
 481+ 997C 12                          ld (de),a        ; colour it if it matches
 482+ 997D C3 F9 99                    jp next_pos      ; go on to next char position
 483+ 9980
 484+ 9980 FE B0        next3:         cp _topcorner1            ; top left triangle
 485+ 9982 20 06                       jr nz, next4
 486+ 9984 3E 62                       ld a,floorcol
 487+ 9986 12                          ld (de),a        ; colour it if it matches
 488+ 9987 C3 F9 99                    jp next_pos      ; go on to next char position
 489+ 998A
 490+ 998A FE B6        next4:         cp _largewall            ; look for wall character
 491+ 998C 20 07                       jr nz, next5
 492+ 998E 3A 1C 99                    ld a,  (wallcol)
 493+ 9991 12                          ld (de),a        ; colour it if it matches
 494+ 9992 C3 F9 99                    jp next_pos      ; go on to next char position
 495+ 9995
 496+ 9995 FE B4        next5:        cp _smallwall            ;was char 09 - lower middle of screen wall character bottom
 497+ 9997 20 07                      jr nz, next6
 498+ 9999 3A 1C 99                   ld a,  (wallcol)
 499+ 999C 12                         ld (de),a
 500+ 999D C3 F9 99                   jp next_pos
 501+ 99A0
 502+ 99A0 FE B7        next6:        cp _mediumwall_1            ;was chr 10 - middle of screen upper wall character
 503+ 99A2 20 07                      jr nz, next7
 504+ 99A4 3A 1C 99                   ld a, (wallcol)         ;
 505+ 99A7 12                         ld (de),a
 506+ 99A8 C3 F9 99                   jp next_pos
 507+ 99AB
 508+ 99AB FE A9        next7:        cp _topleft5            ;was chr 10 - middle of screen upper wall character
 509+ 99AD 20 06                      jr nz, next8
 510+ 99AF 3E 50                      ld a, skycol         ;
 511+ 99B1 12                         ld (de),a
 512+ 99B2 C3 F9 99                   jp next_pos
 513+ 99B5
 514+ 99B5 FE B8        next8:        cp _hugewall
 515+ 99B7 20 07                      jr nz, next9
 516+ 99B9 3A 1C 99                   ld a, (wallcol)         ;
 517+ 99BC 12                         ld (de),a
 518+ 99BD C3 F9 99                   jp next_pos
 519+ 99C0
 520+ 99C0 FE 8E        next9:        cp $8e            ;stretched wall 5
 521+ 99C2 20 07                      jr nz, next10
 522+ 99C4 3A 1C 99                   ld a, (wallcol)         ;
 523+ 99C7 12                         ld (de),a
 524+ 99C8 C3 F9 99                   jp next_pos
 525+ 99CB
 526+ 99CB FE 8D        next10:       cp $8d             ;stretched wall 5 more
 527+ 99CD 20 0A                      jr nz, next11
 528+ 99CF 3A 1C 99                   ld a, (wallcol)         ;
 529+ 99D2 12                         ld (de),a
 530+ 99D3 3A 1C 99                   ld a, (wallcol)         ;
 531+ 99D6 C3 F9 99                   jp next_pos
 532+ 99D9
 533+ 99D9 FE 8B        next11:       cp $8b             ;stretched wall 5 more
 534+ 99DB 20 0A                      jr nz, next12
 535+ 99DD 3A 1C 99                   ld a, (wallcol)         ;
 536+ 99E0 12                         ld (de),a
 537+ 99E1 3A 1C 99                   ld a, (wallcol)         ;
 538+ 99E4 C3 F9 99                   jp next_pos
 539+ 99E7
 540+ 99E7 FE 8C        next12:       cp $8c             ;stretched wall 5 more
 541+ 99E9 20 0A                      jr nz, next20
 542+ 99EB 3A 1C 99                   ld a, (wallcol)         ;
 543+ 99EE 12                         ld (de),a
 544+ 99EF 3A 1C 99                   ld a, (wallcol)         ;
 545+ 99F2 C3 F9 99                   jp next_pos
 546+ 99F5
 547+ 99F5              ;draw sky or floor colour as we found no matches above
 548+ 99F5
 549+ 99F5 3A 1E 99     next20         ld a,(sky_floor) ;
 550+ 99F8 12                          ld (de),a        ; colour it if it matches
 551+ 99F9 3A 0B FA     next_pos:      ld a, (left)
 552+ 99FC 3C                          inc a
 553+ 99FD FE 19                       cp 25            ; are we at 24th column?
 554+ 99FF 32 0B FA                    ld (left),a
 555+ 9A02 C0                          ret nz           ; return if not
 556+ 9A03
 557+ 9A03              ;now do paper colour of score and nav bit on right
 558+ 9A03                             ;now decrease bc by 7 & increase display pos by 7
 559+ 9A03                             ;to start of next line
 560+ 9A03 97                          sub a            ; zero a register
 561+ 9A04 32 0B FA                    ld (left),a      ; back to start
 562+ 9A07 3E 08                       ld a,8           ; 7 spaces to next line
 563+ 9A09 0B           loop_4:        dec bc           ;change ldir count
 564+ 9A0A 23                          inc hl
 565+ 9A0B 13                          inc de
 566+ 9A0C F5                          push af
 567+ 9A0D 3E 70                       ld a,112         ;yellow paper, ink 9
 568+ 9A0F 12                          ld (de),a
 569+ 9A10 F1                          pop af
 570+ 9A11 A7                          and a           ;move screen print position
 571+ 9A12 3D                          dec a
 572+ 9A13 20 F4                       jr nz, loop_4
 573+ 9A15 1B                          dec de           ; get to start of spectrum line in the display
 574+ 9A16
 575+ 9A16                             ; check if we are below the middles of the display
 576+ 9A16                             ; so we change the 'white' colour to floor
 577+ 9A16 E5                          push hl
 578+ 9A17 D5                          push de
 579+ 9A18                            ; 22912 is the start of the floor level
 580+ 9A18                             ; de holds current position in spectrum display
 581+ 9A18
 582+ 9A18
 583+ 9A18 2A 20 99                    ld hl,(scr_attr_add)
 584+ 9A1B ED 34 7F 01                 add hl,383        ;this for display at 22528 is 22911   ; start of first floor line
 585+ 9A1F ED 52                       sbc hl,de        ;are we there yet?
 586+ 9A21 C2 29 9A                    jp nz,exit2 ;was nz
 587+ 9A24 3E 62                       ld a,floorcol
 588+ 9A26 32 1E 99                    ld (sky_floor),a
 589+ 9A29 D1           exit2:         pop de
 590+ 9A2A E1                          pop hl
 591+ 9A2B C9                          ret
 592+ 9A2C
 593+ 9A2C
 594+ 9A2C              set_wall_col:
 595+ 9A2C                              ;set the wall colour graduation colour from light (top part) to dark(bottom part of wall) in 6 increments
 596+ 9A2C                              ;de holds current attribute cell we are colouring in
 597+ 9A2C E5                           push hl
 598+ 9A2D D5                           push de
 599+ 9A2E                              ;de holds current attribute cell we are colouring in
 600+ 9A2E
 601+ 9A2E 3E BC                        ld a,188
 602+ 9A30 2A 20 99                     ld hl,(scr_attr_add)     ;top of the display
 603+ 9A33 B7 ED 52                     sub hl,de
 604+ 9A36 20 05                        jr nz,setcol_1   ;check next quarter of display
 605+ 9A38 32 1C 99                     ld (wallcol),a
 606+ 9A3B 18 5D                        jr setcol_exit
 607+ 9A3D
 608+ 9A3D
 609+ 9A3D C6 02        setcol_1:       add a,2
 610+ 9A3F 2A 20 99                     ld hl,(scr_attr_add)
 611+ 9A42 ED 34 80 00                  add hl,128    ;next 1/6 of the display
 612+ 9A46 B7 ED 52                     sub hl,de
 613+ 9A49 20 05                        jr nz,setcol_2   ;check next 1/6th of display
 614+ 9A4B 32 1C 99                     ld (wallcol),a
 615+ 9A4E 18 4A                        jr setcol_exit
 616+ 9A50
 617+ 9A50 C6 02        setcol_2        add a,2
 618+ 9A52 2A 20 99                     ld hl,(scr_attr_add)
 619+ 9A55 ED 34 00 01                  add hl,256     ;next 1/6  down of the display
 620+ 9A59 B7 ED 52                     sub hl,de
 621+ 9A5C 20 05                        jr nz,setcol_3   ;check next 1/6th of display
 622+ 9A5E 32 1C 99                     ld (wallcol),a
 623+ 9A61 18 37                        jr setcol_exit
 624+ 9A63
 625+ 9A63 C6 02        setcol_3        add a,2
 626+ 9A65 2A 20 99                     ld hl,(scr_attr_add)
 627+ 9A68 ED 34 80 01                  add hl,384     ;    ;next 1/6 of the display
 628+ 9A6C B7 ED 52                     sub hl,de
 629+ 9A6F 20 05                        jr nz,setcol_4   ;check next 1/6th of display
 630+ 9A71 32 1C 99                     ld (wallcol),a
 631+ 9A74 18 24                        jr setcol_exit
 632+ 9A76
 633+ 9A76 C6 02        setcol_4        add a,2
 634+ 9A78 2A 20 99                     ld hl,(scr_attr_add)
 635+ 9A7B ED 34 00 02                  add hl,512    ;next 1/6 of the display
 636+ 9A7F B7 ED 52                     sub hl,de
 637+ 9A82 20 05                        jr nz,setcol_5   ;check next 1/6th of display
 638+ 9A84 32 1C 99                     ld (wallcol),a
 639+ 9A87 18 11                        jr setcol_exit
 640+ 9A89
 641+ 9A89 C6 02        setcol_5        add a,2
 642+ 9A8B 2A 20 99                     ld hl,(scr_attr_add)
 643+ 9A8E ED 34 80 02                  add hl,640     ;bottom 6th of the display
 644+ 9A92 B7 ED 52                     sub hl,de
 645+ 9A95 20 03                        jr nz,setcol_exit   ;check next 1/6th of display
 646+ 9A97 32 1C 99                     ld (wallcol),a
 647+ 9A9A
 648+ 9A9A D1           setcol_exit:    pop de
 649+ 9A9B E1                           pop hl
 650+ 9A9C C9                           ret
 651+ 9A9D
 652+ 9A9D              ;#######################################################################
 653+ 9A9D              ;setup right hand side of the screen
 654+ 9A9D
 655+ 9A9D              draw_screen_right:
 656+ 9A9D
 657+ 9A9D DD 21 03 82                ld ix,message_border1       ;top border Message
 658+ 9AA1 CD CB 81                   CALL print_message
 659+ 9AA4 DD 21 0E 82                ld ix,message_get       ;"Get Out" Message
 660+ 9AA8 CD CB 81                   CALL print_message
 661+ 9AAB DD 21 19 82                ld ix,message_out       ;"Get Out" Message
 662+ 9AAF CD CB 81                   CALL print_message
 663+ 9AB2 DD 21 24 82                ld ix,message_border4       ;top border Message
 664+ 9AB6 CD CB 81                   CALL print_message
 665+ 9AB9                            ;do some colouring around the 'get out' words
 666+ 9AB9 21 39 58                   ld hl,22585
 667+ 9ABC 3E 94                      ld a,148
 668+ 9ABE 77                         ld (hl),A
 669+ 9ABF 21 3F 58                   ld hl,22585+6
 670+ 9AC2 77                         ld (hl),a
 671+ 9AC3 21 59 58                   ld hl,22617
 672+ 9AC6 77                         ld (hl),a
 673+ 9AC7 21 5F 58                   ld hl,22617+6
 674+ 9ACA 77                         ld (hl),a
 675+ 9ACB                            ;print "level" words
 676+ 9ACB DD 21 7E 82                ld ix,message_level       ;top border Message
 677+ 9ACF CD CB 81                   CALL print_message
 678+ 9AD2              ;now print the level numbers
 679+ 9AD2 DD 21 15 9B                ld ix,L00       ;top border Message
 680+ 9AD6 CD CB 81                   CALL print_message
 681+ 9AD9 DD 21 1C 9B                ld ix,L01       ;top border Message
 682+ 9ADD CD CB 81                   CALL print_message
 683+ 9AE0 DD 21 23 9B                ld ix,L23      ;top border Message
 684+ 9AE4 CD CB 81                   CALL print_message
 685+ 9AE7 DD 21 2A 9B                ld ix,L45        ;top border Message
 686+ 9AEB CD CB 81                   CALL print_message
 687+ 9AEE DD 21 31 9B                ld ix,L67       ;top border Message
 688+ 9AF2 CD CB 81                   CALL print_message
 689+ 9AF5 DD 21 38 9B                ld ix,L89       ;top border Message
 690+ 9AF9 CD CB 81                   CALL print_message
 691+ 9AFC DD 21 3F 9B                ld ix,L1011       ;top border Message
 692+ 9B00 CD CB 81                   CALL print_message
 693+ 9B03 DD 21 46 9B                ld ix,L1213       ;top border Message
 694+ 9B07 CD CB 81                   CALL print_message
 695+ 9B0A DD 21 4D 9B                ld ix,L1415
 696+ 9B0E CD CB 81                   CALL print_message
 697+ 9B11 CD 54 9B                   call set_floor_colour
 698+ 9B14 C9                         ret
 699+ 9B15
 700+ 9B15 06 1B 86 20  L00           db 6,27,134,     " 0 ",$7f
 700+ 9B19 30 20 7F
 701+ 9B1C 07 1B 86 20  L01           db 7,27,134,     " 1 ",$7f
 701+ 9B20 31 20 7F
 702+ 9B23 08 1B 86 32  L23           db 8,27,134,     "2 3",$7f
 702+ 9B27 20 33 7F
 703+ 9B2A 09 1B 86 34  L45           db 9,27,134,     "4 5",$7f
 703+ 9B2E 20 35 7F
 704+ 9B31 0A 1B 86 36  L67           db 10,27,134,    "6 7",$7f
 704+ 9B35 20 37 7F
 705+ 9B38 0B 1B 86 38  L89           db 11,27,134,    "8 9",$7f
 705+ 9B3C 20 39 7F
 706+ 9B3F 0C 1B 86 D7  L1011         db 12,27,134,$d7," ",$d8,$7f
 706+ 9B43 20 D8 7F
 707+ 9B46 0D 1B 86 D9  L1213         db 13,27,134,$d9," ",$da,$7f
 707+ 9B4A 20 DA 7F
 708+ 9B4D 0E 1B 86 DB  L1415         db 14,27,134,$db," ",$dc,$7f
 708+ 9B51 20 DC 7F
 709+ 9B54
 710+ 9B54              ;###################################################################
 711+ 9B54
 712+ 9B54              ;set floor colour on right of the display - shows what floor we are on
 713+ 9B54
 714+ 9B54              set_floor_colour:
 715+ 9B54 AF                   xor a               ;zero a reg
 716+ 9B55 47                   ld b,a
 717+ 9B56 2A 22 FA             ld hl,(cur_map)     ;get our current map
 718+ 9B59 55                   ld d,l
 719+ 9B5A 00                   nop;dec d               ;need to point 1 less
 720+ 9B5B 1E 02                ld e,2
 721+ 9B5D ED 30                mul de              ;multiply our current map number by 2
 722+ 9B5F 21 6A 9B             ld hl,data_table
 723+ 9B62 19                   add hl,de           ;should now be pointing to the correct place in the table
 724+ 9B63 5E                   ld e,(hl)
 725+ 9B64 23                   inc hl
 726+ 9B65 56                   ld d,(hl)
 727+ 9B66                      ;now colour it white on screen
 728+ 9B66 3E 87                ld a,135
 729+ 9B68 12                   ld (de),a
 730+ 9B69 C9                   ret
 731+ 9B6A
 732+ 9B6A
 733+ 9B6A
 734+ 9B6A
 735+ 9B6A              data_table:
 736+ 9B6A DC 58                dw  $58dc       ;23003-256    ;GND
 737+ 9B6C FC 58                dw  $58fc       ;23004-224    ;1
 738+ 9B6E 1B 59                dw  $591b       ;23003-192    ;2
 739+ 9B70 1D 59                dw  $591d       ;23005-192    ;3
 740+ 9B72 3B 59                dw  $593b       ;23003-160    ;4
 741+ 9B74 3D 59                dw  $593d       ;23005-160    ;5
 742+ 9B76 5B 59                dw  $595b       ;23003-128    ;6
 743+ 9B78 5D 59                dw  $595d       ;23005-128    ;7
 744+ 9B7A 7B 59                dw  $597b       ;23003-96    ;8
 745+ 9B7C 7D 59                dw  $597d       ;23005-96    ;9
 746+ 9B7E 9B 59                dw  $599b       ;23003-64    ;10
 747+ 9B80 9D 59                dw  $599d       ;23005-64    ;11
 748+ 9B82 BB 59                dw  $59bb       ;23003-32    ;12
 749+ 9B84 BD 59                dw  $59bd       ;23005-32    ;13
 750+ 9B86 DB 59                dw  $59db       ;23003       ;14
 751+ 9B88 DD 59                dw  $59dd       ;23005       ;15
 752+ 9B8A              ;22528 to 23296
 753+ 9B8A
 754+ 9B8A
 755+ 9B8A
# file closed: src/5-rd3dmazeV6.asm
 458  9B8A                  INCLUDE "6-rd3dmazeV6.asm" ; draw right side of maze
# file opened: src/6-rd3dmazeV6.asm
   1+ 9B8A
   2+ 9B8A              ;############################################
   3+ 9B8A              ;############################################
   4+ 9B8A
   5+ 9B8A              ;draw section the right side of the screen
   6+ 9B8A
   7+ 9B8A              ;############################################
   8+ 9B8A              ;############################################
   9+ 9B8A
  10+ 9B8A              draw_right_side:
  11+ 9B8A
  12+ 9B8A 3A 06 FA                   ld a,(depth)
  13+ 9B8D FE 06                      cp 6
  14+ 9B8F CA AE 9B                   jp z,draw_6r
  15+ 9B92 FE 05        do_5r:        cp 5
  16+ 9B94 CA B8 9B                   jp z,draw_5r
  17+ 9B97 FE 04                      cp 4
  18+ 9B99 CA 74 9D                   jp z,draw_4r
  19+ 9B9C FE 03                      cp 3
  20+ 9B9E CA 5A 9F                   jp z,draw_3r
  21+ 9BA1 FE 02                      cp 2
  22+ 9BA3 CA DF A0                   jp z,draw_2r
  23+ 9BA6 FE 01                      cp 1
  24+ 9BA8 CA 7A A1                   jp z,draw_1r
  25+ 9BAB C3 10 A2                   jp draw_0r
  26+ 9BAE              ;end of routine
  27+ 9BAE                        ;    ret
  28+ 9BAE
  29+ 9BAE              ;############################################
  30+ 9BAE              ;############################################
  31+ 9BAE
  32+ 9BAE              ;draw section 6 right - well, nothing to do atm!
  33+ 9BAE
  34+ 9BAE              ;############################################
  35+ 9BAE              ;############################################
  36+ 9BAE
  37+ 9BAE              draw_6r:
  38+ 9BAE              ;do nothing on screen as already done via left side draw
  39+ 9BAE              ;just incremement where we are in the maze view
  40+ 9BAE
  41+ 9BAE 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  42+ 9BB1 CD 5D 8E             call load_de            ;get left and right and front jump into de reg
  43+ 9BB4 19                   add hl,de               ;Additional add to simulate layer 6
  44+ 9BB5 22 25 FA             ld (furthest_point),hl ;re save it
  45+ 9BB8
  46+ 9BB8              ;############################################
  47+ 9BB8              ;############################################
  48+ 9BB8
  49+ 9BB8              ;draw section 5 right
  50+ 9BB8
  51+ 9BB8              ;############################################
  52+ 9BB8              ;############################################
  53+ 9BB8
  54+ 9BB8              draw_5r:
  55+ 9BB8
  56+ 9BB8              ;ret
  57+ 9BB8              ; hl=maze location being drawn.
  58+ 9BB8              ; now determine what to draw for this section.
  59+ 9BB8
  60+ 9BB8 97                   sub a                   ;make 'a' zero
  61+ 9BB9 3D                   dec a                   ;make it 255 to show nothing to do
  62+ 9BBA 32 27 FA             ld (blockid),a          ;save it for wall drawing
  63+ 9BBD
  64+ 9BBD              ;first we need to decrement how far we can see to the layer
  65+ 9BBD              ;we are working on
  66+ 9BBD
  67+ 9BBD 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  68+ 9BC0 CD 5D 8E             call load_de            ;get left and right and front jump into de reg
  69+ 9BC3
  70+ 9BC3 19                   add hl,de               ;Additional add to simulate layer 6
  71+ 9BC4 22 25 FA             ld (furthest_point),hl ;re save it
  72+ 9BC7
  73+ 9BC7 11 01 00             ld de,$0001             ;to move the display position +1
  74+ 9BCA ED 53 11 FA          ld (var4),de
  75+ 9BCE
  76+ 9BCE              ;move the maze location pointer 1 to the right - used for all
  77+ 9BCE              ;remaining blocks to test if there is a wall there or not.
  78+ 9BCE
  79+ 9BCE ED 5B 0D FA          ld de,(right)
  80+ 9BD2 19                   add hl,de
  81+ 9BD3 22 15 FA             ld (var6),hl            ;right position in maze from our location
  82+ 9BD6
  83+ 9BD6 ED 53 0F FA          ld (var3),de            ;display position +1
  84+ 9BDA 11 79 01             ld   de,$0179           ; offset to row 11 column 10 - left of  centre of the 3d view.
  85+ 9BDD CD EB 9B             call do_draw_5r
  86+ 9BE0
  87+ 9BE0 97                   sub a                   ;make reg a zero
  88+ 9BE1 32 1E FA             ld (var10),a            ;used in the maze wall drawing at layer 5
  89+ 9BE4 3A 27 FA             ld a,(blockid)          ;get the right hand maze wall location
  90+ 9BE7 3C                   inc a                   ;if blockid was 255 (UNUSED) its will now be zero
  91+ 9BE8                                              ;so
  92+ 9BE8 C3 74 9D             jp draw_4r              ;now draw the 4th level
  93+ 9BEB
  94+ 9BEB              do_draw_5r:
  95+ 9BEB
  96+ 9BEB 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
  97+ 9BEE 19                   add  hl,de
  98+ 9BEF
  99+ 9BEF
 100+ 9BEF              ; draw right half of the display.
 101+ 9BEF
 102+ 9BEF 06 04                ld b,4                  ; count for 3 columns right of our position
 103+ 9BF1 ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
 104+ 9BF5
 105+ 9BF5              ;check if we are at the bottom right of the maze
 106+ 9BF5              ;if so, there is no wall after position 255 so point us to
 107+ 9BF5              ;position 240 and fake the wall!
 108+ 9BF5              ;;;        ld a,e
 109+ 9BF5              ;;;        cp 255
 110+ 9BF5              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 111+ 9BF5              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 112+ 9BF5
 113+ 9BF5
 114+ 9BF5              ;now move the maze pointer right (+1) 1 position
 115+ 9BF5              ;so we can read the type of walls to our left
 116+ 9BF5
 117+ 9BF5              ;cont_3:
 118+ 9BF5              ;*         push hl
 119+ 9BF5              ;*        ld hl,(left)
 120+ 9BF5              ;*        add hl,de
 121+ 9BF5              ;*        ex de,hl
 122+ 9BF5              ;*        pop hl
 123+ 9BF5
 124+ 9BF5 EB                   ex   de,hl              ; transfer de to hl.
 125+ 9BF6
 126+ 9BF6              ;       hl = furthest point in the maze
 127+ 9BF6              ;       de = d_file location to store byte to display
 128+ 9BF6
 129+ 9BF6              ;we have to load the first plot position with a corner bit to show
 130+ 9BF6              ;the end of the wall at the position we can see next to the center
 131+ 9BF6              ;plot position on section 6
 132+ 9BF6              ;then, while we draw the other blocks we can see we just want top and
 133+ 9BF6              ;bottom blacks pointed so will use var1 and var 2 to hold the
 134+ 9BF6              ;character block we need to print.
 135+ 9BF6
 136+ 9BF6              ;2020 - we dont need to do this as we are drawing
 137+ 9BF6              ;a side wall and wont see the hashes!
 138+ 9BF6
 139+ 9BF6 3E B4                ld a,_smallwall;_topright5          ; load with top right char $a9
 140+ 9BF8
 141+ 9BF8 32 04 FA             ld (var1),a             ;top of mwadd udg
 142+ 9BFB              ;        inc a
 143+ 9BFB              ;        inc a
 144+ 9BFB              ;        ld a,_smallwall;_topright5          ; load with top right char $a9
 145+ 9BFB
 146+ 9BFB 32 05 FA             ld (var2),a             ;ld with bottom right wall udg char
 147+ 9BFE
 148+ 9BFE              loop8r:
 149+ 9BFE E5                   push hl
 150+ 9BFF
 151+ 9BFF              ;##############################################################################
 152+ 9BFF              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 153+ 9BFF
 154+ 9BFF 3A 28 FA             ld a,(maze_highbyte)
 155+ 9C02 BC                   cp h                    ;are we at the top part of the maze?
 156+ 9C03 CA 36 9C             jp z,cont_5a
 157+ 9C06                                              ;if we are on a different maze boundary
 158+ 9C06                                              ;then draw a maze wall as we are the top
 159+ 9C06                                              ;or north wall but maze data has no
 160+ 9C06                                              ;wall data.
 161+ 9C06                                              ;wall data.
 162+ 9C06              ;4 = 1st left wall
 163+ 9C06              ;3 = 2nd left wall
 164+ 9C06              ;2 = 3rd left wall
 165+ 9C06              ;1 = 4th left wall
 166+ 9C06
 167+ 9C06 78                   ld a,b                  ;our current wall counter
 168+ 9C07 FE 04                cp 4
 169+ 9C09 C2 14 9C             jp nz,b5_1                 ;its not wall 4
 170+ 9C0C 3E 01                ld a,1
 171+ 9C0E 47                   ld b,a
 172+ 9C0F C6 80                add a,128               ;make sure we set a wall!
 173+ 9C11 C3 6C 9C             jp  do_wall5a          ;jump straight to making an end wall
 174+ 9C14
 175+ 9C14 FE 03        b5_1:   cp 3
 176+ 9C16 C2 21 9C             jp nz,b5_2             ;its not wall 3
 177+ 9C19 3E 01                ld a,1
 178+ 9C1B 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 179+ 9C1C C6 80                add a,128               ;make sure we set a wall!
 180+ 9C1E C3 93 9C             jp do_2ndwall_r        ;draw the 2nd block to the left
 181+ 9C21
 182+ 9C21 FE 02        b5_2:   cp 2
 183+ 9C23 C2 2E 9C             jp nz,b5_3             ;its not wall 3
 184+ 9C26 3E 01                ld a,1
 185+ 9C28 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 186+ 9C29 C6 80                add a,128               ;make sure we set a wall!
 187+ 9C2B C3 DB 9C             jp do_3rdwall_r       ;draw the 2nd block to the left
 188+ 9C2E
 189+ 9C2E              ;a must = 1 if we get here.
 190+ 9C2E 3E 01        b5_3:   ld a,1
 191+ 9C30 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 192+ 9C31 C6 80                add a,128               ;make sure we set a wall!
 193+ 9C33 C3 28 9D             jp do_4thwall_r         ;jump straight to making an end wall
 194+ 9C36
 195+ 9C36              ;*############################################################################
 196+ 9C36
 197+ 9C36              ;now zero out the end wall variable
 198+ 9C36              cont_5a
 199+ 9C36 97                   sub a                   ;zero a reg
 200+ 9C37 32 17 FA             ld (end_wall),a           ;save 0 in the end wall variable
 201+ 9C3A
 202+ 9C3A
 203+ 9C3A              ;check we are at an outside maze wall
 204+ 9C3A 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 205+ 9C3B FE 81                cp _mh                  ;maze wall block
 206+ 9C3D 20 07                jr nz,cont10            ;its a wall block so need to draw the wall
 207+ 9C3F F5                   push af                 ;save which print location we are at
 208+ 9C40 3E 01                ld a,1                  ;for drawing the maze wall to the screen
 209+ 9C42 32 17 FA             ld (end_wall),a          ;edge
 210+ 9C45 F1                   pop af
 211+ 9C46              ;        ld b,1                  ;stop drawing more blocks as its an end wall
 212+ 9C46
 213+ 9C46 17           cont10: rla
 214+ 9C47 DA 5A 9C             jp c,do_wall5r          ;bit 7 (128)
 215+ 9C4A
 216+ 9C4A              ;        call do_no_wall5r      ; otherwise draw no wall
 217+ 9C4A
 218+ 9C4A              go_back5r:
 219+ 9C4A 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 220+ 9C4D 19                   add hl,de               ; holds current screen position
 221+ 9C4E EB                   ex de,hl
 222+ 9C4F E1                   pop hl
 223+ 9C50 D5                   push de
 224+ 9C51 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 225+ 9C55 19                   add hl,de               ; go left 1 block in the maze
 226+ 9C56 D1                   pop de
 227+ 9C57 10 A5                djnz loop8r
 228+ 9C59 C9                   ret
 229+ 9C5A
 230+ 9C5A
 231+ 9C5A              do_wall5r:
 232+ 9C5A
 233+ 9C5A              ;check if b=2 - if so we are not at a wall immediately next to our right
 234+ 9C5A              ;nor are we at an and wall. We are drawing the 2nd block to the right
 235+ 9C5A              ;b=3 for 3rd block to the right.
 236+ 9C5A
 237+ 9C5A 78                   ld a,b
 238+ 9C5B D6 01                sub 1
 239+ 9C5D CA 28 9D             jp z,do_4thwall_r       ;draw the cnd block to the right
 240+ 9C60
 241+ 9C60 78                   ld a,b                  ;b is our loop count
 242+ 9C61 D6 02                sub 2                   ;check if a=2
 243+ 9C63 CA DB 9C             jp z,do_3rdwall_r       ;draw the 2nd block to the right
 244+ 9C66
 245+ 9C66 78                   ld a,b
 246+ 9C67 D6 03                sub 3
 247+ 9C69 CA 93 9C             jp z,do_2ndwall_r       ;draw the cnd block to the right
 248+ 9C6C
 249+ 9C6C              ;b must = 4 if we get here
 250+ 9C6C
 251+ 9C6C              ;check if bit 2 is set as thats an end
 252+ 9C6C              ;and b must then be changed to 1 to stop drawing.
 253+ 9C6C
 254+ 9C6C              do_wall5a:
 255+ 9C6C CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 256+ 9C6E 28 04                jr z,draw8r
 257+ 9C70
 258+ 9C70 97                   sub a                  ;we Don't have an outside maze wall (end wall)
 259+ 9C71 32 17 FA             ld (end_wall),a           ;save that we are NOT at an end wall
 260+ 9C74
 261+ 9C74 D5           draw8r:  push de
 262+ 9C75 3A 04 FA             ld a,(var1)           ;top of wall udg
 263+ 9C78 12                   ld (de),a             ; insert the top of the wall.
 264+ 9C79
 265+ 9C79 13                   inc de
 266+ 9C7A 12                   ld (de),a             ; insert the top of the wall - 2nd right.
 267+ 9C7B 1B                   dec de
 268+ 9C7C              ;now check if we need to draw a black side on the right
 269+ 9C7C              ;by looking to the character to the right of the wall
 270+ 9C7C              ;and if there is not a wall already drawn, then draw a
 271+ 9C7C              ;black side
 272+ 9C7C
 273+ 9C7C 3E AA                ld a,_topright5         ;if not, draw the top left side
 274+ 9C7E 1B                   dec de                  ;move to the right of the bricks
 275+ 9C7F 12                   ld (de),a               ;draw a black and chevron side
 276+ 9C80 13                   inc de                  ;go back 1 space again
 277+ 9C81
 278+ 9C81 21 21 00     _x1r:   ld   hl,$0021           ;jump to the next line below
 279+ 9C84
 280+ 9C84 19                   add  hl,de
 281+ 9C85 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 282+ 9C88 77                   ld   (hl),a             ; insert the bottom of the wall.
 283+ 9C89 23                   inc hl
 284+ 9C8A 77                   ld   (hl),a             ; insert the top of the wall.
 285+ 9C8B 2B                   dec hl
 286+ 9C8C 2B                   dec hl                  ;look at the left block
 287+ 9C8D 3E AC                ld a,_bottomright5
 288+ 9C8F 77                   ld (hl),a
 289+ 9C90
 290+ 9C90 D1           _x2r:   pop de
 291+ 9C91
 292+ 9C91
 293+ 9C91 18 B7                jr go_back5r              ; jump back to main loop
 294+ 9C93
 295+ 9C93
 296+ 9C93              ;************************************
 297+ 9C93
 298+ 9C93              ;draw the wall for 2nd right layer
 299+ 9C93
 300+ 9C93              ;***********************************
 301+ 9C93
 302+ 9C93              do_2ndwall_r:
 303+ 9C93
 304+ 9C93 D5                   push de                 ;save the current acreen position
 305+ 9C94              ;1st check if theres a wall where we need to draw the black side
 306+ 9C94 1A                   ld a,(de)
 307+ 9C95 FE B4                cp _smallwall
 308+ 9C97 CA 9D 9C             jp z,miss5              ;theres a wall drawn already so do not
 309+ 9C9A                                              ;draw any black sides & jump over
 310+ 9C9A
 311+ 9C9A 3E 91                ld   a,$91;b9              ;top right section 3 (1)
 312+ 9C9C 12                   ld   (de),a             ; insert the top of the wall.
 313+ 9C9D
 314+ 9C9D              ;now draw a red wall to the right of section 2
 315+ 9C9D 13           miss5:  inc de
 316+ 9C9E 3E B4                ld a,_smallwall
 317+ 9CA0 12                   ld (de),a
 318+ 9CA1 13                   inc de
 319+ 9CA2 12                   ld (de),a               ;draw 2nd one (4 wide)
 320+ 9CA3 13                   inc de
 321+ 9CA4 12                   ld (de),a               ;draw 3rd one (4 wide)
 322+ 9CA5              ;        inc de
 323+ 9CA5              ;        ld (de),a               ;draw 4th one (4 wide)
 324+ 9CA5
 325+ 9CA5               ;       dec de
 326+ 9CA5 1B                   dec de
 327+ 9CA6 1B                   dec de
 328+ 9CA7 1B                   dec de
 329+ 9CA8
 330+ 9CA8              ;now check if we need to draw a black side on the right
 331+ 9CA8              ;by looking to the character to the right of the wall
 332+ 9CA8              ;and if there is not a wall already drawn, then draw a
 333+ 9CA8              ;black side
 334+ 9CA8
 335+ 9CA8 1B                   dec de                  ;jump left 1 char in the display
 336+ 9CA9 1A                   ld a,(de)               ;read whats there
 337+ 9CAA 13                   inc de                  ;put our pointer back to the original position
 338+ 9CAB FE B4                cp _smallwall           ;is it a wall
 339+ 9CAD CA B5 9C             jp z,_x1r_2               ;if yes, do NOT draw a black side.
 340+ 9CB0 3E 90                ld a,$90             ;draw top right side
 341+ 9CB2 1B                   dec de
 342+ 9CB3 12                   ld (de),a               ;draw middle top bit
 343+ 9CB4 13                   inc de
 344+ 9CB5
 345+ 9CB5              ;top line done
 346+ 9CB5
 347+ 9CB5              ;now do the bottom line underneath
 348+ 9CB5
 349+ 9CB5              ;REMEMBER - 1 block is 2 8 bit squares at the section
 350+ 9CB5              _x1r_2
 351+ 9CB5 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 352+ 9CB8 19                   add  hl,de
 353+ 9CB9
 354+ 9CB9              ;1st check if theres a wall where we need to draw the black side
 355+ 9CB9 7E                   ld a,(hl)
 356+ 9CBA FE B4                cp _smallwall
 357+ 9CBC CA C2 9C             jp z, miss51
 358+ 9CBF
 359+ 9CBF 3E 94                ld a,$94                ;draw our rightmost wall bottom.
 360+ 9CC1 77                   ld   (hl),a             ; insert the bottom of the wall.
 361+ 9CC2
 362+ 9CC2              ;now draw a red wall to the right of section 2
 363+ 9CC2 23           miss51: inc hl
 364+ 9CC3 3E B4                ld a,_smallwall
 365+ 9CC5 77                   ld (hl),a
 366+ 9CC6 23                   inc hl
 367+ 9CC7 77                   ld (hl),a
 368+ 9CC8 23                   inc hl
 369+ 9CC9 77                   ld (hl),a               ;draw 3rd one (3 wide)
 370+ 9CCA 2B                   dec hl
 371+ 9CCB 2B                   dec hl
 372+ 9CCC 2B                   dec hl
 373+ 9CCD
 374+ 9CCD              ;now check if we need to draw a black side on the left of the lower half wall
 375+ 9CCD              ;do this by checking if the next block is already a wall just like above
 376+ 9CCD
 377+ 9CCD 2B                   dec hl      ;look at the left block
 378+ 9CCE 7E                   ld a,(hl)
 379+ 9CCF FE B4                cp _smallwall           ;is there a bottom wall5 here?
 380+ 9CD1 CA D7 9C             jp z,_x2r_2
 381+ 9CD4 3E 93                ld a,$93            ;draw leftmost bottom
 382+ 9CD6 77                   ld (hl),a
 383+ 9CD7
 384+ 9CD7 D1           _x2r_2  pop de
 385+ 9CD8 C3 4A 9C             jp go_back5r              ; jump back to main loop
 386+ 9CDB
 387+ 9CDB              ;##########################################
 388+ 9CDB
 389+ 9CDB              ;draw the wall for 3rd right layer
 390+ 9CDB
 391+ 9CDB              ;##########################################
 392+ 9CDB
 393+ 9CDB              do_3rdwall_r:
 394+ 9CDB
 395+ 9CDB D5                   push de                 ;save the current acreen position
 396+ 9CDC              ;1st check if theres a wall where we need to draw the black side
 397+ 9CDC 13                   inc de                  ;move our start location 3 spaces right
 398+ 9CDD 13                   inc de
 399+ 9CDE 13                   inc de
 400+ 9CDF
 401+ 9CDF              ;now draw a red wall to the right of section 2,  top half
 402+ 9CDF
 403+ 9CDF 3E B4                ld a,_smallwall;$8e
 404+ 9CE1 12                   ld (de),a
 405+ 9CE2 13                   inc de
 406+ 9CE3 12                   ld (de),a
 407+ 9CE4 13                   inc de
 408+ 9CE5 12                   ld (de),a
 409+ 9CE6 13                   inc de
 410+ 9CE7 12                   ld (de),a               ;draw 4th one (4 wide)
 411+ 9CE8
 412+ 9CE8 1B                   dec de                  ;move print position back for black wall
 413+ 9CE9 1B                   dec de
 414+ 9CEA 1B                   dec de
 415+ 9CEB
 416+ 9CEB              ;now check if we need to draw a black side on the right
 417+ 9CEB              ;by looking to the character to the right of the wall
 418+ 9CEB              ;and if there is not a wall already drawn, then draw a
 419+ 9CEB              ;black side
 420+ 9CEB
 421+ 9CEB 1B                   dec de                  ;jump left 1 char in the display
 422+ 9CEC 1A                   ld a,(de)               ;read whats there
 423+ 9CED 13                   inc de                  ;put our pointer back to the original position
 424+ 9CEE FE B4                cp _smallwall           ;is it a wall
 425+ 9CF0 CA 00 9D             jp z,_x1r_3               ;if yes, do NOT draw a black side.
 426+ 9CF3 3E B9                ld a,$b9             ;draw top right side
 427+ 9CF5 1B                   dec de
 428+ 9CF6 1B                   dec de
 429+ 9CF7 1B                   dec de
 430+ 9CF8 12                   ld (de),a
 431+ 9CF9 13                   inc de
 432+ 9CFA 3C                   inc a
 433+ 9CFB 12                   ld (de),a
 434+ 9CFC 3C                   inc a
 435+ 9CFD 13                   inc de
 436+ 9CFE 12                   ld (de),a
 437+ 9CFF
 438+ 9CFF 13                    inc de
 439+ 9D00                                              ;to wall start
 440+ 9D00
 441+ 9D00              ;top line done
 442+ 9D00
 443+ 9D00              ;now do the bottom line underneath
 444+ 9D00
 445+ 9D00              _x1r_3
 446+ 9D00 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 447+ 9D03 19                   add  hl,de
 448+ 9D04
 449+ 9D04 3E B4                ld a,_smallwall;$8e
 450+ 9D06 77                   ld (hl),a
 451+ 9D07 23                   inc hl
 452+ 9D08 77                   ld (hl),a
 453+ 9D09 23                   inc hl
 454+ 9D0A 77                   ld (hl),a
 455+ 9D0B 23                   inc hl
 456+ 9D0C 77                   ld (hl),a
 457+ 9D0D
 458+ 9D0D 2B                   dec hl
 459+ 9D0E 2B                   dec hl
 460+ 9D0F 2B                   dec hl
 461+ 9D10
 462+ 9D10
 463+ 9D10              ;now check if we need to draw a black side on the left of the lower half wall
 464+ 9D10              ;do this by checking if the next block is already a wall just like above
 465+ 9D10
 466+ 9D10 2B                   dec hl      ;look at the left block
 467+ 9D11 7E                   ld a,(hl)
 468+ 9D12 23                   inc hl
 469+ 9D13 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 470+ 9D15 CA 24 9D             jp z,_x2r_3
 471+ 9D18 3E BD                ld a,$bd            ;draw leftmost bottom
 472+ 9D1A 2B                   dec hl
 473+ 9D1B 2B                   dec hl
 474+ 9D1C 2B                   dec hl
 475+ 9D1D
 476+ 9D1D 77                   ld (hl),a
 477+ 9D1E 23                   inc hl
 478+ 9D1F 3C                   inc a
 479+ 9D20 77                   ld (hl),a
 480+ 9D21 23                   inc hl
 481+ 9D22 3C                   inc a
 482+ 9D23 77                   ld (hl),a
 483+ 9D24
 484+ 9D24 D1           _x2r_3  pop de
 485+ 9D25 C3 4A 9C             jp go_back5r              ; jump back to main loop
 486+ 9D28
 487+ 9D28              ;##########################################
 488+ 9D28
 489+ 9D28              ;draw the wall for 4th (and last!) right layer
 490+ 9D28
 491+ 9D28              ;##########################################
 492+ 9D28
 493+ 9D28              do_4thwall_r:
 494+ 9D28
 495+ 9D28              ;draw top half of wall
 496+ 9D28
 497+ 9D28 D5                   push de                 ;save the current acreen position
 498+ 9D29              ;1st check if theres a wall where we need to draw the black side
 499+ 9D29 13                   inc de
 500+ 9D2A 13                   inc de
 501+ 9D2B 13                   inc de
 502+ 9D2C 13                   inc de
 503+ 9D2D 13                   inc de
 504+ 9D2E 13                   inc de
 505+ 9D2F              ;now draw a red wall to the right of section 2,  top half
 506+ 9D2F
 507+ 9D2F 3E B4                ld a,_smallwall;$8d
 508+ 9D31 12                   ld (de),a
 509+ 9D32 13                   inc de
 510+ 9D33 12                   ld (de),a
 511+ 9D34
 512+ 9D34
 513+ 9D34 1B                   dec de                  ;move print position back for black wall
 514+ 9D35
 515+ 9D35              ;now check if we need to draw a black side on the right
 516+ 9D35              ;by looking to the character to the right of the wall
 517+ 9D35              ;and if there is not a wall already drawn, then draw a
 518+ 9D35              ;black side
 519+ 9D35
 520+ 9D35 1B                   dec de                  ;jump left 1 char in the display
 521+ 9D36 1A                   ld a,(de)               ;read whats there
 522+ 9D37 13                   inc de                  ;put our pointer back to the original position
 523+ 9D38 FE B4                cp _smallwall;$8e                 ;is it a wall
 524+ 9D3A CA 4E 9D             jp z,_x1r_31               ;if yes, do NOT draw a black side.
 525+ 9D3D 3E B9                ld a,$b9              ;draw top right side
 526+ 9D3F 1B                   dec de
 527+ 9D40 1B                   dec de
 528+ 9D41 1B                   dec de
 529+ 9D42 1B                   dec de
 530+ 9D43 12                   ld (de),a           ;draw 4 black sides
 531+ 9D44 13                   inc de
 532+ 9D45 3C                   inc a
 533+ 9D46 12                   ld (de),a
 534+ 9D47 3C                   inc a
 535+ 9D48 13                   inc de
 536+ 9D49 12                   ld (de),a
 537+ 9D4A 3C                   inc a
 538+ 9D4B 13                   inc de
 539+ 9D4C 12                   ld (de),a
 540+ 9D4D
 541+ 9D4D 13                   inc de              ;move to wall start
 542+ 9D4E
 543+ 9D4E
 544+ 9D4E              ;top line done
 545+ 9D4E
 546+ 9D4E              ;now do the bottom line underneath
 547+ 9D4E
 548+ 9D4E              _x1r_31
 549+ 9D4E 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 9D51 19                   add  hl,de
 551+ 9D52
 552+ 9D52 3E B4                ld a,_smallwall;$8d
 553+ 9D54 77                   ld (hl),a
 554+ 9D55 23                   inc hl
 555+ 9D56 77                   ld (hl),a
 556+ 9D57
 557+ 9D57 2B                   dec hl
 558+ 9D58
 559+ 9D58
 560+ 9D58              ;now check if we need to draw a black side on the left of the lower half wall
 561+ 9D58              ;do this by checking if the next block is already a wall just like above
 562+ 9D58
 563+ 9D58 2B                   dec hl      ;look at the left block
 564+ 9D59 7E                   ld a,(hl)
 565+ 9D5A 23                   inc hl
 566+ 9D5B FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 567+ 9D5D CA 70 9D             jp z,_x2r_31
 568+ 9D60
 569+ 9D60 3E BD                ld a,$bd            ;draw leftmost bottom
 570+ 9D62 2B                   dec hl
 571+ 9D63 2B                   dec hl
 572+ 9D64 2B                   dec hl
 573+ 9D65 2B                   dec hl
 574+ 9D66
 575+ 9D66 77                   ld (hl),a
 576+ 9D67 23                   inc hl
 577+ 9D68 3C                   inc a
 578+ 9D69 77                   ld (hl),a
 579+ 9D6A 23                   inc hl
 580+ 9D6B 3C                   inc a
 581+ 9D6C 77                   ld (hl),a
 582+ 9D6D 23                   inc hl
 583+ 9D6E 3C                   inc a
 584+ 9D6F 77                   ld (hl),a
 585+ 9D70
 586+ 9D70 D1           _x2r_31  pop de
 587+ 9D71 C3 4A 9C             jp go_back5r              ; jump back to main loop
 588+ 9D74
 589+ 9D74              ;############################################
 590+ 9D74              ;############################################
 591+ 9D74              ;draw layer 4 right
 592+ 9D74              ;############################################
 593+ 9D74              ;############################################
 594+ 9D74
 595+ 9D74              draw_4r
 596+ 9D74
 597+ 9D74
 598+ 9D74              ; jump straight into sjasmplus debugger
 599+ 9D74              ;        BREAK
 600+ 9D74              ;        ret
 601+ 9D74
 602+ 9D74
 603+ 9D74              ; hl=maze location being drawn.
 604+ 9D74              ; now determine what to draw for this section.
 605+ 9D74
 606+ 9D74
 607+ 9D74 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 608+ 9D77
 609+ 9D77 CD 5D 8E             call load_de            ;get left and right and front jump into de reg
 610+ 9D7A
 611+ 9D7A 19                   add hl,de               ;jump backwards along the user view 1 space
 612+ 9D7B 22 25 FA             ld (furthest_point),hl  ;load our last furthest point
 613+ 9D7E
 614+ 9D7E              ;we should also move our pointer left to read where the walls are.
 615+ 9D7E              ;this will be from this point onwards as we can see the blocks more fully
 616+ 9D7E
 617+ 9D7E              ;        ld de,(right)
 618+ 9D7E              ;        add hl,de               ;should be 1 place to the left now
 619+ 9D7E              ;        ld (furthest_point),hl ;re save it
 620+ 9D7E
 621+ 9D7E 11 01 00             ld de,$0001 ;$0003             ;to move the printed position +3
 622+ 9D81                                              ;not including black wall bit
 623+ 9D81 ED 53 11 FA          ld (var4),de
 624+ 9D85
 625+ 9D85
 626+ 9D85              ;we need to move pointer 1 to the right for wall checking
 627+ 9D85 ED 5B 0D FA          ld de,(right)
 628+ 9D89 19                   add hl,de
 629+ 9D8A 22 15 FA             ld (var6),hl
 630+ 9D8D
 631+ 9D8D ED 53 0F FA          ld (var3),de
 632+ 9D91 11 59 01             ld   de,$0159;159       ; offset to row 10 column 19 - right of  centre of the 3d view.
 633+ 9D94 CD 9A 9D             call do_draw_4r
 634+ 9D97
 635+ 9D97
 636+ 9D97              ;ret
 637+ 9D97 C3 5A 9F             jp draw_3r           ;now draw the 4th level
 638+ 9D9A
 639+ 9D9A              do_draw_4r:
 640+ 9D9A
 641+ 9D9A 2A 67 81             ld hl,(d_file)        ; fetch the location of the display file.
 642+ 9D9D 19                   add hl,de
 643+ 9D9E 06 04                ld b,4                 ; count for max of 4 blocks right of maze position
 644+ 9DA0                                              ; 0 is not counted so loops 3 times
 645+ 9DA0 ED 5B 15 FA          ld de,(var6)
 646+ 9DA4 EB                   ex de,hl              ; transfer de to hl.
 647+ 9DA5
 648+ 9DA5              loop9r:
 649+ 9DA5 E5                   push hl
 650+ 9DA6
 651+ 9DA6              ;*#########################################
 652+ 9DA6              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 653+ 9DA6
 654+ 9DA6 3A 28 FA             ld a,(maze_highbyte)
 655+ 9DA9 BC                   cp h                    ;are we at the top part of the maze?
 656+ 9DAA CA DD 9D             jp z,cont_4a
 657+ 9DAD                                              ;if we are on a different maze boundary
 658+ 9DAD                                              ;then draw a maze wall as we are the top
 659+ 9DAD                                              ;or north wall but maze data has no
 660+ 9DAD                                              ;wall data.
 661+ 9DAD              ;4 = 1st right wall
 662+ 9DAD              ;3 = 2nd right wall
 663+ 9DAD              ;2 = 3rd right wall
 664+ 9DAD              ;1 = 4th right wall
 665+ 9DAD
 666+ 9DAD 78                   ld a,b                  ;our current wall counter
 667+ 9DAE FE 04                cp 4
 668+ 9DB0 C2 BB 9D             jp nz,b4                 ;its not wall 2
 669+ 9DB3 3E 01                ld a,1
 670+ 9DB5 47                   ld b,a
 671+ 9DB6 C6 80                add a,128               ;make sure we set a wall!
 672+ 9DB8 C3 0C 9E             jp draw_9r             ;jump straight to making an end wall
 673+ 9DBB
 674+ 9DBB FE 03        b4:     cp 3
 675+ 9DBD C2 C8 9D             jp nz,b4_1                 ;its not wall 2
 676+ 9DC0 3E 01                ld a,1
 677+ 9DC2 47                   ld b,a
 678+ 9DC3 C6 80                add a,128               ;make sure we set a wall!
 679+ 9DC5 C3 49 9E             jp draw_9r_2             ;jump straight to making an end wall
 680+ 9DC8
 681+ 9DC8 FE 02        b4_1:   cp 2
 682+ 9DCA C2 D5 9D             jp nz,b4_2                 ;its not wall 2
 683+ 9DCD 3E 01                ld a,1
 684+ 9DCF 47                   ld b,a
 685+ 9DD0 C6 80                add a,128               ;make sure we set a wall!
 686+ 9DD2 C3 B9 9E             jp draw_9r_3             ;jump straight to making an end wall
 687+ 9DD5
 688+ 9DD5 3E 01        b4_2:   ld a,1
 689+ 9DD7 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 690+ 9DD8 C6 80                add a,128               ;make sure we set a wall!
 691+ 9DDA C3 1A 9F             jp draw_9r_4	       	;draw the 2nd wall to the right
 692+ 9DDD
 693+ 9DDD              ;*#########################################
 694+ 9DDD              cont_4a:
 695+ 9DDD 7E                   ld a,(hl)
 696+ 9DDE 17                   rla
 697+ 9DDF DA F2 9D             jp c,do_wall4r            ;bit 7 (128)
 698+ 9DE2
 699+ 9DE2
 700+ 9DE2              go_back4r:
 701+ 9DE2 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 702+ 9DE5                                              ; holds current screen position
 703+ 9DE5 19                   add hl,de
 704+ 9DE6 EB                   ex de,hl
 705+ 9DE7 E1                   pop hl
 706+ 9DE8 D5                   push de
 707+ 9DE9 ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 708+ 9DED 19                   add hl,de               ; move to the start of the next block to print
 709+ 9DEE                                              ;we need to move back 4 blocks
 710+ 9DEE                                              ;as the first block obscures the view
 711+ 9DEE                                              ;of the next 3 blocks.
 712+ 9DEE D1                   pop de
 713+ 9DEF 10 B4                djnz loop9r
 714+ 9DF1 C9                   ret
 715+ 9DF2              ;now do the 4th position
 716+ 9DF2
 717+ 9DF2              do_wall4r:
 718+ 9DF2              do_wall4a:
 719+ 9DF2
 720+ 9DF2              ;now draw the wall based on bc count
 721+ 9DF2
 722+ 9DF2              wall4_start:
 723+ 9DF2
 724+ 9DF2 78                   ld a,b
 725+ 9DF3 D6 04                sub 4                   ;4 = 1st wall to the right
 726+ 9DF5 CA 0C 9E             jp z,draw_9r
 727+ 9DF8
 728+ 9DF8 78                   ld a,b
 729+ 9DF9 D6 03                sub 3                   ;3 = 2nd wall immediately to the right
 730+ 9DFB CA 49 9E             jp z,draw_9r_2
 731+ 9DFE
 732+ 9DFE 78                   ld a,b
 733+ 9DFF D6 02                sub 2                   ;2 = 3rd wall immediately to the right
 734+ 9E01 CA B9 9E             jp z,draw_9r_3
 735+ 9E04
 736+ 9E04 78                   ld a,b
 737+ 9E05 D6 01                sub 1                   ;1 = 4th wall immediately to the right
 738+ 9E07 CA 1A 9F             jp z,draw_9r_4
 739+ 9E0A
 740+ 9E0A E1                   pop hl
 741+ 9E0B C9                   ret
 742+ 9E0C
 743+ 9E0C
 744+ 9E0C              draw_9r:
 745+ 9E0C C5                   push bc
 746+ 9E0D D5                   push de                 ;save our display pointer
 747+ 9E0E 06 04                ld b,4                  ;block is 4 blocks high
 748+ 9E10 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 749+ 9E13 3E B7        loop10r:ld   a,_mediumwall_1      ;grey sides facing us
 750+ 9E15 12                   ld   (de),a             ; insert thepart of the wall.
 751+ 9E16 13                   inc de
 752+ 9E17 12                   ld (de),a               ;put grey side to our right
 753+ 9E18 13                   inc de
 754+ 9E19 12                   ld (de),a
 755+ 9E1A 13                   inc de
 756+ 9E1B 12                   ld (de),a
 757+ 9E1C 1B                   dec de
 758+ 9E1D 1B                   dec de                  ;go left 1 again
 759+ 9E1E 1B                   dec de
 760+ 9E1F EB                   ex de,hl
 761+ 9E20 19                   add  hl,de              ; advance to the next row of the display file.
 762+ 9E21 EB                   ex de,hl
 763+ 9E22 10 EF                djnz loop10r             ;do this 3 times
 764+ 9E24
 765+ 9E24                      ;now draw the blank face
 766+ 9E24 D1                   pop de                  ;back to our original position
 767+ 9E25 D5                   push de
 768+ 9E26 1B                   dec de                  ;move left 1 space in the display
 769+ 9E27
 770+ 9E27              ;check if the char to our right is a wall block.
 771+ 9E27              ;if so, do not draw a black face as we need to hide it or it will
 772+ 9E27              ;ovewrite the already drawn block
 773+ 9E27
 774+ 9E27 1A                   ld a,(de)
 775+ 9E28 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 776+ 9E2A C2 31 9E             jp nz,cont_1r            ;there is no block so draw black edge
 777+ 9E2D D1                   pop de
 778+ 9E2E C1                   pop bc
 779+ 9E2F 18 B1                jr go_back4r             ;otherwise quit this draw
 780+ 9E31
 781+ 9E31 EB           cont_1r ex  de,hl
 782+ 9E32 11 21 00             ld de,$0021
 783+ 9E35 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
 784+ 9E37 77                   ld  (hl),a
 785+ 9E38 19                   add hl,de
 786+ 9E39 3E AF                ld  a,_black
 787+ 9E3B 77                   ld  (hl),a
 788+ 9E3C 19                   add hl,de
 789+ 9E3D 3E AF                ld  a,_black
 790+ 9E3F 77                   ld  (hl),a
 791+ 9E40 19                   add hl,de
 792+ 9E41
 793+ 9E41 77                   ld  (hl),a
 794+ 9E42 3E B1                ld  a,_topcorner2
 795+ 9E44 77                   ld  (hl),a
 796+ 9E45 D1                   pop de
 797+ 9E46 C1                   pop bc
 798+ 9E47 18 99                jr go_back4r              ; jump back to main loop
 799+ 9E49
 800+ 9E49              ;************************************
 801+ 9E49              ;*Draw the 2nd right block of section 4
 802+ 9E49              ;************************************
 803+ 9E49
 804+ 9E49              draw_9r_2:
 805+ 9E49 C5                   push bc
 806+ 9E4A 21 03 00             ld hl,3                 ;move display 3 chars to the right
 807+ 9E4D 19                   add hl,de
 808+ 9E4E EB                   ex de,hl
 809+ 9E4F D5                   push de
 810+ 9E50
 811+ 9E50              ;now draw the 2nd wall itself
 812+ 9E50 06 04                ld b,4                  ;block is 4 blocks high
 813+ 9E52 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 814+ 9E55 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 815+ 9E57
 816+ 9E57              loop10r_2:
 817+ 9E57 12                   ld (de),a             ; insert thepart of the wall.
 818+ 9E58 13                   inc de
 819+ 9E59 12                   ld (de),a               ;put grey side to our right
 820+ 9E5A 13                   inc de
 821+ 9E5B 12                   ld (de),a
 822+ 9E5C 13                   inc de
 823+ 9E5D 12                   ld (de),a
 824+ 9E5E 13                   inc de
 825+ 9E5F 12                   ld (de),a
 826+ 9E60 1B                   dec de
 827+ 9E61 1B                   dec de
 828+ 9E62 1B                   dec de
 829+ 9E63 1B                   dec de                  ;go left 1 again
 830+ 9E64 EB                   ex de,hl
 831+ 9E65 19                   add  hl,de              ; advance to the next row of the display file.
 832+ 9E66 EB                   ex de,hl
 833+ 9E67 10 EE                djnz loop10r_2             ;do this 3 times
 834+ 9E69
 835+ 9E69                      ;now draw the blank face
 836+ 9E69 D1                   pop de                  ;back to our original position
 837+ 9E6A D5                   push de
 838+ 9E6B 1B                   dec de                  ;move left 1 space in the display
 839+ 9E6C
 840+ 9E6C              ;check if the char to our right is a wall block.
 841+ 9E6C              ;if so, do not draw a black face as we need to hide it or it will
 842+ 9E6C              ;ovewrite the already drawn block
 843+ 9E6C
 844+ 9E6C 1A                   ld a,(de)
 845+ 9E6D FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 846+ 9E6F C2 77 9E             jp nz,cont_1r_2           ;there is no block so draw black edge
 847+ 9E72 D1                   pop de
 848+ 9E73 C1                   pop bc
 849+ 9E74 C3 E2 9D             jp go_back4r             ;otherwise quit this draw
 850+ 9E77
 851+ 9E77              cont_1r_2:
 852+ 9E77 EB                   ex  de,hl
 853+ 9E78 11 21 00             ld de,$0021
 854+ 9E7B
 855+ 9E7B              ;need to loop 2 times drawing 2 lots of 3 top
 856+ 9E7B              ;& bottom chars- move down 1after 1st 3 top chars drawn
 857+ 9E7B              ;
 858+ 9E7B
 859+ 9E7B 3E 02                ld a,2
 860+ 9E7D 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 861+ 9E80
 862+ 9E80              ;loop for 2 black wall columns
 863+ 9E80 3E 03                ld a,3                  ;column start height
 864+ 9E82 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
 865+ 9E85
 866+ 9E85 06 03                ld b,3                  ;loop 3 times for 3 columns
 867+ 9E87 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 868+ 9E8A 3E 91                ld a,$91
 869+ 9E8C 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 870+ 9E8F
 871+ 9E8F              loop10br_2:
 872+ 9E8F C5                   push bc                 ;save count
 873+ 9E90 3A 04 FA             ld a,(var1)             ;column height
 874+ 9E93 47                   ld b,a                  ;holds the column height in chars
 875+ 9E94 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 876+ 9E97 F5                   push af                 ;save a for bottom corners
 877+ 9E98 77                   ld  (hl),a
 878+ 9E99
 879+ 9E99              loop10ar_2:
 880+ 9E99 19                   add hl,de
 881+ 9E9A 3E AF                ld  a,_black            ;black wall fill
 882+ 9E9C 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 883+ 9E9D 10 FA                djnz loop10ar_2
 884+ 9E9F
 885+ 9E9F F1                   pop af                  ;retrivetop corner
 886+ 9EA0 3D                   dec a                   ;prep for next top corner
 887+ 9EA1 32 05 FA             ld (var2),a             ;re-save it for next corner
 888+ 9EA4 C6 04                add a,4                 ;get the correct char to print
 889+ 9EA6 77                   ld  (hl),a              ;draw the bottom of the wall
 890+ 9EA7
 891+ 9EA7                      ;now change column count
 892+ 9EA7 3A 04 FA             ld a,(var1)
 893+ 9EAA C1                   pop bc
 894+ 9EAB
 895+ 9EAB 2A 13 FA             ld hl,(var5)
 896+ 9EAE 2B                   dec hl                  ;move print position to the left
 897+ 9EAF 22 13 FA             ld (var5),hl
 898+ 9EB2
 899+ 9EB2 10 DB                djnz loop10br_2
 900+ 9EB4
 901+ 9EB4              exit_1_2:
 902+ 9EB4 D1                   pop de
 903+ 9EB5 C1                   pop bc
 904+ 9EB6 C3 E2 9D             jp go_back4r              ; jump back to main loop
 905+ 9EB9
 906+ 9EB9              ;#############################################
 907+ 9EB9              ;*Draw the 3rd right block of section 4
 908+ 9EB9              ;#############################################
 909+ 9EB9
 910+ 9EB9              draw_9r_3:
 911+ 9EB9
 912+ 9EB9 C5                   push bc
 913+ 9EBA D5                   push de                 ;save our display pointer
 914+ 9EBB 06 04                ld b,4                  ;block is 4 blocks high
 915+ 9EBD 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
 916+ 9EC0 11 62 C1             ld de,$C162             ;start of drawing
 917+ 9EC3
 918+ 9EC3              loop10r_3:
 919+ 9EC3 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 920+ 9EC5 12                   ld (de),a               ; insert thepart of the wall.
 921+ 9EC6 EB                   ex de,hl
 922+ 9EC7 19                   add  hl,de              ; advance to the next row of the display file.
 923+ 9EC8 EB                   ex de,hl
 924+ 9EC9 10 F8                djnz loop10r_3          ;do this 3 times
 925+ 9ECB
 926+ 9ECB                      ;now draw the blank face
 927+ 9ECB D1                   pop de                  ;back to our original position
 928+ 9ECC D5                   push de
 929+ 9ECD
 930+ 9ECD              ;check if the char to our right is a wall block.
 931+ 9ECD              ;if so, do not draw a black face as we need to hide it or it will
 932+ 9ECD              ;ovewrite the already drawn block
 933+ 9ECD
 934+ 9ECD
 935+ 9ECD 3A 61 C1             ld a,($c161);(de)
 936+ 9ED0 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 937+ 9ED2 C2 DA 9E             jp nz,cont_1r_3            ;there is no block so draw black edge
 938+ 9ED5
 939+ 9ED5 D1                   pop de
 940+ 9ED6 C1                   pop bc
 941+ 9ED7 C3 E2 9D             jp go_back4r             ;otherwise quit this draw
 942+ 9EDA
 943+ 9EDA              cont_1r_3:
 944+ 9EDA EB                   ex  de,hl
 945+ 9EDB 11 21 00             ld de,$0021
 946+ 9EDE 21 61 C1             ld hl,$c161
 947+ 9EE1
 948+ 9EE1              ;need to loop 2 times drawing 2 lots of 3 top
 949+ 9EE1              ;& bottom chars- move down 1after 1st 3 top chars drawn
 950+ 9EE1              ;
 951+ 9EE1
 952+ 9EE1              ;loop for 2 black wall columns
 953+ 9EE1 3E 03                ld a,3                  ;column start height
 954+ 9EE3 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 955+ 9EE6
 956+ 9EE6 06 05                ld b,5                  ;loop 5 times for 5 columns
 957+ 9EE8 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 958+ 9EEB 3E CD                ld a,$cd ;91
 959+ 9EED 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 960+ 9EF0
 961+ 9EF0              loop10br_2a:
 962+ 9EF0 C5                   push bc                 ;save count
 963+ 9EF1 3A 04 FA             ld a,(var1)             ;column height
 964+ 9EF4 47                   ld b,a                  ;holds the column height in chars
 965+ 9EF5 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 966+ 9EF8 F5                   push af                 ;save a for bottom corners
 967+ 9EF9 77                   ld  (hl),a
 968+ 9EFA
 969+ 9EFA              loop10ar_2a:
 970+ 9EFA 19                   add hl,de
 971+ 9EFB 3E AF                ld  a,_black            ;black wall fill
 972+ 9EFD 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 973+ 9EFE 10 FA                djnz loop10ar_2a
 974+ 9F00
 975+ 9F00 F1                   pop af                  ;retrivetop corner
 976+ 9F01 3D                   dec a                   ;prep for next top corner
 977+ 9F02 32 05 FA             ld (var2),a             ;re-save it for next corner
 978+ 9F05 C6 06                add a,6                 ;get the correct char to print
 979+ 9F07 77                   ld  (hl),a              ;draw the bottom of the wall
 980+ 9F08
 981+ 9F08                      ;now change column count
 982+ 9F08 3A 04 FA             ld a,(var1)
 983+ 9F0B C1                   pop bc
 984+ 9F0C
 985+ 9F0C 2A 13 FA             ld hl,(var5)
 986+ 9F0F 2B                   dec hl                  ;move print position to the left
 987+ 9F10 22 13 FA             ld (var5),hl
 988+ 9F13
 989+ 9F13 10 DB                djnz loop10br_2a
 990+ 9F15
 991+ 9F15 D1                   pop de
 992+ 9F16 C1                   pop bc
 993+ 9F17 C3 E2 9D             jp go_back4r              ; jump back to main loop
 994+ 9F1A
 995+ 9F1A              ;#############################################
 996+ 9F1A              ;*Draw the 4th RIGHT block of section 4
 997+ 9F1A              ;#############################################
 998+ 9F1A
 999+ 9F1A              ; we only need to draw up to 2 columns of black sides.
1000+ 9F1A
1001+ 9F1A              draw_9r_4:
1002+ 9F1A C5                   push bc
1003+ 9F1B D5                   push de                 ;save our display pointer
1004+ 9F1C
1005+ 9F1C              ;check if the char to our left is a wall block.
1006+ 9F1C              ;if so, do not draw a black face as we need to hide it or it will
1007+ 9F1C              ;ovewrite the already drawn block
1008+ 9F1C
1009+ 9F1C 21 62 C1             ld hl,$C18C+20-30-32              ;start of drawing
1010+ 9F1F 7E                   ld a,(hl)
1011+ 9F20 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1012+ 9F22 C2 2A 9F             jp nz,cont_3r            ;there is no block so draw black edge
1013+ 9F25
1014+ 9F25 D1                   pop de
1015+ 9F26 C1                   pop bc
1016+ 9F27 C3 E2 9D             jp go_back4r             ;otherwise quit this draw
1017+ 9F2A
1018+ 9F2A              cont_3r:
1019+ 9F2A 11 21 00             ld de,33                ;to jump to next line below
1020+ 9F2D 3E CA                ld a,$ca                ;top of the wall
1021+ 9F2F E5                   push hl                 ;save for drawing 2nd black wall
1022+ 9F30 77                   ld (hl),a               ;to cover up wall 5
1023+ 9F31 19                   add hl,de               ;jump to next line
1024+ 9F32 3E AF                ld a,_black
1025+ 9F34 77                   ld (hl),a
1026+ 9F35 19                   add hl,de
1027+ 9F36 77                   ld (hl),a
1028+ 9F37 19                   add hl,de
1029+ 9F38 3E CF                ld a,$cf                ;draw bottom of the line
1030+ 9F3A 77                   ld (hl),a
1031+ 9F3B
1032+ 9F3B              ;now check if we need to cover wall 5 with a 2nd black line to the left
1033+ 9F3B              ;hl points to top of the 4 blocks
1034+ 9F3B E1                   pop hl                  ;restore our pointer in char ram
1035+ 9F3C 2B                   dec hl                  ;go left 1 place
1036+ 9F3D E5                   push hl
1037+ 9F3E 19                   add hl,de               ;now we are at the wall 5 top position
1038+ 9F3F 7E                   ld a,(hl)
1039+ 9F40 FE B4                cp _smallwall
1040+ 9F42 E1                   pop hl
1041+ 9F43 20 0B                jr nz,exit3r
1042+ 9F45              ;draw the second wall over section 5 wall
1043+ 9F45 36 C9                ld (hl),$c9             ;top of the wall
1044+ 9F47 19                   add hl,de
1045+ 9F48 36 AF                ld (hl),_black
1046+ 9F4A 19                   add hl,de
1047+ 9F4B 36 AF                ld (hl),_black
1048+ 9F4D 19                   add hl,de
1049+ 9F4E 36 CE                ld (hl),$ce             ;bottom of the wall
1050+ 9F50
1051+ 9F50 D1           exit3r:  pop de                  ;now exit
1052+ 9F51 C1                   pop bc
1053+ 9F52 C3 E2 9D             jp go_back4r
1054+ 9F55
1055+ 9F55
1056+ 9F55              ;draw 2 black walls across 1 line
1057+ 9F55              black_wall_2:
1058+ 9F55 19                   add hl,de      ;jump 1 line below
1059+ 9F56 77                   ld (hl),a
1060+ 9F57 23                   inc hl
1061+ 9F58 77                   ld (hl),a
1062+ 9F59 C9                   ret
1063+ 9F5A
1064+ 9F5A
1065+ 9F5A              ;#############################################
1066+ 9F5A              ;#############################################
1067+ 9F5A              ;# draw wall 3 right
1068+ 9F5A              ;#############################################
1069+ 9F5A              ;#############################################
1070+ 9F5A
1071+ 9F5A              draw_3r:
1072+ 9F5A
1073+ 9F5A              ; hl=maze location being drawn.
1074+ 9F5A              ; now determine what to draw for this section.
1075+ 9F5A
1076+ 9F5A
1077+ 9F5A 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1078+ 9F5D
1079+ 9F5D CD 5D 8E             call load_de            ;get left and right and front jump into de reg
1080+ 9F60
1081+ 9F60 19                   add hl,de               ;jump backwards along the user view 1 space
1082+ 9F61 22 25 FA             ld (furthest_point),hl  ;re save it
1083+ 9F64
1084+ 9F64 11 01 00             ld de,$0001             ;to move the display position +1
1085+ 9F67 ED 53 11 FA          ld (var4),de
1086+ 9F6B
1087+ 9F6B ED 5B 0D FA          ld de,(right)
1088+ 9F6F
1089+ 9F6F 19                   add hl,de
1090+ 9F70 22 15 FA             ld (var6),hl
1091+ 9F73                         ;save the maze position
1092+ 9F73
1093+ 9F73 ED 53 0F FA          ld (var3),de
1094+ 9F77 11 19 01             ld de,$0119           ; offset right of  centre of the 3d view.
1095+ 9F7A
1096+ 9F7A CD 80 9F             call do_draw_3r
1097+ 9F7D
1098+ 9F7D
1099+ 9F7D C3 DF A0             jp draw_2r              ;now draw the 2nd level
1100+ 9F80
1101+ 9F80              do_draw_3r:
1102+ 9F80
1103+ 9F80 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
1104+ 9F83 19                   add  hl,de
1105+ 9F84
1106+ 9F84
1107+ 9F84              ; draw  right half of the display.
1108+ 9F84
1109+ 9F84 06 03                ld b,3                  ; count for 2 blocks left or right of display file
1110+ 9F86                                              ; 0 is not counted so loops 12 times
1111+ 9F86 ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
1112+ 9F8A
1113+ 9F8A EB                   ex   de,hl              ; transfer de to hl.
1114+ 9F8B
1115+ 9F8B              ;       hl = furthest point in the maze
1116+ 9F8B              ;       de = d_file location to store byte to display
1117+ 9F8B
1118+ 9F8B              loop11r:
1119+ 9F8B E5                   push hl
1120+ 9F8C
1121+ 9F8C              ;*#########################################
1122+ 9F8C              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1123+ 9F8C
1124+ 9F8C 3A 28 FA             ld a,(maze_highbyte)
1125+ 9F8F BC                   cp h                    ;are we at the top part of the maze?
1126+ 9F90 CA B7 9F             jp z,cont_3a
1127+ 9F93                                              ;if we are on a different maze boundary
1128+ 9F93                                              ;then draw a maze wall as we are the top
1129+ 9F93                                              ;or north wall but maze data has no
1130+ 9F93                                              ;wall data.
1131+ 9F93              ;3 = first right wall
1132+ 9F93              ;2 = 2nd right wall
1133+ 9F93              ;1 = 3rd right wall
1134+ 9F93
1135+ 9F93 78                   ld a,b                  ;our current wall counter
1136+ 9F94 D6 03                sub 3
1137+ 9F96 C2 A1 9F             jp nz,b3_1                 ;its not wall 2
1138+ 9F99 3E 01                ld a,1
1139+ 9F9B 47                   ld b,a
1140+ 9F9C C6 80                add a,128               ;make sure we set a wall!
1141+ 9F9E C3 DB 9F             jp draw_10r             ;jump straight to making an end wall
1142+ 9FA1
1143+ 9FA1 78           b3_1    ld a,b                  ;our current wall counter
1144+ 9FA2 D6 02                sub 2
1145+ 9FA4 C2 AF 9F             jp nz,b3_2                 ;its not wall 2
1146+ 9FA7 3E 01                ld a,1
1147+ 9FA9 47                   ld b,a
1148+ 9FAA C6 80                add a,128               ;make sure we set a wall!
1149+ 9FAC C3 49 A0             jp draw_10r_2             ;jump straight to making an end wall
1150+ 9FAF
1151+ 9FAF
1152+ 9FAF 3E 01        b3_2:   ld a,1
1153+ 9FB1 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1154+ 9FB2 C6 80                add a,128               ;make sure we set a wall!
1155+ 9FB4 C3 BB A0             jp draw_10r_3	       	;draw the 2nd wall to the right
1156+ 9FB7
1157+ 9FB7              ;*#########################################
1158+ 9FB7              cont_3a:
1159+ 9FB7 7E                   ld a,(hl)
1160+ 9FB8 17                   rla
1161+ 9FB9 DA C7 9F             jp c,do_wall3r            ;if bit 7=128 theres a wall
1162+ 9FBC
1163+ 9FBC
1164+ 9FBC              go_back3r:
1165+ 9FBC E1                   pop hl
1166+ 9FBD D5                   push de
1167+ 9FBE ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1168+ 9FC2 19                   add hl,de                ; go right 1 block in the maze
1169+ 9FC3 D1                   pop de
1170+ 9FC4 10 C5                djnz loop11r
1171+ 9FC6 C9                   ret
1172+ 9FC7              ;now do the next maze position
1173+ 9FC7
1174+ 9FC7
1175+ 9FC7              do_wall3r:
1176+ 9FC7
1177+ 9FC7                      ;check if bit 1 is set as thats an end wall
1178+ 9FC7                      ;and b must then be changed to 1 to stop drawing.
1179+ 9FC7
1180+ 9FC7                      ;2020 draw layers according to how close to the middle
1181+ 9FC7              ;         bit 1,a                 ; is this a side wall? (129 but we rla'd accumulator)
1182+ 9FC7              ;         jr z,wall3_start
1183+ 9FC7              ;         ld b,1                  ;it IS a sidewall so set b so we exit on return
1184+ 9FC7
1185+ 9FC7              ;**** Whats this for? Does it work!
1186+ 9FC7              ;         ld a,(blockid)
1187+ 9FC7              ;         cp 16
1188+ 9FC7              ;         jp z,draw_10r          ;16 = a side wall
1189+ 9FC7
1190+ 9FC7              ;now draw the wall based on bc value
1191+ 9FC7              wall3_start:
1192+ 9FC7
1193+ 9FC7
1194+ 9FC7 78                  ld a,b			               ;b is the loop count i.e # of walls to draw
1195+ 9FC8 D6 01               	sub 1			               ;3 = the wall imediately right
1196+ 9FCA CA BB A0             jp z,draw_10r_3          ;draw an end wall if blockid=16
1197+ 9FCD
1198+ 9FCD 78                   ld a,b
1199+ 9FCE D6 03                sub 3
1200+ 9FD0 CA DB 9F             jp z,draw_10r         		;draw the 1st wall to the right
1201+ 9FD3
1202+ 9FD3 78                   ld a,b
1203+ 9FD4 D6 02                sub 2
1204+ 9FD6 CA 49 A0             jp z,draw_10r_2	       	;draw the 2nd wall to the right
1205+ 9FD9
1206+ 9FD9 E1                   pop hl                  ;nothing to draw so return
1207+ 9FDA C9                   ret
1208+ 9FDB
1209+ 9FDB
1210+ 9FDB              draw_10r:
1211+ 9FDB C5                    push bc                ;save loop count
1212+ 9FDC 11 19 C1              ld de,$c119             ;start of print position
1213+ 9FDF D5                    push de                 ;save our display pointer
1214+ 9FE0
1215+ 9FE0 06 08                 ld b,8                  ;block is 8 blocks high
1216+ 9FE2 21 21 00              ld hl,$0021             ;load with 32 to jump to line below us
1217+ 9FE5 3E B5                 ld a, _mediumwall       ;wall on sides facing us
1218+ 9FE7 12           loop12r: ld (de),a               ; insert the part of the wall.
1219+ 9FE8 13                    inc de
1220+ 9FE9 12                    ld (de),a               ;put grey side to our right
1221+ 9FEA 13                    inc de
1222+ 9FEB 12                    ld (de),a               ;put grey side to our right
1223+ 9FEC 13                    inc de
1224+ 9FED 12                    ld (de),a               ;put grey side to our right
1225+ 9FEE 13                    inc de
1226+ 9FEF 12                    ld (de),a               ;put grey side to our right
1227+ 9FF0 13                    inc de
1228+ 9FF1 12                    ld (de),a               ;put grey side to our right
1229+ 9FF2
1230+ 9FF2 13                    inc de
1231+ 9FF3 12                    ld (de),a
1232+ 9FF4 13                    inc de
1233+ 9FF5 12                    ld (de),a
1234+ 9FF6 1B                    dec de
1235+ 9FF7 1B                    dec de
1236+ 9FF8
1237+ 9FF8 1B                    dec de
1238+ 9FF9 1B                    dec de
1239+ 9FFA 1B                    dec de
1240+ 9FFB 1B                    dec de
1241+ 9FFC 1B                    dec de
1242+ 9FFD EB                    ex de,hl
1243+ 9FFE 19                    add  hl,de              ; advance to the next row of the display file.
1244+ 9FFF EB                    ex de,hl
1245+ A000 10 E5                 djnz loop12r            ;do this 3 times
1246+ A002
1247+ A002              ;now draw the blank face to the leftt of the block
1248+ A002              ;create first column of left face characters
1249+ A002
1250+ A002 D1                    pop de                  ;back to our original position
1251+ A003 D5                    push de
1252+ A004 1B                    dec de                  ;move ahead 1 space in the display (right)
1253+ A005
1254+ A005              ;check if the char to our left is a wall block.
1255+ A005              ;if so, do not draw a black face as we need to hide it or it will
1256+ A005              ;ovewrite the already drawn block
1257+ A005
1258+ A005 1A                    ld a,(de)
1259+ A006 FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1260+ A008 C2 0F A0              jp nz,cont_2r            ;there is no block so draw black edge
1261+ A00B D1                    pop de
1262+ A00C C1                    pop bc
1263+ A00D 18 AD                 jr go_back3r             ;otherwise quit this draw
1264+ A00F
1265+ A00F
1266+ A00F EB           cont_2r: ex  de,hl
1267+ A010 11 21 00              ld de,$0021
1268+ A013
1269+ A013              ;loop for 2 columns
1270+ A013
1271+ A013 06 02                ld b,2                  ; loop 2 times for 2 columns
1272+ A015 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1273+ A018 3E 07                ld a,7
1274+ A01A 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1275+ A01D
1276+ A01D              loop12br:
1277+ A01D C5                   push bc                 ;save count
1278+ A01E 3A 04 FA             ld a,(var1)
1279+ A021 47                   ld b,a                  ;holds the column height in chars
1280+ A022 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
1281+ A024 77                   ld  (hl),a
1282+ A025
1283+ A025              loop12ar:                   ;we must start at5 to draw 4 face blocks on right
1284+ A025 19                   add hl,de
1285+ A026 3E AF                ld  a,_black      ;triangle sloping to right bottom
1286+ A028 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1287+ A029 10 FA                djnz loop12ar
1288+ A02B
1289+ A02B
1290+ A02B 3E B1                ld  a,_topcorner2
1291+ A02D 77                   ld  (hl),a
1292+ A02E
1293+ A02E                      ;now change column count
1294+ A02E 3A 04 FA             ld a,(var1)
1295+ A031 D6 02                sub 2                   ;subtract 2
1296+ A033 32 04 FA             ld (var1),a
1297+ A036 C1                   pop bc
1298+ A037
1299+ A037 2A 13 FA             ld hl,(var5)
1300+ A03A 2B                   dec hl                  ;move print position to the left
1301+ A03B 11 21 00             ld de,$21               ;move top of next column down and across 1
1302+ A03E 19                   add hl,de
1303+ A03F 22 13 FA             ld (var5),hl
1304+ A042
1305+ A042 10 D9                djnz loop12br
1306+ A044 D1                   pop de
1307+ A045 C1                   pop bc
1308+ A046 C3 BC 9F             jp go_back3r              ; jump back to main loop
1309+ A049
1310+ A049              ;**********************************
1311+ A049              ;     draw the 2nd right block
1312+ A049              ;***********************************
1313+ A049
1314+ A049              draw_10r_2:
1315+ A049
1316+ A049 C5                    push bc
1317+ A04A 11 19 C1              ld de, $c119           ;start print position of wall
1318+ A04D D5                   push de
1319+ A04E              ;dont draw a front wall as we never see it.
1320+ A04E
1321+ A04E 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1322+ A051 19                   add hl,de
1323+ A052 EB                   ex de,hl
1324+ A053              ;we do not need a front wall for this row as it is never seen.
1325+ A053              ;below jp code can be removed :) Because a square block here
1326+ A053              ;is 8 x 8
1327+ A053
1328+ A053 1B                    dec de                  ;move ahead 1 space in the display (right)
1329+ A054
1330+ A054              ;check if the char to our left is a wall block.
1331+ A054              ;if so, do not draw a black face as we need to hide it or it will
1332+ A054              ;ovewrite the already drawn block
1333+ A054 1A                    ld a,(de)
1334+ A055 FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1335+ A057 C2 5F A0              jp nz,cont_2r_2            ;there is no block so draw black edge
1336+ A05A D1                    pop de
1337+ A05B C1                    pop bc
1338+ A05C C3 BC 9F              jp go_back3r             ;otherwise quit this draw
1339+ A05F
1340+ A05F
1341+ A05F              ;draw the black edge wall
1342+ A05F
1343+ A05F              cont_2r_2:
1344+ A05F EB                    ex  de,hl
1345+ A060 11 21 00              ld de,$0021
1346+ A063
1347+ A063              ;need to loop 2 times drawing 2 lots of 3 top
1348+ A063              ;& bottom chars- move down 1after 1st 3 top chars drawn
1349+ A063              ;
1350+ A063
1351+ A063 3E 02                ld a,2
1352+ A065 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1353+ A068
1354+ A068              ;loop for 3 black wall columns
1355+ A068 3E 07                ld a,7                  ;column start height
1356+ A06A 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1357+ A06D
1358+ A06D 06 03        loop_x: ld b,3                  ;loop 3 times for 3 columns
1359+ A06F 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1360+ A072 3E 91                ld a,$91
1361+ A074 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1362+ A077
1363+ A077              loop12br_2:
1364+ A077 C5                   push bc                 ;save count
1365+ A078 3A 04 FA             ld a,(var1)             ;column height
1366+ A07B 47                   ld b,a                  ;holds the column height in chars
1367+ A07C 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1368+ A07F F5                   push af                 ;save a for bottom corners
1369+ A080 77                   ld  (hl),a
1370+ A081
1371+ A081              loop12ar_2:
1372+ A081 19                   add hl,de
1373+ A082 3E AF                ld  a,_black            ;black wall fill
1374+ A084 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1375+ A085 10 FA                djnz loop12ar_2
1376+ A087
1377+ A087 F1                   pop af                  ;retrivetop corner
1378+ A088 3D                   dec a                   ;prep for next top corner
1379+ A089 32 05 FA             ld (var2),a             ;re-save it for next corner
1380+ A08C C6 04                add a,4                 ;get the correct char to print
1381+ A08E 77                   ld  (hl),a              ;draw the bottom of the wall
1382+ A08F
1383+ A08F                      ;now change column count
1384+ A08F 3A 04 FA             ld a,(var1)
1385+ A092 C1                   pop bc
1386+ A093
1387+ A093 2A 13 FA             ld hl,(var5)
1388+ A096 2B                   dec hl                  ;move print position to the left
1389+ A097 22 13 FA             ld (var5),hl
1390+ A09A
1391+ A09A 10 DB                djnz loop12br_2
1392+ A09C
1393+ A09C              ;1st set of 3 top bits drawn
1394+ A09C              ;now jump down the display 1 line
1395+ A09C              ;then draw another 3 columns
1396+ A09C
1397+ A09C 3A 18 FA             ld a,(var7)             ;get our loop counter
1398+ A09F 3D                   dec a
1399+ A0A0 28 12                jr z,exit_1             ;exit after 2 loops
1400+ A0A2 32 18 FA             ld (var7),a             ;save it
1401+ A0A5 2A 13 FA             ld hl,(var5)
1402+ A0A8              ;get our last print position
1403+ A0A8                                              ;need to go to next line -1 char
1404+ A0A8 19                   add hl,de
1405+ A0A9                                              ; now move back in the display
1406+ A0A9                                              ;1 char
1407+ A0A9 22 13 FA             ld (var5),hl            ;re save it for use above
1408+ A0AC
1409+ A0AC 3E 05                ld a,5                  ;reduce black wall column height
1410+ A0AE 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1411+ A0B1
1412+ A0B1 C3 6D A0             jp loop_x
1413+ A0B4
1414+ A0B4
1415+ A0B4 D1           exit_1: pop de
1416+ A0B5 C1                   pop bc
1417+ A0B6 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1418+ A0B8 C3 BC 9F             jp go_back3r              ; jump back to main loop
1419+ A0BB
1420+ A0BB
1421+ A0BB              ;#############################################
1422+ A0BB              ;*Draw the 3rd RIGHT block of section3
1423+ A0BB              ;#############################################
1424+ A0BB
1425+ A0BB
1426+ A0BB              	; we only need to draw 2 columns of black sides.
1427+ A0BB                  ; if theres no brick pattern !
1428+ A0BB
1429+ A0BB              draw_10r_3:
1430+ A0BB C5                   push bc
1431+ A0BC D5                   push de                 ;save our display pointer
1432+ A0BD
1433+ A0BD 21 41 C1             ld hl,$C18C-66-30-3+24  ;start of drawing
1434+ A0C0 7E                   ld a,(hl)               ;read what char is there
1435+ A0C1 FE B5                cp _mediumwall
1436+ A0C3 20 05                jr nz,cont_1r_4        ;exit if a wall is already there
1437+ A0C5 D1                   pop de
1438+ A0C6 C1                   pop bc
1439+ A0C7 C3 BC 9F             jp go_back3r             ;otherwise quit this draw
1440+ A0CA
1441+ A0CA              cont_1r_4:
1442+ A0CA
1443+ A0CA 3E C9                ld a,$c9
1444+ A0CC 77                   ld (hl),a
1445+ A0CD
1446+ A0CD 3E AF                ld a,_black
1447+ A0CF 11 21 00             ld de,33                ;1 line width
1448+ A0D2
1449+ A0D2 CD 43 95             CALL black_wall         ;draw 4 black blocks
1450+ A0D5
1451+ A0D5 19                   add hl,de               ;jump to next line below
1452+ A0D6
1453+ A0D6
1454+ A0D6              ;top half done - so do bottom half - 2 blacks first
1455+ A0D6
1456+ A0D6              ;de already holds 32
1457+ A0D6
1458+ A0D6 3E CE                ld a,$ce
1459+ A0D8 77                   ld (hl),a
1460+ A0D9
1461+ A0D9 D1                   pop de
1462+ A0DA C1                   pop bc
1463+ A0DB C3 BC 9F             jp go_back3r
1464+ A0DE
1465+ A0DE              ;draw 2 black walls across 1 line
1466+ A0DE              ;black_wall:
1467+ A0DE              ;        add hl,de      ;jump 1 line below
1468+ A0DE              ;        ld (hl),a
1469+ A0DE              ;        add hl,de      ;jump 1 line below
1470+ A0DE              ;        ld (hl),a
1471+ A0DE              ;        add hl,de      ;jump 1 line below
1472+ A0DE              ;        ld (hl),a
1473+ A0DE              ;        add hl,de      ;jump 1 line below
1474+ A0DE              ;        ld (hl),a
1475+ A0DE
1476+ A0DE C9                   ret
1477+ A0DF
1478+ A0DF
1479+ A0DF
1480+ A0DF              ;#############################################
1481+ A0DF              ;#############################################
1482+ A0DF              ; draw  layer 2
1483+ A0DF              ;#############################################
1484+ A0DF              ;#############################################
1485+ A0DF
1486+ A0DF              draw_2r:
1487+ A0DF
1488+ A0DF
1489+ A0DF              ; hl=maze location being drawn.
1490+ A0DF              ; now determine what to draw for this section.
1491+ A0DF              test
1492+ A0DF
1493+ A0DF 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1494+ A0E2
1495+ A0E2 CD 5D 8E             call load_de            ;get left and right and front jump into de reg
1496+ A0E5
1497+ A0E5 19                   add hl,de               ;jump backwards along the user view 1 space
1498+ A0E6 22 25 FA             ld (furthest_point),hl ;re save it
1499+ A0E9
1500+ A0E9 11 01 00             ld de,$0001             ;to move the display position +1
1501+ A0EC ED 53 11 FA          ld (var4),de
1502+ A0F0
1503+ A0F0 ED 5B 0D FA          ld de,(right)
1504+ A0F4
1505+ A0F4              ;we need to move pointer 1 to the left for wall checking
1506+ A0F4 19                   add hl,de
1507+ A0F5 22 15 FA             ld (var6),hl
1508+ A0F8
1509+ A0F8 ED 53 0F FA          ld (var3),de
1510+ A0FC 11 B9 00             ld  de,$0b9           ; offset to right of centre of the 3d view.
1511+ A0FF CD 05 A1             call do_draw_2r
1512+ A102
1513+ A102 C3 7A A1             jp draw_1r           ;now draw the 2nd level
1514+ A105
1515+ A105              do_draw_2r:
1516+ A105
1517+ A105 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
1518+ A108 19                   add  hl,de
1519+ A109
1520+ A109
1521+ A109 06 01                ld b,1                 ; count for 1 blocks left or right of display file
1522+ A10B                                              ; 0 is not counted so loops 12 times
1523+ A10B ED 5B 15 FA          ld de,(var6)
1524+ A10F
1525+ A10F EB                   ex   de,hl              ; transfer de to hl.
1526+ A110
1527+ A110
1528+ A110 E5           loop14r: push hl
1529+ A111
1530+ A111              ;*#########################################
1531+ A111              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1532+ A111
1533+ A111 3A 28 FA             ld a,(maze_highbyte)
1534+ A114 BC                   cp h                    ;are we at the top part of the maze?
1535+ A115 CA 20 A1             jp z,cont_2a
1536+ A118                                              ;if we are on a different maze boundary
1537+ A118                                              ;then draw a maze wall as we are the top
1538+ A118                                              ;or north wall but maze data has no
1539+ A118                                              ;wall data.
1540+ A118
1541+ A118 3E 01                ld a,1
1542+ A11A 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1543+ A11B C6 7F                add a,127               ;make sure we set a wall!
1544+ A11D C3 27 A1             jp draw_11r             ;jump straight to making an end wall
1545+ A120
1546+ A120              ;*#########################################
1547+ A120              cont_2a:
1548+ A120 7E                   ld a,(hl)
1549+ A121 17                   rla
1550+ A122 DA 27 A1             jp c,do_wall2r            ;bit 7 (128)
1551+ A125
1552+ A125
1553+ A125              go_back2r:
1554+ A125 E1                   pop hl
1555+ A126 C9                   ret
1556+ A127              ;now do the 2nd position
1557+ A127
1558+ A127
1559+ A127
1560+ A127              do_wall2r:
1561+ A127                      ;check if bit 2 is set as thats an end wall.
1562+ A127                      ;and b must then be changed to 1 to stop drawing.
1563+ A127              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1564+ A127              ;        jr z,draw_11r
1565+ A127              ;        ld b,1                  ;set b so we exit on return
1566+ A127
1567+ A127              ;?? 2020 do we need this??????
1568+ A127              ;        ld a,(blockid)
1569+ A127              ;        cp 16
1570+ A127              ;        jp z,draw_11r           ;draw an endwall if blockid=16
1571+ A127              ;        pop hl
1572+ A127              ;        ret
1573+ A127
1574+ A127
1575+ A127              draw_11r:
1576+ A127              ;        push bc
1577+ A127 D5                   push de                 ;save our display pointer
1578+ A128 06 0E                ld b,14                  ;block is 14 blocks high
1579+ A12A 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1580+ A12D 3E B6                ld   a,_largewall            ;wall on sides facing us
1581+ A12F
1582+ A12F              ;draw 4 columns of bricks
1583+ A12F              loop13r:
1584+ A12F 12                   ld (de),a             ; insert the part of the wall.
1585+ A130 13                   inc de
1586+ A131 12                   ld (de),a               ;draw brick side
1587+ A132 13                   inc de
1588+ A133 12                   ld (de),a
1589+ A134 13                   inc de
1590+ A135 12                   ld (de),a
1591+ A136 13                   inc de
1592+ A137 12                   ld (de),a
1593+ A138 1B                   dec de
1594+ A139 1B                   dec de
1595+ A13A 1B                   dec de
1596+ A13B 1B                   dec de
1597+ A13C EB                   ex de,hl
1598+ A13D 19                   add  hl,de              ; advance to the next row of the display file.
1599+ A13E EB                   ex de,hl
1600+ A13F 10 EE               djnz loop13r             ;do this 3 times
1601+ A141
1602+ A141
1603+ A141
1604+ A141                      ;now draw the blank face to the left of the block
1605+ A141                      ;create first column of left face characters
1606+ A141 D1                   pop de                  ;back to our original position
1607+ A142 1B                   dec de
1608+ A143 EB                   ex  de,hl
1609+ A144 11 21 00             ld de,$0021
1610+ A147
1611+ A147 06 03                ld b,3                  ; for 4 face columns to draw to draw
1612+ A149 22 13 FA             ld (var5),hl
1613+ A14C 3E 0D                ld a,13                 ; for 14 blocks high per column
1614+ A14E 32 04 FA             ld (var1),a
1615+ A151
1616+ A151              ;draw the black sides
1617+ A151              loop13br:
1618+ A151 C5                   push bc
1619+ A152 3A 04 FA             ld a,(var1)
1620+ A155 47                   ld b,a
1621+ A156 3E B2                ld a,_topcorner3
1622+ A158 77                   ld (hl),a
1623+ A159
1624+ A159              loop13ar:
1625+ A159 19                   add hl,de
1626+ A15A 3E AF                ld  a,_black
1627+ A15C 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1628+ A15D 10 FA                djnz loop13ar
1629+ A15F
1630+ A15F 3E B1                ld  a,_topcorner2
1631+ A161 77                   ld  (hl),a
1632+ A162
1633+ A162              ; now change the column count
1634+ A162 3A 04 FA             ld a,(var1)
1635+ A165 D6 02                sub 2
1636+ A167 32 04 FA             ld (var1),a
1637+ A16A C1                   pop bc
1638+ A16B
1639+ A16B 2A 13 FA             ld hl,(var5)
1640+ A16E 2B                   dec hl
1641+ A16F 11 21 00             ld de,$21
1642+ A172 19                   add hl,de
1643+ A173 22 13 FA             ld (var5),hl
1644+ A176
1645+ A176 10 D9                djnz loop13br
1646+ A178
1647+ A178 18 AB                jr go_back2r              ; jump back to main loop
1648+ A17A
1649+ A17A
1650+ A17A
1651+ A17A              ;#############################################
1652+ A17A              ;#############################################
1653+ A17A              ; draw 1st layer right
1654+ A17A              ;#############################################
1655+ A17A              ;#############################################
1656+ A17A
1657+ A17A              draw_1r:
1658+ A17A
1659+ A17A              ; hl=maze location being drawn.
1660+ A17A              ; now determine what to draw for this section.
1661+ A17A
1662+ A17A
1663+ A17A 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1664+ A17D
1665+ A17D CD 5D 8E             call load_de            ;get left and right and front jump into de reg
1666+ A180
1667+ A180 19                   add hl,de               ;jump backwards along the user view 1 space
1668+ A181 22 25 FA             ld (furthest_point),hl ;re save it
1669+ A184
1670+ A184 11 01 00             ld de,$0001             ;to move the display position +1
1671+ A187 ED 53 11 FA          ld (var4),de
1672+ A18B
1673+ A18B ED 5B 0D FA          ld de,(right)
1674+ A18F
1675+ A18F              ;we need to move pointer 1 to the left for wall checking
1676+ A18F 19                   add hl,de
1677+ A190 22 15 FA             ld (var6),hl
1678+ A193
1679+ A193              ;        ld de,$0001             ;to move the display position +1
1680+ A193 ED 53 0F FA          ld (var3),de
1681+ A197 11 38 00             ld  de,$038           ; offset to row 1 column 0 - left of  centre of the 3d view.
1682+ A19A CD A0 A1             call do_draw_1r
1683+ A19D
1684+ A19D
1685+ A19D C3 10 A2             jp draw_0r           ;now draw the 2nd level
1686+ A1A0
1687+ A1A0              do_draw_1r:
1688+ A1A0
1689+ A1A0 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
1690+ A1A3 19                   add  hl,de
1691+ A1A4
1692+ A1A4 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1693+ A1A6                                              ; 0 is not counted so loops 12 times
1694+ A1A6 ED 5B 15 FA          ld de,(var6)
1695+ A1AA EB                   ex   de,hl              ; transfer de to hl.
1696+ A1AB
1697+ A1AB              ;       hl = furthest point in the maze
1698+ A1AB              ;       de = d_file location to store byte to display
1699+ A1AB
1700+ A1AB E5           loop15r: push hl
1701+ A1AC
1702+ A1AC              ;*#########################################
1703+ A1AC              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1704+ A1AC
1705+ A1AC 3A 28 FA             ld a,(maze_highbyte)
1706+ A1AF BC                   cp h                    ;are we at the top part of the maze?
1707+ A1B0 CA BB A1             jp z,cont_1a
1708+ A1B3                                              ;if we are on a different maze boundary
1709+ A1B3                                              ;then draw a maze wall as we are the top
1710+ A1B3                                              ;or north wall but maze data has no
1711+ A1B3                                              ;wall data.
1712+ A1B3
1713+ A1B3 3E 01                ld a,1
1714+ A1B5 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1715+ A1B6 C6 7F                add a,127               ;make sure we set a wall!
1716+ A1B8 C3 C8 A1             jp draw_12r             ;jump straight to making an end wall
1717+ A1BB
1718+ A1BB              ;*#########################################
1719+ A1BB              cont_1a:
1720+ A1BB 7E                   ld a,(hl)
1721+ A1BC 17                   rla
1722+ A1BD DA C2 A1             jp c,do_wall1r            ;bit 7 (128)
1723+ A1C0
1724+ A1C0              go_back1r:
1725+ A1C0 E1                   pop hl
1726+ A1C1 C9                   ret
1727+ A1C2
1728+ A1C2              do_wall1r:
1729+ A1C2                      ;check if bit 2 is set as thats an end
1730+ A1C2                      ;and b must then be changed to 1 to stop drawing.
1731+ A1C2
1732+ A1C2 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1733+ A1C4 28 02                jr z,draw_12r
1734+ A1C6 06 01                ld b,1                  ;set b so we exit on return
1735+ A1C8
1736+ A1C8              ;**** Whats this for? Does it work!
1737+ A1C8
1738+ A1C8              ;        ld a,(blockid)
1739+ A1C8              ;        cp 16
1740+ A1C8              ;        jp z,draw_12r           ;draw an end wall if blockid=16
1741+ A1C8              ;        pop hl
1742+ A1C8              ;        ret
1743+ A1C8
1744+ A1C8
1745+ A1C8              ;draw the corridor bit to the left (1 column)
1746+ A1C8              draw_12r:
1747+ A1C8 D5                   push de                 ;save our display pointer
1748+ A1C9 06 16                ld b,22                  ;block is 22 blocks high
1749+ A1CB 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1750+ A1CE 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1751+ A1D0              loop16r:                        ; insert thepart of the wall.
1752+ A1D0 13                   inc de
1753+ A1D1 12                   ld (de),a               ;put grey side to our right
1754+ A1D2 1B                   dec de
1755+ A1D3 EB                   ex de,hl
1756+ A1D4 19                   add  hl,de              ; advance to the next row of the display file.
1757+ A1D5 EB                   ex de,hl
1758+ A1D6 10 F8                djnz loop16r             ;do this 3 times
1759+ A1D8
1760+ A1D8                      ;now draw the blank face to the right of the block
1761+ A1D8                      ;create first column of right face characters
1762+ A1D8 D1                   pop de                  ;back to our original position
1763+ A1D9 EB                   ex  de,hl
1764+ A1DA 11 21 00             ld de,$0021
1765+ A1DD
1766+ A1DD              ;now draw the face we see on our left as we walk forward
1767+ A1DD 06 04                ld b,4                  ; for 8 face columns to draw to draw
1768+ A1DF 22 13 FA             ld (var5),hl
1769+ A1E2 3E 15                ld a,21                 ; for 14 blocks high per column
1770+ A1E4 32 04 FA             ld (var1),a
1771+ A1E7
1772+ A1E7              loop14br:
1773+ A1E7 C5                   push bc
1774+ A1E8 3A 04 FA             ld a,(var1)
1775+ A1EB 47                   ld b,a
1776+ A1EC 3E B2                ld a,_topcorner3
1777+ A1EE 77                   ld (hl),a
1778+ A1EF
1779+ A1EF              loop14ar:
1780+ A1EF 19                   add hl,de
1781+ A1F0 3E AF                ld  a,_black            ;triangle sloping to right bottom
1782+ A1F2 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1783+ A1F3 10 FA                djnz loop14ar
1784+ A1F5
1785+ A1F5 3E B1                ld  a,_topcorner2
1786+ A1F7 77                   ld  (hl),a
1787+ A1F8
1788+ A1F8              ; now change the column count
1789+ A1F8 3A 04 FA             ld a,(var1)
1790+ A1FB D6 02                sub 2
1791+ A1FD 32 04 FA             ld (var1),a
1792+ A200 C1                   pop bc
1793+ A201
1794+ A201 2A 13 FA             ld hl,(var5)
1795+ A204 2B                   dec hl
1796+ A205 11 21 00             ld de,$21
1797+ A208 19                   add hl,de
1798+ A209 22 13 FA             ld (var5),hl
1799+ A20C
1800+ A20C 10 D9                djnz loop14br
1801+ A20E
1802+ A20E 18 B0                jr go_back1r              ; jump back to main loop
1803+ A210
1804+ A210
1805+ A210              ;#############################################
1806+ A210              ;#############################################
1807+ A210              ; draw layer 0 right
1808+ A210              ;#############################################
1809+ A210              ;#############################################
1810+ A210
1811+ A210              draw_0r:
1812+ A210              ;ret
1813+ A210
1814+ A210
1815+ A210              ; hl=maze location being drawn.
1816+ A210              ; now determine what to draw for this section.
1817+ A210
1818+ A210 2A 25 FA             ld   hl,(furthest_point); retrieve the maze location.
1819+ A213
1820+ A213 CD 5D 8E             call load_de
1821+ A216
1822+ A216              ;**think we can lose these 2 lines.
1823+ A216                                  ;get left and right and front jump into de reg
1824+ A216 19                   add  hl,de
1825+ A217
1826+ A217              ;need to move pointer right for wall checking
1827+ A217 ED 5B 0D FA          ld de,(right)
1828+ A21B 19                   add hl,de
1829+ A21C 22 15 FA             ld (var6),hl
1830+ A21F
1831+ A21F ED 53 0F FA          ld (var3),de
1832+ A223 11 18 00             ld  de,$18              ;offset to row0 column 24 - left of  centre of the 3d view.
1833+ A226                                              ;1 column of left face to draw
1834+ A226              ;draw the wall
1835+ A226 2A 67 81             ld   hl,(d_file)        ; fetch the location of the display file.
1836+ A229 19                   add  hl,de
1837+ A22A
1838+ A22A
1839+ A22A ED 5B 15 FA          ld   de,(var6)
1840+ A22E EB                   ex   de,hl              ; transfer de to hl.
1841+ A22F
1842+ A22F
1843+ A22F              loop17r:
1844+ A22F
1845+ A22F              ;*#########################################
1846+ A22F              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1847+ A22F
1848+ A22F 3A 28 FA             ld a,(maze_highbyte)
1849+ A232 BC                   cp h                    ;are we at the top part of the maze?
1850+ A233 CA 3E A2             jp z,cont_0a
1851+ A236                                              ;if we are on a different maze boundary
1852+ A236                                              ;then draw a maze wall as we are the top
1853+ A236                                              ;or north wall but maze data has no
1854+ A236                                              ;wall data.
1855+ A236
1856+ A236 3E 01                ld a,1
1857+ A238 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1858+ A239 C6 7F                add a,127               ;make sure we set a wall!
1859+ A23B C3 4C A2             jp draw_13r             ;jump straight to making an end wall
1860+ A23E
1861+ A23E              ;*#########################################
1862+ A23E              cont_0a:
1863+ A23E 7E                   ld a,(hl)
1864+ A23F 17                   rla
1865+ A240 DA 44 A2             jp c,do_wall0r           ;bit 7 (128)
1866+ A243 C9                   ret
1867+ A244
1868+ A244
1869+ A244              do_wall0r:
1870+ A244                      ;check if bit 2 is set as thats an end wall
1871+ A244                      ;and b must then be changed to 1 to stop drawing.
1872+ A244
1873+ A244 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1874+ A246 DA 4C A2             jp c,draw_13r          ;yes if bit 2 = 1
1875+ A249 C3 63 A2             jp draw_wall0r           ;its a wall but not a side wall.
1876+ A24C
1877+ A24C
1878+ A24C
1879+ A24C
1880+ A24C              ;we need to draw 1 vertical line from pos 1,1 to show
1881+ A24C              ;the side of the block.
1882+ A24C
1883+ A24C              ;draw sidewall brick pattern
1884+ A24C              draw_13r:
1885+ A24C 3E B2                ld a,_topcorner3
1886+ A24E EB                   ex de,hl
1887+ A24F
1888+ A24F 77                   ld (hl),a
1889+ A250 11 21 00             ld de,$21                ;jp to next line below
1890+ A253 19                   add hl,de
1891+ A254 06 16                ld b,22                  ;block is 22 blocks high
1892+ A256 11 21 00             ld de,$021           ;load with 32 to jump to line below us
1893+ A259 3E AF                ld a,_black            ;wall on sides facing us;
1894+ A25B              loop18r:
1895+ A25B 77                   ld (hl),a             ; insert the part of the wall.
1896+ A25C 19                   add  hl,de              ; advance to the next row of the display file.
1897+ A25D 10 FC                djnz loop18r
1898+ A25F
1899+ A25F              ;###this bit causes the direction indicator to fail
1900+ A25F 3E B1                ld a,_topcorner2
1901+ A261 77                   ld (hl),a
1902+ A262 C9                   ret                     ;return to main program
1903+ A263
1904+ A263              draw_wall0r:                     ;draw brick pattern only
1905+ A263
1906+ A263 11 21 00             ld de,$21                ;jp to next line below
1907+ A266 19                   add hl,de
1908+ A267                     ; ex de,hl
1909+ A267
1910+ A267 06 16                ld b,22                  ;block is 24 blocks high
1911+ A269 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
1912+ A26C 3E B6                ld a,_largewall            ;wall on sides facing us;
1913+ A26E              loop19r:
1914+ A26E 77                   ld (hl),a             ; insert the part of the wall.
1915+ A26F                     ; ex de,hl
1916+ A26F 19                   add  hl,de              ; advance to the next row of the display file.
1917+ A270                     ; ex de,hl
1918+ A270 10 FC                djnz loop19r
1919+ A272
1920+ A272 C9                   ret                     ;return to main program
1921+ A273
# file closed: src/6-rd3dmazeV6.asm
 459  A273                  include 7-rd3dmazeV6.asm    ;the maze itself and other routines
# file opened: src/7-rd3dmazeV6.asm
   1+ A273              ;this is the maze data and colour exit routine
   2+ A273              ;also the screen char memory and colours
   3+ A273              ;exit animation logic
   4+ A273              ;sound routine
   5+ A273
   6+ A273
   7+ A273              ;##########################################################
   8+ A273              ;maze data
   9+ A273
  10+ A273                      org $a300
  11+ A300
  12+ A300              ;################################################################
  13+ A300              ; maze data
  14+ A300              ;################################################################
  15+ A300
  16+ A300              ; the maze lies on a 256 byte page boundary, allowing the code to check only the low byte of its address.
  17+ A300              ; the maze is 18 positions north-to-south (rows 0 to 17) and 16 positions west-to-east (columns 0 to 15).
  18+ A300              ;
  19+ A300              ;    n
  20+ A300              ;    |
  21+ A300              ; w -+- e
  22+ A300              ;    |
  23+ A300              ;    s
  24+ A300              ;
  25+ A300              ; key: x=wall, space=passageway, e=exit.
  26+ A300
  27+ A300
  28+ A300              ;#####################################################################################
  29+ A300              ;This is our 16 Maze's maze data = numbered 0 to 15
  30+ A300              ;#####################################################################################
  31+ A300
  32+ A300              ; maze constants
  33+ A300              ; --------------
  34+ A300              ; the code for the wall must have bit 7 set whereas the other codes must have bit 7 reset except switch and exit
  35+ A300              ;as we still need to draw a wall.
  36+ A300
  37+ A300              _mw     equ  128   ;bin 10000000              ; wall.
  38+ A300              _mp     equ  32    ;bin 00100000              ; passageway.
  39+ A300              _me     equ  192   ;bin 11000000              ; exit.
  40+ A300              _sp     equ  32    ;bin 00100000              ; passageway.
  41+ A300              _mh     equ  129   ;bin 10000001              ; seperator or end wall
  42+ A300              _ms     equ  224   ;bin 11100000              ; switch     ($e0)
  43+ A300
  44+ A300
  45+ A300              ; _mh - outside wall
  46+ A300              ; _mw - inner maze wall
  47+ A300              ; _mp - space=passageway
  48+ A300              ; _me - exit door
  49+ A300              ; _ms - switch
  50+ A300              ; maze starts at 34288 on a 256 byte boundary
  51+ A300
  52+ A300              ;col  1    2     3    4    5   6    7   8    9    10   11   12   13   14   15   16
  53+ A300              map_0:
  54+ A300 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  54+ A304 20 20 20 20
  54+ A308 20 20 20 20
  54+ A30C 20 20 20 20
  55+ A310 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;2
  55+ A314 80 20 80 20
  55+ A318 80 20 80 20
  55+ A31C 80 20 80 20
  56+ A320 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  56+ A324 20 20 20 20
  56+ A328 20 20 20 20
  56+ A32C 20 20 20 20
  57+ A330 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;4
  57+ A334 80 20 80 20
  57+ A338 80 20 80 20
  57+ A33C 80 20 80 20
  58+ A340 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  58+ A344 20 20 20 20
  58+ A348 20 20 20 20
  58+ A34C 20 20 20 20
  59+ A350 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;6
  59+ A354 80 20 80 20
  59+ A358 80 20 80 20
  59+ A35C 80 20 80 20
  60+ A360 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  60+ A364 80 80 80 20
  60+ A368 20 20 20 20
  60+ A36C 20 20 20 20
  61+ A370 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;8
  61+ A374 80 20 20 20
  61+ A378 80 20 80 20
  61+ A37C 80 20 80 20
  62+ A380 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _me, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  62+ A384 20 20 C0 80
  62+ A388 20 20 20 20
  62+ A38C 20 20 20 20
  63+ A390 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;10
  63+ A394 80 20 80 20
  63+ A398 20 20 80 80
  63+ A39C 20 20 80 20
  64+ A3A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _me, _mw, _mp, _mp, _mp ;11
  64+ A3A4 20 20 20 20
  64+ A3A8 80 20 20 C0
  64+ A3AC 80 20 20 20
  65+ A3B0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;12
  65+ A3B4 80 20 80 20
  65+ A3B8 20 20 80 80
  65+ A3BC 20 20 80 20
  66+ A3C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  66+ A3C4 20 20 20 20
  66+ A3C8 20 20 20 20
  66+ A3CC 20 20 20 20
  67+ A3D0 81 20 C0 20   db _mh, _mp, _me, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;14
  67+ A3D4 80 20 80 20
  67+ A3D8 80 20 80 20
  67+ A3DC 80 20 80 20
  68+ A3E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  68+ A3E4 20 20 20 20
  68+ A3E8 20 20 20 20
  68+ A3EC 20 20 20 20
  69+ A3F0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;16
  69+ A3F4 80 20 80 20
  69+ A3F8 80 20 80 20
  69+ A3FC 80 20 80 20
  70+ A400
  71+ A400              map_1:
  72+ A400 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  72+ A404 20 20 20 20
  72+ A408 20 20 20 20
  72+ A40C 20 20 20 20
  73+ A410 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;2
  73+ A414 20 20 20 20
  73+ A418 20 80 20 20
  73+ A41C 20 20 20 20
  74+ A420 81 C0 20 80   db _mh, _me, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  74+ A424 20 80 80 80
  74+ A428 20 20 20 20
  74+ A42C 20 20 20 20
  75+ A430 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;4
  75+ A434 20 20 20 20
  75+ A438 20 80 20 20
  75+ A43C 20 20 20 20
  76+ A440 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  76+ A444 20 20 80 20
  76+ A448 20 20 20 20
  76+ A44C 20 20 20 20
  77+ A450 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  77+ A454 20 80 80 80
  77+ A458 20 80 20 20
  77+ A45C 20 20 20 20
  78+ A460 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  78+ A464 20 80 20 20
  78+ A468 20 20 20 20
  78+ A46C 20 20 20 20
  79+ A470 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mp, _me, _mw, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;8
  79+ A474 80 80 20 C0
  79+ A478 80 80 20 80
  79+ A47C 80 80 20 20
  80+ A480 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  80+ A484 80 80 20 80
  80+ A488 20 20 20 20
  80+ A48C 20 20 20 20
  81+ A490 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
  81+ A494 20 80 20 20
  81+ A498 20 80 20 20
  81+ A49C 20 20 20 20
  82+ A4A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
  82+ A4A4 20 20 80 20
  82+ A4A8 20 20 20 20
  82+ A4AC 20 20 20 20
  83+ A4B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;12
  83+ A4B4 20 20 20 20
  83+ A4B8 20 80 20 20
  83+ A4BC 20 20 20 20
  84+ A4C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  84+ A4C4 20 20 20 20
  84+ A4C8 20 20 20 20
  84+ A4CC 20 20 20 20
  85+ A4D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;14
  85+ A4D4 20 20 20 20
  85+ A4D8 20 80 20 20
  85+ A4DC 20 20 20 20
  86+ A4E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  86+ A4E4 20 20 20 20
  86+ A4E8 20 20 20 20
  86+ A4EC 20 20 20 20
  87+ A4F0 81 E0 20 20   db _mh, _ms, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;16
  87+ A4F4 20 20 20 20
  87+ A4F8 20 80 20 20
  87+ A4FC 20 20 20 20
  88+ A500
  89+ A500
  90+ A500              map_2:
  91+ A500 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  91+ A504 20 20 20 20
  91+ A508 20 20 20 20
  91+ A50C 20 20 20 20
  92+ A510 81 C0 20 80   db _mh, _me, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
  92+ A514 80 80 80 80
  92+ A518 80 20 20 20
  92+ A51C 20 20 20 20
  93+ A520 81 80 20 80   db _mh, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  93+ A524 20 20 20 20
  93+ A528 20 20 20 20
  93+ A52C 20 20 20 20
  94+ A530 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
  94+ A534 20 20 20 20
  94+ A538 20 20 20 20
  94+ A53C 20 20 20 20
  95+ A540 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  95+ A544 20 20 80 20
  95+ A548 20 20 20 20
  95+ A54C 20 20 20 20
  96+ A550 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  96+ A554 20 20 20 20
  96+ A558 20 80 20 20
  96+ A55C 20 20 20 20
  97+ A560 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  97+ A564 80 80 80 80
  97+ A568 20 20 20 20
  97+ A56C 20 20 20 20
  98+ A570 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
  98+ A574 20 20 80 20
  98+ A578 20 20 20 80
  98+ A57C 80 80 20 20
  99+ A580 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  99+ A584 20 C0 20 20
  99+ A588 20 20 20 20
  99+ A58C 20 20 20 20
 100+ A590 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 100+ A594 20 80 20 20
 100+ A598 20 80 20 20
 100+ A59C 20 20 20 20
 101+ A5A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 101+ A5A4 20 20 20 20
 101+ A5A8 80 20 20 20
 101+ A5AC 20 20 20 20
 102+ A5B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 102+ A5B4 20 20 20 20
 102+ A5B8 80 20 20 20
 102+ A5BC 20 20 20 20
 103+ A5C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 103+ A5C4 20 20 20 20
 103+ A5C8 20 20 20 20
 103+ A5CC 20 20 20 20
 104+ A5D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 104+ A5D4 20 20 20 20
 104+ A5D8 20 20 20 20
 104+ A5DC 20 20 20 20
 105+ A5E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 105+ A5E4 20 20 20 20
 105+ A5E8 20 20 20 20
 105+ A5EC 20 20 20 20
 106+ A5F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 106+ A5F4 20 20 20 20
 106+ A5F8 20 20 20 20
 106+ A5FC 20 20 20 20
 107+ A600
 108+ A600              map_3
 109+ A600 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 109+ A604 20 20 20 20
 109+ A608 20 20 20 20
 109+ A60C 20 20 20 20
 110+ A610 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 110+ A614 20 20 20 80
 110+ A618 20 20 20 20
 110+ A61C 20 20 20 20
 111+ A620 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 111+ A624 20 20 20 80
 111+ A628 20 20 20 20
 111+ A62C 20 20 20 20
 112+ A630 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;4
 112+ A634 20 20 20 80
 112+ A638 20 20 20 20
 112+ A63C 20 20 80 20
 113+ A640 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 113+ A644 20 20 20 20
 113+ A648 20 20 20 20
 113+ A64C 20 20 80 20
 114+ A650 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 114+ A654 20 20 20 80
 114+ A658 20 20 20 20
 114+ A65C 20 20 20 20
 115+ A660 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 115+ A664 20 20 20 20
 115+ A668 20 20 20 20
 115+ A66C 20 20 20 20
 116+ A670 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 116+ A674 20 20 20 80
 116+ A678 20 20 20 20
 116+ A67C 20 20 20 20
 117+ A680 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 117+ A684 20 20 20 20
 117+ A688 20 20 20 20
 117+ A68C 20 20 20 20
 118+ A690 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 118+ A694 80 80 20 80
 118+ A698 20 20 20 20
 118+ A69C 20 20 20 20
 119+ A6A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 119+ A6A4 20 20 80 20
 119+ A6A8 20 20 20 20
 119+ A6AC 20 20 20 20
 120+ A6B0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 120+ A6B4 20 C0 20 80
 120+ A6B8 20 20 20 20
 120+ A6BC 20 20 20 20
 121+ A6C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 121+ A6C4 20 20 20 20
 121+ A6C8 20 20 20 20
 121+ A6CC 20 20 20 20
 122+ A6D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 122+ A6D4 20 20 20 80
 122+ A6D8 20 20 20 20
 122+ A6DC 20 20 20 20
 123+ A6E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 123+ A6E4 20 20 20 80
 123+ A6E8 20 20 20 20
 123+ A6EC 20 20 20 20
 124+ A6F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 124+ A6F4 20 20 20 80
 124+ A6F8 20 20 20 20
 124+ A6FC 20 20 20 20
 125+ A700
 126+ A700              map_4:
 127+ A700 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 127+ A704 20 20 20 20
 127+ A708 20 20 20 20
 127+ A70C 20 20 20 20
 128+ A710 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;2
 128+ A714 80 80 80 80
 128+ A718 80 80 80 80
 128+ A71C 80 80 20 20
 129+ A720 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp ;3
 129+ A724 20 20 20 20
 129+ A728 20 20 20 80
 129+ A72C 20 80 20 20
 130+ A730 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp ;4
 130+ A734 20 20 20 20
 130+ A738 80 80 20 80
 130+ A73C 20 20 20 20
 131+ A740 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp ;5
 131+ A744 80 80 80 80
 131+ A748 20 80 20 80
 131+ A74C 20 80 20 20
 132+ A750 81 20 80 80   db _mh, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;6
 132+ A754 20 20 20 20
 132+ A758 20 80 20 80
 132+ A75C 80 80 20 20
 133+ A760 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;7
 133+ A764 20 20 80 80
 133+ A768 20 20 20 80
 133+ A76C 20 20 20 20
 134+ A770 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
 134+ A774 80 80 20 20
 134+ A778 20 20 20 80
 134+ A77C 80 80 20 20
 135+ A780 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 135+ A784 20 20 20 80
 135+ A788 20 80 80 80
 135+ A78C 80 80 80 20
 136+ A790 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 136+ A794 80 80 20 20
 136+ A798 20 80 20 20
 136+ A79C 20 20 20 20
 137+ A7A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp ;11
 137+ A7A4 20 20 80 20
 137+ A7A8 20 20 20 20
 137+ A7AC 20 80 80 20
 138+ A7B0 81 80 20 80   db _mh, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;12
 138+ A7B4 80 80 80 80
 138+ A7B8 80 80 80 80
 138+ A7BC 80 80 20 20
 139+ A7C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp ;13
 139+ A7C4 20 80 20 20
 139+ A7C8 80 20 20 20
 139+ A7CC 80 80 20 20
 140+ A7D0 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp ;14
 140+ A7D4 20 80 20 20
 140+ A7D8 20 20 20 20
 140+ A7DC 20 80 20 20
 141+ A7E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mp, _mp ;15
 141+ A7E4 20 80 80 80
 141+ A7E8 80 80 20 20
 141+ A7EC 80 80 20 20
 142+ A7F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 142+ A7F4 20 20 20 20
 142+ A7F8 20 20 20 20
 142+ A7FC 20 20 20 20
 143+ A800
 144+ A800              map_5:
 145+ A800 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 145+ A804 20 20 20 20
 145+ A808 20 20 20 20
 145+ A80C 20 20 20 20
 146+ A810 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;2
 146+ A814 80 80 80 20
 146+ A818 80 80 80 80
 146+ A81C 80 80 80 20
 147+ A820 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 147+ A824 20 20 20 20
 147+ A828 20 20 20 20
 147+ A82C 20 20 20 20
 148+ A830 81 20 C0 20   db _mh, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 148+ A834 20 20 20 20
 148+ A838 20 20 20 20
 148+ A83C 20 20 20 20
 149+ A840 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;5
 149+ A844 80 80 80 20
 149+ A848 80 80 80 80
 149+ A84C 80 80 80 20
 150+ A850 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 150+ A854 20 20 20 20
 150+ A858 20 20 20 20
 150+ A85C 20 20 20 20
 151+ A860 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 151+ A864 20 20 20 20
 151+ A868 20 20 20 20
 151+ A86C 20 20 20 20
 152+ A870 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 152+ A874 20 20 20 20
 152+ A878 20 20 20 20
 152+ A87C 20 20 20 20
 153+ A880 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 153+ A884 80 80 80 20
 153+ A888 80 80 80 80
 153+ A88C 80 80 80 20
 154+ A890 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;10
 154+ A894 20 20 20 20
 154+ A898 20 20 80 20
 154+ A89C 80 20 20 20
 155+ A8A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;11
 155+ A8A4 20 20 20 20
 155+ A8A8 20 80 20 20
 155+ A8AC 20 80 20 20
 156+ A8B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mw, _mp ;12
 156+ A8B4 20 20 20 20
 156+ A8B8 80 20 20 80
 156+ A8BC 20 20 80 20
 157+ A8C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;13
 157+ A8C4 20 20 20 80
 157+ A8C8 20 20 80 20
 157+ A8CC 80 20 20 20
 158+ A8D0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;14
 158+ A8D4 80 80 80 20
 158+ A8D8 20 80 20 20
 158+ A8DC 20 80 80 20
 159+ A8E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;15
 159+ A8E4 20 20 20 20
 159+ A8E8 80 80 80 80
 159+ A8EC 20 20 20 20
 160+ A8F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;16
 160+ A8F4 20 20 20 80
 160+ A8F8 80 80 80 80
 160+ A8FC 80 80 20 20
 161+ A900
 162+ A900              map_6:
 163+ A900 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 163+ A904 20 20 20 20
 163+ A908 20 20 20 20
 163+ A90C 20 20 20 20
 164+ A910 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mw, _mp ;2
 164+ A914 80 80 80 80
 164+ A918 80 80 20 20
 164+ A91C 80 80 80 20
 165+ A920 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;3
 165+ A924 80 20 20 20
 165+ A928 80 80 20 20
 165+ A92C 20 80 20 20
 166+ A930 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _ms, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;4
 166+ A934 80 20 E0 20
 166+ A938 80 80 80 80
 166+ A93C 80 80 20 20
 167+ A940 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;5
 167+ A944 80 20 80 20
 167+ A948 80 80 20 20
 167+ A94C 20 20 20 20
 168+ A950 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;6
 168+ A954 80 20 80 20
 168+ A958 20 80 20 20
 168+ A95C 20 80 80 20
 169+ A960 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;7
 169+ A964 20 20 20 20
 169+ A968 20 80 20 20
 169+ A96C 20 80 20 20
 170+ A970 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;8
 170+ A974 80 80 80 80
 170+ A978 20 80 80 80
 170+ A97C 80 80 80 20
 171+ A980 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 171+ A984 20 20 20 80
 171+ A988 20 20 20 20
 171+ A98C 20 20 20 20
 172+ A990 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mw, _mw, _mp ;10
 172+ A994 80 80 20 80
 172+ A998 20 80 80 20
 172+ A99C 80 80 80 20
 173+ A9A0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;11
 173+ A9A4 20 80 20 80
 173+ A9A8 20 20 80 20
 173+ A9AC 80 20 80 20
 174+ A9B0 81 20 20 20   db _mh, _mp, _mp, _mp, _me, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp ;12
 174+ A9B4 C0 80 20 80
 174+ A9B8 20 80 20 80
 174+ A9BC 20 20 80 20
 175+ A9C0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;13
 175+ A9C4 80 80 20 80
 175+ A9C8 20 80 20 20
 175+ A9CC 20 20 20 20
 176+ A9D0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;14
 176+ A9D4 20 20 20 80
 176+ A9D8 20 80 80 80
 176+ A9DC 20 20 20 20
 177+ A9E0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp ;15
 177+ A9E4 80 80 80 80
 177+ A9E8 20 80 80 80
 177+ A9EC 80 20 80 20
 178+ A9F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 178+ A9F4 20 20 20 20
 178+ A9F8 20 20 20 20
 178+ A9FC 20 20 20 20
 179+ AA00
 180+ AA00              map_7
 181+ AA00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 181+ AA04 20 20 20 20
 181+ AA08 20 20 20 20
 181+ AA0C 20 20 20 20
 182+ AA10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 182+ AA14 20 20 20 80
 182+ AA18 20 20 20 20
 182+ AA1C 20 20 20 20
 183+ AA20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 183+ AA24 20 20 20 80
 183+ AA28 20 20 20 20
 183+ AA2C 20 20 20 20
 184+ AA30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 184+ AA34 20 20 20 80
 184+ AA38 20 20 20 20
 184+ AA3C 20 20 20 20
 185+ AA40 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 185+ AA44 20 20 20 20
 185+ AA48 20 20 20 20
 185+ AA4C 20 20 80 20
 186+ AA50 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;6
 186+ AA54 20 20 20 20
 186+ AA58 20 20 20 20
 186+ AA5C 20 20 80 20
 187+ AA60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 187+ AA64 20 20 20 20
 187+ AA68 20 20 20 20
 187+ AA6C 20 20 20 20
 188+ AA70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 188+ AA74 20 20 20 20
 188+ AA78 20 20 20 20
 188+ AA7C 20 20 20 20
 189+ AA80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 189+ AA84 20 20 20 20
 189+ AA88 20 20 20 20
 189+ AA8C 20 20 20 20
 190+ AA90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;10
 190+ AA94 20 20 20 20
 190+ AA98 20 20 20 80
 190+ AA9C 20 20 20 20
 191+ AAA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 191+ AAA4 20 20 20 20
 191+ AAA8 20 20 20 20
 191+ AAAC 20 20 20 20
 192+ AAB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 192+ AAB4 20 20 20 20
 192+ AAB8 20 20 20 20
 192+ AABC 20 20 20 20
 193+ AAC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 193+ AAC4 20 20 20 20
 193+ AAC8 20 20 20 20
 193+ AACC 20 20 20 20
 194+ AAD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 194+ AAD4 20 20 20 20
 194+ AAD8 20 20 20 20
 194+ AADC 20 20 20 20
 195+ AAE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 195+ AAE4 20 20 20 20
 195+ AAE8 20 20 20 20
 195+ AAEC 20 20 20 20
 196+ AAF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 196+ AAF4 20 20 20 20
 196+ AAF8 20 20 20 20
 196+ AAFC 20 20 20 20
 197+ AB00
 198+ AB00              map_8:
 199+ AB00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 199+ AB04 20 20 20 20
 199+ AB08 20 20 20 20
 199+ AB0C 20 20 20 20
 200+ AB10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 200+ AB14 20 20 20 80
 200+ AB18 20 20 20 20
 200+ AB1C 20 20 20 20
 201+ AB20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 201+ AB24 20 20 20 80
 201+ AB28 20 20 20 20
 201+ AB2C 20 20 20 20
 202+ AB30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 202+ AB34 20 20 20 80
 202+ AB38 20 20 20 20
 202+ AB3C 20 20 20 20
 203+ AB40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 203+ AB44 20 20 20 20
 203+ AB48 20 20 20 20
 203+ AB4C 20 20 20 20
 204+ AB50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 204+ AB54 20 20 20 20
 204+ AB58 20 20 20 20
 204+ AB5C 20 20 20 20
 205+ AB60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 205+ AB64 20 20 20 20
 205+ AB68 20 20 20 20
 205+ AB6C 20 20 20 20
 206+ AB70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 206+ AB74 20 20 20 20
 206+ AB78 20 20 20 20
 206+ AB7C 20 20 20 20
 207+ AB80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 207+ AB84 20 20 20 20
 207+ AB88 20 20 20 20
 207+ AB8C 20 20 20 20
 208+ AB90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 208+ AB94 20 20 20 20
 208+ AB98 20 20 20 20
 208+ AB9C 20 20 20 20
 209+ ABA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 209+ ABA4 20 20 80 20
 209+ ABA8 20 20 20 20
 209+ ABAC 20 20 20 20
 210+ ABB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 210+ ABB4 20 20 20 80
 210+ ABB8 20 20 20 20
 210+ ABBC 20 20 20 20
 211+ ABC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 211+ ABC4 20 20 80 20
 211+ ABC8 20 20 20 20
 211+ ABCC 20 20 20 20
 212+ ABD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 212+ ABD4 20 20 20 20
 212+ ABD8 20 20 20 20
 212+ ABDC 20 20 20 20
 213+ ABE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 213+ ABE4 20 20 20 20
 213+ ABE8 20 20 20 20
 213+ ABEC 20 20 20 20
 214+ ABF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 214+ ABF4 20 20 20 20
 214+ ABF8 20 20 20 20
 214+ ABFC 20 20 20 20
 215+ AC00
 216+ AC00              map_9:
 217+ AC00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 217+ AC04 20 20 20 20
 217+ AC08 20 20 20 20
 217+ AC0C 20 20 20 20
 218+ AC10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 218+ AC14 20 20 20 20
 218+ AC18 20 20 20 20
 218+ AC1C 20 20 20 20
 219+ AC20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 219+ AC24 20 20 20 20
 219+ AC28 20 20 20 20
 219+ AC2C 20 20 20 20
 220+ AC30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 220+ AC34 20 20 20 20
 220+ AC38 20 20 20 20
 220+ AC3C 20 20 20 20
 221+ AC40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 221+ AC44 20 20 20 20
 221+ AC48 20 20 20 20
 221+ AC4C 20 20 20 20
 222+ AC50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 222+ AC54 20 20 20 20
 222+ AC58 20 20 20 20
 222+ AC5C 20 20 20 20
 223+ AC60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 223+ AC64 20 20 20 20
 223+ AC68 20 20 20 20
 223+ AC6C 20 20 20 20
 224+ AC70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 224+ AC74 20 20 20 20
 224+ AC78 20 20 20 20
 224+ AC7C 20 20 20 20
 225+ AC80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 225+ AC84 20 20 20 20
 225+ AC88 20 20 20 20
 225+ AC8C 20 20 20 20
 226+ AC90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 226+ AC94 20 20 20 20
 226+ AC98 20 20 20 20
 226+ AC9C 20 20 20 20
 227+ ACA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 227+ ACA4 20 20 20 20
 227+ ACA8 20 20 20 20
 227+ ACAC 20 20 20 20
 228+ ACB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 228+ ACB4 20 20 20 20
 228+ ACB8 20 20 20 20
 228+ ACBC 20 20 20 20
 229+ ACC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 229+ ACC4 20 20 20 20
 229+ ACC8 20 20 20 20
 229+ ACCC 20 20 20 20
 230+ ACD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 230+ ACD4 20 20 20 20
 230+ ACD8 20 20 20 20
 230+ ACDC 20 20 20 20
 231+ ACE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 231+ ACE4 20 20 20 20
 231+ ACE8 20 20 20 20
 231+ ACEC 20 20 20 20
 232+ ACF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 232+ ACF4 20 20 20 20
 232+ ACF8 20 20 20 20
 232+ ACFC 20 20 20 20
 233+ AD00
 234+ AD00              map_10:
 235+ AD00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 235+ AD04 20 20 20 20
 235+ AD08 20 20 20 20
 235+ AD0C 20 20 20 20
 236+ AD10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 236+ AD14 20 20 20 20
 236+ AD18 20 20 20 20
 236+ AD1C 20 20 20 20
 237+ AD20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 237+ AD24 20 20 20 20
 237+ AD28 20 20 20 20
 237+ AD2C 20 20 20 20
 238+ AD30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 238+ AD34 20 20 20 20
 238+ AD38 20 20 20 20
 238+ AD3C 20 20 20 20
 239+ AD40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 239+ AD44 20 20 20 20
 239+ AD48 20 20 20 20
 239+ AD4C 20 20 20 20
 240+ AD50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 240+ AD54 20 20 20 20
 240+ AD58 20 20 20 20
 240+ AD5C 20 20 20 20
 241+ AD60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 241+ AD64 20 20 20 20
 241+ AD68 20 20 20 20
 241+ AD6C 20 20 20 20
 242+ AD70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 242+ AD74 20 20 20 20
 242+ AD78 20 20 20 20
 242+ AD7C 20 20 20 20
 243+ AD80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 243+ AD84 20 20 20 20
 243+ AD88 20 20 20 20
 243+ AD8C 20 20 20 20
 244+ AD90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 244+ AD94 20 20 20 20
 244+ AD98 20 20 20 20
 244+ AD9C 20 20 20 20
 245+ ADA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 245+ ADA4 20 20 20 20
 245+ ADA8 20 20 20 20
 245+ ADAC 20 20 20 20
 246+ ADB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 246+ ADB4 20 20 20 20
 246+ ADB8 20 20 20 20
 246+ ADBC 20 20 20 20
 247+ ADC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 247+ ADC4 20 20 20 20
 247+ ADC8 20 20 20 20
 247+ ADCC 20 20 20 20
 248+ ADD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 248+ ADD4 20 20 20 20
 248+ ADD8 20 20 20 20
 248+ ADDC 20 20 20 20
 249+ ADE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 249+ ADE4 20 20 20 20
 249+ ADE8 20 20 20 20
 249+ ADEC 20 20 20 20
 250+ ADF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 250+ ADF4 20 20 20 20
 250+ ADF8 20 20 20 20
 250+ ADFC 20 20 20 20
 251+ AE00
 252+ AE00              map_11:
 253+ AE00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 253+ AE04 20 20 20 20
 253+ AE08 20 20 20 20
 253+ AE0C 20 20 20 20
 254+ AE10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 254+ AE14 20 20 20 20
 254+ AE18 20 20 20 20
 254+ AE1C 20 20 20 20
 255+ AE20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 255+ AE24 20 20 20 20
 255+ AE28 20 20 20 20
 255+ AE2C 20 20 20 20
 256+ AE30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 256+ AE34 20 20 20 20
 256+ AE38 20 20 20 20
 256+ AE3C 20 20 20 20
 257+ AE40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 257+ AE44 20 20 20 20
 257+ AE48 20 20 20 20
 257+ AE4C 20 20 20 20
 258+ AE50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 258+ AE54 20 20 20 20
 258+ AE58 20 20 20 20
 258+ AE5C 20 20 20 20
 259+ AE60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 259+ AE64 20 20 20 20
 259+ AE68 20 20 20 20
 259+ AE6C 20 20 20 20
 260+ AE70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 260+ AE74 20 20 20 20
 260+ AE78 20 20 20 20
 260+ AE7C 20 20 20 20
 261+ AE80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 261+ AE84 20 20 20 20
 261+ AE88 20 20 20 20
 261+ AE8C 20 20 20 20
 262+ AE90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 262+ AE94 20 20 20 20
 262+ AE98 20 20 20 20
 262+ AE9C 20 20 20 20
 263+ AEA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 263+ AEA4 20 20 20 20
 263+ AEA8 20 20 20 20
 263+ AEAC 20 20 20 20
 264+ AEB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 264+ AEB4 20 20 20 20
 264+ AEB8 20 20 20 20
 264+ AEBC 20 20 20 20
 265+ AEC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 265+ AEC4 20 20 20 20
 265+ AEC8 20 20 20 20
 265+ AECC 20 20 20 20
 266+ AED0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 266+ AED4 20 20 20 20
 266+ AED8 20 20 20 20
 266+ AEDC 20 20 20 20
 267+ AEE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 267+ AEE4 20 20 20 20
 267+ AEE8 20 20 20 20
 267+ AEEC 20 20 20 20
 268+ AEF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 268+ AEF4 20 20 20 20
 268+ AEF8 20 20 20 20
 268+ AEFC 20 20 20 20
 269+ AF00
 270+ AF00              map_12:
 271+ AF00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 271+ AF04 20 20 20 20
 271+ AF08 20 20 20 20
 271+ AF0C 20 20 20 20
 272+ AF10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 272+ AF14 20 20 20 20
 272+ AF18 20 20 20 20
 272+ AF1C 20 20 20 20
 273+ AF20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 273+ AF24 20 20 20 20
 273+ AF28 20 20 20 20
 273+ AF2C 20 20 20 20
 274+ AF30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 274+ AF34 20 20 20 20
 274+ AF38 20 20 20 20
 274+ AF3C 20 20 20 20
 275+ AF40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 275+ AF44 20 20 20 20
 275+ AF48 20 20 20 20
 275+ AF4C 20 20 20 20
 276+ AF50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 276+ AF54 20 20 20 20
 276+ AF58 20 20 20 20
 276+ AF5C 20 20 20 20
 277+ AF60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 277+ AF64 20 20 20 20
 277+ AF68 20 20 20 20
 277+ AF6C 20 20 20 20
 278+ AF70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 278+ AF74 20 20 20 20
 278+ AF78 20 20 20 20
 278+ AF7C 20 20 20 20
 279+ AF80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 279+ AF84 20 20 20 20
 279+ AF88 20 20 20 20
 279+ AF8C 20 20 20 20
 280+ AF90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 280+ AF94 20 20 20 20
 280+ AF98 20 20 20 20
 280+ AF9C 20 20 20 20
 281+ AFA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 281+ AFA4 20 20 20 20
 281+ AFA8 20 20 20 20
 281+ AFAC 20 20 20 20
 282+ AFB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 282+ AFB4 20 20 20 20
 282+ AFB8 20 20 20 20
 282+ AFBC 20 20 20 20
 283+ AFC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 283+ AFC4 20 20 20 20
 283+ AFC8 20 20 20 20
 283+ AFCC 20 20 20 20
 284+ AFD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 284+ AFD4 20 20 20 20
 284+ AFD8 20 20 20 20
 284+ AFDC 20 20 20 20
 285+ AFE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 285+ AFE4 20 20 20 20
 285+ AFE8 20 20 20 20
 285+ AFEC 20 20 20 20
 286+ AFF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 286+ AFF4 20 20 20 20
 286+ AFF8 20 20 20 20
 286+ AFFC 20 20 20 20
 287+ B000
 288+ B000              map_13:
 289+ B000 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 289+ B004 20 20 20 20
 289+ B008 20 20 20 20
 289+ B00C 20 20 20 20
 290+ B010 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 290+ B014 20 20 20 20
 290+ B018 20 20 20 20
 290+ B01C 20 20 20 20
 291+ B020 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 291+ B024 20 20 20 20
 291+ B028 20 20 20 20
 291+ B02C 20 20 20 20
 292+ B030 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 292+ B034 20 20 20 20
 292+ B038 20 20 20 20
 292+ B03C 20 20 20 20
 293+ B040 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 293+ B044 20 20 20 20
 293+ B048 20 20 20 20
 293+ B04C 20 20 20 20
 294+ B050 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 294+ B054 20 20 20 20
 294+ B058 20 20 20 20
 294+ B05C 20 20 20 20
 295+ B060 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 295+ B064 20 20 20 20
 295+ B068 20 20 20 20
 295+ B06C 20 20 20 20
 296+ B070 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 296+ B074 20 20 20 20
 296+ B078 20 20 20 20
 296+ B07C 20 20 20 20
 297+ B080 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 297+ B084 20 20 20 20
 297+ B088 20 20 20 20
 297+ B08C 20 20 20 20
 298+ B090 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 298+ B094 20 20 20 20
 298+ B098 20 20 20 20
 298+ B09C 20 20 20 20
 299+ B0A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 299+ B0A4 20 20 20 20
 299+ B0A8 20 20 20 20
 299+ B0AC 20 20 20 20
 300+ B0B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 300+ B0B4 20 20 20 20
 300+ B0B8 20 20 20 20
 300+ B0BC 20 20 20 20
 301+ B0C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 301+ B0C4 20 20 20 20
 301+ B0C8 20 20 20 20
 301+ B0CC 20 20 20 20
 302+ B0D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 302+ B0D4 20 20 20 20
 302+ B0D8 20 20 20 20
 302+ B0DC 20 20 20 20
 303+ B0E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 303+ B0E4 20 20 20 20
 303+ B0E8 20 20 20 20
 303+ B0EC 20 20 20 20
 304+ B0F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 304+ B0F4 20 20 20 20
 304+ B0F8 20 20 20 20
 304+ B0FC 20 20 20 20
 305+ B100
 306+ B100              map_14:
 307+ B100 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 307+ B104 20 20 20 20
 307+ B108 20 20 20 20
 307+ B10C 20 20 20 20
 308+ B110 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 308+ B114 20 20 20 20
 308+ B118 20 20 20 20
 308+ B11C 20 20 20 20
 309+ B120 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 309+ B124 20 20 20 20
 309+ B128 20 20 20 20
 309+ B12C 20 20 20 20
 310+ B130 81 20 E0 E0   db _mh, _mp, _ms, _ms, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 310+ B134 20 20 20 20
 310+ B138 20 20 20 20
 310+ B13C 20 20 20 20
 311+ B140 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 311+ B144 20 20 20 20
 311+ B148 20 20 20 20
 311+ B14C 20 20 20 20
 312+ B150 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 312+ B154 20 20 20 20
 312+ B158 20 20 20 20
 312+ B15C 20 20 20 20
 313+ B160 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 313+ B164 20 20 20 20
 313+ B168 20 20 20 20
 313+ B16C 20 20 20 20
 314+ B170 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 314+ B174 20 20 20 20
 314+ B178 20 20 20 20
 314+ B17C 20 20 20 20
 315+ B180 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 315+ B184 20 20 20 20
 315+ B188 20 20 20 20
 315+ B18C 20 20 20 20
 316+ B190 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 316+ B194 20 20 20 20
 316+ B198 20 20 20 20
 316+ B19C 20 20 20 20
 317+ B1A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 317+ B1A4 20 20 20 20
 317+ B1A8 20 20 20 20
 317+ B1AC 20 20 20 20
 318+ B1B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 318+ B1B4 20 20 20 20
 318+ B1B8 20 20 20 20
 318+ B1BC 20 20 20 20
 319+ B1C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 319+ B1C4 20 20 20 20
 319+ B1C8 20 20 20 20
 319+ B1CC 20 20 20 20
 320+ B1D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 320+ B1D4 20 20 20 20
 320+ B1D8 20 20 20 20
 320+ B1DC 20 20 20 20
 321+ B1E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 321+ B1E4 20 20 20 20
 321+ B1E8 20 20 20 20
 321+ B1EC 20 20 20 20
 322+ B1F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 322+ B1F4 20 20 20 20
 322+ B1F8 20 20 20 20
 322+ B1FC 20 20 20 20
 323+ B200
 324+ B200              map_15:
 325+ B200 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 325+ B204 20 20 20 20
 325+ B208 20 20 20 20
 325+ B20C 20 20 20 20
 326+ B210 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 326+ B214 20 20 20 20
 326+ B218 20 20 20 20
 326+ B21C 20 20 20 20
 327+ B220 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 327+ B224 20 20 20 20
 327+ B228 20 20 20 20
 327+ B22C 20 20 20 20
 328+ B230 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 328+ B234 20 20 20 20
 328+ B238 20 20 20 20
 328+ B23C 20 20 20 20
 329+ B240 81 C0 E0 20   db _mh, _me, _ms, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 329+ B244 20 20 20 20
 329+ B248 20 20 20 20
 329+ B24C 20 20 20 20
 330+ B250 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 330+ B254 20 20 20 20
 330+ B258 20 20 20 20
 330+ B25C 20 20 20 20
 331+ B260 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 331+ B264 20 20 20 20
 331+ B268 20 20 20 20
 331+ B26C 20 20 20 20
 332+ B270 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 332+ B274 20 20 20 20
 332+ B278 20 20 20 20
 332+ B27C 20 20 20 20
 333+ B280 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 333+ B284 20 20 20 20
 333+ B288 20 20 20 20
 333+ B28C 20 20 20 20
 334+ B290 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 334+ B294 20 20 20 20
 334+ B298 20 20 20 20
 334+ B29C 20 20 20 20
 335+ B2A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 335+ B2A4 20 20 20 20
 335+ B2A8 20 20 20 20
 335+ B2AC 20 20 20 20
 336+ B2B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 336+ B2B4 20 20 20 20
 336+ B2B8 20 20 20 20
 336+ B2BC 20 20 20 20
 337+ B2C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 337+ B2C4 20 20 20 20
 337+ B2C8 20 20 20 20
 337+ B2CC 20 20 20 20
 338+ B2D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 338+ B2D4 20 20 20 20
 338+ B2D8 20 20 20 20
 338+ B2DC 20 20 20 20
 339+ B2E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 339+ B2E4 20 20 20 20
 339+ B2E8 20 20 20 20
 339+ B2EC 20 20 20 20
 340+ B2F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 340+ B2F4 20 20 20 20
 340+ B2F8 20 20 20 20
 340+ B2FC 20 20 20 20
 341+ B300
 342+ B300              ;map start positions
 343+ B300
 344+ B300              player_start_pos:   ;was map_start_pos
 345+ B300              ;map0
 346+ B300 02 A3                dw  map_0+2      ; start location
 347+ B302 02                   db  2       ; Direction Indicator
 348+ B303              ;map1
 349+ B303 01 A4                dw  map_1+1      ; start location
 350+ B305 02                   db  2       ; Direction Indicator
 351+ B306              ;map2
 352+ B306 01 A5                dw  map_2+1      ; start location
 353+ B308 02                   db  2       ; Direction Indicator
 354+ B309              ;map3
 355+ B309 01 A6                dw  map_3+1      ; start location
 356+ B30B 02                   db  2       ; Direction Indicator
 357+ B30C              ;map4
 358+ B30C 01 A7                dw  map_4+1      ; start location
 359+ B30E 02                   db  2       ; Direction Indicator
 360+ B30F              ;map5
 361+ B30F 01 A8                dw  map_5+1      ; start location
 362+ B311 02                   db  2       ; Direction Indicator
 363+ B312              ;map6
 364+ B312 01 A9                dw  map_6+1      ; start location
 365+ B314 02                   db  2       ; Direction Indicator
 366+ B315              ;map7
 367+ B315 01 AA                dw  map_7+1      ; start location
 368+ B317 02                   db  2       ; Direction Indicator
 369+ B318              ;map8
 370+ B318 01 AB                dw  map_8+1      ; start location
 371+ B31A 02                   db  2       ; Direction Indicator
 372+ B31B              ;map9
 373+ B31B 01 AC                dw  map_9+1      ; start location
 374+ B31D 02                   db  2       ; Direction Indicator
 375+ B31E              ;map10
 376+ B31E 01 AD                dw  map_10+1      ; start location
 377+ B320 02                   db  2       ; Direction Indicator
 378+ B321              ;map11
 379+ B321 01 AE                dw  map_11+1      ; start location
 380+ B323 02                   db  2       ; Direction Indicator
 381+ B324              ;map12
 382+ B324 01 AF                dw  map_12+1      ; start location
 383+ B326 02                   db  2       ; Direction Indicator
 384+ B327              ;map13
 385+ B327 01 B0                dw  map_13+1      ; start location
 386+ B329 02                   db  2       ; Direction Indicator
 387+ B32A              ;map14
 388+ B32A 01 B1                dw  map_14+1      ; start location
 389+ B32C 02                   db  2       ; Direction Indicator
 390+ B32D              ;map15
 391+ B32D 01 B2                dw  map_15+1      ; start location
 392+ B32F 02                   db  2       ; Direction Indicator
 393+ B330
 394+ B330
 395+ B330              ;#################################################################
 396+ B330              ;Character screen reservation
 397+ B330                      org $c000
 398+ C000
 399+ C000 00 00 00...  char_screen:   block 768    ;view screen built here from characters
 400+ C300
 401+ C300 00 00 00...  attr_screen:   block 768    ;colours held here for door animation
 402+ C600
 403+ C600              ;################################################
 404+ C600              ;##################################################################################
 405+ C600              ;door exit animation
 406+ C600              ;
 407+ C600              ;   if A==10: NR_69=0 (display Bank5)
 408+ C600              exit_anim:
 409+ C600
 410+ C600              ;first, make the REAL spectrum screen shows our exit door as we need to write to the screen LIVE
 411+ C600
 412+ C600 ED 91 52 0A              nextreg $52,10      ;select the real spectrum screen
 413+ C604
 414+ C604                          ;now redraw our current screen
 415+ C604 CD 55 C6                 call redraw_screen
 416+ C607 CD 5C C7                 call copy_colours
 417+ C60A CD 65 85                 call draw_exit_door_open
 418+ C60D CD 9D 9A                 call draw_screen_right
 419+ C610 21 9C C7                 ld hl,charset_1-256
 420+ C613 22 43 8C                 ld (base),hl
 421+ C616 CD EE 8C                 call compass          ; draw compass
 422+ C619
 423+ C619 ED 91 69 00              nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 424+ C61D 3E 0A                    ld a,10
 425+ C61F 32 B4 81                 ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 426+ C622
 427+ C622 ED 91 07 00              nextreg 7,0
 428+ C626 CD 8A C6                 call do_exit_anim
 429+ C629 CD 54 81                 call pause
 430+ C62C
 431+ C62C              ;need to set the player start position now.
 432+ C62C
 433+ C62C 3A 22 FA                 ld a,(cur_map)
 434+ C62F 3D                       dec a               ;point to our next map
 435+ C630 32 30 FA                 ld (game_exit),a
 436+ C633
 437+ C633              ;need to exit to BASIC if we exit map_0
 438+ C633 01 00 00                 ld bc,0             ;set bc to 0 to indicate we hit the last level and need to return to BASIC
 439+ C636 CA 6D C8                 jp z,ret_to_basic
 440+ C639 01 01 00                 ld bc,1             ;set bc to non ZERO to indicate we do NOT need to return to BASIC
 441+ C63C
 442+ C63C CD 0D C8                 call set_map            ;set our map
 443+ C63F CD 9F C7                 call set_map_start_pos  ;set the player start position and direction
 444+ C642
 445+ C642 CD 55 C6                 call redraw_screen
 446+ C645 CD 27 C7                 call new_maze_anim
 447+ C648 CD 54 81                 call pause
 448+ C64B CD 54 81                 call pause
 449+ C64E CD 54 81                 call pause
 450+ C651 CD 54 81                 call pause
 451+ C654
 452+ C654 C9                       ret                 ;return to normal game
 453+ C655              ;------------------------------------------------------------------------------------------
 454+ C655              redraw_screen:
 455+ C655 CD 69 81                   call clear_char_screen    ; clear screen @c000
 456+ C658 CD A0 8D                   call get_distance         ; get distance we can see
 457+ C65B CD 74 8F                   call draw_left_side       ; start drawing the left side of the
 458+ C65E CD A0 8D                   call get_distance         ; get distance we can see
 459+ C661 CD 8A 9B                   call draw_right_side      ; start drawing the right side of the maze
 460+ C664 CD 17 97                   call draw_front_view      ; draw wall in front of player
 461+ C667 CD A3 97                   call draw_side_walls
 462+ C66A                            ;my print used to print screen @c000 to 16384 inc udg's
 463+ C66A CD 9B 8C                   call my_print             ;copy to screen from c000
 464+ C66D CD 22 99                   call draw_colours         ;colourise the display
 465+ C670 C9                         ret
 466+ C671              ;end drawing the new screen
 467+ C671
 468+ C671              ;------------------------------------------------------------------------------------------
 469+ C671              ;This routine for use from BASIC maze designer program
 470+ C671              redraw_screen_no_colours:
 471+ C671 CD 69 81                   call clear_char_screen    ; clear screen @c000
 472+ C674 CD A0 8D                   call get_distance         ; get distance we can see
 473+ C677 CD 74 8F                   call draw_left_side       ; start drawing the left side of the
 474+ C67A CD A0 8D                   call get_distance         ; get distance we can see
 475+ C67D CD 8A 9B                   call draw_right_side      ; start drawing the right side of the maze
 476+ C680 CD 17 97                   call draw_front_view      ; draw wall in front of player
 477+ C683 CD A3 97                   call draw_side_walls
 478+ C686                            ;my print used to print screen @c000 to 16384 inc udg's
 479+ C686 CD 9B 8C                   call my_print             ;copy to screen from c000
 480+ C689                           ; call draw_colours         ;colourise the display
 481+ C689 C9                         ret
 482+ C68A              ;end drawing the new screen
 483+ C68A
 484+ C68A              ;----------------------------------------------------------------------------------
 485+ C68A              ;draw a load of black boxes to hide the current screen. We then call part of this routine again to draw in the correct
 486+ C68A              ;colours to the new level - supposed to look cool lol!
 487+ C68A
 488+ C68A              do_exit_anim:
 489+ C68A ED 91 07 00             nextreg 7,0
 490+ C68E
 491+ C68E              ;Original base code by David Saphier from Facebook May 2018
 492+ C68E
 493+ C68E 97                       sub a
 494+ C68F 32 22 C7                 ld (in_out),a       ;indicate we are drawing out from the middle
 495+ C692
 496+ C692
 497+ C692              ;reset the boxes to default
 498+ C692              ; this must be the same as the size of the square to draw
 499+ C692 3E 02                    ld a,2    ; reduce the size of the square to draw
 500+ C694 32 23 C7                 ld (size1),a
 501+ C697
 502+ C697              ; this must equal the number of squares to draw
 503+ C697 3E 02                    ld a,2  ;number of boxes to draw
 504+ C699 32 24 C7                 ld (num2draw1),a
 505+ C69C
 506+ C69C 21 6C 59                 ld hl,256+11+22528+65+32 ;start point - middle of the screen nearly!
 507+ C69F
 508+ C69F 3E 5A                    ld a,90
 509+ C6A1 32 5B C7                 ld (sound_byte),a
 510+ C6A4
 511+ C6A4              d_box1:	    ;play some sound
 512+ C6A4 D5                       push de
 513+ C6A5 3A 5B C7                 ld a,(sound_byte)
 514+ C6A8 D6 06                    sub 6
 515+ C6AA 5F                       ld e,a
 516+ C6AB 32 5B C7                 ld (sound_byte),a
 517+ C6AE CD 89 C7                 call walk_sound
 518+ C6B1 D1                       pop de
 519+ C6B2
 520+ C6B2 3E 00                    ld a,0              ;set colour
 521+ C6B4 CD D0 C6                 call box1           ;draw the box
 522+ C6B7 11 E0 FF                	ld de,65504         ; 65504  (-32)
 523+ C6BA
 524+ C6BA 19                       add hl,de           ;next box to draw
 525+ C6BB 3A 23 C7                 ld a,(size1)     ; increase the size of the square to draw
 526+ C6BE 3C                       inc a
 527+ C6BF 3C                       inc a
 528+ C6C0 32 23 C7                 ld (size1),a
 529+ C6C3
 530+ C6C3
 531+ C6C3 3A 24 C7                 ld a,(num2draw1)  ;number of boxes to draw
 532+ C6C6 3C                       inc a
 533+ C6C7 32 24 C7                 ld (num2draw1),a
 534+ C6CA FE 0E                    cp 14
 535+ C6CC C2 A4 C6                 jp nz, d_box1     ; exit when we get to 2 as routine fails after that.
 536+ C6CF
 537+ C6CF C9                       ret
 538+ C6D0
 539+ C6D0              ;davids code here amended by me....
 540+ C6D0              box1:
 541+ C6D0 3A 23 C7                 ld a,(size1)
 542+ C6D3 47                       ld b,a
 543+ C6D4
 544+ C6D4              ml11:
 545+ C6D4 CD 15 C7     	call docol1
 546+ C6D7 77           	ld (hl),a
 547+ C6D8 23           	inc hl
 548+ C6D9 10 F9        	djnz ml11
 549+ C6DB F5               push af
 550+ C6DC 3A 23 C7         ld a,(size1)
 551+ C6DF 3D               dec a
 552+ C6E0 47              	ld b,a
 553+ C6E1 F1               pop af
 554+ C6E2 2B           	dec hl
 555+ C6E3
 556+ C6E3              ml21:
 557+ C6E3 CD 15 C7     	call docol1
 558+ C6E6 11 20 00     	ld de,32     ;was 32
 559+ C6E9 19           	add hl,de
 560+ C6EA 77           	ld (hl),a
 561+ C6EB 10 F6        	djnz ml21
 562+ C6ED F5               push af
 563+ C6EE 3A 23 C7         ld a,(size1)
 564+ C6F1 47              	ld b,a
 565+ C6F2 F1               pop af
 566+ C6F3 2D           	dec l
 567+ C6F4
 568+ C6F4              ml31:
 569+ C6F4 CD 15 C7     	call docol1
 570+ C6F7 77            	ld (hl),a
 571+ C6F8 2B            	dec hl
 572+ C6F9 10 F9         	djnz ml31
 573+ C6FB F5               push af
 574+ C6FC 3A 23 C7         ld a,(size1)
 575+ C6FF 3D               dec a
 576+ C700 47              	ld b,a
 577+ C701 F1               pop af
 578+ C702 2C            	inc l
 579+ C703
 580+ C703              ml41:
 581+ C703 CD 15 C7     	call docol1
 582+ C706 11 E0 FF     	ld de,65504; was 65504  (-32)
 583+ C709 19           	add hl,de
 584+ C70A 77           	ld (hl),a
 585+ C70B 10 F6        	djnz ml41
 586+ C70D F5               push af
 587+ C70E 3A 23 C7         ld a,(size1)
 588+ C711 3D               dec a
 589+ C712 47              	ld b,a
 590+ C713 F1               pop af
 591+ C714 C9           	ret
 592+ C715
 593+ C715              ;end of davids code...
 594+ C715
 595+ C715              ;set square colours
 596+ C715              docol1:                     ;this routine draws black colours on existing level
 597+ C715                  ;    ld a,(in_out)
 598+ C715                  ;    dec a               ;check if a=0
 599+ C715                  ;    jr z,do_out         ;draw the attributes screen proper if a <> 0
 600+ C715 3E F0                ld a,240            ;black screen
 601+ C717 C9                   ret
 602+ C718              do_out                      ;this routine draws the colours on new level - but I cant get it working!
 603+ C718 E5                   push hl
 604+ C719 11 00 6B             ld de,$6b00         ;$5800 + $6b00 = $c300. point to our alternate attribute screen
 605+ C71C                     ; ld de,(fadein)      ;fadein holds our memory pointer to attribut screen-22528
 606+ C71C 19                   add hl,de
 607+ C71D 7E                   ld a,(hl)           ;get the colour to print
 608+ C71E                     ; inc de
 609+ C71E                     ; ld (fadein),de
 610+ C71E                     ; ld a,6
 611+ C71E E1                   pop hl
 612+ C71F C9                   ret
 613+ C720
 614+ C720
 615+ C720 00 00        fadein     dw 0   ;holds address of colours to fetch for screen colouring
 616+ C722 00           in_out:    db 0   ;1=draw inward, 0=draw outward
 617+ C723 02           size1:     db 2   ; size of square to draw ;double the number to draw
 618+ C724 02           num2draw1: db 2   ;number of squares to draw
 619+ C725 00           cur_screen db 0   ;hold the current screen in view for the exit screen
 620+ C726 00           cur_page   db 0   ;hold the current screen thats paged in view for the exit screen
 621+ C727
 622+ C727              ;###########################################################################
 623+ C727
 624+ C727              new_maze_anim:
 625+ C727 CD 9D 9A                   call draw_screen_right
 626+ C72A ED 91 07 01                nextreg 7,1
 627+ C72E 3E 0A                      ld a,10
 628+ C730 32 5B C7                   ld (sound_byte),a
 629+ C733
 630+ C733              ;we have 24 vertical columns of 24 blocks - swipe left to right
 631+ C733 06 18                      ld b,24
 632+ C735 21 00 C3                   ld hl,attr_screen     ;address of colours screen to copy
 633+ C738 11 00 58                   ld de,de_dest           ;attributes on main screen
 634+ C73B C5           again_1:      push bc
 635+ C73C 01 18 00                   ld bc,24              ;number of cells to copy
 636+ C73F
 637+ C73F              Loop_col_1:
 638+ C73F ED B0                      ldir
 639+ C741                            ;do the walking sound
 640+ C741 D5                         push de
 641+ C742 3A 5B C7                   ld a,(sound_byte)
 642+ C745 C6 06                      add a,6
 643+ C747 5F                         ld e,a
 644+ C748 32 5B C7                   ld (sound_byte),a
 645+ C74B CD 89 C7                   call walk_sound
 646+ C74E D1                         pop de
 647+ C74F C1                         pop bc
 648+ C750 ED 35 08 00                add de,8
 649+ C754 ED 34 08 00                add hl,8
 650+ C758 10 E1                      djnz again_1
 651+ C75A C9                         ret
 652+ C75B
 653+ C75B
 654+ C75B 0A           sound_byte    db 10
 655+ C75C              de_dest       equ 22528
 656+ C75C
 657+ C75C
 658+ C75C              ;*********************************************************************
 659+ C75C              ; Making LDIR 21% faster
 660+ C75C              ;taken from MSX Assembly page - http://map.grauw.nl/articles/fast_loops.php
 661+ C75C
 662+ C75C
 663+ C75C              ;LDI Performs a "LD (DE),(HL)", then increments DE and HL, and decrements BC.
 664+ C75C
 665+ C75C              ;Now, on with the lesson. Aside from OTIR you can also unroll other things. INIR, LDIR and LDDR will also greatly benefit from this method, and sometimes it is also ;beneficial to unroll normal loops which use DJNZ, JR or JP.
 666+ C75C
 667+ C75C              ;In the case of LDIR however, the number of loops is often too large to simply use an LDI that number of times. That would take up too much space. So what we can do ;instead is to unroll only part of the loop. Say, we need to LDIR something 256 (100H) times. Instead of LDIR we could write:
 668+ C75C
 669+ C75C              ;we need to move 768 bytes = 48 x 16
 670+ C75C              copy_colours:
 671+ C75C
 672+ C75C 01 00 03                   ld bc,768             ;number of cells to copy
 673+ C75F 21 00 C3                   ld hl,attr_screen     ;address of colours screen to copy
 674+ C762 11 00 58                   ld de,22528           ;attributes on main screen
 675+ C765              Loop_col:
 676+ C765 ED A0            ldi  ; 16x LDI
 677+ C767 ED A0            ldi
 678+ C769 ED A0            ldi
 679+ C76B ED A0            ldi
 680+ C76D ED A0            ldi
 681+ C76F ED A0            ldi
 682+ C771 ED A0            ldi
 683+ C773 ED A0            ldi
 684+ C775 ED A0            ldi
 685+ C777 ED A0            ldi
 686+ C779 ED A0            ldi
 687+ C77B ED A0            ldi
 688+ C77D ED A0            ldi
 689+ C77F ED A0            ldi
 690+ C781 ED A0            ldi
 691+ C783 ED A0            ldi
 692+ C785 EA 65 C7         jp pe,Loop_col  ; Loop until bc = zero
 693+ C788
 694+ C788 C9                         ret
 695+ C789
 696+ C789              ;#################################################################
 697+ C789              ;walking sound
 698+ C789
 699+ C789              walk_sound:
 700+ C789
 701+ C789              zap:
 702+ C789 D5                   push de
 703+ C78A C5                   push bc
 704+ C78B 16 10        	    ld d,16		;speaker = bit 4
 705+ C78D              ;e is set when the routine is called so we make different sounds for switch and footwalk
 706+ C78D              ;	    ld e,10		;distance between speaker move counter
 707+ C78D 06 FA        	    ld b,250 	;overall length counter
 708+ C78F 7A           blp0:	ld a,d
 709+ C790 E6 F8        	    and 248		;keep border colour the same
 710+ C792 D3 FE        	    out (254),a	;move the speaker in or out depending on bit 4
 711+ C794 2F           	    cpl		    ;toggle, so we alternative between speaker in and out to make sound
 712+ C795 57           	    ld d,a		;store it
 713+ C796 4B           	    ld c,e		;now a pause
 714+ C797 0D           blp1:	dec c
 715+ C798 20 FD        	    jr nz,blp1
 716+ C79A              	   ; dec e		;change to inc e to reverse the sound, or remove to make it a note
 717+ C79A 10 F3        	    djnz blp0	;repeat B=255 times
 718+ C79C C1                   pop bc
 719+ C79D D1                   pop de
 720+ C79E C9           	    ret
 721+ C79F              	;
 722+ C79F
 723+ C79F              ;##################################################################
 724+ C79F              ; set the player start position and direction
 725+ C79F
 726+ C79F              set_map_start_pos:
 727+ C79F
 728+ C79F               ;           ld l,01              ;top left of maze
 729+ C79F               ;           ld (player_pos),hl
 730+ C79F
 731+ C79F
 732+ C79F 21 00 B3                 ld hl,player_start_pos      ;point to player start at maze 0 - next byte is the direction
 733+ C7A2 16 03                    ld d,3                      ;to jump 3 bytes
 734+ C7A4 3A 22 FA                 ld a,(cur_map)
 735+ C7A7 5F                       ld e,a
 736+ C7A8 ED 30                    mul                         ;multiply d*e
 737+ C7AA 19                       add hl,de                   ;point to the correct player start position
 738+ C7AB 5E 23 56 2B              ld de,(hl)
 739+ C7AF ED 53 00 FA              ld (player_pos),de          ;save our player start
 740+ C7B3 23                       inc hl
 741+ C7B4 23                       inc hl
 742+ C7B5 7E                       ld a,(hl)
 743+ C7B6 32 08 FA                 ld (player_dir),a           ;store our player view direction.
 744+ C7B9 C9                       ret
 745+ C7BA
 746+ C7BA              ;##################################################################
 747+ C7BA              ;set map from BASIC for mapmaker program
 748+ C7BA              ;poke map number into second byte
 749+ C7BA
 750+ C7BA              basic_set_map:
 751+ C7BA 3E 00                      ld a,0
 752+ C7BC CD 0D C8                   call set_map      ;set our map
 753+ C7BF C9                         ret
 754+ C7C0
 755+ C7C0
 756+ C7C0
# file closed: src/7-rd3dmazeV6.asm
 460  C7C0
 461  C7C0              ;moved 2 to here as it was causing a memory overwrite.
 462  C7C0                ;  INCLUDE "2-rd3dmazeV6.asm" ; draw maze on screen, player direction,
 463  C7C0              ;#####################################################
 464  C7C0
 465  C7C0
 466  C7C0              ;###################################################
 467  C7C0              ; Get Keystroke Routine from Your Sinclair Magazine
 468  C7C0              ; From Your Sinclair #22 (Oct.1987)
 469  C7C0              ;###################################################
 470  C7C0
 471  C7C0
 472  C7C0              get_keys:
 473  C7C0               ;
 474  C7C0               ;      YS_KEYS
 475  C7C0               ;
 476  C7C0               ;A,HL,DE corrupt
 477  C7C0               ;B=0, key in C
 478  C7C0
 479  C7C0
 480  C7C0               ;Keyboard Scanning
 481  C7C0               ;by Pete Cooke
 482  C7C0               ;from Your Sinclair #22 (Oct.1987)
 483  C7C0
 484  C7C0               ;prog for Your Sinclair
 485  C7C0               ;
 486  C7C0               ;file for Hisoft GENS
 487  C7C0               ;assembler but should
 488  C7C0               ;be suitable for most
 489  C7C0               ;assemblers on the market
 490  C7C0               ;
 491  C7C0               ;Reads the keyboard
 492  C7C0               ;Returns with C
 493  C7C0               ;holding L/R/U/D/F
 494  C7C0               ;
 495  C7C0               ;bit 4,C left
 496  C7C0               ;bit 3,C right
 497  C7C0               ;bit 2,C up
 498  C7C0               ;bit 1,C down
 499  C7C0               ;bit 0,C fire
 500  C7C0               ;
 501  C7C0               ;bit set to 1 if pressed
 502  C7C0               ;
 503  C7C0               ;keys are chosen by
 504  C7C0               ;values in KEYTAB
 505  C7C0               ;
 506  C7C0 21 07 C8     readke  ld   hl,keytab
 507  C7C3 01 00 06             ld   bc,$0600
 508  C7C6               ;
 509  C7C6               ;6 keys to read
 510  C7C6               ;
 511  C7C6 7E           read_1  ld   a,(hl)
 512  C7C7 1F                   rra
 513  C7C8 1F                   rra
 514  C7C9 E6 1E                and  $1e
 515  C7CB 5F                   ld   e,a
 516  C7CC 16 00                ld   d,0
 517  C7CE               ;
 518  C7CE               ;2*the row number
 519  C7CE               ;
 520  C7CE 7E                   ld   a,(hl)
 521  C7CF 23                   inc  hl
 522  C7D0 E5                   push hl
 523  C7D1               ;
 524  C7D1               ;save place in KEYTAB
 525  C7D1               ;
 526  C7D1 21 F5 C7             ld   hl,keyadd
 527  C7D4 19                   add  hl,de
 528  C7D5 57                   ld   d,a
 529  C7D6               ;
 530  C7D6               ;index port addresses
 531  C7D6               ;
 532  C7D6 C5                   push bc
 533  C7D7 4E                   ld   c,(hl)
 534  C7D8 23                   inc  hl
 535  C7D9 46                   ld   b,(hl)
 536  C7DA ED 78                in   a,(c)
 537  C7DC 04                   inc  b
 538  C7DD 05                   dec  b
 539  C7DE 28 01                jr   z,read_2
 540  C7E0 2F                   cpl
 541  C7E1 5F           read_2  ld   e,a
 542  C7E2               ;
 543  C7E2               ;read the port
 544  C7E2               ;and flip bits if not
 545  C7E2               ;Kempston
 546  C7E2               ;
 547  C7E2 C1                   pop  bc
 548  C7E3 E1                   pop  hl
 549  C7E4               ;
 550  C7E4               ;and get back BC+HL
 551  C7E4               ;
 552  C7E4 7A                   ld   a,d
 553  C7E5 E6 07                and  $07
 554  C7E7 28 05                jr   z,read_4
 555  C7E9               ;
 556  C7E9 CB 1B        read_3  rr   e
 557  C7EB 3D                   dec  a
 558  C7EC 20 FB                jr   nz,read_3
 559  C7EE               ;
 560  C7EE               ;rotate L so bit needed
 561  C7EE               ;is in bit 0
 562  C7EE               ;
 563  C7EE CB 1B        read_4  rr   e
 564  C7F0 CB 11                rl   c
 565  C7F2               ;
 566  C7F2               ;rotate the bit into C
 567  C7F2               ;
 568  C7F2 10 D2                djnz read_1
 569  C7F4 C9                   ret
 570  C7F5               ;
 571  C7F5               ;exit B=0
 572  C7F5               ;     C=keys
 573  C7F5               ;
 574  C7F5               ;A,HL,DE corrupt
 575  C7F5               ;
 576  C7F5               ;
 577  C7F5               ;port addresses of
 578  C7F5               ;the keyboard rows
 579  C7F5               ;
 580  C7F5 FE F7 FE FB  keyadd dw 63486,64510,65022,65278,61438,57342,49150,32766
 580  C7F9 FE FD FE FE
 580  C7FD FE EF FE DF
 580  C801 FE BF FE 7F
 581  C805 1F 00                dw 31 ;*Kempston*
 582  C807               ;
 583  C807               ;
 584  C807               ;KEYTAB holds the position
 585  C807               ;of each key as
 586  C807               ;1/2 row number*8 plus
 587  C807               ;distance from the edge
 588  C807               ;eg. P = 5*8+0
 589  C807               ;    O = 5*8+1
 590  C807               ;    Q = 1*8+0
 591  C807               ;    4 = 0*8+3
 592  C807               ;
 593  C807 04 24 23 22  keytab db 0*8+4, 4*8+4, 4*8+3, 4*8+2, 4*8+0, 3*8+2
 593  C80B 20 1A
 594  C80D               ;           5     6     7      8       0     X
 595  C80D
 596  C80D               ;old bit values before adding the x key
 597  C80D               ;;bit values: 1 = 0 fire
 598  C80D               ;             2 = 8 right
 599  C80D               ;             4 = 7 up
 600  C80D               ;             8 = 6 down
 601  C80D               ;            16 = 5 left
 602  C80D              ;new key table
 603  C80D              ;;bit values:
 604  C80D               ;             1 = x
 605  C80D               ;             2 =  0 fire
 606  C80D               ;             4 = 5 left
 607  C80D               ;             8 =  7 up
 608  C80D               ;             16 = 6 down
 609  C80D               ;             32 =  8 right
 610  C80D
 611  C80D
 612  C80D
 613  C80D
 614  C80D
 615  C80D              ; keytab db 5*8+1,5*8+0,2*8+1,3*8+2,7*8+0
 616  C80D               ;
 617  C80D               ;set for O,P,S,X,space
 618  C80D               ;
 619  C80D               ;for a Kempston joystick
 620  C80D               ;substitute
 621  C80D               ;
 622  C80D               ;       db 8*8+1,8*8+0,8*8+3,8*8+2,8*8+4
 623  C80D               ;
 624  C80D              ;end_k nop
 625  C80D
 626  C80D              ;##############################################
 627  C80D              ;##############################################
 628  C80D
 629  C80D              ;set map - sets hl to start of map to draw
 630  C80D              ;a holds the map number = 0 to 15
 631  C80D
 632  C80D              set_map:
 633  C80D
 634  C80D 21 00 A3             ld hl,map_0             ;start of map data 256 bytes each
 635  C810 32 22 FA             ld (cur_map),a          ;save our cur map
 636  C813 22 23 FA             ld (map_start),hl
 637  C816
 638  C816 3D                   dec a
 639  C817 3C                   inc a                   ;exit if its map 0
 640  C818
 641  C818 7C                   ld a,h
 642  C819 32 28 FA             ld (maze_highbyte),a
 643  C81C C8                   ret z       ;if a is 0, just return for map_0
 644  C81D
 645  C81D 3A 22 FA             ld a,(cur_map)
 646  C820 24           loop3   inc h                   ; times by 256
 647  C821 3D                   dec a
 648  C822 20 FC                jr nz, loop3
 649  C824 22 23 FA             ld (map_start),hl
 650  C827 7C                   ld a, h
 651  C828 32 28 FA             ld (maze_highbyte),a
 652  C82B C9                   ret
 653  C82C              ;*******************************************************************
 654  C82C              ;save and restore the contents of bank 14
 655  C82C
 656  C82C              save_bank_14:
 657  C82C                      ;save the current bank in slot $57
 658  C82C 3E 57                ld a,$57
 659  C82E CD 8C 81             call readnextreg
 660  C831 F5                   push af
 661  C832 ED 91 57 20          nextreg $57,32       ;page in bank 32 to upper RAM
 662  C836 ED 91 52 0E          nextreg $52,14       ;page in shadow RAM page
 663  C83A 21 00 40             ld  hl,$4000
 664  C83D 11 00 E0             ld  de,$e000
 665  C840 01 00 20             ld  bc,8192
 666  C843 7E                   ld a,(hl)
 667  C844 12                   ld  (de),a
 668  C845 ED B0                ldir
 669  C847                      ;restore bank $57 bank  again
 670  C847 F1                   pop af
 671  C848 ED 92 57             nextreg $57,a
 672  C84B ED 91 52 0A          nextreg $52,10       ;restore normal screen
 673  C84F C9                   ret
 674  C850
 675  C850              restore_bank_14:
 676  C850              ; break
 677  C850                      ;save the current bank in slot $57
 678  C850 3E 57                ld a,$57
 679  C852 CD 8C 81             call readnextreg
 680  C855 F5                   push af
 681  C856 ED 91 57 20          nextreg $57,32       ;page in bank 32 to upper RAM
 682  C85A ED 91 52 0E          nextreg $52,14       ;page in shadow RAM page
 683  C85E 21 00 E0             ld  hl,$e000
 684  C861 11 00 40             ld  de,$4000
 685  C864 01 00 20             ld  bc,8192
 686  C867 7E                   ld a,(hl)
 687  C868 12                   ld  (de),a
 688  C869 ED B0                ldir
 689  C86B                      ;restore bank $57 bank  again
 690  C86B F1                   pop af
 691  C86C C9                   ret
 692  C86D
 693  C86D              ;*******************************************************************
 694  C86D              ;return to Basic
 695  C86D
 696  C86D              ret_to_basic
 697  C86D C5                       push bc         ;save our exit value
 698  C86E
 699  C86E CD 50 C8      call restore_bank_14
 700  C871
 701  C871              ;clear the real ULA screen
 702  C871
 703  C871 ED 91 50 0A              nextreg $50,10
 704  C875                          ;clear the viewable display - $000 = $4000 at reg $52
 705  C875 21 00 00                 ld  hl,$0000
 706  C878 11 01 00                 ld  de,$0001
 707  C87B 01 FF 17                 ld  bc,$17ff
 708  C87E 36 00                    ld  (hl),0
 709  C880 ED B0                    ldir
 710  C882
 711  C882                          ;make the attributes white paper and black ink
 712  C882 36 00                    ld  (hl),0;56       ;white paper, black ink on standard ula
 713  C884 01 FF 02                 ld  bc,$02FF
 714  C887 ED B0                    ldir
 715  C889 ED 91 50 FF              nextreg $50,$FF     ;restore reg $50
 716  C88D ED 91 52 0A              nextreg $52,10      ;page in the real spectrum screen back into place in memory
 717  C891
 718  C891 ED 91 43 00              nextreg $43,$0      ;turn off ulanext and return to standard ULA colours
 719  C895 ED 91 69 00              nextreg $69,0       ;bank in the correct screen to view
 720  C899 C1                       pop bc              ;restore th exit value
 721  C89A FB                       ei
 722  C89B C9                       ret
 723  C89C
 724  C89C
 725  C89C              ;#################################################################
 726  C89C              ;Character screen reservation
 727  C89C               ;       org $c000
 728  C89C              ;char_screen:   block 768    ;view screen built here from characters
 729  C89C
 730  C89C              ;attr_screen:   block 768    ;colours held here for door animation
 731  C89C
 732  C89C              ;################################################
 733  C89C
 734  C89C
 735  C89C              ;##############################################
 736  C89C              ; Alternate Character set
 737  C89C              ;from https://www.jimblimey.com/blog/24-zx-spectrum-fonts/
 738  C89C              ;##############################################
 739  C89C              charset_1:
 740  C89C 00 00 00 00    defb 0,0,0,0,0,0,0,0
 740  C8A0 00 00 00 00
 741  C8A4 10 38 38 38    defb 16,56,56,56,16,0,16,0
 741  C8A8 10 00 10 00
 742  C8AC 66 33 33 00    defb 102,51,51,0,0,0,0,0
 742  C8B0 00 00 00 00
 743  C8B4 66 66 FF 66    defb 102,102,255,102,102,255,102,102
 743  C8B8 66 FF 66 66
 744  C8BC 14 7E D4 7E    defb 20,126,212,126,149,126,20,0
 744  C8C0 95 7E 14 00
 745  C8C4 60 94 68 10    defb 96,148,104,16,44,82,140,0
 745  C8C8 2C 52 8C 00
 746  C8CC 30 48 30 48    defb 48,72,48,72,142,140,120,0
 746  C8D0 8E 8C 78 00
 747  C8D4 0C 0C 18 00    defb 12,12,24,0,0,0,0,0
 747  C8D8 00 00 00 00
 748  C8DC 01 02 04 04    defb 1,2,4,4,4,4,2,1
 748  C8E0 04 04 02 01
 749  C8E4 80 40 20 20    defb 128,64,32,32,32,32,64,128
 749  C8E8 20 20 40 80
 750  C8EC 00 54 38 FE    defb 0,84,56,254,56,84,0,0
 750  C8F0 38 54 00 00
 751  C8F4 00 18 18 7E    defb 0,24,24,126,24,24,0,0
 751  C8F8 18 18 00 00
 752  C8FC 00 00 00 00    defb 0,0,0,0,0,0,48,96
 752  C900 00 00 30 60
 753  C904 00 00 00 7E    defb 0,0,0,126,0,0,0,0
 753  C908 00 00 00 00
 754  C90C 00 00 00 00    defb 0,0,0,0,0,0,48,0
 754  C910 00 00 30 00
 755  C914 01 02 04 08    defb 1,2,4,8,16,32,64,128
 755  C918 10 20 40 80
 756  C91C 7C 86 8A 92    defb 124,134,138,146,162,194,124,0
 756  C920 A2 C2 7C 00
 757  C924 10 30 70 10    defb 16,48,112,16,16,16,124,0
 757  C928 10 10 7C 00
 758  C92C 78 84 08 30    defb 120,132,8,48,64,128,252,0
 758  C930 40 80 FC 00
 759  C934 78 84 04 38    defb 120,132,4,56,4,132,120,0
 759  C938 04 84 78 00
 760  C93C 80 44 48 48    defb 128,68,72,72,252,8,8,0
 760  C940 FC 08 08 00
 761  C944 FE 80 80 7C    defb 254,128,128,124,2,130,124,0
 761  C948 02 82 7C 00
 762  C94C 7A 84 80 BC    defb 122,132,128,188,194,130,124,0
 762  C950 C2 82 7C 00
 763  C954 FE 84 08 10    defb 254,132,8,16,56,16,16,0
 763  C958 38 10 10 00
 764  C95C 7C 82 7C 82    defb 124,130,124,130,130,130,124,0
 764  C960 82 82 7C 00
 765  C964 7C 82 86 7A    defb 124,130,134,122,2,130,124,0
 765  C968 02 82 7C 00
 766  C96C 00 30 00 00    defb 0,48,0,0,0,48,0,0
 766  C970 00 30 00 00
 767  C974 00 30 00 00    defb 0,48,0,0,0,48,32,0
 767  C978 00 30 20 00
 768  C97C 08 10 20 40    defb 8,16,32,64,32,16,8,0
 768  C980 20 10 08 00
 769  C984 00 00 7E 00    defb 0,0,126,0,126,0,0,0
 769  C988 7E 00 00 00
 770  C98C 20 10 08 04    defb 32,16,8,4,8,16,32,0
 770  C990 08 10 20 00
 771  C994 7C 82 04 08    defb 124,130,4,8,16,0,16,0
 771  C998 10 00 10 00
 772  C99C 7C 82 9A AA    defb 124,130,154,170,170,158,124,0
 772  C9A0 AA 9E 7C 00
 773  C9A4 F8 44 42 FE    defb 248,68,66,254,66,66,198,0
 773  C9A8 42 42 C6 00
 774  C9AC FC 42 42 FC    defb 252,66,66,252,66,66,252,0
 774  C9B0 42 42 FC 00
 775  C9B4 7A 84 80 80    defb 122,132,128,128,128,130,124,0
 775  C9B8 80 82 7C 00
 776  C9BC FC 42 42 42    defb 252,66,66,66,66,66,252,0
 776  C9C0 42 42 FC 00
 777  C9C4 FE 42 40 70    defb 254,66,64,112,192,66,254,0
 777  C9C8 C0 42 FE 00
 778  C9CC FE 42 40 70    defb 254,66,64,112,192,64,224,0
 778  C9D0 C0 40 E0 00
 779  C9D4 7A 84 80 80    defb 122,132,128,128,156,130,126,2
 779  C9D8 9C 82 7E 02
 780  C9DC 82 44 44 5E    defb 130,68,68,94,244,68,130,0
 780  C9E0 F4 44 82 00
 781  C9E4 10 08 08 08    defb 16,8,8,8,8,8,4,0
 781  C9E8 08 08 04 00
 782  C9EC 7E 08 04 04    defb 126,8,4,4,4,132,120,0
 782  C9F0 04 84 78 00
 783  C9F4 CC 44 48 F0    defb 204,68,72,240,72,68,198,0
 783  C9F8 48 44 C6 00
 784  C9FC C0 40 40 40    defb 192,64,64,64,64,66,254,0
 784  CA00 40 42 FE 00
 785  CA04 C6 6A 5A 4A    defb 198,106,90,74,74,66,198,0
 785  CA08 4A 42 C6 00
 786  CA0C CC 64 54 54    defb 204,100,84,84,84,84,204,0
 786  CA10 54 54 CC 00
 787  CA14 78 84 84 84    defb 120,132,132,132,132,132,120,0
 787  CA18 84 84 78 00
 788  CA1C F8 44 44 F8    defb 248,68,68,248,64,64,224,0
 788  CA20 40 40 E0 00
 789  CA24 78 84 84 84    defb 120,132,132,132,132,140,125,2
 789  CA28 84 8C 7D 02
 790  CA2C FC 42 42 FC    defb 252,66,66,252,66,66,198,0
 790  CA30 42 42 C6 00
 791  CA34 74 88 80 78    defb 116,136,128,120,4,132,120,0
 791  CA38 04 84 78 00
 792  CA3C 7C 54 10 10    defb 124,84,16,16,16,16,48,0
 792  CA40 10 10 30 00
 793  CA44 C6 44 44 82    defb 198,68,68,130,130,130,124,0
 793  CA48 82 82 7C 00
 794  CA4C CC 44 44 44    defb 204,68,68,68,68,40,16,0
 794  CA50 44 28 10 00
 795  CA54 C6 42 42 4A    defb 198,66,66,74,90,106,204,0
 795  CA58 5A 6A CC 00
 796  CA5C 82 44 28 10    defb 130,68,40,16,40,68,130,0
 796  CA60 28 44 82 00
 797  CA64 CC 44 44 38    defb 204,68,68,56,16,16,48,0
 797  CA68 10 10 30 00
 798  CA6C FE 84 08 10    defb 254,132,8,16,32,66,254,0
 798  CA70 20 42 FE 00
 799  CA74 1C 10 10 10    defb 28,16,16,16,16,16,28,0
 799  CA78 10 10 1C 00
 800  CA7C 80 40 20 10    defb 128,64,32,16,8,4,2,1
 800  CA80 08 04 02 01
 801  CA84 38 08 08 08    defb 56,8,8,8,8,8,56,0
 801  CA88 08 08 38 00
 802  CA8C 00 00 10 38    defb 0,0,16,56,108,198,0,0
 802  CA90 6C C6 00 00
 803  CA94 00 00 00 00    defb 0,0,0,0,0,0,0,255
 803  CA98 00 00 00 FF
 804  CA9C 30 30 18 00    defb 48,48,24,0,0,0,0,0
 804  CAA0 00 00 00 00
 805  CAA4 00 00 7A 04    defb 0,0,122,4,124,132,122,0
 805  CAA8 7C 84 7A 00
 806  CAAC 80 40 40 5C    defb 128,64,64,92,98,66,188,0
 806  CAB0 62 42 BC 00
 807  CAB4 00 00 7A 84    defb 0,0,122,132,128,130,124,0
 807  CAB8 80 82 7C 00
 808  CABC 02 04 74 8C    defb 2,4,116,140,132,132,122,0
 808  CAC0 84 84 7A 00
 809  CAC4 00 00 BC 42    defb 0,0,188,66,124,64,62,0
 809  CAC8 7C 40 3E 00
 810  CACC 34 48 40 E0    defb 52,72,64,224,64,64,128,0
 810  CAD0 40 40 80 00
 811  CAD4 00 00 7A 84    defb 0,0,122,132,140,116,4,120
 811  CAD8 8C 74 04 78
 812  CADC 80 40 78 44    defb 128,64,120,68,68,68,136,0
 812  CAE0 44 44 88 00
 813  CAE4 10 00 10 08    defb 16,0,16,8,8,8,4,0
 813  CAE8 08 08 04 00
 814  CAEC 00 10 00 10    defb 0,16,0,16,8,8,136,112
 814  CAF0 08 08 88 70
 815  CAF4 C0 40 48 50    defb 192,64,72,80,224,80,200,0
 815  CAF8 E0 50 C8 00
 816  CAFC 30 10 10 10    defb 48,16,16,16,16,16,56,0
 816  CB00 10 10 38 00
 817  CB04 00 00 AC 54    defb 0,0,172,84,84,68,204,0
 817  CB08 54 44 CC 00
 818  CB0C 00 00 B8 44    defb 0,0,184,68,68,68,204,0
 818  CB10 44 44 CC 00
 819  CB14 00 00 78 84    defb 0,0,120,132,132,132,120,0
 819  CB18 84 84 78 00
 820  CB1C 00 00 B8 44    defb 0,0,184,68,68,120,64,128
 820  CB20 44 78 40 80
 821  CB24 00 00 74 88    defb 0,0,116,136,136,120,4,2
 821  CB28 88 78 04 02
 822  CB2C 00 00 B0 48    defb 0,0,176,72,64,64,64,0
 822  CB30 40 40 40 00
 823  CB34 00 00 78 80    defb 0,0,120,128,112,8,240,0
 823  CB38 70 08 F0 00
 824  CB3C 00 20 10 7C    defb 0,32,16,124,16,16,8,0
 824  CB40 10 10 08 00
 825  CB44 00 00 90 48    defb 0,0,144,72,132,132,120,0
 825  CB48 84 84 78 00
 826  CB4C 00 00 82 44    defb 0,0,130,68,68,40,16,0
 826  CB50 44 28 10 00
 827  CB54 00 00 84 42    defb 0,0,132,66,82,106,70,0
 827  CB58 52 6A 46 00
 828  CB5C 00 00 88 50    defb 0,0,136,80,32,80,136,0
 828  CB60 20 50 88 00
 829  CB64 00 00 82 44    defb 0,0,130,68,68,60,4,120
 829  CB68 44 3C 04 78
 830  CB6C 00 00 7C 88    defb 0,0,124,136,48,68,248,0
 830  CB70 30 44 F8 00
 831  CB74 0E 10 10 60    defb 14,16,16,96,16,16,14,0
 831  CB78 10 10 0E 00
 832  CB7C 18 18 18 00    defb 24,24,24,0,24,24,24,0
 832  CB80 18 18 18 00
 833  CB84 E0 10 10 0C    defb 224,16,16,12,16,16,224,0
 833  CB88 10 10 E0 00
 834  CB8C 00 00 70 9A    defb 0,0,112,154,12,0,0,0
 834  CB90 0C 00 00 00
 835  CB94 00 00 18 3C    defb 0,0,24,60,102,255,0,0
 835  CB98 66 FF 00 00
 836  CB9C
 837  CB9C
 838  CB9C
 839  CB9C                ;  include 7-rd3dmazeV6.asm    ;the maze itself and other routines
 840  CB9C
 841  CB9C              ;##############################################
 842  CB9C              ;misc data
 843  CB9C              ;various variables
 844  CB9C              ;udg charachter set
 845  CB9C              ;##############################################
 846  CB9C
 847  CB9C                      org 64000       ;fa00
 848  FA00
 849  FA00              ;variables
 850  FA00              ;-----------------------------------------------
 851  FA00
 852  FA00 00 00        player_pos: dw $0             ; only when in the main game loop
 853  FA02                                            ; holds the low byte of the current insertion location when inserting a passageway into the maze.
 854  FA02
 855  FA02              ;l4083:  db 134               ; high byte of the maze location data
 856  FA02              ;l4084:  db 08                ; holds the desired length of the passageway beign inserted when constructing the maze.
 857  FA02 06           maxview: db 6                   ;holds how far we can see before
 858  FA03                                              ;hitting a wall
 859  FA03              ;l4085:  db $01               ; holds the passageway direction when inserting a passageway into the maze ($00=north, $01=west, $02=south, $03=east).
 860  FA03
 861  FA03 00           flags:  db 0                 ; flags:
 862  FA04                                           ;na   bit 7: 1=the player has been caught.
 863  FA04                                           ;na   bit 6: 1=the player has moved forwards.408a
 864  FA04                                           ;na   bit 5: 1=the player has not moved and so there is no need to redraw the view of the maze.
 865  FA04                                           ;na   bit 4: 1=the exit is visible.
 866  FA04                                           ;na   bit 3: 1=rex has moved.
 867  FA04                                           ;na   bit 2: 1=rex has moved into a new location.
 868  FA04                                           ;na   bit 1: 1=rex has his left foot forward, 0=rex has his right foot forward.
 869  FA04                                           ; bit 0: maxview used bit
 870  FA04
 871  FA04 00           var1:   db 0  ; used for printing
 872  FA05
 873  FA05 00           var2:   db 0  ; used for printing
 874  FA06
 875  FA06 00           depth:  db 0  ; stores our depth of field when we are looking
 876  FA07 00           l4086:  db 0
 877  FA08
 878  FA08              player_dir:
 879  FA08 00                   db 0  ;; only when in the main game loop
 880  FA09              de_count:
 881  FA09 00 00                dw 0  ;used to hold 2 bytes of reg de for maze locating info
 882  FA0B
 883  FA0B 00 00        left     dw 0000
 884  FA0D 00 00        right    dw 0000
 885  FA0F 00 00        var3     dw 0000     ;misc. used in drawing walls
 886  FA11 00 00        var4     dw 0000     ;misc. used in drawing walls
 887  FA13 00 00        var5     dw 0000     ;misc - used in drawing walls
 888  FA15 00 00        var6     dw 0000     ;stores current maze block check position
 889  FA17
 890  FA17 00           end_wall db 0        ;stores whether current wall being draw is
 891  FA18                                   ;an outside maze wall or not (as we want to treat
 892  FA18                                   ;this differnetly when drawn in future
 893  FA18 00 00        var7     dw 0        ;misc loop counter in walls
 894  FA1A 00 00        var8     dw 0        ;not used
 895  FA1C 00 00        var9     dw 0        ;not used
 896  FA1E 00           var10    db 0        ;used for maze wall drawing at depth 5
 897  FA1F 00           lr_wall  db 0        ;used for left and right wall drawing in draw_side_walls routine
 898  FA20 00 00        w5_start dw 0        ;not used
 899  FA22 00           cur_map  db 0        ;stores current map to draw or show
 900  FA23 00 00        map_start dw 0       ;tores the map start address
 901  FA25
 902  FA25 00 00        furthest_point dw 0   ;store the address of the furthest point
 903  FA27                                    ;we can see in the maze from our position.
 904  FA27 00           blockid  db 0         ;stores  block position of layer 5 for wall drawing
 905  FA28 71           maze_highbyte db $71  ;holds high byte of current maze in use
 906  FA29 00           map_show    db  0     ;tells is if we are already showing the map
 907  FA2A 00           show_exit       db 0  ;used to say whether to draw the full size exit door or not
 908  FA2B                                    ;0 = draw a closed exit door
 909  FA2B                                    ;1 = draw an open exit door
 910  FA2B 00           switch_pulled   db  0 ; 0 and 1 for off and o - default off
 911  FA2C 00 00        sp_store        dw  0   ;save and restore the SP
 912  FA2E 00 00        switch_sound    dw 0    ;shows if switch sound already sounded = 0=no, 1=yes
 913  FA30 00           game_exit       db  0   ;set to 255 if we need to exit the game as we got passed level 0
 914  FA31
 915  FA31              ;#############################################################
 916  FA31              ;reserve 200 bytes for the stack - points here from BASIC
 917  FA31              ;stack pointer lives here
 918  FA31 00 00 00...  stack_p        block 200
 919  FAF9
 920  FAF9              ;stack pointer is at 64511
 921  FAF9
 922  FAF9              ;##############################################
 923  FAF9              ;udg charachter set starts at 64512
 924  FAF9              ;##############################################
 925  FAF9
 926  FAF9                      org 64512
 927  FC00
 928  FC00              ;##############################################
 929  FC00                    ;UDG Charachter Defs
 930  FC00              ;##############################################
 931  FC00              _chars:
 932  FC00 48 4B 97 93   db	72,75,151,147,137,68,36,18      ;80	65080	;door wood effect 1
 932  FC04 89 44 24 12
 933  FC08 A8 44 A2 A9   db	168,68,162,169,41,66,148,164	;81	65088   ;door wood effect 2
 933  FC0C 29 42 94 A4
 934  FC10 11 2A 52 54   db	17,42,82,84,78,78,37,18  	    ;82	65096   ;door wood effect 3
 934  FC14 4E 4E 25 12
 935  FC18 28 48 A4 94   db	40,72,164,148,74,146,36,72  	;83	65104   ;door wood effect 4
 935  FC1C 4A 92 24 48
 936  FC20 34 34 34 F7   db	52,52,52,247,247,52,52,52     	;84	65112	;Door Barsvertical
 936  FC24 F7 34 34 34
 937  FC28 00 00 00 FF   db	0,0,0,255,255,0,0,0   	        ;85	65120   ;Door Bars Crossbars
 937  FC2C FF 00 00 00
 938  FC30 AC EC 6C 2C   db	172,236,108,44,44,46,47,45	    ;86	65128	;door bars left side
 938  FC34 2C 2E 2F 2D
 939  FC38 35 37 36 34   db	53,55,54,52,52,116,244,180	    ;87	65136	;door bars right side
 939  FC3C 34 74 F4 B4
 940  FC40              ;rest of door graphic chars are at $b9 onwards below
 941  FC40
 942  FC40 C0 F0 FC FF   db	192,240,252,255,255,252,240,192 ;88	65144   left hand triangle pointed
 942  FC44 FF FC F0 C0
 943  FC48 03 0F 3F FF   db	3,15,63,255,255,63,15,3         ;89	65152	right hand triangle pointed
 943  FC4C FF 3F 0F 03
 944  FC50 00 00 00 00   db	0,0,0,0,0,0,0,0	                ;8a	65160
 944  FC54 00 00 00 00
 945  FC58 FF 55 FF AF   db	255,85,255,175,255,95,255,255   ;8b	65168	upper wall 5 right bottom
 945  FC5C FF 5F FF FF
 946  FC60 FF D5 FF FA   db	255,213,255,250,255,253,255,255	;8c	upper wall 5 left bottom
 946  FC64 FF FD FF FF
 947  FC68
 948  FC68              ;extra layer 5 chars
 949  FC68 FF 3F F3 9F   db	255,63,243,159,244,47,249,143 	 ;8d	small wall stretched (layer 3)
 949  FC6C F4 2F F9 8F
 950  FC70 FF 8C FF 26   db	255,140,255,38,255,140,255,38 	 ;8e	small wall stretched (layer 3)
 950  FC74 FF 8C FF 26
 951  FC78
 952  FC78               ;Section 2 left and right UDG
 953  FC78 00 00 00 00   DB 0,0,0,0,0,3,31,255              ;8f 65200  top right Section 2 (1)
 953  FC7C 00 03 1F FF
 954  FC80 00 00 01 0F   DB 0,0,1,15,127,255,255,255        ;90 65208  top right Section 2 (2)
 954  FC84 7F FF FF FF
 955  FC88 07 3F FF FF   DB 7,63,255,255,255,255,255,255    ;91 65216  top right Section 2 (3)
 955  FC8C FF FF FF FF
 956  FC90
 957  FC90 FF 1F 03 00   DB 255,31,3,0,0,0,0,0              ;92 65224   bottom right Section 2 (1)
 957  FC94 00 00 00 00
 958  FC98 FF FF FF 7F   DB 255,255,255,127,15,1,0,0        ;93 65232   bottom right Section 2 (2)
 958  FC9C 0F 01 00 00
 959  FCA0 FF FF FF FF   DB 255,255,255,255,255,255,63,7    ;94 65240   bottom right Section 2 (3)
 959  FCA4 FF FF 3F 07
 960  FCA8
 961  FCA8 E0 FC FF FF   DB 224,252,255,255,255,255,255,255 ;95 65248   top left Section 2 (1)
 961  FCAC FF FF FF FF
 962  FCB0 00 00 80 F0   DB 0,0,128,240,254,255,255,255     ;96 65256   top left Section 2 (2)
 962  FCB4 FE FF FF FF
 963  FCB8 00 00 00 00   DB 0,0,0,0,0,192,248,255           ;97 65264   top left Section 2 (3)
 963  FCBC 00 C0 F8 FF
 964  FCC0
 965  FCC0 FF FF FF FF   DB 255,255,255,255,255,255,252,224 ;98 65272   bottom left Section 2 (1)
 965  FCC4 FF FF FC E0
 966  FCC8 FF FF FF FE   DB 255,255,255,254,240,128,0,0     ;99 65280   bottom left Section 2 (2)
 966  FCCC F0 80 00 00
 967  FCD0 FF F8 C0 00   DB 255,248,192,0,0,0,0,0           ;9a 65288   bottom left Section 2 (3)
 967  FCD4 00 00 00 00
 968  FCD8
 969  FCD8 80 C0 E0 F0   DB	128,192,224,240,245,250,245,250	;9b	65296	layer 5 left top
 969  FCDC F5 FA F5 FA
 970  FCE0 F5 FA F5 FA   DB	245,250,245,250,240,224,192,128	;9c	65304	layer 5 left bottom
 970  FCE4 F0 E0 C0 80
 971  FCE8 01 03 07 0F   DB	1,3,7,15,95,175,95,175         	;9d	65312   layer 5 right top
 971  FCEC 5F AF 5F AF
 972  FCF0 5F AF 5F AF   DB	95,175,95,175,15,7,3,1         	;9e	65320	layer 5 right bottom
 972  FCF4 0F 07 03 01
 973  FCF8 55 AA 55 AA   DB	85,170,85,170,85,170,85,170    	;9f	65328	chequer
 973  FCFC 55 AA 55 AA
 974  FD00 55 AA 55 AA   DB	85,170,85,170,0,0,0,0          	;a0	65336	top chequer
 974  FD04 00 00 00 00
 975  FD08 00 00 00 00   DB	0,0,0,0,85,170,85,170          	;a1	65344	bottom chequer
 975  FD0C 55 AA 55 AA
 976  FD10 00 00 00 00   DB	0,0,0,0,255,255,255,255        	;a2	65352		bottom black
 976  FD14 FF FF FF FF
 977  FD18 FF FF FF FF   DB	255,255,255,255,0,0,0,0        	;a3	65360		top black
 977  FD1C 00 00 00 00
 978  FD20 FF 08 08 08   DB	255,8,8,8,255,128,128,255      	;a4	65368		brick pattern
 978  FD24 FF 80 80 FF
 979  FD28 99 C8 64 32   DB	153,200,100,50,25,140,206,171  	;a5	65376		top left brick diag
 979  FD2C 19 8C CE AB
 980  FD30 10 28 10 7C   DB	16,40,16,124,16,40,40,68       	;a6	65384		man
 980  FD34 10 28 28 44
 981  FD38 00 78 6B 7E   DB	0,120,107,126,124,104,120,0    	;a7	65392		switch
 981  FD3C 7C 68 78 00
 982  FD40 99 66 5A 5A   db 153,102,90,90,90,90,102,153     ;a8	65400       exit door
 982  FD44 5A 5A 66 99
 983  FD48 80 C0 E0 F0   DB	128,192,224,240,255,255,255,255	;a9	65408		top left 5
 983  FD4C FF FF FF FF
 984  FD50 01 03 07 0F   DB	1,3,7,15,255,255,255,255       	;aa	65416		top right 5
 984  FD54 FF FF FF FF
 985  FD58 FF FF FF FF   DB	255,255,255,255,240,224,192,128	;ab	65424		bot left  5
 985  FD5C F0 E0 C0 80
 986  FD60 FF FF FF FF   DB	255,255,255,255,15,7,3,1       	;ac	65432		bot right 5
 986  FD64 0F 07 03 01
 987  FD68 FF E5 FF FD   DB	255,229,255,253,253,255,255,255	;ad	65440		top right fancy
 987  FD6C FD FF FF FF
 988  FD70 FF A7 FF BF   DB	255,167,255,191,191,255,255,255	;ae	65448		top left fancy
 988  FD74 BF FF FF FF
 989  FD78 FF FF FF FF   DB	255,255,255,255,255,255,255,255	;af	65456		all black
 989  FD7C FF FF FF FF
 990  FD80 FF FE FC F8   DB	255,254,252,248,240,224,192,128	;b0	65464		top left triangle
 990  FD84 F0 E0 C0 80
 991  FD88 FF 7F 3F 1F   DB	255,127,63,31,15,7,3,1         	;b1	65472		top right triangle
 991  FD8C 0F 07 03 01
 992  FD90 01 03 07 0F   DB	1,3,7,15,31,63,127,255         	;b2	65480		bot right triangle
 992  FD94 1F 3F 7F FF
 993  FD98 80 C0 E0 F0   DB	128,192,224,240,248,252,254,255	;b3	65488		bot right triangle
 993  FD9C F8 FC FE FF
 994  FDA0
 995  FDA0 FF 55 FF AA   DB	255,85,255,170,255,85,255,170	;b4	65496		small wall  (5)
 995  FDA4 FF 55 FF AA
 996  FDA8 FF 88 88 FF   DB	255,136,136,255,162,162,255,128	;b5	65504		mediumwall  (2)
 996  FDAC A2 A2 FF 80
 997  FDB0 FF 88 88 88   DB	255,136,136,136,255,224,192,128	;b6	65512		largewall   (4)
 997  FDB4 FF E0 C0 80
 998  FDB8 FF AA FF AA   DB	255,170,255,170,255,170,255,170 ;b7	65520		mediumwall_1(3)
 998  FDBC FF AA FF AA
 999  FDC0 FF 88 88 88   DB	255,136,136,136,255,128,128,128 ;b8	65528		hugewall
 999  FDC4 FF 80 80 80
1000  FDC8
1001  FDC8              ;layer 5 section 3 right TOP
1002  FDC8
1003  FDC8 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;b9 top right section 3 (4)
1003  FDCC FF FF FF FF
1004  FDD0 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;ba top right section 3 (3)
1004  FDD4 FF FF FF FF
1005  FDD8 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;bb top right section 3 (2)
1005  FDDC FF FF FF FF
1006  FDE0 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;bc top right section 3 (1)
1006  FDE4 FF FF FF FF
1007  FDE8
1008  FDE8              ;layer 5 section 3 right BOTTOM
1009  FDE8
1010  FDE8 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;bd top right section 3 (6)
1010  FDEC FF 00 00 00
1011  FDF0 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;be top right section 3 (6)
1011  FDF4 FF FF 00 00
1012  FDF8 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;bf top right section 3 (6)
1012  FDFC FF FF FF 00
1013  FE00 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c0 top right section 3 (6)
1013  FE04 FF FF FF FF
1014  FE08
1015  FE08              ;layer 5 section 3 left TOP TBD
1016  FE08
1017  FE08 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;c1 bottom right section 3 (5)
1017  FE0C FF 00 00 00
1018  FE10 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;c2 bottom right section 3 (6)
1018  FE14 FF FF 00 00
1019  FE18 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;c3 bottom right section 3 (6)
1019  FE1C FF FF FF 00
1020  FE20 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c4 bottom right section 3 (6)
1020  FE24 FF FF FF FF
1021  FE28
1022  FE28              ;layer 5 section 3 left BOTTOM TBD
1023  FE28
1024  FE28 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;c5 bottom right section 3 (5)
1024  FE2C FF FF FF FF
1025  FE30 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;c6 bottom right section 3 (6)
1025  FE34 FF FF FF FF
1026  FE38 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;c7 bottom right section 3 (6)
1026  FE3C FF FF FF FF
1027  FE40 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c8 bottom right section 3 (6)
1027  FE44 FF FF FF FF
1028  FE48
1029  FE48
1030  FE48              ;layer 5 section 4 right TOP
1031  FE48
1032  FE48 00 00 00 00   DB 0,0,0,0,0,0,0,255               ;c9 top right section 3 (4)
1032  FE4C 00 00 00 FF
1033  FE50 00 00 00 00   DB 0,0,0,0,0,0,255,255             ;ca top right section 3 (4)
1033  FE54 00 00 FF FF
1034  FE58 00 00 00 00   DB 0,0,0,0,255,255,255,255         ;cb top right section 3 (3)
1034  FE5C FF FF FF FF
1035  FE60 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;cc top right section 3 (2)
1035  FE64 FF FF FF FF
1036  FE68 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;cd top right section 3 (1)
1036  FE6C FF FF FF FF
1037  FE70
1038  FE70              ;layer 5 section 4 right BOTTOM
1039  FE70
1040  FE70 FF 00 00 00   db 255,0,0,0,0,0,0,0               ;ce top right section 3 (6)
1040  FE74 00 00 00 00
1041  FE78 FF FF 00 00   db 255,255,0,0,0,0,0,0             ;cf top right section 3 (6)
1041  FE7C 00 00 00 00
1042  FE80 FF FF FF FF   db 255,255,255,255,0,0,0,0         ;d0 top right section 3 (6)
1042  FE84 00 00 00 00
1043  FE88 FF FF FF FF   db 255,255,255,255,255,255,0,0     ;d1 top right section 3 (6)
1043  FE8C FF FF 00 00
1044  FE90 FF FF FF FF   db 255,255,255,255,255,255,255,0   ;d2 top right section 3 (6)
1044  FE94 FF FF FF 00
1045  FE98
1046  FE98
1047  FE98              ;Extra wall5
1048  FE98              ; db	249,63,243,159,244,47,249,143 	;c9	small wall stretched more
1049  FE98              ; db 255,15,255,31,255,15,255,15	   	;ca	small wall stretched
1050  FE98              ; db 240,15,224,31,224,15,112,15	   	;cb	small wall stretched
1051  FE98
1052  FE98              ;triangular door wood parts
1053  FE98 FF FF FE FB   db	255,255,254,251,249,228,228,146     ;d3	   ;door wood effect top corner 1 right side($80)
1053  FE9C F9 E4 E4 92
1054  FEA0 88 CB E7 F3   db	136,203,231,243,249,252,254,255	    ;d4	   ;door wood effect bottom corner 1 (80)
1054  FEA4 F9 FC FE FF
1055  FEA8 FF FE FE FC   db	255,254,254,252,254,238,229,146     ;d5	   ;door wood effect top corner 3 right side($82)
1055  FEAC FE EE E5 92
1056  FEB0 91 CA E2 F4   db	145,202,226,244,250,252,254,255    	;d6    ;door wood effect bottom corner 1 (82)
1056  FEB4 FA FC FE FF
1057  FEB8
1058  FEB8              ;additional characters for level numbers printed on right of display
1059  FEB8              ;single caracter 10,11,12,13,14,15
1060  FEB8 00 4C 52 52    db  0,76,82,82,82,82,76,0             ;d7
1060  FEBC 52 52 4C 00
1061  FEC0 00 48 48 48    db  0,72,72,72,72,72,72,0             ;d8
1061  FEC4 48 48 48 00
1062  FEC8 00 4C 52 42    db  0,76,82,66,68,72,94,0             ;d9
1062  FECC 44 48 5E 00
1063  FED0 00 4C 52 46    db  0,76,82,70,66,82,76,0             ;da
1063  FED4 42 52 4C 00
1064  FED8 00 42 46 4A    db  0,66,70,74,94,66,66,0             ;db
1064  FEDC 5E 42 42 00
1065  FEE0 00 4E 50 4C    db  0,78,80,76,66,82,76,0             ;dc
1065  FEE4 42 52 4C 00
1066  FEE8
1067  FEE8              ;characters to print around the switch
1068  FEE8 FF 00 FF 00    db  255,0,255,0,255,0,255,0           ;dd  ;horizontal bars x 4
1068  FEEC FF 00 FF 00
1069  FEF0 FF 80 BF A0    db  255,128,191,160,175,168,171,170   ;de  ;top left corner
1069  FEF4 AF A8 AB AA
1070  FEF8 AA AB A8 AF    db  170,171,168,175,160,191,128,255   ;df  ;bot left corner
1070  FEFC A0 BF 80 FF
1071  FF00 AA AA AA AA    db  170,170,170,170,170,170,170,170   ;e0  ;vertical bars
1071  FF04 AA AA AA AA
1072  FF08 FF 01 FD 05    db  255,1,253,5,245,21,213,85         ;e1  ;top right corner
1072  FF0C F5 15 D5 55
1073  FF10 55 D5 15 F5    db  85,213,21,245,5,253,1,255         ;e2  ;bot right corner
1073  FF14 05 FD 01 FF
1074  FF18 00 FF 00 FF    db  0,255,0,255,0,255,0,255           ;e3  ;bot horizontal bars
1074  FF1C 00 FF 00 FF
1075  FF20 55 55 55 55    db  85,85,85,85,85,85,85,85           ;e4  ;right vertical bars
1075  FF24 55 55 55 55
1076  FF28
1077  FF28              ;side view switch chars
1078  FF28 FF FF FE FC    db  255,255,254,252,249,242,228,201   ;e5 ;top triangle bit
1078  FF2C F9 F2 E4 C9
1079  FF30 92 A4 A9 AA    db  146,164,169,170,170,170,170,170   ;e6 ; top left corner
1079  FF34 AA AA AA AA
1080  FF38 FF 01 7D 85    db  255,1,125,133,53,85,149,21        ;e7 ;top right corner
1080  FF3C 35 55 95 15
1081  FF40 55 D5 55 55    db  85,213,85,85,85,85,85,85          ;e8 ;2nd top line bottom right bit
1081  FF44 55 55 55 55
1082  FF48 40 80 00 00    db  64,128,0,0,0,0,0,0                ;e9 ;3rd top line bottom 2nd right bit
1082  FF4C 00 00 00 00
1083  FF50 92 24 49 92    db  146,36,73,146,36,72,144,32        ;ea ;top horizontal line
1083  FF54 24 48 90 20
1084  FF58
1085  FF58 C9 E4 F2 F9    db  201,228,242,249,252,254,255,255  ;eb   ;bottom triangle bit
1085  FF5C FC FE FF FF
1086  FF60 15 95 55 35    db  21,149,85,53,133,125,1,255       ;ec ;bottom right corner
1086  FF64 85 7D 01 FF
1087  FF68 55 55 55 55    db  85,85,85,85,85,85,213,85         ;ed ;2nd bottom line bottom right bit
1087  FF6C 55 55 D5 55
1088  FF70 AA AA AA AA    db  170,170,170,170,170,169,164,146  ;ee   ;bottom left corner
1088  FF74 AA A9 A4 92
1089  FF78 00 00 00 00    db  0,0,0,0,0,0,128,64               ;ef ;3rd top line bottom 2nd right bit
1089  FF7C 00 00 80 40
1090  FF80 20 90 48 24    db  32,144,72,36,146,73,36,146       ;f0 ;bottom horizontal line
1090  FF84 92 49 24 92
1091  FF88
1092  FF88 00 00 00 00    db   0,0,0,0,32,0,0,1                ;f1 ;stars for the inside of the closed door
1092  FF8C 20 00 00 01
1093  FF90 00 08 00 00    db   0,8,0,0,0,0,0,0                 ;f2 ;stars for the inside of the closed door
1093  FF94 00 00 00 00
1094  FF98
1095  FF98
1096  FF98
1097  FF98              ;END_PROGRAM
1098  FF98
1099  FF98
1100  FF98              ;for SJASMPLUS
1101  FF98              ;;
1102  FF98              ;; Set up the Nex output
1103  FF98              ;;
1104  FF98
1105  FF98                      ; This sets the name of the project, the start address,
1106  FF98                      ; and the initial stack pointer.
1107  FF98               ;       SAVENEX OPEN "3dmaze.nex";, start_game  ;, END_PROGRAM
1108  FF98                      SAVEBIN "3dmaze.bin",32768,32767
1109  FF98
1110  FF98                      ; This asserts the minimum core version.  Set it to the core version
1111  FF98                      ; you are developing on.
1112  FF98              ;        SAVENEX CORE 2,0,0
1113  FF98
1114  FF98                      ; This sets the border colour while loading (in this case white),
1115  FF98                      ; what to do with the file handle of the nex file when starting (0 =
1116  FF98                      ; close file handle as we're not going to access the project.nex
1117  FF98                      ; file after starting.  See sjasmplus documentation), whether
1118  FF98                      ; we preserve the next registers (0 = no, we set to default), and
1119  FF98                      ; whether we require the full 2MB expansion (0 = no we don't).
1120  FF98              ;        SAVENEX CFG 7,0,0,0
1121  FF98
1122  FF98                      ; Generate the Nex file automatically based on which pages you use.
1123  FF98              ;        SAVENEX AUTO
1124  FF98
# file closed: src/rd3dmazeV6-sj.asm
