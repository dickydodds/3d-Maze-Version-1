# file opened: src/rd3dmazeV6-sj.asm
   1  0000              ; written by me, richard dodds (dickydodds.com) beginning may 2018
   2  0000
   3  0000              ; some useful info:-
   4  0000              ; the zx81 character based screen is drawn in memory and then copied to the spectrum screen.
   5  0000
   6  0000              ;2nd oct 2018 - layer 6 completed - can print udg and spectrum
   7  0000              ;             character set now.
   8  0000              ;20th oct 2018 - left side completed except for multiple blocks in
   9  0000              ;layer 2, 3 & 4
  10  0000              ;11th oct - left side done and colours added.
  11  0000              ;V3. 22 nov - left side properly fixed - had bugs on top and bottom of maze
  12  0000              ;V4 27 nov. Removed the maze generation code from Malcolm Evans
  13  0000              ;V6 - 20 June 2018 - fixed end wall distance. Started chopping into manageable chunks.
  14  0000              ;2019 - done a load of stuff!
  15  0000              ;Oct 2020 - moved to SJASMPlus and implemented backbuffer
  16  0000              ;Oct 19 2020 - added ULANext colours and removed maze printing routine that used ROM - implemented M/C one.
  17  0000              ;
  18  0000
  19  0000              ;For SJASMPLUS
  20  0000
  21  0000                      ; Allow the Next paging and instructions
  22  0000                      DEVICE ZXSPECTRUMNEXT
  23  0000
  24  0000                      ; Generate a map file for use with Cspect
  25  0000                      CSPECTMAP "project.map"
  26  0000
  27  0000
  28  0000                ;      INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
  29  0000                ;      INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
  30  0000
  31  0000
  32  0000              ;for info...
  33  0000              ;load "4-rd3dmazeV6.asm" ; draw left side of maze
  34  0000              ;load "5-rd3dmazeV6.asm" ; draw wall in front of player
  35  0000              ;load "6-rd3dmazeV6.asm" ; draw right side of maze
  36  0000
  37  0000
  38  0000              ;##################################################
  39  0000              ;##################################################
  40  0000              ;##################################################
  41  0000              ;##################################################
  42  0000              ;##################################################
  43  0000              ;#                                                #
  44  0000              ;#               main game loop here              #
  45  0000              ;#                                                #
  46  0000              ;##################################################
  47  0000              ;##################################################
  48  0000              ;##################################################
  49  0000              ;##################################################
  50  0000              ;##################################################
  51  0000
  52  0000              main:           org 32768
  53  8000
  54  8000              ;;; dont forget to create your character set on the next! ;;
  55  8000
  56  8000              ;set the player direction based on keypress
  57  8000              ; 0=north, 1=west, 2=south, 3=east
  58  8000
  59  8000 F3           start_game:    di       ;disable interrupts
  60  8001
  61  8001
  62  8001              ; set stack pointer in lower just before the _chars data
  63  8001
  64  8001                     ; ld sp,64500
  65  8001
  66  8001
  67  8001                         ; BREAK
  68  8001                        ;  ld a,$69
  69  8001                        ;  ld BC,$243b
  70  8001                        ;  out (c),a
  71  8001                        ;  ld bc,$253b
  72  8001                         ; Ld a,%10
  73  8001                        ;  in a,(c)
  74  8001
  75  8001                   ;       ld a,$43
  76  8001                   ;       call ReadNextReg
  77  8001                   ;       ;a holds the value
  78  8001
  79  8001              ;first, clear the 2 ULA bank screens as they are at ROM location 0
  80  8001
  81  8001 ED 91 50 0A                NEXTREG $50,10
  82  8005 CD 81 81                   CALL clsULA
  83  8008 ED 91 50 0E                NEXTREG $50,14
  84  800C CD 81 81                   CALL clsULA
  85  800F
  86  800F              ;setup ULA Plus Palette
  87  800F
  88  800F CD 92 82                   call Setup_palette
  89  8012
  90  8012              ; jump straight into sjasmplus debugger
  91  8012                    ;  BREAK
  92  8012
  93  8012              ;SET DEFAULT PLAYER POSITION AND DIRECTION
  94  8012              ; 0=north, 1=west, 2=south, 3=east
  95  8012 3E 02                      ld a,2            ;set default to be south
  96  8014 32 08 FA                   ld (player_dir),a
  97  8017
  98  8017                            ;make sure our exit door is closed
  99  8017 AF                         xor a                 ;reg a=0
 100  8018 32 2A FA                   ld (show_exit),a
 101  801B                            ;make sure our switch is up = 0 = not pulled
 102  801B 32 2B FA                   ld (switch_pulled),a
 103  801E
 104  801E              ;remember to set maze_highbyte for current maze
 105  801E
 106  801E              ;start on maze map 0
 107  801E              a_map:
 108  801E 3E 06                      ld a,6
 109  8020 CD 43 A1                   call set_map      ;set our map
 110  8023
 111  8023              ;              ld h,$71          ;set at maze 1 bottom maze
 112  8023 2E 01                      ld l,01              ;top left of maze
 113  8025
 114  8025 22 00 FA                   ld (player_pos),hl
 115  8028
 116  8028              main_loop:
 117  8028              ;set CPU Speed
 118  8028                            ;set CPU Speed Mhz
 119  8028                            ;0 = 3.5
 120  8028                            ;1 = 7
 121  8028                            ;2 = 14
 122  8028                            ;4 = 28
 123  8028 ED 91 07 01                nextreg 7,1
 124  802C
 125  802C                         ;   ;put standard printing back to black text & white paper
 126  802C                         ;   ld a,98
 127  802C                         ;   ld (att),a
 128  802C
 129  802C CD 73 81                   call clear_char_screen    ;clear screen @c000
 130  802F
 131  802F CD 20 8C                   call get_distance ; get distance we can see
 132  8032                                              ; and save depth we can see
 133  8032                            ; load de is done when getting the distance above
 134  8032                            ; we need de to hold the jump value in the maze direction
 135  8032                            ; we are looking
 136  8032
 137  8032 CD F4 8D                   call draw_left_side   ; start drawing the left side of the maze
 138  8035
 139  8035                            ;we need to repopulate var furthest_point
 140  8035
 141  8035 CD 20 8C                   call get_distance     ; get distance we can see
 142  8038                                                  ; and set de accordingly
 143  8038                                                  ; and save depth we can see
 144  8038
 145  8038 CD 0D 9A                   call draw_right_side  ; start drawing the right side of the maze
 146  803B
 147  803B CD 97 95                   call draw_front_view  ; draw wall in front of player
 148  803E
 149  803E                            ;check if we are at an end wall. If so, draw walls left
 150  803E                            ;and right to simulate the long outside edge wall
 151  803E
 152  803E CD 23 96                   call draw_side_walls
 153  8041
 154  8041                            ;draw screen at mem location 0000
 155  8041                            ;my print used to print screen @c000 to 16384 inc udg's
 156  8041 CD 1B 8B                   call my_print         ;copy to screen from c000
 157  8044
 158  8044                            ;we need to copy the colours to an alternate memory screen then copy them back to the main screen
 159  8044                            ;we do this because we use the alternate colour screen when we transition between levels
 160  8044 CD A5 97                   call draw_colours     ;colourise the display but store at address 'attr_screen'
 161  8047 CD 45 B4                   call copy_colours     ;copy colour map to screen
 162  804A
 163  804A                            ;make sure we point to our character set
 164  804A 21 00 C5                   ld hl,charset_1-256
 165  804D 22 C3 8A                   ld (base),hl
 166  8050                          ;  call compass          ; draw compass
 167  8050
 168  8050              ;------------------------------------------------------------------------
 169  8050                            ;see if we need to draw the door or switch
 170  8050                  ;ld a,1
 171  8050                  ;ld (switch_pulled),a
 172  8050
 173  8050 CD 59 8D                   call draw_door        ;see if we need to draw a door
 174  8053 CD AC 8D                   call draw_switch     ;see if we need to draw a switch
 175  8056              ;----------------------------------------------------------------------
 176  8056              ;setup right hand side of the screen
 177  8056 CD 20 99                   call draw_screen_right
 178  8059
 179  8059                            ;now flip the screen into the visible screen
 180  8059 CD BE 81                   call FlipULABuffers_peter
 181  805C
 182  805C              ;set CPU Speed
 183  805C                            ;set CPU Speed Mhz
 184  805C                            ;0 = 3.5
 185  805C                            ;1 = 7
 186  805C                            ;2 = 14
 187  805C                            ;4 = 28
 188  805C ED 91 07 00                nextreg 7,0
 189  8060
 190  8060              ;#######################################
 191  8060              ;now move based on keypress
 192  8060              ;#######################################
 193  8060
 194  8060              ;Now set our view direction based on keypress
 195  8060
 196  8060              ;c bit values: 1 = 0 fire
 197  8060               ;             2 = 5 right
 198  8060               ;             4 = 7 up (forward)
 199  8060               ;             8 = 6 down
 200  8060               ;            16 = 8 left
 201  8060
 202  8060
 203  8060              ;set the player direction based on keypress
 204  8060              ; 0=north, 1=west, 2=south, 3=east
 205  8060
 206  8060
 207  8060              ;######################################
 208  8060              ;speed of game set here
 209  8060              ;######################################
 210  8060
 211  8060 CD 5E 81                     call pause      ;slow down the game here
 212  8063
 213  8063              wait4key:
 214  8063 CD F6 A0                   call get_keys      ;keypress in C register
 215  8066
 216  8066 79                         ld a,c
 217  8067
 218  8067 B7                         or a               ;clear flags
 219  8068 CA 63 80                   jp z,wait4key      ;wait for a keypress b4 continuing
 220  806B
 221  806B                            ;check if its the map key and have we already pressed it
 222  806B 47                         ld b,a             ;save our key
 223  806C 3A 29 FA                   ld a,(map_show)    ;get our last pressed map key
 224  806F 90                         sub b              ;map key is 0 =1 in reg a
 225  8070                                               ;1= we are already showing the map, 0 says we are not
 226  8070 28 F1                      jr z,wait4key      ;zero flag set if map_show=1 so do nothing
 227  8072
 228  8072 AF                         xor a               ;make reg a zero
 229  8073 32 29 FA                   ld (map_show),a
 230  8076 78                         ld a,b              ;now carry on :)
 231  8077
 232  8077 FE 10                      cp 16              ; 8 (right) pressed
 233  8079 CA C8 80                   jp z,plus
 234  807C
 235  807C FE 08        key_6         cp 8               ;6 (down) pressed
 236  807E C2 97 80                   jp nz, comp_4      ;carry on if not pressed otherwise return to BASIC
 237  8081 ED 91 43 00                nextreg $43,0      ;turn off ulanext
 238  8085 ED 91 69 00                nextreg $69,0      ;turn off ula banking
 239  8089 ED 91 50 FF                NEXTREG $50,$FF
 240  808D ED 91 52 0A                NEXTREG $52,$0A
 241  8091 FD 21 3A 5C                ld iy,$5c3a
 242  8095 FB                         ei
 243  8096 C9                         ret                ;return to BASIC
 244  8097
 245  8097 FE 04        comp_4:       cp 4               ;7 (forward) pressed
 246  8099 CA E3 80                   jp z,move_forward
 247  809C
 248  809C FE 02                      cp 2               ; 5 (left) pressed
 249  809E CA D5 80                   jp z,minus
 250  80A1
 251  80A1               ;             cp 1               ;0 PRESSED
 252  80A1                            ;0 was pressed or we never get here!
 253  80A1 A8                         xor b             ;make b zero
 254  80A2 3A 29 FA                   ld a,(map_show)
 255  80A5 90 97                      sub b,a           ;exit if b=1 as we are already showing the map!
 256  80A7 C2 63 80                   jp nz,wait4key
 257  80AA 3C                         inc a             ;a=1 to show we pressed 6 to show the map
 258  80AB 32 29 FA                   ld (map_show),a   ;save it
 259  80AE E5                         push hl
 260  80AF
 261  80AF 32 29 FA                   ld (map_show),a   ;save that we have pressed 6 - reg a = 1
 262  80B2 3A BD 81                   ld a,(ULABank)
 263  80B5                       ;     NEXTREG $52,a    ;page in the proper ULA screen but dont display it unless
 264  80B5                                              ;already displayed.
 265  80B5 CD 81 81                   CALL clsULA       ;clear the hidden ULA Screen as it shows old data
 266  80B8 CD CF 89                   CALL DRAW_MAP
 267  80BB CD 9E 81                   call FlipULABuffers
 268  80BE E1                         pop hl
 269  80BF
 270  80BF C3 63 80                   jp wait4key
 271  80C2
 272  80C2 32 08 FA     go1:          ld (player_dir),a
 273  80C5 C3 28 80                   jp main_loop      ;start again
 274  80C8
 275  80C8
 276  80C8              plus:
 277  80C8 3A 08 FA                   ld a,(player_dir)
 278  80CB 3C                         inc a
 279  80CC FE 04                      cp 4          ;if its 4, make it 0 as it cant be >3
 280  80CE C2 C2 80                   jp nz,go1     ;start game loop if its not 4
 281  80D1 97                         sub a         ;make it 0 (wraparound
 282  80D2 C3 C2 80                   jp go1
 283  80D5
 284  80D5 3A 08 FA     minus:        ld a,(player_dir)
 285  80D8 3D                         dec a
 286  80D9 FE FF                      cp 255
 287  80DB C2 C2 80                   jp nz,go1         ;continue game if not 0
 288  80DE 3E 03                      ld a,3            ;wraparound
 289  80E0 C3 C2 80                   jp go1
 290  80E3
 291  80E3
 292  80E3              ;how do i implement a less-than/greater-than test in assembly?
 293  80E3
 294  80E3              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
 295  80E3              ;a and the argument were equal, else if the carry is set the argument was greater,
 296  80E3              ;and finally, if neither is set, then reg 'a' must be greater
 297  80E3              ;(cp does nothing to the registers, only the f (flag) register is changed).
 298  80E3
 299  80E3              move_forward:
 300  80E3
 301  80E3              ;----------------------------------------------------------------------------
 302  80E3              ;1st, check if we are trying to enter an open exit door
 303  80E3              ;so, is the door open?
 304  80E3
 305  80E3              ; door will always face NORTH.
 306  80E3              ; show door type = 0 = front, 1 = side
 307  80E3
 308  80E3                         ;  ld (show_exit),a
 309  80E3                           ;are we facing south?
 310  80E3 3A 08 FA                  ld a,(player_dir)
 311  80E6 D6 02                     sub 2                  ;2 = south
 312  80E8 20 2C                     jr nz,cont_a           ;if not, just continue in the normal way
 313  80EA
 314  80EA 2A 00 FA                  ld hl,(player_pos)
 315  80ED 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 316  80F0 19                        add hl,de
 317  80F1 7E                        ld a,(hl)
 318  80F2 FE C0                     cp _me                 ;is it our DOOR block?
 319  80F4 20 20                     jr nz,cont_a           ;if not, just continue in the normal way
 320  80F6                           ;YES its a door - so exit through it - but only if we are looking south
 321  80F6 3A 2B FA                  ld a,(switch_pulled)
 322  80F9 A7                        and a
 323  80FA 28 1A                     jr z,cont_a            ;if not, just continue in the normal way
 324  80FC              ;Door is in front of us AND open so lets exit!
 325  80FC
 326  80FC                         ; reset the switch pulled back to off position
 327  80FC AF                       xor a
 328  80FD 32 2B FA                 ld (switch_pulled),a
 329  8100              ;need to set the player start position now.
 330  8100
 331  8100 3A 22 FA                 ld a,(cur_map)
 332  8103 3D                       dec a               ;point to our next map
 333  8104 CD 43 A1                 call set_map      ;set our map
 334  8107 2E 01                    ld l,01              ;top left of maze
 335  8109 22 00 FA                 ld (player_pos),hl
 336  810C
 337  810C              ;draw exit animation
 338  810C                      ;    nextreg $69,0           ;turn off paging
 339  810C                          ;we moved forward and overwrote the door so redraw it
 340  810C ED 91 07 03              nextreg 7,3             ;set cpu speed to max
 341  8110                       ;   call draw_exit_door_open
 342  8110 CD 23 B3                 call exit_anim
 343  8113
 344  8113                       ;   call new_maze_anim
 345  8113                       ;   nextreg $69,64          ;turn on paging
 346  8113 C3 28 80                 jp main_loop          ;jump to our next level
 347  8116              ;--------------------------------------------------------------------------------
 348  8116              cont_a:
 349  8116              ;1st, check if we are trying to flick the switch on
 350  8116              ;so, is the door open?
 351  8116
 352  8116              ; switch will always face NORTH.
 353  8116              ; show switch type = 0 = off, 1 = on
 354  8116
 355  8116                           ;are we facing south?
 356  8116 3A 08 FA                  ld a,(player_dir)
 357  8119 D6 02                     sub 2                  ;2 = south
 358  811B 20 17                     jr nz,cont_b           ;if not, just continue in the normal way
 359  811D
 360  811D 2A 00 FA                  ld hl,(player_pos)
 361  8120 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 362  8123 19                        add hl,de
 363  8124 7E                        ld a,(hl)
 364  8125 FE 83                     cp _ms                 ;is it our SWITCH block?
 365  8127 20 0B                     jr nz,cont_b           ;if not, just continue in the normal way
 366  8129                           ;YES its a switch - so mark it as switched on
 367  8129 3E 01                     ld a,1
 368  812B 32 2B FA                  ld (switch_pulled),a
 369  812E
 370  812E              ;draw switch
 371  812E CD AC 8D                 call draw_switch      ;draw our switch
 372  8131 C3 28 80                 jp main_loop          ;jump to our next level
 373  8134              ;--------------------------------------------------------------------------------
 374  8134
 375  8134 3A 02 FA     cont_b:       ld a,(maxview)         ;if our maximum view depth = 0 ie we are
 376  8137                                                  ;in front of a wall face
 377  8137                                                  ;then do nothing
 378  8137 3C                         inc a
 379  8138 3D                         dec a
 380  8139 CA 63 80                   jp z,wait4key
 381  813C
 382  813C CD 37 8D                   call load_walk        ; get walk forward value to add
 383  813F 2A 00 FA                   ld hl,(player_pos)    ;get our current position
 384  8142 7C                         ld a,h                ;save our current H value for comparing later
 385  8143 19                         add hl,de              ;move our position forward in our view
 386  8144
 387  8144 BC                         cp h              ;have we crossed 256 byte boundry?
 388  8145 C2 28 80                   jp nz,main_loop   ;we have exited our boundry so dont
 389  8148                                              ;move our view anywhere.
 390  8148                            ;now test if l=0
 391  8148              ;              ld a,l
 392  8148 2C                         inc l
 393  8149 2D                         dec l             ;are we at position 0? Exit if yes and do nothing
 394  814A                            ;cp 0
 395  814A CA 28 80                   jp z,main_loop   ;we are at location 0 in the maze, so, again do nothing
 396  814D                                              ;and just exit so we stay at position 1
 397  814D
 398  814D              ;;;;;;;;;;#########################
 399  814D                            ;now check if l=255 ;
 400  814D              ;              cp 255                ;are we at the bottom edge of the maze
 401  814D              ;              jp z,main_loop
 402  814D
 403  814D                            ;we ARE at the bottom row so DO NOT MOVE FORWARD
 404  814D 22 00 FA                   ld (player_pos),hl
 405  8150 C3 28 80                   jp main_loop          ;continue to the game loop
 406  8153
 407  8153
 408  8153
 409  8153
 410  8153              ;we get here as we are not at the bottom of the maze.
 411  8153 FE 10        move_1:       cp 16                 ;are we at the top edge of the maze?
 412  8155 D2 28 80                   jp nc,main_loop
 413  8158 22 00 FA                   ld (player_pos),hl    ;save our new position
 414  815B
 415  815B              ;we are at the TOP of the maze so dont saaveour addition to HL
 416  815B C3 28 80                   jp main_loop          ;continue to the game loop
 417  815E
 418  815E
 419  815E              ;move_back:
 420  815E               ;             jp main_loop
 421  815E
 422  815E              ;##########################################################################
 423  815E              ;Pause routine for slowing down the game
 424  815E
 425  815E E5           pause:        push hl
 426  815F C5                         push bc
 427  8160 06 01                      ld b,1           ;delay loop
 428  8162              loop19:       ;halt             ;no interrupts!
 429  8162 21 A0 2F                   ld hl,12192
 430  8165 2B           abc:          dec hl
 431  8166 7C                         ld a,h
 432  8167 3D                         dec a
 433  8168                            ;dec h
 434  8168 20 FB                      jr nz,abc
 435  816A 05                         dec b
 436  816B C2 62 81                   jp nz,loop19
 437  816E C1                         pop bc
 438  816F E1                         pop hl
 439  8170 C9                         ret
 440  8171              ;##########################################################################
 441  8171
 442  8171              ;load other programs
 443  8171
 444  8171              ;for SJASMPLUS
 445  8171
 446  8171                  INCLUDE 1-rd3dmazeV6.asm  ; init and maze itself
# file opened: src/1-rd3dmazeV6.asm
   1+ 8171
   2+ 8171              ;variables
   3+ 8171
   4+ 8171              chan_open: equ 5633
   5+ 8171              cl_line:   equ 3652 ; clear screen not changing print pos
   6+ 8171              print:     equ 8252 ; print text line
   7+ 8171              at         equ 22   ; the 'print 'at' directive
   8+ 8171              paper      equ $11  ; paper directive
   9+ 8171              ink        equ $10  ; ink directive
  10+ 8171              flash      equ $12  ; flash directive
  11+ 8171              bright     equ $13
  12+ 8171              over       equ $15
  13+ 8171              blue       equ $02
  14+ 8171              red        equ $00
  15+ 8171              magenta    equ $06
  16+ 8171              green      equ $80
  17+ 8171              cyan       equ $02
  18+ 8171              yellow     equ 26
  19+ 8171              white      equ 255
  20+ 8171              black      equ 253
  21+ 8171              ;rex_pos    equ 32904
  22+ 8171
  23+ 8171              udg_start  equ 63480+8 ;63488  ;= 1024 less than real address for the display printing routine
  24+ 8171
  25+ 8171
  26+ 8171              screen_add equ 16384
  27+ 8171              screen_atr equ screen_add + 6144
  28+ 8171              screen_bot equ 23659
  29+ 8171              screen_mem equ $c000   ;49152
  30+ 8171              df_cc      equ $5c84
  31+ 8171
  32+ 8171 00 C0        d_file   dw $c000    ;char display in memory at 49152
  33+ 8173
  34+ 8173
  35+ 8173              ;maze_highbyte           equ  $71  ;H value (of HL) of current maze being drawn
  36+ 8173              _hugewall               equ  $b8
  37+ 8173              _chequerboard           equ  $9f
  38+ 8173              _space                  equ  32
  39+ 8173              _bottomblack            equ  $a2
  40+ 8173              _topblack               equ  $a3
  41+ 8173              _topwhitebottomchequer  equ  $a1
  42+ 8173              _topchequerbottomwhite  equ  $a0
  43+ 8173              _topleftwhite           equ  39
  44+ 8173              _bottomleftwhite        equ  40
  45+ 8173              _toprightwhite          equ  41
  46+ 8173              _bottomrightwhite       equ  42
  47+ 8173              _black                  equ  $af
  48+ 8173              _topcorner1             equ  $b0  ;bottom corner left slope to righttop
  49+ 8173              _topcorner2             equ  $b1  ;left corner slope to right bottom from left
  50+ 8173              _topcorner3             equ  $b2  ;bottom corner slope to right top
  51+ 8173              _topcorner4             equ  $b3  ;top corner left slope to right bottom
  52+ 8173              _wall                   equ  $a4  ;wall pattern
  53+ 8173              _leftinnerwall          equ  $a5  ;diagonal brick pattern left
  54+ 8173              _topleft5               equ  $a9  ;next 4 are for far view on layer 5
  55+ 8173              _bottomleft5            equ  $ab  ;
  56+ 8173              _topright5              equ  $aa
  57+ 8173              _bottomright5           equ  $ac
  58+ 8173              _smallwall              equ  $b4  ;far away wall
  59+ 8173              _mediumwall             equ  $b5  ;middle wall
  60+ 8173              _mediumwall_1           equ  $b7  ;middle wall_1
  61+ 8173              _largewall              equ  $b6  ;close view wall
  62+ 8173              _layer5lefttop          equ  $9b  ;layer 5 top left chevron
  63+ 8173              _layer5leftbottom       equ  $9c  ;layer 5 bottom left chevron
  64+ 8173
  65+ 8173
  66+ 8173
  67+ 8173              ;*******  NO MORE CODE HERE PLEASE AS IT WILL SHIFT THE MEMORY UP ****************
  68+ 8173
  69+ 8173              ;################################################################
  70+ 8173              ; some routines here in the 1.5k before the maze data
  71+ 8173              ;################################################################
  72+ 8173
  73+ 8173              ;============================================
  74+ 8173              ;clear the character maze in memory
  75+ 8173              ;============================================
  76+ 8173
  77+ 8173              clear_char_screen:
  78+ 8173
  79+ 8173 21 00 C0             ld hl,$c000
  80+ 8176 01 16 03             ld bc,790;767
  81+ 8179 11 01 C0             ld de,$c001
  82+ 817C 36 20                ld (hl),32      ;space
  83+ 817E ED B0                ldir
  84+ 8180 C9                   ret
  85+ 8181              ;################################################################
  86+ 8181              ;rom routine for cls of the 2 video pages
  87+ 8181              ;################################################################
  88+ 8181
  89+ 8181              clsULA:                 ;Clear Ula Buffer:
  90+ 8181 21 00 00         ld  hl,$0000
  91+ 8184 11 01 00         ld  de,$0001
  92+ 8187 01 00 18         ld  bc,$1800
  93+ 818A 75               ld  (hl),l
  94+ 818B ED B0            ldir
  95+ 818D 36 F0            ld  (hl),240    ;black was $48    ; black paper, cyan ink
  96+ 818F 01 FF 02         ld  bc,$02FF
  97+ 8192 ED B0            ldir
  98+ 8194 C9               ret
  99+ 8195
 100+ 8195              ; ******************************************************************************
 101+ 8195              ; from Mike Daily
 102+ 8195              ; Function: Read a next register
 103+ 8195              ; Out: a = register to read
 104+ 8195              ; Out: a = value in register
 105+ 8195
 106+ 8195              ; call with reg value in reg a
 107+ 8195              ; ******************************************************************************
 108+ 8195              readnextreg:
 109+ 8195 01 3B 24             ld bc,$243b ; select NEXT register
 110+ 8198 ED 79                out (c),a
 111+ 819A 04                   inc b ; $253b to access (read or write) value
 112+ 819B ED 78                in a,(c)
 113+ 819D C9                   ret
 114+ 819E              ;#################################################################################
 115+ 819E              FlipULABuffers:
 116+ 819E                              ; Flip ULA/Alt UA screen (double buffer ULA screen)
 117+ 819E
 118+ 819E                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 119+ 819E
 120+ 819E 3A BD 81                     ld      a,(ULABank)             ; Get screen to display this frame
 121+ 81A1 FE 0A                        cp      10
 122+ 81A3 28 07                        jr      z,@DisplayAltULA
 123+ 81A5
 124+ 81A5 3E 40                        ld      a,64                    ; set CURRENT screen to Alternate ULA (bit 6
 125+ 81A7 06 0A                        ld      b,10                    ; set target screen to ULA
 126+ 81A9 C3 AF 81                     jp      @DisplayULA
 127+ 81AC
 128+ 81AC 06 0E        @DisplayAltULA: ld      b,14                    ; set target screen to Alternate ULA screen
 129+ 81AE AF                           xor     a                       ; zero the a reg
 130+ 81AF ED 92 69     @DisplayULA:    nextreg $69,a                   ; Select Timex/ULA screen to show
 131+ 81B2 78                           ld      a,b                     ; get bank to render to next frame
 132+ 81B3 32 BD 81                     ld      (ULABank),a             ; store it...
 133+ 81B6
 134+ 81B6              ; swap the ula bank we are writing out buffer screen to
 135+ 81B6              swap_bank:                          ;load bank 10 or 14 to location 0 to write to
 136+ 81B6 3A BD 81                     ld a,(ULABank)
 137+ 81B9 ED 92 52                     nextreg $52,a       ;was $50
 138+ 81BC C9                           ret
 139+ 81BD
 140+ 81BD 0A           ULABank         defb 10   ;holds current ULA screen in use
 141+ 81BE              ;#################################################################################
 142+ 81BE
 143+ 81BE
 144+ 81BE
 145+ 81BE              ;##################################################################################
 146+ 81BE              FlipULABuffers_peter:     ; Flip ULA/Alt ULA screen (double buffer ULA screen)
 147+ 81BE                                        ; from Peter Ped Helcmanovsky on the Next Team
 148+ 81BE
 149+ 81BE 3A BD 81         ld a,(ULABank)  ; Get screen to display this frame
 150+ 81C1
 151+ 81C1                  ; if A==14, then do NR_69=64 (display Bank7), if A==10: NR_69=0 (display Bank5)
 152+ 81C1                  ; its %0000'1110 vs %0000'1010 in binary, so extract bit2 and move it to bit6
 153+ 81C1
 154+ 81C1 E6 04            and %0000'0100  ; $04 from A=14, $00 from A=10
 155+ 81C3 ED 23            swapnib         ; bit6 set from bit2
 156+ 81C5 ED 92 69         nextreg $69,a   ; Select Timex/ULA screen to show
 157+ 81C8
 158+ 81C8                  ; flip the drawing buffer mapped at $4000
 159+ 81C8 3A BD 81         ld a,(ULABank)
 160+ 81CB EE 04            xor 10^14       ; alternate between 10 and 14
 161+ 81CD 32 BD 81         ld (ULABank),a
 162+ 81D0 ED 92 52         nextreg $52,a   ; map the new "backbuffer" to $4000 (for next drawing)
 163+ 81D3 C9               ret
 164+ 81D4
 165+ 81D4              ;##################################################################################
 166+ 81D4
 167+ 81D4
 168+ 81D4
 169+ 81D4              ;##################################################################
 170+ 81D4              ;print a line of text on screen
 171+ 81D4              ;##################################################################
 172+ 81D4
 173+ 81D4              ; enter with IX pointing to the message
 174+ 81D4
 175+ 81D4              ;message format    row,col,colour,"message",end char
 176+ 81D4
 177+ 81D4              print_message:  ;make sure we point to our character set
 178+ 81D4 DD 46 00                     ld b,(ix)           ;row
 179+ 81D7 DD 23                        inc ix
 180+ 81D9 DD 4E 00                     ld c,(ix)           ;column
 181+ 81DC DD 23                        inc ix
 182+ 81DE DD 7E 00                     ld a,(ix)           ;set attribute colour
 183+ 81E1 32 C7 8A                     ld (att),a
 184+ 81E4
 185+ 81E4
 186+ 81E4 CD A9 8A                     call locate
 187+ 81E7 DD 23                        inc ix              ;point to characters to print
 188+ 81E9 21 00 C5     mesg_rept:      ld hl,charset_1-256 ; point to our character set
 189+ 81EC 22 C3 8A                     ld (base),hl
 190+ 81EF DD 7E 00                     ld a,(ix)           ;load our character to print
 191+ 81F2
 192+ 81F2                              ;check if we are printing a UDG
 193+ 81F2                              ;we are currently pointing at the ram char set
 194+ 81F2 CB 7F                        bit 7,a                 ;are we printing udg's?
 195+ 81F4                                                      ;if bit 7=0 then zero test = false
 196+ 81F4 28 09                        jr z,no_udg             ;exit if theres no graphic to print
 197+ 81F6 D6 80                        sub $80                 ;point to the first character of udg's
 198+ 81F8 11 00 FC                     ld de,_chars;           ;start of udg's in memory
 199+ 81FB ED 53 C3 8A                  ld (base),de
 200+ 81FF
 201+ 81FF FE 7F        no_udg:         cp 127               ;check flags to see if a=zero
 202+ 8201 C8                           ret z               ;quit when char = 0
 203+ 8202 F5                           push af
 204+ 8203 CD CB 8A                     call print1         ;print the message - auto increments the column
 205+ 8206 F1                           pop af
 206+ 8207 DD 23                        inc ix
 207+ 8209 20 DE                        jr nz,mesg_rept
 208+ 820B C9                           ret
 209+ 820C
 210+ 820C              ;#################################################################
 211+ 820C
 212+ 820C
 213+ 820C
 214+ 820C
 215+ 820C              ;###############################################################
 216+ 820C              ;Message list
 217+ 820C              ;message format    row,col,colour,"message",end char
 218+ 820C
 219+ 820C 00 19 94 B0  message_border1:      db 0,25,148,$b0,$b1,$b0,$20,$b1,$b0,$b1,$7f
 219+ 8210 B1 B0 20 B1
 219+ 8214 B0 B1 7F
 220+ 8217 01 19 57 88  message_get:          db 1,25,87,$88,"G E T",$89,$7f
 220+ 821B 47 20 45 20
 220+ 821F 54 89 7F
 221+ 8222 02 19 57 88  message_out:          db 2,25,87,$88,"O U T",$89,$7F
 221+ 8226 4F 20 55 20
 221+ 822A 54 89 7F
 222+ 822D 03 19 94 B3  message_border4:      db 3,25,148,$b3,$b2,$b3,$20,$b2,$b3,$b2,$7f
 222+ 8231 B2 B3 20 B2
 222+ 8235 B3 B2 7F
 223+ 8238 17 02 3C 20  message_closed:       db 23,2,60," Go flick the switch ",$7F
 223+ 823C 47 6F 20 66
 223+ 8240 6C 69 63 6B
 223+ 8244 20 74 68 65
 223+ 8248 20 73 77 69
 223+ 824C 74 63 68 20
 223+ 8250 7F
 224+ 8251 17 01 48 20  message_switchon:     db 23,1,72," The Door is now Open! ",$7F
 224+ 8255 54 68 65 20
 224+ 8259 44 6F 6F 72
 224+ 825D 20 69 73 20
 224+ 8261 6E 6F 77 20
 224+ 8265 4F 70 65 6E
 224+ 8269 21 20 7F
 225+ 826C 17 01 64 20  message_leave:        db 23,1,100," Woohoo! Time to leave ",$7F
 225+ 8270 57 6F 6F 68
 225+ 8274 6F 6F 21 20
 225+ 8278 54 69 6D 65
 225+ 827C 20 74 6F 20
 225+ 8280 6C 65 61 76
 225+ 8284 65 20 7F
 226+ 8287 0F 19 57 20  message_level         db 15,25,87," LEVEL ",$7f
 226+ 828B 4C 45 56 45
 226+ 828F 4C 20 7F
 227+ 8292
 228+ 8292
 229+ 8292              ;##########################################################################
 230+ 8292              ;setup ULANext palette data - code from Matt Davies early version of Ed.s
 231+ 8292
 232+ 8292              Setup_palette:
 233+ 8292
 234+ 8292 ED 91 43 01         nextreg $43,%00000001   ; Set ULANext palette ON
 235+ 8296 ED 91 40 00         nextreg $40,%00000000    ; set index to 0 which = start of palette
 236+ 829A ED 91 42 01         nextreg $42,%00000001   ; Set 2 ink & 254 paper
 237+ 829E
 238+ 829E              ;poke in the pallete data
 239+ 829E 21 AC 82             ld hl, .palette_data    ;get the start of .palette_data
 240+ 82A1 7E           .lp1    ld a, (hl)
 241+ 82A2 FE 01                cp $01                   ;99 is the end of the data
 242+ 82A4 C8                   ret z                   ;exit if a=99
 243+ 82A5 ED 92 41             nextreg $41,a           ;this auto increments
 244+ 82A8 23                   inc hl
 245+ 82A9 C3 A1 82             jp .lp1
 246+ 82AC
 247+ 82AC              .palette_data:
 248+ 82AC              ;ink colours - only first 16 which are standard spectrum colours
 249+ 82AC
 250+ 82AC 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 250+ 82B0 4A CB 1B F9
 250+ 82B4 DF 00 07 E0
 250+ 82B8 E7 1F FC FE
 251+ 82BC E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 251+ 82C0 24 49 92 B6
 251+ 82C4 FE DB 96 6E
 251+ 82C8 49 25 00 00
 252+ 82CC 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 252+ 82D0 AD F1 FA FE
 252+ 82D4 F5 EC C8 84
 252+ 82D8 E8 EC F4 F8
 253+ 82DC FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 253+ 82E0 31 0D 09 05
 253+ 82E4 05 0E 13 1B
 253+ 82E8 1F 9F FB F3
 254+ 82EC C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 254+ 82F0 00 21 65 86
 254+ 82F4 CB CA F2 E9
 254+ 82F8 E4 C4 80 40
 255+ 82FC 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 255+ 8300 00 00 00 00
 255+ 8304 00 00 00 00
 255+ 8308 00 00 00 00
 256+ 830C 00 00 00 00      db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 256+ 8310 00 00 00 00
 256+ 8314 00 00 00 00
 256+ 8318 00 00 00 00
 257+ 831C 00 00 00 00  	db $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0
 257+ 8320 00 00 00 00
 257+ 8324 00 00 00 00
 257+ 8328 00 00
 258+ 832A
 259+ 832A 00 FF A0 36      db $0, $ff, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 259+ 832E 4A CB 1B F9
 259+ 8332 DF 00 07 E0
 259+ 8336 E7 1F FC FE
 260+ 833A 00 02 A0 36  	db $0, $2, $a0, $36, $4a, $cb, $1b, $f9, $df, $0, $7, $e0, $e7, $1f, $fc, $fe
 260+ 833E 4A CB 1B F9
 260+ 8342 DF 00 07 E0
 260+ 8346 E7 1F FC FE
 261+ 834A E1 00 00 24  	db $e1, $0, $0, $24, $24, $49, $92, $b6, $fe, $db, $96, $6e, $49, $25, $0, $0
 261+ 834E 24 49 92 B6
 261+ 8352 FE DB 96 6E
 261+ 8356 49 25 00 00
 262+ 835A 00 20 44 88  	db $0, $20, $44, $88, $ad, $f1, $fa, $fe, $f5, $ec, $c8, $84, $e8, $ec, $f4, $f8
 262+ 835E AD F1 FA FE
 262+ 8362 F5 EC C8 84
 262+ 8366 E8 EC F4 F8
 263+ 836A FD DD 9D 59  	db $fd, $dd, $9d, $59, $31, $d, $9, $5, $5, $e, $13, $1b, $1f, $9f, $fb, $f3
 263+ 836E 31 0D 09 05
 263+ 8372 05 0E 13 1B
 263+ 8376 1F 9F FB F3
 264+ 837A C7 63 23 02  	db $c7, $63, $23, $2, $0, $21, $65, $86, $cb, $ca, $f2, $e9, $e4, $c4, $80, $40
 264+ 837E 00 21 65 86
 264+ 8382 CB CA F2 E9
 264+ 8386 E4 C4 80 40
 265+ 838A
 266+ 838A              ;these are the red wall graduations - 6 colours
 267+ 838A C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $0, $0, $0, $0, $0, $7, $6, $4, $2, $0
 267+ 838E 40 20 00 00
 267+ 8392 00 00 00 07
 267+ 8396 06 04 02 00
 268+ 839A C0 A0 80 60  	db $c0, $a0, $80, $60, $40, $20, $ff, $ff, $ff, $ff, $0, $0, $0, $0, $ff, $01
 268+ 839E 40 20 FF FF
 268+ 83A2 FF FF 00 00
 268+ 83A6 00 00 FF 01
 269+ 83AA
 270+ 83AA              palette_end:
 271+ 83AA              ;##################################################################################
 272+ 83AA
 273+ 83AA              draw_exit_door_closed:
 274+ 83AA                             ; exit_closed 20 lines of 17 chars
 275+ 83AA 06 14                        ld b,20
 276+ 83AC 21 1A 84                     ld hl,exit_closed
 277+ 83AF C5           abcd:           push bc
 278+ 83B0 E5                           push hl
 279+ 83B1 E5 DD E1                     ld ix,hl        ;point to our data to print
 280+ 83B4 CD D4 81                     CALL print_message
 281+ 83B7 E1                           pop hl
 282+ 83B8 11 11 00                     ld de,17
 283+ 83BB 19                           add hl,de
 284+ 83BC E5 DD E1                     ld ix,hl
 285+ 83BF C1                           pop bc
 286+ 83C0 10 ED                        djnz abcd
 286+ 83C2
 287+ 83C2              ;call the colouring routine
 288+ 83C2 CD F6 83                     call colour_door
 289+ 83C5              ;print the middle bars again as we overote them above
 290+ 83C5 DD 21 D4 83                  ld ix,over1
 291+ 83C9 CD D4 81                     CALL print_message
 292+ 83CC DD 21 E5 83                  ld ix,over2
 293+ 83D0 CD D4 81                     CALL print_message
 294+ 83D3 C9                           ret
 295+ 83D4
 296+ 83D4 09 06 86 80  over1:          db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 296+ 83D8 81 80 81 80
 296+ 83DC 81 80 81 80
 296+ 83E0 81 80 81 80
 296+ 83E4 7F
 297+ 83E5 0A 06 84 82  over2:          db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 297+ 83E9 83 82 83 82
 297+ 83ED 83 82 83 82
 297+ 83F1 83 82 83 81
 297+ 83F5 7F
 298+ 83F6
 299+ 83F6
 300+ 83F6              ;this routine below will be used by the right wall closed door drawing routine as well as now
 301+ 83F6              ;now colour the bars white ink - this will overwrite the 2 dark bars at line 7 and 8 - will sort later
 302+ 83F6 21 A8 58     colour_door:    ld hl,22696         ;start of bar bit at the top of the door
 303+ 83F9 11 20 00                     ld de,32            ;to jump 1 line down
 304+ 83FC 3E 09                        ld a,9              ;draw 9 characters across
 305+ 83FE 32 19 84                     ld (att_count),a
 306+ 8401 3E C7                        ld a,199
 307+ 8403 4F                           ld c,a              ;set colour to white ink, black paper
 308+ 8404 3E 10                        ld a,16             ;do 16 lines
 309+ 8406 E5           rept_5:         push hl
 310+ 8407 F5           rept_4:         push af
 311+ 8408 3A 19 84                     ld a,(att_count)    ;9
 312+ 840B 47                           ld b,a
 313+ 840C F1                           pop af
 314+ 840D 71           rept_3:         ld (hl),c           ;set the attribute colour
 315+ 840E 23                           inc hl
 316+ 840F 10 FC                        djnz rept_3
 317+ 8411 E1                           pop hl
 318+ 8412 19                           add hl,de           ;jump to next line below
 319+ 8413 E5                           push hl
 320+ 8414 3D                           dec a
 321+ 8415 20 F0                        jr nz,rept_4
 322+ 8417 E1                           pop hl
 323+ 8418 C9                           ret
 324+ 8419
 325+ 8419 09           att_count       db  9
 326+ 841A
 327+ 841A              ;###############################################################
 328+ 841A              ;door graphic
 329+ 841A              ;message format    row,col,colour,"message",end char (127 ($7f) )
 330+ 841A              exit_closed:    ;20 lines
 331+ 841A 03 06 88 80                  db 3,6,136, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 331+ 841E 81 80 81 80
 331+ 8422 81 80 81 80
 331+ 8426 81 80 81 80
 331+ 842A 7F
 332+ 842B 04 06 86 82                  db 4,6,134, $82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 332+ 842F 83 82 83 82
 332+ 8433 83 82 83 82
 332+ 8437 83 82 83 81
 332+ 843B 7F
 333+ 843C 05 06 84 80                  db 5,6,132, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 333+ 8440 81 84 84 84
 333+ 8444 84 84 84 84
 333+ 8448 84 84 81 80
 333+ 844C 7F
 334+ 844D 06 06 82 82                  db 6,6,130, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 334+ 8451 83 84 84 84
 334+ 8455 84 84 84 84
 334+ 8459 84 84 83 81
 334+ 845D 7F
 335+ 845E 07 06 80 80                  db 7,6,128, $80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 335+ 8462 81 84 84 84
 335+ 8466 84 84 84 84
 335+ 846A 84 84 81 80
 335+ 846E 7F
 336+ 846F 08 06 7E 82                  db 8,6,126, $82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 336+ 8473 83 84 84 84
 336+ 8477 84 84 84 84
 336+ 847B 84 84 83 81
 336+ 847F 7F
 337+ 8480 09 06 86 80                  db 9,6,134, $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 337+ 8484 81 80 81 80
 337+ 8488 81 80 81 80
 337+ 848C 81 80 81 80
 337+ 8490 7F
 338+ 8491 0A 06 84 82                  db 10,6,132,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 338+ 8495 83 82 83 82
 338+ 8499 83 82 83 82
 338+ 849D 83 82 83 81
 338+ 84A1 7F
 339+ 84A2 0B 06 82 80                  db 11,6,130,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 339+ 84A6 81 84 84 84
 339+ 84AA 84 84 84 84
 339+ 84AE 84 84 81 80
 339+ 84B2 7F
 340+ 84B3 0C 06 80 82                  db 12,6,128,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 340+ 84B7 83 84 84 84
 340+ 84BB 84 84 84 84
 340+ 84BF 84 84 83 81
 340+ 84C3 7F
 341+ 84C4 0D 06 7E 80                  db 13,6,126,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 341+ 84C8 81 84 84 84
 341+ 84CC 84 84 84 84
 341+ 84D0 84 84 81 80
 341+ 84D4 7F
 342+ 84D5 0E 06 86 82                  db 14,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 342+ 84D9 83 84 84 84
 342+ 84DD 84 84 84 84
 342+ 84E1 84 84 83 81
 342+ 84E5 7F
 343+ 84E6 0F 06 84 80                  db 15,6,132,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 343+ 84EA 81 84 84 84
 343+ 84EE 84 84 84 84
 343+ 84F2 84 84 81 80
 343+ 84F6 7F
 344+ 84F7 10 06 82 82                  db 16,6,130,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 344+ 84FB 83 84 84 84
 344+ 84FF 84 84 84 84
 344+ 8503 84 84 83 81
 344+ 8507 7F
 345+ 8508 11 06 80 80                  db 17,6,128,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 345+ 850C 81 84 84 84
 345+ 8510 84 84 84 84
 345+ 8514 84 84 81 80
 345+ 8518 7F
 346+ 8519 12 06 7E 82                  db 18,6,126,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 346+ 851D 83 84 84 84
 346+ 8521 84 84 84 84
 346+ 8525 84 84 83 81
 346+ 8529 7F
 347+ 852A 13 06 88 80                  db 19,6,136,$80,$81,$84,$84,$84,$84,$84,$84,$84,$84,$84,$81,$80,$7F
 347+ 852E 81 84 84 84
 347+ 8532 84 84 84 84
 347+ 8536 84 84 81 80
 347+ 853A 7F
 348+ 853B 14 06 86 82                  db 20,6,134,$82,$83,$84,$84,$84,$84,$84,$84,$84,$84,$84,$83,$81,$7F
 348+ 853F 83 84 84 84
 348+ 8543 84 84 84 84
 348+ 8547 84 84 83 81
 348+ 854B 7F
 349+ 854C 15 06 84 80                  db 21,6,132,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$7F
 349+ 8550 81 80 81 80
 349+ 8554 81 80 81 80
 349+ 8558 81 80 81 80
 349+ 855C 7F
 350+ 855D 16 06 82 82                  db 22,6,130,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$82,$83,$81,$7F
 350+ 8561 83 82 83 82
 350+ 8565 83 82 83 82
 350+ 8569 83 82 83 81
 350+ 856D 7F
 351+ 856E              ;------------------------------------------------------------------------------------
 352+ 856E              draw_exit_door_open:
 353+ 856E                             ; exit_closed 20 lines of 17 chars
 354+ 856E 06 14                        ld b,20
 355+ 8570 21 87 85                     ld hl,exit_open
 356+ 8573 C5           abcde:          push bc
 357+ 8574 E5                           push hl
 358+ 8575 E5 DD E1                     ld ix,hl        ;point to our data to print
 359+ 8578 CD D4 81                     CALL print_message
 360+ 857B E1                           pop hl
 361+ 857C 11 11 00                     ld de,17
 362+ 857F 19                           add hl,de
 363+ 8580 E5 DD E1                     ld ix,hl
 364+ 8583 C1                           pop bc
 365+ 8584 10 ED                        djnz abcde
 365+ 8586
 366+ 8586 C9                           ret
 367+ 8587              exit_open:    ;20 lines
 368+ 8587 03 06 BF B1                  db 3,6,191, $b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$7F
 368+ 858B AF AF AF AF
 368+ 858F AF AF AF AF
 368+ 8593 AF AF AF B0
 368+ 8597 7F
 369+ 8598 04 06 BF 20                  db 4,6,191, $20,$b1,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$7F
 369+ 859C B1 AF AF AF
 369+ 85A0 AF AF AF AF
 369+ 85A4 AF AF B0 20
 369+ 85A8 7F
 370+ 85A9 05 06 BF 20                  db 5,6,191, $20,$20,$b1,$af,$af,$af,$af,$af,$af,$af,$b0,$20,$20,$7F
 370+ 85AD 20 B1 AF AF
 370+ 85B1 AF AF AF AF
 370+ 85B5 AF B0 20 20
 370+ 85B9 7F
 371+ 85BA 06 06 BE 20                  db 6,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 371+ 85BE 20 20 AF AF
 371+ 85C2 AF AF AF AF
 371+ 85C6 AF 20 20 20
 371+ 85CA 7F
 372+ 85CB 07 06 BE 20                  db 7,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 372+ 85CF 20 20 AF AF
 372+ 85D3 AF AF AF AF
 372+ 85D7 AF 20 20 20
 372+ 85DB 7F
 373+ 85DC 08 06 BE 20                  db 8,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 373+ 85E0 20 20 AF AF
 373+ 85E4 AF AF AF AF
 373+ 85E8 AF 20 20 20
 373+ 85EC 7F
 374+ 85ED 09 06 BE 20                  db 9,6,190, $20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 374+ 85F1 20 20 AF AF
 374+ 85F5 AF AF AF AF
 374+ 85F9 AF 20 20 20
 374+ 85FD 7F
 375+ 85FE 0A 06 BE 20                  db 10,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 375+ 8602 20 20 AF AF
 375+ 8606 AF AF AF AF
 375+ 860A AF 20 20 20
 375+ 860E 7F
 376+ 860F 0B 06 BE 20                  db 11,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 376+ 8613 20 20 AF AF
 376+ 8617 AF AF AF AF
 376+ 861B AF 20 20 20
 376+ 861F 7F
 377+ 8620 0C 06 BE 20                  db 12,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 377+ 8624 20 20 AF AF
 377+ 8628 AF AF AF AF
 377+ 862C AF 20 20 20
 377+ 8630 7F
 378+ 8631 0D 06 BE 20                  db 13,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 378+ 8635 20 20 AF AF
 378+ 8639 AF AF AF AF
 378+ 863D AF 20 20 20
 378+ 8641 7F
 379+ 8642 0E 06 BE 20                  db 14,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 379+ 8646 20 20 AF AF
 379+ 864A AF AF AF AF
 379+ 864E AF 20 20 20
 379+ 8652 7F
 380+ 8653 0F 06 BE 20                  db 15,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 380+ 8657 20 20 AF AF
 380+ 865B AF AF AF AF
 380+ 865F AF 20 20 20
 380+ 8663 7F
 381+ 8664 10 06 BE 20                  db 16,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 381+ 8668 20 20 AF AF
 381+ 866C AF AF AF AF
 381+ 8670 AF 20 20 20
 381+ 8674 7F
 382+ 8675 11 06 BE 20                  db 17,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 382+ 8679 20 20 AF AF
 382+ 867D AF AF AF AF
 382+ 8681 AF 20 20 20
 382+ 8685 7F
 383+ 8686 12 06 BE 20                  db 18,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 383+ 868A 20 20 AF AF
 383+ 868E AF AF AF AF
 383+ 8692 AF 20 20 20
 383+ 8696 7F
 384+ 8697 13 06 BE 20                  db 19,6,190,$20,$20,$20,$af,$af,$af,$af,$af,$af,$af,$20,$20,$20,$7F
 384+ 869B 20 20 AF AF
 384+ 869F AF AF AF AF
 384+ 86A3 AF 20 20 20
 384+ 86A7 7F
 385+ 86A8 14 06 BF 20                  db 20,6,191,$20,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$20,$7F
 385+ 86AC 20 B2 AF AF
 385+ 86B0 AF AF AF AF
 385+ 86B4 AF B3 20 20
 385+ 86B8 7F
 386+ 86B9 15 06 BF 20                  db 21,6,191,$20,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$20,$7F
 386+ 86BD B2 AF AF AF
 386+ 86C1 AF AF AF AF
 386+ 86C5 AF AF B3 20
 386+ 86C9 7F
 387+ 86CA 16 06 BF B2                  db 22,6,191,$b2,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$af,$b3,$7F
 387+ 86CE AF AF AF AF
 387+ 86D2 AF AF AF AF
 387+ 86D6 AF AF AF B3
 387+ 86DA 7F
 388+ 86DB
 389+ 86DB              ;--------------------------------------------------------------------------------------
 390+ 86DB              draw_door_right_closed:
 391+ 86DB                             ; exit_closed 14 lines of 7 chars
 392+ 86DB 06 0D                        ld b,13
 393+ 86DD 21 58 87                     ld hl,right_door_closed
 394+ 86E0 C5           abc_a:          push bc
 395+ 86E1 E5                           push hl
 396+ 86E2 E5 DD E1                     ld ix,hl        ;point to our data to print
 397+ 86E5 CD D4 81                     CALL print_message
 398+ 86E8 E1                           pop hl
 399+ 86E9 11 07 00                     ld de,7
 400+ 86EC 19                           add hl,de
 401+ 86ED E5 DD E1                     ld ix,hl
 402+ 86F0 C1                           pop bc
 403+ 86F1 10 ED                        djnz abc_a
 404+ 86F3
 405+ 86F3              ;draw top angled bit of the door on right wall
 406+ 86F3 DD 21 3F 87                  ld ix,top_right_1        ;point to our data to print
 407+ 86F7 CD D4 81                     CALL print_message
 408+ 86FA DD 21 44 87                  ld ix,top_right_2        ;point to our data to print
 409+ 86FE CD D4 81                     CALL print_message
 410+ 8701 DD 21 4A 87                  ld ix,top_right_3        ;point to our data to print
 411+ 8705 CD D4 81                     CALL print_message
 412+ 8708 DD 21 51 87                  ld ix,top_right_4        ;point to our data to print
 413+ 870C CD D4 81                     CALL print_message
 414+ 870F
 415+ 870F              ;draw bottom angled bit of the door on right wall
 416+ 870F DD 21 AC 87                  ld ix,bot_right_1        ;point to our data to print
 417+ 8713 CD D4 81                     CALL print_message
 418+ 8716 DD 21 B3 87                  ld ix,bot_right_2        ;point to our data to print
 419+ 871A CD D4 81                     CALL print_message
 420+ 871D DD 21 BA 87                  ld ix,bot_right_3        ;point to our data to print
 421+ 8721 CD D4 81                     CALL print_message
 422+ 8724 DD 21 C0 87                  ld ix,bot_right_4        ;point to our data to print
 423+ 8728 CD D4 81                     CALL print_message
 424+ 872B                         ; BREAK
 425+ 872B              ;now colour the attributes correctly to look diagonal
 426+ 872B                              ;do white colour bars first
 427+ 872B 21 B6 58                     ld hl,22710         ;start of bar bit at the top of the door
 428+ 872E 11 20 00                     ld de,32            ;to jump 1 line down
 429+ 8731 3E 01                        ld a,1              ;draw 1 attribute across
 430+ 8733 32 19 84                     ld (att_count),a
 431+ 8736 3E C7                        ld a,199
 432+ 8738 4F                           ld c,a              ;set colour to white ink, black paper
 433+ 8739 3E 0E                        ld a,14             ;do 16 lines
 434+ 873B                             ; push hl
 435+ 873B CD 06 84                     call rept_5         ;colour our door correctly
 436+ 873E C9                           ret
 437+ 873F
 438+ 873F
 439+ 873F              ;top 2 parts of the door
 440+ 873F 02 17 88 D3  top_right_1:    db 2,23,136,         $d3,$7F
 440+ 8743 7F
 441+ 8744 03 16 88 D5  top_right_2:    db 3,22,136,     $d5,$80,$7F
 441+ 8748 80 7F
 442+ 874A 04 15 88 D3  top_right_3:    db 4,21,136, $d3,$83,$82,$7F
 442+ 874E 83 82 7F
 443+ 8751 05 15 88 80  top_right_4:    db 5,21,136, $80,$87,$80,$7F
 443+ 8755 87 80 7F
 444+ 8758              ;middle of the closed door
 445+ 8758              right_door_closed:      ;15 lines
 446+ 8758 06 15 82 82                  db 6,21,130, $82,$87,$82,$7F
 446+ 875C 87 82 7F
 447+ 875F 07 15 80 80                  db 7,21,128, $80,$87,$80,$7F
 447+ 8763 87 80 7F
 448+ 8766 08 15 7E 82                  db 8,21,126, $82,$87,$82,$7F
 448+ 876A 87 82 7F
 449+ 876D 09 15 88 80                  db 9,21,136, $80,$87,$80,$7F
 449+ 8771 87 80 7F
 450+ 8774 0A 15 86 82                  db 10,21,134,$82,$87,$82,$7F
 450+ 8778 87 82 7F
 451+ 877B 0B 15 84 80                  db 11,21,132,$80,$87,$80,$7F
 451+ 877F 87 80 7F
 452+ 8782 0C 15 82 82                  db 12,21,130,$82,$87,$82,$7F
 452+ 8786 87 82 7F
 453+ 8789 0D 15 80 80                  db 13,21,128,$80,$87,$80,$7F
 453+ 878D 87 80 7F
 454+ 8790 0E 15 7E 82                  db 14,21,126,$82,$87,$82,$7F
 454+ 8794 87 82 7F
 455+ 8797 0F 15 88 80                  db 15,21,136,$80,$87,$80,$7F
 455+ 879B 87 80 7F
 456+ 879E 10 15 86 82                  db 16,21,134,$82,$87,$82,$7F
 456+ 87A2 87 82 7F
 457+ 87A5 11 15 84 80                  db 17,21,132,$80,$87,$80,$7F
 457+ 87A9 87 80 7F
 458+ 87AC              ;                db 18,21,130,$82,$87,$82,$7F
 459+ 87AC              ;bottom 2 parts of the door
 460+ 87AC 12 15 80 80  bot_right_1:    db 18,21,128, $80,$87,$80,$7F
 460+ 87B0 87 80 7F
 461+ 87B3 13 15 80 D4  bot_right_2:    db 19,21,128, $d4,$83,$82,$7F
 461+ 87B7 83 82 7F
 462+ 87BA 14 16 80 D6  bot_right_3:    db 20,22,128,     $d6,$80,$7F
 462+ 87BE 80 7F
 463+ 87C0 15 17 80 D4  bot_right_4:    db 21,23,128,         $d4,$7F
 463+ 87C4 7F
 464+ 87C5
 465+ 87C5              ;--------------------------------------------------------------------
 466+ 87C5              draw_door_right_open:
 467+ 87C5                             ; exit_closed 14 lines of 7 chars
 468+ 87C5 06 0D                        ld b,13
 469+ 87C7 21 1C 88                     ld hl,right_door_open
 470+ 87CA C5           abc_b:          push bc
 471+ 87CB E5                           push hl
 472+ 87CC E5 DD E1                     ld ix,hl        ;point to our data to print
 473+ 87CF CD D4 81                     CALL print_message
 474+ 87D2 E1                           pop hl
 475+ 87D3 11 07 00                     ld de,7
 476+ 87D6 19                           add hl,de
 477+ 87D7 E5 DD E1                     ld ix,hl
 478+ 87DA C1                           pop bc
 479+ 87DB 10 ED                        djnz abc_b
 480+ 87DD
 481+ 87DD              ;draw top angled bit of the door on right wall
 482+ 87DD DD 21 08 88                  ld ix,top_right_op2        ;point to our data to print
 483+ 87E1 CD D4 81                     CALL print_message
 484+ 87E4 DD 21 0E 88                  ld ix,top_right_op3        ;point to our data to print
 485+ 87E8 CD D4 81                     CALL print_message
 486+ 87EB DD 21 15 88                  ld ix,top_right_op4        ;point to our data to print
 487+ 87EF CD D4 81                     CALL print_message
 488+ 87F2
 489+ 87F2              ;draw bottom angled bit of the door on right wall - basically, all spaces so floor colour is drawn
 490+ 87F2 DD 21 77 88                  ld ix,bot_right_op1        ;point to our data to print
 491+ 87F6 CD D4 81                     CALL print_message
 492+ 87F9 DD 21 7E 88                  ld ix,bot_right_op2        ;point to our data to print
 493+ 87FD CD D4 81                     CALL print_message
 494+ 8800 DD 21 85 88                  ld ix,bot_right_op3        ;point to our data to print
 495+ 8804 CD D4 81                     CALL print_message
 496+ 8807
 497+ 8807 C9                           ret
 498+ 8808
 499+ 8808              ;top 2 parts of the door
 500+ 8808 03 16 C0 B0  top_right_op2:    db 3,22,192,     $b0,$7F,$7F;;$20,$7F
 500+ 880C 7F 7F
 501+ 880E 04 15 C0 B0  top_right_op3:    db 4,21,192, $b0,$20,$7F,$7F;$20,$7F
 501+ 8812 20 7F 7F
 502+ 8815 05 15 BC 20  top_right_op4:    db 5,21,188, $20,$20,$7F,$7F;$20,$7F
 502+ 8819 20 7F 7F
 503+ 881C              ;middle of the open door
 504+ 881C              right_door_open:      ;15 lines
 505+ 881C 06 15 BC 20                  db 6,21,188, $20,$20,$7F,$7F;$20,$7F
 505+ 8820 20 7F 7F
 506+ 8823 07 15 BC 20                  db 7,21,188, $20,$20,$7F,$7F;,$20,$7F
 506+ 8827 20 7F 7F
 507+ 882A 08 15 BC 20                  db 8,21,188, $20,$20,$7F,$7F;,$20,$7F
 507+ 882E 20 7F 7F
 508+ 8831 09 15 BC 20                  db 9,21,188, $20,$20,$7F,$7F;$20,$7F
 508+ 8835 20 7F 7F
 509+ 8838 0A 15 BC 20                  db 10,21,188,$20,$20,$7F,$7F;$20,$7F
 509+ 883C 20 7F 7F
 510+ 883F 0B 15 BC 20                  db 11,21,188,$20,$20,$7F,$7F;$20,$7F
 510+ 8843 20 7F 7F
 511+ 8846 0C 15 BC 20                  db 12,21,188,$20,$20,$7F,$7F;$20,$7F
 511+ 884A 20 7F 7F
 512+ 884D 0D 15 BC 20                  db 13,21,188,$20,$20,$7F,$7F;$20,$7F
 512+ 8851 20 7F 7F
 513+ 8854 0E 15 BC 20                  db 14,21,188,$20,$20,$7F,$7F;$20,$7F
 513+ 8858 20 7F 7F
 514+ 885B 0F 15 BC 20                  db 15,21,188,$20,$20,$7F,$7F;$20,$7F
 514+ 885F 20 7F 7F
 515+ 8862 10 15 BC 20                  db 16,21,188,$20,$20,$7F,$7F;$20,$7F
 515+ 8866 20 7F 7F
 516+ 8869 11 15 BC 20                  db 17,21,188,$20,$20,$7F,$7F;$20,$7F
 516+ 886D 20 7F 7F
 517+ 8870 12 15 BC 20                  db 18,21,188,$20,$20,$7F,$7F;$20,$7F
 517+ 8874 20 7F 7F
 518+ 8877
 519+ 8877              ;bottom 2 parts of the door
 520+ 8877 13 15 BC 20  bot_right_op1:    db 19,21,188, $20,$20,$7F,$7F;$20,$7F
 520+ 887B 20 7F 7F
 521+ 887E 14 15 62 20  bot_right_op2:    db 20,21,98, $20,$20,$7F,$7F;$20,$7F
 521+ 8882 20 7F 7F
 522+ 8885 15 16 62 20  bot_right_op3:    db 21,22,98,     $20,$7F,$7F;$20,$7F
 522+ 8889 7F 7F
 523+ 888B
 524+ 888B              ;--------------------------------------------------------------------
 525+ 888B              ;--------------------------------------------------------------------
 526+ 888B              ;switch animation below - neds to be switched on
 527+ 888B              ;--------------------------------------------------------------------
 528+ 888B              ;--------------------------------------------------------------------
 529+ 888B              ;switch_anim:
 530+ 888B
 531+ 888B              draw_switch_off:
 532+ 888B                             ; exit_closed 13 lines of 5 chars
 533+ 888B 06 0D                        ld b,13
 534+ 888D 21 B7 88                     ld hl,switch_off_g      ;start of switch off graphic
 535+ 8890 C5           abc_b1:          push bc
 536+ 8891 E5                           push hl
 537+ 8892 E5 DD E1                     ld ix,hl                ;point to our data to print
 538+ 8895 CD D4 81                     CALL print_message
 539+ 8898 E1                           pop hl
 540+ 8899 11 09 00                     ld de,9                 ;each line is 9 chars long
 541+ 889C 19                           add hl,de
 542+ 889D E5 DD E1                     ld ix,hl
 543+ 88A0 C1                           pop bc
 544+ 88A1 10 ED                        djnz abc_b1
 545+ 88A3
 546+ 88A3              ;now colour the attributes to show switch is in the OFF position - colour it blue
 547+ 88A3                              ;do white colour bars first
 548+ 88A3 21 EC 58                     ld hl,22764;22710-10+32+32   ;start of bar bit at the top of the door
 549+ 88A6 11 20 00                     ld de,32            ;to jump 1 line down after each print
 550+ 88A9 3E 01                        ld a,1              ;draw 9 attribute across
 551+ 88AB 32 19 84                     ld (att_count),a
 552+ 88AE 3E B8                        ld a,184            ; colour to print (199=white)
 553+ 88B0 4F                           ld c,a              ;set colour to white ink, black paper
 554+ 88B1 3E 06                        ld a,6             ;do 16 lines
 555+ 88B3 CD 06 84                     call rept_5         ;colour our door correctly
 556+ 88B6
 557+ 88B6 C9                           ret
 558+ 88B7
 559+ 88B7              ;switch in off position
 560+ 88B7              switch_off_g:      ;13 lines
 561+ 88B7 06 0A 88 80                  db 6,10,136, $80,$81,"#",$80,$81,$7F
 561+ 88BB 81 23 80 81
 561+ 88BF 7F
 562+ 88C0 07 0A 88 82                  db 7,10,136, $82,$83," ",$82,$83,$7F
 562+ 88C4 83 20 82 83
 562+ 88C8 7F
 563+ 88C9 08 0A 88 80                  db 8,10,136, $80,$81," ",$80,$81,$7F
 563+ 88CD 81 20 80 81
 563+ 88D1 7F
 564+ 88D2 09 0A 88 82                  db 9,10,136, $82,$83," ",$82,$83,$7F
 564+ 88D6 83 20 82 83
 564+ 88DA 7F
 565+ 88DB 0A 0A 88 80                  db 10,10,136,$80,$81," ",$80,$81,$7F
 565+ 88DF 81 20 80 81
 565+ 88E3 7F
 566+ 88E4 0B 0A 88 82                  db 11,10,136,$82,$83," ",$82,$83,$7F
 566+ 88E8 83 20 82 83
 566+ 88EC 7F
 567+ 88ED 0C 0A 88 80                  db 12,10,136,$80,$81," ",$80,$81,$7F
 567+ 88F1 81 20 80 81
 567+ 88F5 7F
 568+ 88F6 0D 0A 88 82                  db 13,10,136,$82,$83,"#",$82,$83,$7F
 568+ 88FA 83 23 82 83
 568+ 88FE 7F
 569+ 88FF 0E 0A 88 80                  db 14,10,136,$80,$81,"#",$80,$81,$7F
 569+ 8903 81 23 80 81
 569+ 8907 7F
 570+ 8908 0F 0A 88 82                  db 15,10,136,$82,$83,"#",$82,$83,$7F
 570+ 890C 83 23 82 83
 570+ 8910 7F
 571+ 8911 10 0A 88 80                  db 16,10,136,$80,$81,"#",$80,$81,$7F
 571+ 8915 81 23 80 81
 571+ 8919 7F
 572+ 891A 11 0A 88 82                  db 17,10,136,$82,$83,"#",$82,$83,$7F
 572+ 891E 83 23 82 83
 572+ 8922 7F
 573+ 8923 12 0A 88 80                  db 18,10,136,$80,$81,"#",$80,$81,$7F
 573+ 8927 81 23 80 81
 573+ 892B 7F
 574+ 892C
 575+ 892C
 576+ 892C              ;--------------------------------------------------------------------
 577+ 892C
 578+ 892C              draw_switch_on:
 579+ 892C                             ; exit_closed 13 lines of 5 chars
 580+ 892C 06 0D                        ld b,13
 581+ 892E 21 58 89                     ld hl,switch_on_g      ;start of switch off graphic
 582+ 8931 C5           abc_b2:          push bc
 583+ 8932 E5                           push hl
 584+ 8933 E5 DD E1                     ld ix,hl                ;point to our data to print
 585+ 8936 CD D4 81                     CALL print_message
 586+ 8939 E1                           pop hl
 587+ 893A 11 09 00                     ld de,9                 ;each line is 9 chars long
 588+ 893D 19                           add hl,de
 589+ 893E E5 DD E1                     ld ix,hl
 590+ 8941 C1                           pop bc
 591+ 8942 10 ED                        djnz abc_b2
 592+ 8944
 593+ 8944              ;now colour the attributes to show switch is in the OFF position - colour it blue
 594+ 8944                              ;do white colour bars first
 595+ 8944 21 8C 59                     ld hl,22924;22710-10+32+32+32+32+32+32+32   ;start of bar bit at the top of the door
 596+ 8947 11 20 00                     ld de,32            ;to jump 1 line down after each print
 597+ 894A 3E 01                        ld a,1              ;draw 9 attribute across
 598+ 894C 32 19 84                     ld (att_count),a
 599+ 894F 3E 94                        ld a,148            ; colour to print (199=white)
 600+ 8951 4F                           ld c,a              ;set colour to white ink, black paper
 601+ 8952 3E 06                        ld a,6             ;do 16 lines
 602+ 8954 CD 06 84                     call rept_5         ;colour our door correctly
 603+ 8957
 604+ 8957 C9                           ret
 605+ 8958
 606+ 8958              ;switch in off position
 607+ 8958              switch_on_g:      ;13 lines
 608+ 8958 06 0A 88 2B                  db 6,10,136, "+","-","-","-","+",$7F
 608+ 895C 2D 2D 2D 2B
 608+ 8960 7F
 609+ 8961 07 0A 88 7C                  db 7,10,136, "|","|"," ","|","|",$7F
 609+ 8965 7C 20 7C 7C
 609+ 8969 7F
 610+ 896A 08 0A 88 7C                  db 8,10,136, "|","|"," ","|","|",$7F
 610+ 896E 7C 20 7C 7C
 610+ 8972 7F
 611+ 8973 09 0A 88 7C                  db 9,10,136, "|","|"," ","|","|",$7F
 611+ 8977 7C 20 7C 7C
 611+ 897B 7F
 612+ 897C 0A 0A 88 7C                  db 10,10,136,"|","|"," ","|","|",$7F
 612+ 8980 7C 20 7C 7C
 612+ 8984 7F
 613+ 8985 0B 0A 88 7C                  db 11,10,136,"|","|"," ","|","|",$7F
 613+ 8989 7C 20 7C 7C
 613+ 898D 7F
 614+ 898E 0C 0A 88 7C                  db 12,10,136,"|","#"," ","#","|",$7F
 614+ 8992 23 20 23 7C
 614+ 8996 7F
 615+ 8997 0D 0A 88 7C                  db 13,10,136,"|","#"," ","#","|",$7F
 615+ 899B 23 20 23 7C
 615+ 899F 7F
 616+ 89A0 0E 0A 88 7C                  db 14,10,136,"|","#"," ","#","|",$7F
 616+ 89A4 23 20 23 7C
 616+ 89A8 7F
 617+ 89A9 0F 0A 88 7C                  db 15,10,136,"|","#"," ","#","|",$7F
 617+ 89AD 23 20 23 7C
 617+ 89B1 7F
 618+ 89B2 10 0A 88 7C                  db 16,10,136,"|","#"," ","#","|",$7F
 618+ 89B6 23 20 23 7C
 618+ 89BA 7F
 619+ 89BB 11 0A 88 7C                  db 17,10,136,"|","#"," ","#","|",$7F
 619+ 89BF 23 20 23 7C
 619+ 89C3 7F
 620+ 89C4 12 0A 88 2B                  db 18,10,136,"+","-","-","-","+",$7F
 620+ 89C8 2D 2D 2D 2B
 620+ 89CC 7F
 621+ 89CD
 622+ 89CD C9           draw_switch_right_closed:   ret
 623+ 89CE
 624+ 89CE C9           draw_switch_right_open:   ret
 625+ 89CF
 626+ 89CF
 627+ 89CF
 628+ 89CF
 629+ 89CF
 630+ 89CF
 631+ 89CF
 632+ 89CF
 633+ 89CF
# file closed: src/1-rd3dmazeV6.asm
 447  89CF                  INCLUDE 2-rd3dmazeV6.asm ; draw maze on screen, player direction,
# file opened: src/2-rd3dmazeV6.asm
   1+ 89CF
   2+ 89CF              ;##############################################
   3+ 89CF              ;Draw the current map on screen
   4+ 89CF              ;##############################################
   5+ 89CF
   6+ 89CF                  ;    org $E000   ; 57344 - top 8k
   7+ 89CF
   8+ 89CF              ;max row=21, max column = 31
   9+ 89CF
  10+ 89CF              ;will need to change DF_CC position for sjasmplus
  11+ 89CF              DRAW_MAP:
  12+ 89CF                      ;set max speed!
  13+ 89CF ED 91 07 03          nextreg 7,3
  14+ 89D3
  15+ 89D3                      ;set our colours
  16+ 89D3 3E B2                ld a,178            ;red
  17+ 89D5 32 9F 97             ld (wallcol),a
  18+ 89D8
  19+ 89D8              ;first draw a top wall line
  20+ 89D8 3E 11                ld a,17          ;draw 16 wall chars
  21+ 89DA 01 04 02             ld bc,$0204      ;print at 2,4;
  22+ 89DD CD 86 8A             call topbotline
  23+ 89E0
  24+ 89E0              ;now draw the map data
  25+ 89E0 01 04 03             ld bc,$0304      ;set row and column to 2,4
  26+ 89E3 2A 23 FA             ld hl,(map_start)
  27+ 89E6 22 18 FA             ld (var7),hl   ;save it
  28+ 89E9              rep1:
  29+ 89E9 C5                   push bc
  30+ 89EA CD A9 8A             call locate
  31+ 89ED C1                   pop bc           ;restore our counter
  32+ 89EE C5                   push bc          ;resave it
  33+ 89EF
  34+ 89EF CD 30 8A             call get_maze_data
  35+ 89F2 CD CB 8A             call print1      ;print character
  36+ 89F5 C1                   pop bc
  37+ 89F6 0C                   inc c
  38+ 89F7 79                   ld a,c
  39+ 89F8 D6 14                sub 20          ;just draw 16 characters (we start at loc 4)
  40+ 89FA C2 E9 89             jp nz,rep1
  41+ 89FD
  42+ 89FD              ;now draw a final wall at the end of the line
  43+ 89FD C5                   push bc
  44+ 89FE 11 00 F8             ld de,udg_start  ;point to udg chars
  45+ 8A01 ED 53 C3 8A          ld (base),de
  46+ 8A05 CD A9 8A             call locate      ;set print position
  47+ 8A08 CD AF 98             call set_wall_col   ;set our wall colour
  48+ 8A0B 3A 9F 97             ld a,(wallcol)
  49+ 8A0E 32 C7 8A             ld (att),a
  50+ 8A11 3E B4                ld a,_smallwall  ;draw wall char
  51+ 8A13 CD CB 8A             call print1
  52+ 8A16 C1                   pop bc
  53+ 8A17 78                   ld a,b
  54+ 8A18 FE 12                cp 18            ;draw 18 lines (starting at line 2)
  55+ 8A1A 28 05                jr z,ret2        ;exit after 18 lines
  56+ 8A1C 04                   inc b
  57+ 8A1D 0E 04                ld c,4           ;start row from pos 4 again
  58+ 8A1F 18 C8                jr rep1          ;start again
  59+ 8A21
  60+ 8A21              ;now draw a bottom line wall
  61+ 8A21 3E 11        ret2:   ld a,17          ;draw 16 wall chars
  62+ 8A23 01 04 13             ld bc,$1304      ;print at 2,4;
  63+ 8A26 CD 86 8A             call topbotline
  64+ 8A29
  65+ 8A29              ;put our char set back to normal!
  66+ 8A29 21 00 C5             ld hl,charset_1-256
  67+ 8A2C 22 C3 8A             ld (base),hl
  68+ 8A2F C9                   ret
  69+ 8A30
  70+ 8A30              ;cycle through the maze drawing blocks, player, exit etc
  71+ 8A30              get_maze_data:
  72+ 8A30 2A 18 FA             ld hl,(var7)    ;get our current map position
  73+ 8A33 3E 28                ld a,40         ;cyan paper, black ink
  74+ 8A35 32 C7 8A             ld (att),a
  75+ 8A38
  76+ 8A38              ;set charset to non udg
  77+ 8A38 11 00 C6             ld de,charset_1
  78+ 8A3B 15                   dec d
  79+ 8A3C ED 53 C3 8A          ld (base),de    ;set char set start for ptint1 routine
  80+ 8A40 7E                   ld a,(hl)       ;get our character to print
  81+ 8A41 23                   inc hl           ;jump to next maze location
  82+ 8A42 22 18 FA             ld (var7),hl
  83+ 8A45 67                   ld h,a          ;save reg a - we dont need reg h anymore
  84+ 8A46
  85+ 8A46              ;Now check if its a player, a wall or an Exit or switch,
  86+ 8A46 ED 5B 00 FA          ld de,(player_pos)      ;get player location
  87+ 8A4A 2D                   dec l                   ;put back hl as we inc'd it earlier
  88+ 8A4B 7B                   ld a,e                  ;go back 1 position as we already incremented it
  89+ 8A4C BD                   cp l
  90+ 8A4D 7C                   ld a,h             ;restore reg a for further compares
  91+ 8A4E 20 02                jr nz,go_1          ;no match for a player
  92+ 8A50 3E A6                ld a,$a6           ;set a to  our little man character which is a graphic
  93+ 8A52 FE 20        go_1:   cp ' '
  94+ 8A54 C8                   ret z
  95+ 8A55
  96+ 8A55              ;its a graphic character - assume its a wall no matter what
  97+ 8A55 67                   ld h,a             ;save reg a
  98+ 8A56 3E 0A                ld a,10             ;yellow paper, black ink
  99+ 8A58 32 C7 8A             ld (att),a         ;red ink, blue background
 100+ 8A5B 7C                   ld a,h
 101+ 8A5C
 102+ 8A5C
 103+ 8A5C              ;Now check if its a player, a wall or an Exit or switch
 104+ 8A5C 1E A6                ld e, $a6           ;our little man graphic
 105+ 8A5E BB                   cp e
 106+ 8A5F 28 1B                jr z,go_on          ;do next check
 107+ 8A61
 108+ 8A61              ;check for an exit....
 109+ 8A61 1E C0                ld e,_me            ;exit char = 192
 110+ 8A63 7C                   ld a,h
 111+ 8A64 BB                   cp e               ;needs to be a compare so a is left intact
 112+ 8A65 3E A8                ld a,$a8            ;load exit character
 113+ 8A67 28 13                jr z,go_on
 114+ 8A69              ;
 115+ 8A69              ;a7 check for a switch...
 116+ 8A69 1E 83                ld e,_ms           ;exit char = 192
 117+ 8A6B 7C                   ld a,h
 118+ 8A6C BB                   cp e               ;needs to be a compare so a is left intact
 119+ 8A6D 3E A7                ld a,$a7            ;load exit character
 120+ 8A6F 28 0B                jr z,go_on
 121+ 8A71
 122+ 8A71              ;default to a wall....
 123+ 8A71              carry_on1:
 124+ 8A71 CD AF 98             call set_wall_col   ;set our wall colour
 125+ 8A74 3A 9F 97             ld a,(wallcol)
 126+ 8A77 32 C7 8A             ld (att),a         ;red ink, blue background
 127+ 8A7A 3E B4                ld a,_smallwall         ;return wall char
 128+ 8A7C
 129+ 8A7C
 130+ 8A7C              go_on:
 131+ 8A7C D6 80                sub $80          ;subtract 128 to point to correct graphic char
 132+ 8A7E              ;set char set to udg's
 133+ 8A7E 11 00 FC             ld de,_chars;$fc00
 134+ 8A81 ED 53 C3 8A          ld (base),de
 135+ 8A85 C9                   ret
 136+ 8A86
 137+ 8A86              topbotline:
 138+ 8A86              ;draws a single line of 16 wall chars
 139+ 8A86              ;set char set to udg's
 140+ 8A86 11 00 FC             ld de,$fc00             ;point to udg's
 141+ 8A89 ED 53 C3 8A          ld (base),de
 142+ 8A8D
 143+ 8A8D F5           rep3:   push af
 144+ 8A8E CD A9 8A             call locate             ;set print position
 145+ 8A91              ;set wall colour. Print 1 uses whats stored in (att)
 146+ 8A91 CD AF 98             call set_wall_col   ;set our wall colour
 147+ 8A94 3A 9F 97             ld a,(wallcol)
 148+ 8A97 32 C7 8A             ld (att),a
 149+ 8A9A 3E B4                ld a,_smallwall
 150+ 8A9C D6 80                sub $80
 151+ 8A9E C5                   push bc
 152+ 8A9F CD CB 8A             call print1      ;print the character
 153+ 8AA2 C1                   pop bc
 154+ 8AA3 0C                   inc c
 155+ 8AA4 F1                   pop af
 156+ 8AA5 3D                   dec a
 157+ 8AA6 20 E5                jr nz,rep3        ;exit when a=0
 158+ 8AA8 C9                   ret
 159+ 8AA9
 160+ 8AA9
 161+ 8AA9              ;==================================================
 162+ 8AA9              ;from advanced spectrum machine code book
 163+ 8AA9              ;==================================================
 164+ 8AA9
 165+ 8AA9              ;locate routine for use with print routine
 166+ 8AA9
 167+ 8AA9              ;   entry: b=line  c=column
 168+ 8AA9              ;   preserved = bc
 169+ 8AA9              ;   on exit -   hl = display file address
 170+ 8AA9              ;               de = attr address
 171+ 8AA9              ;               a  = attr (b,c)
 172+ 8AA9              ;   df_cc is altered
 173+ 8AA9
 174+ 8AA9
 175+ 8AA9
 176+ 8AA9                 ; BREAK
 177+ 8AA9 78           locate: ld a,b
 178+ 8AAA E6 18                and $18
 179+ 8AAC 67                   ld h,a
 180+ 8AAD CB F4                set 6,h
 181+ 8AAF 0F                   rrca
 182+ 8AB0 0F                   rrca
 183+ 8AB1 0F                   rrca
 184+ 8AB2 F6 58                or $58
 185+ 8AB4 57                   ld d,a
 186+ 8AB5 78                   ld a,b
 187+ 8AB6 E6 07                and 7
 188+ 8AB8 0F                   rrca
 189+ 8AB9 0F                   rrca
 190+ 8ABA 0F                   rrca
 191+ 8ABB 81                   add a,c
 192+ 8ABC 6F                   ld l,a
 193+ 8ABD 5F                   ld e,a
 194+ 8ABE 1A                   ld a,(de)
 195+ 8ABF 22 84 5C             ld (df_cc),hl
 196+ 8AC2 C9                   ret
 197+ 8AC3
 198+ 8AC3              ;here is the new print routine
 199+ 8AC3
 200+ 8AC3              ;   entry: a=char code to be printed
 201+ 8AC3              ;   preserved = c
 202+ 8AC3              ;   exit -  b=0
 203+ 8AC3              ;           de = attribute address
 204+ 8AC3
 205+ 8AC3              ; variable base is initialised to 3c00h = normal spectrum character set
 206+ 8AC3              ; att is place immediately before mask so that
 207+ 8AC3              ; the two can be accessed with one ld instuction
 208+ 8AC3
 209+ 8AC3 00 3C        base    dw $3c00 ; start of speccy characer set
 210+ 8AC5 00 40        dfcc    dw $4000 ;start of spectrum screen mem
 211+ 8AC7              ;dfcc    dw $0000 ;start of spectrum screen mem slot 0
 212+ 8AC7 38 00        att     dw $38
 213+ 8AC9 00 00        mask    dw 0
 214+ 8ACB
 215+ 8ACB
 216+ 8ACB
 217+ 8ACB              print1: ; construct character data address
 218+ 8ACB
 219+ 8ACB
 220+ 8ACB 6F                   ld l,a
 221+ 8ACC 26 00                ld h,0
 222+ 8ACE 29                   add hl,hl
 223+ 8ACF 29                   add hl,hl
 224+ 8AD0 29                   add hl,hl
 225+ 8AD1 ED 5B C3 8A          ld de,(base)                ;char set data
 226+ 8AD5 19                   add hl,de
 227+ 8AD6
 228+ 8AD6                      ; take display file address
 229+ 8AD6 ED 5B 84 5C          ld de,(df_cc)
 230+ 8ADA 06 08                ld b,8
 231+ 8ADC
 232+ 8ADC                      ; print character row by row
 233+ 8ADC 7E           nxtrow: ld a,(hl)
 234+ 8ADD 12                   ld (de),a
 235+ 8ADE 23                   inc hl
 236+ 8ADF 14                   inc d
 237+ 8AE0 10 FA                djnz nxtrow
 238+ 8AE2
 239+ 8AE2                      ; construct attribute address
 240+ 8AE2 7A                   ld a,d
 241+ 8AE3 0F                   rrca
 242+ 8AE4 0F                   rrca
 243+ 8AE5 0F                   rrca
 244+ 8AE6 3D                   dec a
 245+ 8AE7 E6 03                and 3
 246+ 8AE9 F6 58                or $58
 247+ 8AEB 57                   ld d,a
 248+ 8AEC 2A C7 8A             ld hl,(att)    ; h=mask, l=attribute
 249+ 8AEF
 250+ 8AEF                      ; take old attribute
 251+ 8AEF 1A                   ld a,(de)
 252+ 8AF0
 253+ 8AF0                      ; construct new one
 254+ 8AF0 AD                   xor l
 255+ 8AF1 A4                   and h
 256+ 8AF2 AD                   xor l
 257+ 8AF3
 258+ 8AF3                      ; replace attribute
 259+ 8AF3 12                   ld (de),a
 260+ 8AF4
 261+ 8AF4                      ; finally, set dfcc to next print position
 262+ 8AF4 21 84 5C             ld hl,df_cc
 263+ 8AF7 34                   inc (hl)
 264+ 8AF8 C0                   ret nz
 265+ 8AF9 23                   inc hl
 266+ 8AFA 7E                   ld a,(hl)
 267+ 8AFB C6 08                add a,8
 268+ 8AFD 77                   ld (hl),a
 269+ 8AFE C9                   ret
 270+ 8AFF
 271+ 8AFF
 272+ 8AFF              ; print routine - print screen at c000 to 16384
 273+ 8AFF              ; uses locate routine
 274+ 8AFF
 275+ 8AFF              my_print_info:  ; set dfcc to line , column
 276+ 8AFF
 277+ 8AFF              ;1st, check if we are printing a udg
 278+ 8AFF              ;reg a holds our character to print. udg's are char $90 onwards
 279+ 8AFF
 280+ 8AFF              ; the carry will be set if the cp argument > than a
 281+ 8AFF
 282+ 8AFF
 283+ 8AFF              setbase:
 284+ 8AFF F5                   push af
 285+ 8B00 C5                   push bc
 286+ 8B01 E5                   push hl
 287+ 8B02              ;        ld a,$3c                ;point to spectrum rom
 288+ 8B02              ;        ld (base+1),a
 289+ 8B02              ;        sub a                   ; make zero
 290+ 8B02              ;        ld (base),a
 291+ 8B02
 292+ 8B02              ;point to our character set
 293+ 8B02 21 00 C6             ld hl,charset_1
 294+ 8B05 25                   dec h
 295+ 8B06 22 C3 8A             ld (base),hl
 296+ 8B09
 297+ 8B09                      ;we are now pointing at the rom char set
 298+ 8B09 0A                   ld a,(bc)               ;get our char to print
 299+ 8B0A               ;       nop ;or a
 300+ 8B0A CB 7F                bit 7,a                 ;are we printing udg's?
 301+ 8B0C                      ; bit 7=1 so zero =false
 302+ 8B0C 28 09                jr z,ret_1              ;exit if theres no graphic to print
 303+ 8B0E D6 80                sub $80                 ;point to the first character of udg's
 304+ 8B10 01 00 F8             ld bc,udg_start         ;start of udg's in memory
 305+ 8B13 ED 43 C3 8A          ld (base),bc
 306+ 8B17                      ;ld hl,(base)
 307+ 8B17 E1           ret_1   pop hl
 308+ 8B18 C1                   pop bc
 309+ 8B19 F1                   pop af
 310+ 8B1A
 311+ 8B1A C9                   ret
 312+ 8B1B
 313+ 8B1B              my_print:
 314+ 8B1B 06 00        lp4:    ld b,0
 315+ 8B1D 0E 00                ld c,0
 316+ 8B1F              ;        ld a,120
 317+ 8B1F
 318+ 8B1F              ;        ld (att),a
 319+ 8B1F CD A9 8A             call locate ; set print pos and attribute
 320+ 8B22                      ;call cls - clear the screen
 321+ 8B22
 322+ 8B22                      ;loop 24 times
 323+ 8B22                      ;ld a,2
 324+ 8B22                      ;push af
 325+ 8B22
 326+ 8B22                      ; set base pointer to  character set
 327+ 8B22                      ; starts at space char code 0
 328+ 8B22                ;      ld hl,(base)
 329+ 8B22                      ;ld (base),hl
 330+ 8B22 97                   sub a
 331+ 8B23                    ;make reg a=0
 332+ 8B23 32 6D 8B             ld (lc),a   ;line counter
 333+ 8B26
 334+ 8B26                      ; remember, print1 preserves the c register
 335+ 8B26 01 FF BF             ld bc, $bfff ;c000  ; 1 less than display in memory
 336+ 8B29 2E 00                ld l,0
 337+ 8B2B              lp3:
 338+ 8B2B
 339+ 8B2B C5                   push bc
 340+ 8B2C E5                   push hl
 341+ 8B2D 03                   inc bc
 342+ 8B2E 0A                   ld a,(bc)
 343+ 8B2F CD FF 8A             call setbase ; set char set
 344+ 8B32 3E F0                ld a,240
 345+ 8B34 32 C7 8A             ld (att),a          ;set black ink and paper
 346+ 8B37 0A                   ld a,(bc)           ;reload our character to print
 347+ 8B38 2A C3 8A             ld hl,(base)
 348+ 8B3B
 349+ 8B3B              ;charset test
 350+ 8B3B 2A 00 C6             ld hl,(charset_1)
 351+ 8B3E
 352+ 8B3E CD CB 8A             call print1  ; print char in a
 353+ 8B41 E1                   pop hl
 354+ 8B42 C1                   pop bc
 355+ 8B43
 356+ 8B43 03                   inc bc
 357+ 8B44 2C                   inc l
 358+ 8B45 7D                   ld a,l
 359+ 8B46 FE 19                cp 25       ; print 26 chars
 360+ 8B48 C2 2B 8B             jp nz,lp3
 361+ 8B4B
 362+ 8B4B C5                   push bc
 363+ 8B4C E1                   pop hl
 364+ 8B4D 16 00                ld d,0
 365+ 8B4F 1E 08                ld e,8
 366+ 8B51 19                   add hl,de
 367+ 8B52
 368+ 8B52 E5                   push hl
 369+ 8B53 C1                   pop bc
 370+ 8B54 2E 00                ld l,0       ;start at 0 for the next line
 371+ 8B56 3A 6D 8B             ld a,(lc)
 372+ 8B59 3C                   inc  a
 373+ 8B5A
 374+ 8B5A              ;we only draw the first 24 columns x 24 lines
 375+ 8B5A FE 18                cp 24      ; x lines to print
 376+ 8B5C
 377+ 8B5C C8                   ret z
 378+ 8B5D
 379+ 8B5D              ; reset position to next line. locate can do attributes too
 380+ 8B5D D9                   exx
 381+ 8B5E E5                   push hl
 382+ 8B5F 32 6D 8B             ld (lc),a  ; save counter
 383+ 8B62 47                   ld b,a
 384+ 8B63 0E 00                ld c,0
 385+ 8B65 CD A9 8A             call locate
 386+ 8B68 E1                   pop hl
 387+ 8B69 D9                   exx
 388+ 8B6A C3 2B 8B             jp lp3
 389+ 8B6D
 390+ 8B6D
 391+ 8B6D 00           lc      db 0
 392+ 8B6E
 393+ 8B6E
 394+ 8B6E              ;============================================
 395+ 8B6E              ; draw player direction text on screen
 396+ 8B6E              ;===========================================
 397+ 8B6E
 398+ 8B6E              ; loop 7 times for 7 lines
 399+ 8B6E              ; start at column 14
 400+ 8B6E              ; print 7 characters
 401+ 8B6E
 402+ 8B6E              compass:
 403+ 8B6E              ;first colour in the background - 7 lines starting at 17,25
 404+ 8B6E              ;              ld b,17           ;row 21
 405+ 8B6E              ;              ld c,25           ;col 25
 406+ 8B6E
 407+ 8B6E              ;loc_1:        push bc
 408+ 8B6E              ;              call locate    ;set print position
 409+ 8B6E              ;              pop bc
 410+ 8B6E              ;              ;de holds the attribute position
 411+ 8B6E              ;              ld a,151          ;set colour
 412+ 8B6E              ;              call colour1
 413+ 8B6E              ;              ld a,23
 414+ 8B6E              ;              sub b
 415+ 8B6E              ;              inc b
 416+ 8B6E              ;              jr nz,loc_1
 417+ 8B6E              ;              jr draw_compass
 418+ 8B6E
 419+ 8B6E              ;colour1:      ld l,7
 420+ 8B6E              ;colour2:      ld (de),a
 421+ 8B6E              ;              inc de
 422+ 8B6E              ;              dec l
 423+ 8B6E              ;              ret z
 424+ 8B6E              ;              jr colour2
 425+ 8B6E
 426+ 8B6E              ;now draw the compass
 427+ 8B6E 06 17        draw_compass: ld b,23           ;row 21
 428+ 8B70 0E 19                      ld c,25           ;col 25
 429+ 8B72
 430+ 8B72 C5                         push bc
 431+ 8B73 CD 9D 8B                   call print_pos    ;set print position
 432+ 8B76 C1                         pop bc
 433+ 8B77
 434+ 8B77              ; now print our characters
 435+ 8B77 11 E4 8B                   ld de,c_dat-1       ;data start
 436+ 8B7A 1A           loop1:        ld a,(de)
 437+ 8B7B FE 78                      cp 'x';120            ; = "x" data end
 438+ 8B7D CA 8F 8B                   jp z,nxt_line
 439+ 8B80 FE 46                      cp 'F';70             ; "F" finished so exit
 440+ 8B82 CA A8 8B                   jp z, do_exit
 441+ 8B85
 442+ 8B85 D5                         push de
 443+ 8B86 C5                         push bc
 444+ 8B87 CD CB 8A                   call print1       ; print the character
 445+ 8B8A C1                         pop bc
 446+ 8B8B D1                         pop de
 447+ 8B8C
 448+ 8B8C 1B                         dec de
 449+ 8B8D 18 EB                      jr loop1
 450+ 8B8F
 451+ 8B8F C5           nxt_line:     push bc
 452+ 8B90 D5                         push de
 453+ 8B91 0E 19                      ld c,25
 454+ 8B93 05                         dec b
 455+ 8B94 CD 9D 8B                   call print_pos
 456+ 8B97 D1                         pop de
 457+ 8B98 C1                         pop bc
 458+ 8B99 1B                         dec de
 459+ 8B9A 05                         dec b
 460+ 8B9B 18 DD                      jr loop1
 461+ 8B9D
 462+ 8B9D              ; set print position
 463+ 8B9D C5           print_pos:    push bc
 464+ 8B9E CD A9 8A                   call locate
 465+ 8BA1 3E A5                      ld a,165          ;set ink and paper colour
 466+ 8BA3 32 C7 8A                   ld (att),a
 467+ 8BA6 C1                         pop bc
 468+ 8BA7 C9                         ret
 469+ 8BA8
 470+ 8BA8 CD E5 8B     do_exit:  call show_dir     ; highlight player direction
 471+ 8BAB
 472+ 8BAB C9                         ret
 473+ 8BAC
 474+ 8BAC
 475+ 8BAC 46                   db "F"
 476+ 8BAD              ;        db "x       "
 477+ 8BAD 78 73 73 61          db "xssapmoC"
 477+ 8BB1 70 6D 6F 43
 478+ 8BB5 78 20 20 20          db "x       "
 478+ 8BB9 20 20 20 20
 479+ 8BBD 78 20 20 20          db "x   N   "
 479+ 8BC1 4E 20 20 20
 480+ 8BC5 78 20 20 20          db "x   |   "
 480+ 8BC9 7C 20 20 20
 481+ 8BCD 78 20 45 2D          db "x E-+-W "
 481+ 8BD1 2B 2D 57 20
 482+ 8BD5 78 20 20 20          db "x   |   "
 482+ 8BD9 7C 20 20 20
 483+ 8BDD 78 20 20 20          db "x   S   "
 483+ 8BE1 53 20 20 20
 484+ 8BE5              c_dat:
 485+ 8BE5
 486+ 8BE5
 487+ 8BE5              ;===========================================
 488+ 8BE5              ; highlight player direction
 489+ 8BE5              ;===========================================
 490+ 8BE5
 491+ 8BE5              ;l4085 holdsplayer view  direction
 492+ 8BE5
 493+ 8BE5              ;00= north, 01=west, 02=south, 03=east
 494+ 8BE5
 495+ 8BE5 3E A5        show_dir:     ld a,165;185             ;white txt, brown background
 496+ 8BE7              ;now clear the settings to none
 497+ 8BE7 21 FC 5A                   ld hl,23228+64       ;s
 498+ 8BEA 77                         ld (hl),a
 499+ 8BEB 21 BE 5A                   ld hl,23166+64       ;e
 500+ 8BEE 77                         ld (hl),a
 501+ 8BEF 21 BA 5A                   ld hl,23162+64       ;w
 502+ 8BF2 77                         ld (hl),a
 503+ 8BF3 21 7C 5A                   ld hl,23100+64       ;n
 504+ 8BF6 77                         ld (hl),a
 505+ 8BF7
 506+ 8BF7
 507+ 8BF7              ;now colour the direction indicator
 508+ 8BF7
 509+ 8BF7 3A 08 FA                   ld a,(player_dir)
 510+ 8BFA FE 00                      cp 0              ;n
 511+ 8BFC C2 05 8C                   jp nz,c1
 512+ 8BFF 21 7C 5A                   ld hl,23100+64       ;n
 513+ 8C02 C3 1C 8C                   jp poke_it
 514+ 8C05 FE 01        c1:           cp 1              ;w
 515+ 8C07 20 06                      jr nz,c2
 516+ 8C09 21 BA 5A                   ld hl,23162+64       ;w
 517+ 8C0C C3 1C 8C                   jp poke_it
 518+ 8C0F FE 02        c2:           cp 2              ;s
 519+ 8C11 20 06                      jr nz,c3
 520+ 8C13 21 FC 5A                   ld hl,23228+64       ;s
 521+ 8C16 C3 1C 8C                   jp poke_it
 522+ 8C19              ;it must be east                ;e
 523+ 8C19 21 BE 5A     c3            ld hl,23166+64       ;e
 524+ 8C1C
 525+ 8C1C 3E 96        poke_it:      ld a,150          ;cyan paper, black writing
 526+ 8C1E 77                         ld(hl),a
 527+ 8C1F C9           q1:           ret
 528+ 8C20
# file closed: src/2-rd3dmazeV6.asm
 448  8C20                  INCLUDE "3-rd3dmazeV6.asm" ; check walls in front of player
# file opened: src/3-rd3dmazeV6.asm
   1+ 8C20
   2+ 8C20
   3+ 8C20              ;##################################################
   4+ 8C20              ; Start to draw the maze in memory
   5+ 8C20              ;##################################################
   6+ 8C20
   7+ 8C20              ;hl will hold the player location in the maze
   8+ 8C20
   9+ 8C20              ;now draw the maze position
  10+ 8C20
  11+ 8C20              ;1 get our location from player_pos 16 bit but only the low byte used
  12+ 8C20              ;  since our maze is max 256 bytes.
  13+ 8C20              ;2 get our direction from player_dir 0 - 3 only.
  14+ 8C20              ;  0=north
  15+ 8C20              ;  1=west
  16+ 8C20              ;  2=south
  17+ 8C20              ;  3=east
  18+ 8C20              ;3 work out how far away the wall is in front of our view-
  19+ 8C20              ;  if its greater or less that 6 blocks since thats the max depth
  20+ 8C20              ;  we will draw on screen (6 blocks)
  21+ 8C20              ;4 start drawing from the back to the front
  22+ 8C20              ;  so everything is overwritten (separate routine).
  23+ 8C20              ;
  24+ 8C20
  25+ 8C20
  26+ 8C20              ;screen is built in memory from c000 (49152) using characters
  27+ 8C20
  28+ 8C20              get_distance:
  29+ 8C20
  30+ 8C20 2A 00 FA                   ld hl,(player_pos)    ;get player location
  31+ 8C23
  32+ 8C23 3A 08 FA                   ld a,(player_dir)     ; get player direction
  33+ 8C26
  34+ 8C26
  35+ 8C26              ;00= north, 01=west, 02=south, 03=east
  36+ 8C26
  37+ 8C26              ;if 0 decrease by -16 n
  38+ 8C26              ;if 1 decrease by -1  w
  39+ 8C26              ;if 2 increase by +16 s
  40+ 8C26              ;if 3 increase by +1  e
  41+ 8C26
  42+ 8C26              ;when checking distance, if you are looking south and your current location
  43+ 8C26              ;is >240 then you are at the south wall.
  44+ 8C26
  45+ 8C26
  46+ 8C26              ;if you are at the top of the maze facing north, and you current location
  47+ 8C26              ; is <16 you are at the far north wall of the maze
  48+ 8C26
  49+ 8C26              ;for east amd west you can detect a wall is chr $80 except for 255 (bottom
  50+ 8C26              ; right) as the next  right location is outside the maze.
  51+ 8C26
  52+ 8C26              ; find out how far away we are from a wall
  53+ 8C26                      ;are we facing north?
  54+ 8C26 FE 00                      cp 0
  55+ 8C28 CA D0 8C                   jp z, north2
  56+ 8C2B FE 01                      cp 1
  57+ 8C2D CA CA 8C                   jp z, west2
  58+ 8C30 FE 02                      cp 2
  59+ 8C32 CA D6 8C                   jp z, south2
  60+ 8C35                      ;it must be facing east if we get heret
  61+ 8C35
  62+ 8C35                      ;check if were at the bottom right hand corner (255)
  63+ 8C35                      ;if so we implicitly have a wall.
  64+ 8C35
  65+ 8C35
  66+ 8C35
  67+ 8C35                      ;we are facing east
  68+ 8C35 11 01 00                   ld de, $0001      ; (+1) to go to next line in front of us
  69+ 8C38
  70+ 8C38              ;clear maxview flag and data
  71+ 8C38              check_dist:
  72+ 8C38 3E 06                      ld a,6
  73+ 8C3A 32 02 FA                   ld (maxview),a
  74+ 8C3D 3A 03 FA                   ld a,(flags)
  75+ 8C40 CB 87                      res 0,a
  76+ 8C42 32 03 FA                   ld (flags),a
  77+ 8C45
  78+ 8C45 06 FF                      ld b,255            ;make accum 1 - counter
  79+ 8C47
  80+ 8C47              ;check if maxview set - if so, dont check for wall
  81+ 8C47              ;in front of player anymore as there alreay is a wall set
  82+ 8C47
  83+ 8C47 3A 03 FA     loop2:        ld a,(flags)
  84+ 8C4A CB 47                      bit 0,a           ;if 1, then already set
  85+ 8C4C C2 6F 8C                   jp nz,check_mh
  86+ 8C4F
  87+ 8C4F 7E                         ld a,(hl)         ; this is the furthest point we can see
  88+ 8C50 FE 80                      cp _mw ;=128      ;is it a wall here
  89+ 8C52 28 0A                      jr z,j2
  90+ 8C54
  91+ 8C54              ;check for an exit wall and treat as if its a wall
  92+ 8C54 FE C0                      cp _me
  93+ 8C56 CA 5E 8C                   jp z, j2   ;if no wall check for end wall
  94+ 8C59
  95+ 8C59              ;check for an switch wall and treat as if its a wall
  96+ 8C59 FE 83                      cp _ms
  97+ 8C5B C2 6F 8C                   jp nz, check_mh   ;if no wall check for end wall
  98+ 8C5E
  99+ 8C5E 78           j2:           ld a,b            ;there is a wall if we get here
 100+ 8C5F                            ;is it 255? if so make it 0
 101+ 8C5F 3C                         inc a             ;if a=0, it was 255
 102+ 8C60 CA 64 8C                   jp z,j1
 103+ 8C63 3D                         dec a             ;put back to original value
 104+ 8C64
 105+ 8C64 32 02 FA     j1:           ld (maxview),a    ;save how far we can actually see
 106+ 8C67 3A 03 FA                   ld a,(flags)
 107+ 8C6A CB C7                      set 0,a
 108+ 8C6C 32 03 FA                   ld (flags),a      ;set that we have set the flag
 109+ 8C6F
 110+ 8C6F
 111+ 8C6F 7E           check_mh:     ld a,(hl)
 112+ 8C70 FE 81                      cp _mh ;=129      ; is it an end wall?
 113+ 8C72 28 39                      jr z, end_loop    ; if yes, exit now
 114+ 8C74 04                         inc b
 115+ 8C75
 116+ 8C75              ;check if we are at location 0 in the maze - if so do nothing
 117+ 8C75 7D                         ld a,l
 118+ 8C76 3C                         inc a
 119+ 8C77 3D                         dec a             ;zero flag set if = to zero
 120+ 8C78 CA AA 8C                   jp z,end_loop2
 121+ 8C7B
 122+ 8C7B              ;##########################################################
 123+ 8C7B
 124+ 8C7B              ;now check if we are at the top end of the maze or the bottom
 125+ 8C7B              ;end of the maze as there are no blocks to check for there.
 126+ 8C7B              ;do bottom end first.
 127+ 8C7B
 128+ 8C7B
 129+ 8C7B 3A 08 FA                   ld a,(player_dir)
 130+ 8C7E 3D                         dec a                 ;is it 0 which = north
 131+ 8C7F 3C                         inc a
 132+ 8C80 C2 8E 8C                   jp nz,cont_6a          ;carry on if not at north wall
 133+ 8C83
 134+ 8C83                            ;are we trying to read data outside the 256 byte boundary?
 135+ 8C83 7D                         ld a,l
 136+ 8C84 FE 11                      cp 17
 137+ 8C86 D2 A1 8C                   jp nc,cont_9
 138+ 8C89
 139+ 8C89 19                         add hl,de         ;now jump to next location in front of us
 140+ 8C8A 78                         ld a,b            ;get our depth
 141+ 8C8B C3 AD 8C                   jp end_loop       ;exit routine
 142+ 8C8E
 143+ 8C8E
 144+ 8C8E 3A 08 FA     cont_6a       ld a,(player_dir)
 145+ 8C91 D6 02                      sub 2              ;are we facing south?
 146+ 8C93 C2 A1 8C                   jp nz,cont_9        ;z means yes
 147+ 8C96
 148+ 8C96 7D                         ld a,l
 149+ 8C97 FE F0                      cp 240
 150+ 8C99 DA A1 8C                   jp c,cont_9      ;carry set if cp >a
 151+ 8C9C
 152+ 8C9C 19                         add hl,de         ;now jump to next location in front of us
 153+ 8C9D 78                         ld a,b            ;get our depth
 154+ 8C9E C3 AD 8C                   jp end_loop       ;exit routine
 155+ 8CA1
 156+ 8CA1
 157+ 8CA1              ;###########################################################
 158+ 8CA1
 159+ 8CA1 78           cont_9        ld a,b
 160+ 8CA2 FE 06                      cp 6              ;only do a max of 6 loops as
 161+ 8CA4 19                         add hl,de         ;now jump to next location in front of
 162+ 8CA5 20 A0                      jr nz,loop2
 163+ 8CA7 C3 AD 8C                   jp end_loop
 164+ 8CAA                      ;we have hit a wall or 6 loops
 165+ 8CAA
 166+ 8CAA 06 FF        end_loop2:    ld b,255          ;we are here as we are at the end wall
 167+ 8CAC                                              ;top and bottom of the maze so make our
 168+ 8CAC                                              ;depth 0
 169+ 8CAC 04           end_loop1:    inc b
 170+ 8CAD
 171+ 8CAD              end_loop:
 172+ 8CAD              ;first check if we hit an end wall - our maxview flag will =0
 173+ 8CAD 3A 03 FA                   ld a,(flags)
 174+ 8CB0 CB 47                      bit 0,a
 175+ 8CB2 C2 B9 8C                   jp nz,cont_8      ;continue on if not 0
 176+ 8CB5 78                         ld a,b
 177+ 8CB6 32 02 FA                   ld (maxview),a    ;if it is make maxview 0
 178+ 8CB9              cont_8:
 179+ 8CB9              ;check if b=255, if so, make it 0
 180+ 8CB9 04                         inc b
 181+ 8CBA CA BE 8C                   jp z,here1
 182+ 8CBD 05                         dec b             ;put back original value
 183+ 8CBE 78           here1:        ld a,b
 184+ 8CBF 32 06 FA                   ld (depth),a         ; -save how far we can see
 185+ 8CC2 ED 53 09 FA                ld (de_count),de     ;save the de value for adding / subtracting later
 186+ 8CC6 22 25 FA                   ld (furthest_point),hl
 187+ 8CC9 C9                         ret
 188+ 8CCA
 189+ 8CCA              west2:
 190+ 8CCA 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the left
 191+ 8CCD C3 38 8C                   jp check_dist
 192+ 8CD0
 193+ 8CD0              north2:
 194+ 8CD0 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind
 195+ 8CD3 C3 38 8C                   jp check_dist
 196+ 8CD6              south2:
 197+ 8CD6 11 10 00                   ld de, $0010      ; (+16) to go to next line to the left
 198+ 8CD9 C3 38 8C                   jp check_dist
 199+ 8CDC
 200+ 8CDC C9                         ret
 201+ 8CDD
 202+ 8CDD
 203+ 8CDD              ;############################################
 204+ 8CDD              ; ld de with the value to use to check the walls in front
 205+ 8CDD              ; or the sides of the player
 206+ 8CDD              ;############################################
 207+ 8CDD
 208+ 8CDD              ; reg a must contain the direction you want to look at
 209+ 8CDD
 210+ 8CDD              load_de:
 211+ 8CDD 3A 08 FA                 ld a,(player_dir)     ; get player direction
 212+ 8CE0              ; 00= north, 01=west, 02=south, 03=east
 213+ 8CE0
 214+ 8CE0              ;if 0 decrease by -16 n
 215+ 8CE0              ;if 1 decrease by -1  w
 216+ 8CE0              ;if 2 increase by +16 s
 217+ 8CE0              ;if 3 increase by +1  e
 218+ 8CE0
 219+ 8CE0              ;when checking distance, if you are looking south and your current location
 220+ 8CE0              ;is >240 then you are at the south wall.
 221+ 8CE0
 222+ 8CE0
 223+ 8CE0              ;if you are at the top of the maze facing north, and you current location
 224+ 8CE0              ; is <16 you are at the far north wall of the maze
 225+ 8CE0
 226+ 8CE0              ;for east and west you can detect a wall is $80 except for 255 (bottom
 227+ 8CE0              ; right) as the next  right location is outside the maze.
 228+ 8CE0
 229+ 8CE0              ; find out how far away we are from a wall
 230+ 8CE0                      ;are we facing north?
 231+ 8CE0 FE 00                      cp 0
 232+ 8CE2 C2 F7 8C                   jp nz,de_1
 233+ 8CE5 11 FF FF                   ld de, $ffff  ; (-1) to go to the left of north
 234+ 8CE8 ED 53 0B FA                ld (left),de
 235+ 8CEC 11 01 00                   ld de, $0001  ; (+1) to go to next line right  - north
 236+ 8CEF ED 53 0D FA                ld (right),de
 237+ 8CF3 11 10 00                   ld de, $0010  ; (+16) to go to next line behind - north
 238+ 8CF6 C9                         ret
 239+ 8CF7
 240+ 8CF7 FE 01        de_1:         cp 1          ;west
 241+ 8CF9 C2 0E 8D                   jp nz,de_2
 242+ 8CFC 11 10 00                   ld de, $0010  ; (+16) to go to next line to the left - west
 243+ 8CFF ED 53 0B FA                ld (left),de
 244+ 8D03 11 F0 FF                   ld de, $fff0  ; (-16) to go to next line to the right - west
 245+ 8D06 ED 53 0D FA                ld (right),de
 246+ 8D0A 11 01 00                   ld de, $0001  ; (+1) to go to next line behind - west
 247+ 8D0D C9                         ret
 248+ 8D0E
 249+ 8D0E FE 02        de_2:         cp 2          ; south
 250+ 8D10 C2 25 8D                   jp nz,de_3
 251+ 8D13 11 01 00                   ld de, $001  ; (+1) to go to next line to the left - south
 252+ 8D16 ED 53 0B FA                ld (left),de
 253+ 8D1A 11 FF FF                   ld de, $ffff      ; (-1) to go to next line to the right - south
 254+ 8D1D ED 53 0D FA                ld (right),de
 255+ 8D21 11 F0 FF                   ld de, $fff0      ; (-16) to go to next line behind - south
 256+ 8D24 C9                         ret
 257+ 8D25
 258+ 8D25                            ;we must be facing east if we get here
 259+ 8D25 11 F0 FF     de_3:         ld de, $fff0      ; (-16) to go to next line left - east
 260+ 8D28 ED 53 0B FA                ld (left),de
 261+ 8D2C 11 10 00                   ld de, $0010      ; (+16) to go to next line right - east
 262+ 8D2F ED 53 0D FA                ld (right),de
 263+ 8D33 11 FF FF                   ld de, $ffff      ; (-1) to go to next line behind - east
 264+ 8D36 C9                         ret
 265+ 8D37
 266+ 8D37
 267+ 8D37              ;#######################################################
 268+ 8D37              ;load walk - load de with the amount to jump in the maze
 269+ 8D37              ;as we walk forward
 270+ 8D37              ;#######################################################
 271+ 8D37
 272+ 8D37              load_walk:
 273+ 8D37 3A 08 FA                   ld a,(player_dir)   ;find out which way we are looking
 274+ 8D3A
 275+ 8D3A                            ;are we facing north?
 276+ 8D3A FE 00                      cp 0
 277+ 8D3C C2 43 8D                   jp nz,de1
 278+ 8D3F 11 F0 FF                   ld de, $fff0 ; (-16) to go to next line behind - north
 279+ 8D42 C9                         ret
 280+ 8D43
 281+ 8D43 FE 01        de1:          cp 1          ;west
 282+ 8D45 C2 4C 8D                   jp nz,de2
 283+ 8D48 11 FF FF                   ld de, $ffff  ; (-1) to go to next line behind - west
 284+ 8D4B C9                         ret
 285+ 8D4C
 286+ 8D4C FE 02        de2:          cp 2          ; south
 287+ 8D4E C2 55 8D                   jp nz,de3
 288+ 8D51 11 10 00                   ld de, $0010     ; (+16) to go to next line behind - south
 289+ 8D54 C9                         ret
 290+ 8D55
 291+ 8D55                            ;we must be facing east if we get here
 292+ 8D55 11 01 00     de3:          ld de, $0001      ; (+1) to go to next line behind - east
 293+ 8D58 C9                         ret
 294+ 8D59
 295+ 8D59
 296+ 8D59
 297+ 8D59              ;#################################################################################
 298+ 8D59              ;DOOR & SWITCH DRAWING ROUTINES
 299+ 8D59
 300+ 8D59              ;#################################################################################
 301+ 8D59              ;see if we need to draw an open or closed door
 302+ 8D59
 303+ 8D59              ; show door type = 0 = front, 1 = side
 304+ 8D59
 305+ 8D59              draw_door:   ;check to see if we need to show the exit door
 306+ 8D59                           ;door will always face NORTH.
 307+ 8D59 AF                        xor a                  ;make reg a zero to say no door
 308+ 8D5A 32 2A FA                  ld (show_exit),a
 309+ 8D5D                           ;are we facing south?
 310+ 8D5D 3A 08 FA                  ld a,(player_dir)
 311+ 8D60 D6 02                     sub 2                  ;2 = south
 312+ 8D62 20 28                     jr nz,check_east      ;if not check if door is to our right hand side
 313+ 8D64                           ;we must be facing south and be in front of the door
 314+ 8D64                           ;dec a
 315+ 8D64                           ;ld (show_exit),a
 316+ 8D64 2A 00 FA                  ld hl,(player_pos)
 317+ 8D67 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 318+ 8D6A 19                        add hl,de
 319+ 8D6B 7E                        ld a,(hl)
 320+ 8D6C FE C0                     cp _me                 ;is it our DOOR?
 321+ 8D6E 20 1C                     jr nz,check_east      ;if not check if door is to our right hand side
 322+ 8D70                           ;YES its a door - so draw it - but only if we are looking south
 323+ 8D70 3A 2B FA                  ld a,(switch_pulled)
 324+ 8D73 A7                        and a
 325+ 8D74 28 0B                     jr z,not_open
 326+ 8D76 CD 6E 85                  call  draw_exit_door_open
 327+ 8D79                           ;print the door message
 328+ 8D79 DD 21 6C 82               ld ix,message_leave
 329+ 8D7D CD D4 81                  CALL print_message
 330+ 8D80 C9                        ret
 331+ 8D81 CD AA 83     not_open:    call draw_exit_door_closed
 332+ 8D84
 333+ 8D84                           ;print the door message
 334+ 8D84 DD 21 38 82               ld ix,message_closed        ;exit_closed
 335+ 8D88 CD D4 81                  CALL print_message
 336+ 8D8B C9                        ret
 337+ 8D8C
 338+ 8D8C              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 339+ 8D8C              check_east:
 340+ 8D8C                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 341+ 8D8C                           ; so we have to be facing EAST
 342+ 8D8C 3A 08 FA                  ld a,(player_dir)
 343+ 8D8F D6 03                     sub 3              ;EAST = 3
 344+ 8D91 C0                        ret nz             ;exit as theres no door to our right
 345+ 8D92
 346+ 8D92 2A 00 FA                  ld hl,(player_pos)
 347+ 8D95 23                        inc hl             ;move test point to 1 place in front of us
 348+ 8D96 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 349+ 8D99 19                        add hl,de
 350+ 8D9A 7E                        ld a,(hl)
 351+ 8D9B FE C0                     cp _me             ;;is it our DOOR?
 352+ 8D9D C0                        ret nz
 353+ 8D9E                           ;there IS a door and it will always face NORTH and be on our right
 354+ 8D9E                           ;yes its our door - so draw it
 355+ 8D9E
 356+ 8D9E                           ;determine if its open or closed
 357+ 8D9E 3A 2B FA                  ld a,(switch_pulled)
 358+ 8DA1 A7                        and a
 359+ 8DA2 20 04                     jr nz,_open           ;0=closed 1 = open
 360+ 8DA4 CD DB 86                  call draw_door_right_closed
 361+ 8DA7 C9                        ret
 362+ 8DA8 CD C5 87     _open:       call draw_door_right_open
 363+ 8DAB C9                        ret
 364+ 8DAC
 365+ 8DAC              ;#########################################################################################
 366+ 8DAC              ;SWITCH Drawing Routine - I am being very lazy here and copying the code from the door
 367+ 8DAC              ;drawing as its the same thing to do for both the door and switch and  cant be bothered atm to
 368+ 8DAC              ;modify the dor routine and save bytes! (nov 2020)
 369+ 8DAC              ;-----------------------------------------------------------------------------------------
 370+ 8DAC
 371+ 8DAC              draw_switch:
 372+ 8DAC
 373+ 8DAC               ;check to see if we need to show the Switch
 374+ 8DAC                           ;switch will always face NORTH.
 375+ 8DAC                         ;  xor a                  ;make reg a zero to say no switch
 376+ 8DAC                         ;  ld (show_switch),a
 377+ 8DAC                           ;are we facing south?
 378+ 8DAC 3A 08 FA                  ld a,(player_dir)
 379+ 8DAF D6 02                     sub 2                  ;2 = south
 380+ 8DB1 20 D9                     jr nz,check_east      ;if not check if switch is to our right hand side
 381+ 8DB3 2A 00 FA                  ld hl,(player_pos)
 382+ 8DB6 11 10 00                  ld de, $0010           ; (+16) to go to next line in front of us - south
 383+ 8DB9 19                        add hl,de
 384+ 8DBA 7E                        ld a,(hl)
 385+ 8DBB FE 83                     cp _ms                 ;is it our SWITCH?
 386+ 8DBD 20 15                     jr nz,check_sw_east      ;if not check if the SWITCH is to our right hand side
 387+ 8DBF                           ;YES its a switch - so draw it - but only if we are looking south
 388+ 8DBF 3A 2B FA                  ld a,(switch_pulled)
 389+ 8DC2 A7                        and a
 390+ 8DC3 28 0B                     jr z,switch_off
 391+ 8DC5 CD 2C 89                  call  draw_switch_on
 392+ 8DC8                           ;print the switch on message
 393+ 8DC8 DD 21 51 82               ld ix,message_switchon
 394+ 8DCC CD D4 81                  CALL print_message
 395+ 8DCF C9                        ret
 396+ 8DD0
 397+ 8DD0 CD 8B 88     switch_off:  call draw_switch_off
 398+ 8DD3 C9                        ret
 399+ 8DD4
 400+ 8DD4              ;theres no door immediately in front of us but now check if theres a door 1 space in front and to the right of us
 401+ 8DD4              check_sw_east:
 402+ 8DD4                           ;1st check if we are facing East as door will be on our right, 1 space ahead of us
 403+ 8DD4                           ; so we have to be facing EAST
 404+ 8DD4 3A 08 FA                  ld a,(player_dir)
 405+ 8DD7 D6 03                     sub 3              ;EAST = 3
 406+ 8DD9 C0                        ret nz             ;exit as theres no door to our right
 407+ 8DDA
 408+ 8DDA 2A 00 FA                  ld hl,(player_pos)
 409+ 8DDD 23                        inc hl             ;move test point to 1 place in front of us
 410+ 8DDE 11 10 00                  ld de, $0010      ; (+16) to go to next line in front of us - EAST
 411+ 8DE1 19                        add hl,de
 412+ 8DE2 7E                        ld a,(hl)
 413+ 8DE3 FE 83                     cp _ms             ;;is it our DOOR?
 414+ 8DE5 C0                        ret nz
 415+ 8DE6                           ;there IS a door and it will always face NORTH and be on our right
 416+ 8DE6                           ;yes its our door - so draw it
 417+ 8DE6
 418+ 8DE6                           ;determine if its open or closed
 419+ 8DE6 3A 2B FA                  ld a,(switch_pulled)
 420+ 8DE9 A7                        and a
 421+ 8DEA 20 04                     jr nz,open_a           ;0=closed 1 = open
 422+ 8DEC CD CD 89                  call draw_switch_right_closed
 423+ 8DEF C9                        ret
 424+ 8DF0 CD CE 89     open_a:      call draw_switch_right_open
 425+ 8DF3 C9                        ret
 426+ 8DF4
 427+ 8DF4
 428+ 8DF4
# file closed: src/3-rd3dmazeV6.asm
 449  8DF4                  INCLUDE "4-rd3dmazeV6.asm" ; draw left side of maze
# file opened: src/4-rd3dmazeV6.asm
   1+ 8DF4
   2+ 8DF4              ;============================================
   3+ 8DF4              ;start to draw the maze from current location
   4+ 8DF4              ;============================================
   5+ 8DF4
   6+ 8DF4
   7+ 8DF4              draw_left_side:
   8+ 8DF4
   9+ 8DF4
  10+ 8DF4
  11+ 8DF4              ;       (depth) will hold how far we can see - max 6 squares in front of our view
  12+ 8DF4
  13+ 8DF4              ;              ld hl,(player_pos)    ;get player position
  14+ 8DF4
  15+ 8DF4              ;              ld a,l
  16+ 8DF4                      ; if l=255  we are at the bottom right hand corner facing east to a end wall
  17+ 8DF4                      ; if l>240 we are at the south wall
  18+ 8DF4                      ; if l<16 we are at the north wall
  19+ 8DF4
  20+ 8DF4
  21+ 8DF4              ;how do i implement a less-than/greater-than test in assembly?
  22+ 8DF4
  23+ 8DF4              ;a: to compare stuff, simply do a cp, and if the zero flag is set,
  24+ 8DF4              ;a and the argument were equal, else if the carry is set the argument was greater,
  25+ 8DF4              ;and finally, if neither is set, then a must be greater
  26+ 8DF4              ;(cp does nothing to the registers, only the f (flag) register is changed).
  27+ 8DF4
  28+ 8DF4              ;we need to draw from the furthest distance so
  29+ 8DF4              ;point hl to furthest position - only need to use l reg in the subtraction
  30+ 8DF4              ;              ld a,l
  31+ 8DF4              ;              sub a,b           ;will never be >255 or less than 1
  32+ 8DF4              ;hl now points to furthest visible point in front of the player
  33+ 8DF4
  34+ 8DF4
  35+ 8DF4              ;no matter what, always draw layer 6 view so theres always a wall in front of us
  36+ 8DF4
  37+ 8DF4              ;        ld   de,$C177
  38+ 8DF4              ;        ld   a,_topblack
  39+ 8DF4              ;;        ld   a,_topwhitebottomchequer
  40+ 8DF4              ;        ld   (de),a                             ; insert the top of the wall face.
  41+ 8DF4              ;        ld   hl,$0021
  42+ 8DF4              ;        add  hl,de                              ; advance to the next row of the display file.
  43+ 8DF4              ;        ld   (hl),_bottomblack        ; insert the bottom of the wall face.
  44+ 8DF4              ;;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
  45+ 8DF4
  46+ 8DF4              ;draw a complete line of chequerboard to emulate seeing the outside
  47+ 8DF4              ;maze wall regardless of what blocks are seen.
  48+ 8DF4
  49+ 8DF4 21 6A C1             ld hl,$c16A
  50+ 8DF7 11 6B C1             ld de,$C16b              ; offset to row 11, col 0
  51+ 8DFA 01 19 00             ld bc,25
  52+ 8DFD                    ; ld (hl),_topwhitebottomchequer
  53+ 8DFD 36 A2                ld (hl),_bottomblack        ; insert the bottom of the wall face.
  54+ 8DFF
  55+ 8DFF ED B0                ldir
  56+ 8E01 21 8B C1             ld hl,$c18b
  57+ 8E04 11 8C C1             ld de,$C18c              ; offset to row 12, col 0
  58+ 8E07 01 19 00             ld bc,25
  59+ 8E0A                    ; ld (hl),_topchequerbottomwhite
  60+ 8E0A 36 A3                ld (hl),_topblack        ; insert the bottom of the wall face.
  61+ 8E0C ED B0                ldir
  62+ 8E0E
  63+ 8E0E              ;now draw the rest of the left side
  64+ 8E0E
  65+ 8E0E 3A 06 FA                   ld a,(depth)
  66+ 8E11 FE 06                      cp 6
  67+ 8E13 CA 33 8E                   jp z,draw_6	;just draw end middle block perhaps??
  68+ 8E16 FE 05                      cp 5
  69+ 8E18 CA 77 8E                   jp z,draw_5	;only need to draw 3 block + 1 part
  70+ 8E1B FE 04                      cp 4
  71+ 8E1D CA 21 90                   jp z,draw_4	;only need to draw 2 block + 1 part
  72+ 8E20 FE 03                      cp 3
  73+ 8E22 CA 3A 92                   jp z,draw_3	;only need to draw 1 block + 1 part
  74+ 8E25 FE 02                      cp 2
  75+ 8E27 CA CC 93                   jp z,draw_2	;only need to draw 1 block
  76+ 8E2A FE 01                      cp 1
  77+ 8E2C CA 84 94                   jp z,draw_1	;only need to draw 1 block
  78+ 8E2F C3 2D 95                   jp draw_0		;only need to draw edge blocks
  79+ 8E32              ;end of routine
  80+ 8E32 C9                         ret
  81+ 8E33
  82+ 8E33              draw_6:
  83+ 8E33
  84+ 8E33              draw_layer_6:
  85+ 8E33
  86+ 8E33
  87+ 8E33              ;now draw the maze starting at the furthest point we can see
  88+ 8E33              ; i.e. the middle of the display
  89+ 8E33
  90+ 8E33              ; draw section 6
  91+ 8E33              ; --------------
  92+ 8E33              ; hl=maze location being drawn.
  93+ 8E33              ; now determine what to draw for this section.
  94+ 8E33
  95+ 8E33 2A 25 FA             ld hl,(furthest_point)
  96+ 8E36 CD DD 8C             call load_de
  97+ 8E39 19                   add hl,de
  98+ 8E3A 22 25 FA             ld (furthest_point),hl  ;increment for the next layer to draw
  99+ 8E3D
 100+ 8E3D 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
 101+ 8E40 11 77 01             ld   de,$0177           ; offset to row 11 column 12 - the centre of the 3d view.
 102+ 8E43 19                   add  hl,de
 103+ 8E44 E5                   push hl                 ;save it
 104+ 8E45
 105+ 8E45 ED 5B 25 FA          ld   de,(furthest_point); retrieve the maze location.
 106+ 8E49 EB                   ex   de,hl              ; transfer de to hl.
 107+ 8E4A
 108+ 8E4A ED 5B 09 FA          ld de,(de_count)
 109+ 8E4E 19                   add hl,de               ;get the block in front of us from the maze.
 110+ 8E4F
 111+ 8E4F              loop6:
 112+ 8E4F
 113+ 8E4F 7E                   ld a,(hl)
 114+ 8E50 17                   rla
 115+ 8E51 DA 57 8E             jp c,do_wall            ;bit 7 (128)
 116+ 8E54
 117+ 8E54 C3 6D 8E             jp do_no_wall         ; otherwise draw no wall
 118+ 8E57
 119+ 8E57
 120+ 8E57              do_wall:
 121+ 8E57                      ;check if bit 2 is set as thats an end wall
 122+ 8E57                      ;and b must then be changed to 1 to stop drawing more than 1 wall.
 123+ 8E57 17                   rla                     ;rotate next bit into carry.
 124+ 8E58 D2 61 8E             jp nc, draw7
 125+ 8E5B CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 126+ 8E5D 28 02                jr z,draw7
 127+ 8E5F 06 01                ld b,1                  ;set b so we exit on return
 128+ 8E61
 129+ 8E61 D1           draw7   pop de
 130+ 8E62 3E A2                ld   a,_bottomblack
 131+ 8E64 12                   ld   (de),a             ; insert the top of the wall.
 132+ 8E65 21 21 00             ld   hl,$0021
 133+ 8E68 19                   add  hl,de              ; advance to the next row of the display file.
 134+ 8E69 36 A3                ld   (hl),_topblack     ; insert the bottom of the wall.
 135+ 8E6B 18 0A                jr draw_5              ; jump to draw layer 5
 136+ 8E6D
 137+ 8E6D              ; there is a wall so insert chequerboard for the wall face.
 138+ 8E6D
 139+ 8E6D              do_no_wall:
 140+ 8E6D D1                   pop de
 141+ 8E6E                      ;push de
 142+ 8E6E 3E A2                ld   a,_bottomblack;_topwhitebottomchequer
 143+ 8E70 12                   ld   (de),a                             ; insert the top of the wall face.
 144+ 8E71 21 21 00             ld   hl,$0021
 145+ 8E74 19                   add  hl,de                              ; advance to the next row of the display file.
 146+ 8E75 36 A3                ld   (hl),_topblack;_topchequerbottomwhite        ; insert the bottom of the wall face.
 147+ 8E77
 148+ 8E77              ;now got to draw the 5th row of data
 149+ 8E77
 150+ 8E77
 151+ 8E77              ;############################################
 152+ 8E77              ;############################################
 153+ 8E77              ;draw section 5 left
 154+ 8E77              ;############################################
 155+ 8E77              ;############################################
 156+ 8E77
 157+ 8E77              draw_5:
 158+ 8E77              ;ret
 159+ 8E77              ; hl=maze location being drawn.
 160+ 8E77              ; now determine what to draw for this section.
 161+ 8E77
 162+ 8E77              ;first we need to decrement how far we can see to the layer
 163+ 8E77              ;we are working on
 164+ 8E77
 165+ 8E77 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 166+ 8E7A
 167+ 8E7A CD DD 8C             call load_de            ;get left and right and front jump into de reg
 168+ 8E7D 19                   add hl,de               ;jump backwards along the user view 1 space
 169+ 8E7E
 170+ 8E7E 22 25 FA             ld (furthest_point),hl ;re save it
 171+ 8E81
 172+ 8E81 11 FF FF             ld de,$ffff             ;to move the display position -1
 173+ 8E84 ED 53 11 FA          ld (var4),de
 174+ 8E88
 175+ 8E88 ED 5B 0B FA          ld de,(left)
 176+ 8E8C
 177+ 8E8C              ;move the maze location pointer 1 to the left - used for all
 178+ 8E8C              ;remaining blocks to test if there is a wall there or not.
 179+ 8E8C
 180+ 8E8C 19                   add hl,de
 181+ 8E8D 22 15 FA             ld (var6),hl
 182+ 8E90
 183+ 8E90 ED 53 0F FA          ld (var3),de
 184+ 8E94 11 75 01             ld   de,$0175           ; offset to row 11 column 10 - left of  centre of the 3d view.
 185+ 8E97
 186+ 8E97 CD 9D 8E             call do_draw_5
 187+ 8E9A
 188+ 8E9A C3 21 90              jp draw_4               ;now draw the 4th level
 189+ 8E9D
 190+ 8E9D              do_draw_5:
 191+ 8E9D
 192+ 8E9D 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
 193+ 8EA0 19                   add  hl,de
 194+ 8EA1
 195+ 8EA1
 196+ 8EA1              ; draw left half then right half of the display.
 197+ 8EA1
 198+ 8EA1 06 04                ld b,4                ; count for 4 columns left  of maze
 199+ 8EA3
 200+ 8EA3 ED 5B 15 FA          ld de,(var6); retrieve the maze location.
 201+ 8EA7
 202+ 8EA7
 203+ 8EA7
 204+ 8EA7              ;check if we are at the bottom right of the maze
 205+ 8EA7              ;if so, there is no wall after position 255 so point us to
 206+ 8EA7              ;position 240 and fake the wall!
 207+ 8EA7              ;;;        ld a,e
 208+ 8EA7              ;;;        cp 255
 209+ 8EA7              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 210+ 8EA7              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 211+ 8EA7
 212+ 8EA7
 213+ 8EA7              ;now move the maze pointer left (-1) 1 position
 214+ 8EA7              ;so we can read the type of walls to our left
 215+ 8EA7
 216+ 8EA7              cont_3:
 217+ 8EA7              ;*         push hl
 218+ 8EA7              ;*        ld hl,(left)
 219+ 8EA7              ;*        add hl,de
 220+ 8EA7              ;*        ex de,hl
 221+ 8EA7              ;*        pop hl
 222+ 8EA7
 223+ 8EA7 EB                   ex   de,hl              ; transfer de to hl.
 224+ 8EA8
 225+ 8EA8              ;       hl = furthest point in the maze
 226+ 8EA8              ;       de = d_file location to store byte to display
 227+ 8EA8
 228+ 8EA8              ;we have to load the first plot position with a corner bit to show
 229+ 8EA8              ;the end of the wall at the position we can see next to the center
 230+ 8EA8              ;plot position on section 6
 231+ 8EA8              ;then, while we draw the other blocks we can see we just want top and
 232+ 8EA8              ;bottom blacks pointed so will use var1 and var 2 to hold the
 233+ 8EA8              ;character block we need to print.
 234+ 8EA8
 235+ 8EA8
 236+ 8EA8 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 237+ 8EAA 32 04 FA             ld (var1),a
 238+ 8EAD 3C                   inc a
 239+ 8EAE 3E B4                ld a,_smallwall;_topleft5          ; load with top left char $a9
 240+ 8EB0
 241+ 8EB0 32 05 FA             ld (var2),a             ;ld with bottom left char
 242+ 8EB3
 243+ 8EB3              loop8:
 244+ 8EB3 E5                   push hl
 245+ 8EB4
 246+ 8EB4
 247+ 8EB4              ;############################################################################
 248+ 8EB4              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 249+ 8EB4
 250+ 8EB4 3A 28 FA             ld a,(maze_highbyte)
 251+ 8EB7 BC                   cp h                    ;are we at the top part of the maze?
 252+ 8EB8 CA EB 8E             jp z,cont_1s
 253+ 8EBB                                              ;if we are on a different maze boundary
 254+ 8EBB                                              ;then draw a maze wall as we are the top
 255+ 8EBB                                              ;or north wall but maze data has no
 256+ 8EBB                                              ;wall data.
 257+ 8EBB              ;4 = 2nd left wall
 258+ 8EBB              ;3 = 2nd left wall
 259+ 8EBB              ;2 = 3rd left wall
 260+ 8EBB              ;1 = 4th left wall
 261+ 8EBB
 262+ 8EBB 78                   ld a,b                  ;our current wall counter
 263+ 8EBC FE 04                cp 4
 264+ 8EBE C2 C9 8E             jp nz,a5_1                 ;its not wall 4
 265+ 8EC1 3E 01                ld a,1
 266+ 8EC3 47                   ld b,a
 267+ 8EC4 C6 80                add a,128               ;make sure we set a wall!
 268+ 8EC6 C3 21 8F             jp draw_5S             ;jump straight to making an end wall
 269+ 8EC9
 270+ 8EC9 FE 03        a5_1:   cp 3
 271+ 8ECB C2 D6 8E             jp nz,a5_2             ;its not wall 3
 272+ 8ECE 3E 01                ld a,1
 273+ 8ED0 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 274+ 8ED1 C6 80                add a,128               ;make sure we set a wall!
 275+ 8ED3 C3 48 8F             jp do_2ndwall_l        ;draw the 2nd block to the left
 276+ 8ED6
 277+ 8ED6 FE 02        a5_2:   cp 2
 278+ 8ED8 C2 E3 8E             jp nz,a5_3             ;its not wall 3
 279+ 8EDB 3E 01                ld a,1
 280+ 8EDD 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 281+ 8EDE C6 80                add a,128               ;make sure we set a wall!
 282+ 8EE0 C3 88 8F             jp do_3rdwall_l       ;draw the 2nd block to the left
 283+ 8EE3
 284+ 8EE3              ;a must = 1 if we get here.
 285+ 8EE3 3E 01        a5_3:   ld a,1
 286+ 8EE5 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 287+ 8EE6 C6 80                add a,128               ;make sure we set a wall!
 288+ 8EE8 C3 D5 8F             jp do_4thwall_l       ;draw the cnd block to the left
 289+ 8EEB
 290+ 8EEB              ;############################################################################
 291+ 8EEB
 292+ 8EEB              ;are we at a maze edge wall = clear flag?
 293+ 8EEB              cont_1s:
 294+ 8EEB 97                   sub a
 295+ 8EEC 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 296+ 8EEF
 297+ 8EEF
 298+ 8EEF 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 299+ 8EF0
 300+ 8EF0 FE 81                cp _mh                  ;maze_wall = 129
 301+ 8EF2 20 07                jr nz,cont9
 302+ 8EF4 F5                   push af
 303+ 8EF5 3E 01                ld a,1
 304+ 8EF7 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 305+ 8EFA F1                   pop af
 306+ 8EFB
 307+ 8EFB 17           cont9:  rla
 308+ 8EFC DA 0F 8F             jp c,do_wall5            ;bit 7 (128)
 309+ 8EFF
 310+ 8EFF
 311+ 8EFF              go_back5:
 312+ 8EFF 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 313+ 8F02 19                   add hl,de               ; holds current screen position
 314+ 8F03 EB                   ex de,hl
 315+ 8F04 E1                   pop hl
 316+ 8F05 D5                   push de
 317+ 8F06 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 318+ 8F0A 19                   add hl,de                ; go left 1 block in the maze
 319+ 8F0B D1                   pop de
 320+ 8F0C 10 A5                djnz loop8
 321+ 8F0E C9                   ret
 322+ 8F0F
 323+ 8F0F
 324+ 8F0F              ; there is not a wall so insert black to show that the location is too far away to see its detail.
 325+ 8F0F
 326+ 8F0F              do_wall5:
 327+ 8F0F
 328+ 8F0F              ;check if b=2 - if so we are not at a wall immediately next to our left
 329+ 8F0F              ;nor are we at an and wall. We are drawing the 2nd block to the left
 330+ 8F0F              ;b=3 for 3rd block to the left.
 331+ 8F0F
 332+ 8F0F 78                   ld a,b
 333+ 8F10 D6 01                sub 1
 334+ 8F12 CA D5 8F             jp z,do_4thwall_l       ;draw the cnd block to the left
 335+ 8F15
 336+ 8F15 78                   ld a,b                  ;b is our loop count
 337+ 8F16 D6 02                sub 2                   ;check if a=2
 338+ 8F18 CA 88 8F             jp z,do_3rdwall_l       ;draw the 2nd block to the left
 339+ 8F1B
 340+ 8F1B 78                   ld a,b
 341+ 8F1C D6 03                sub 3
 342+ 8F1E CA 48 8F             jp z,do_2ndwall_l       ;draw the cnd block to the left
 343+ 8F21
 344+ 8F21
 345+ 8F21
 346+ 8F21              ;b must = 4 if we get here, so draw the first wall
 347+ 8F21
 348+ 8F21                        ;check if bit 2 is set as thats an end
 349+ 8F21                      ;and b must then be changed to 1 to stop drawing.
 350+ 8F21              draw_5S:
 351+ 8F21 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 352+ 8F23 28 04                jr z,draw8
 353+ 8F25
 354+ 8F25 97                   sub a                   ;we do NOT have an ouside maze wall
 355+ 8F26 32 17 FA             ld (end_wall),a         ;save that we are NOT at an end wall
 356+ 8F29              ;b must be 1 if we get here!
 357+ 8F29
 358+ 8F29 D5           draw8:  push de
 359+ 8F2A 3A 04 FA             ld   a,(var1)           ;holds _smallwall
 360+ 8F2D 12                   ld   (de),a             ; insert the top of the wall.
 361+ 8F2E
 362+ 8F2E 1B                   dec de
 363+ 8F2F 12                   ld   (de),a             ; insert the top of the wall.
 364+ 8F30 13                   inc de                  ;put plot position back to start of wall
 365+ 8F31
 366+ 8F31              ;now check if we need to draw a black side on the right
 367+ 8F31              ;by looking to the character to the right of the wall
 368+ 8F31              ;and if there is not a wall already drawn, then draw a
 369+ 8F31              ;black side
 370+ 8F31
 371+ 8F31 3E A9                ld a,_topleft5          ;draw the top left side
 372+ 8F33 13                   inc de                  ;jump ahead 1 char in the display
 373+ 8F34 12                   ld (de),a               ;draw a black and chevron side
 374+ 8F35 1B                   dec de                  ;go back 1 space again
 375+ 8F36
 376+ 8F36              ;NOW DO THE NEXT LINE BELOW
 377+ 8F36
 378+ 8F36              ;_x1:
 379+ 8F36 21 21 00             ld   hl,$0021           ;jump to the next line below
 380+ 8F39 19                   add  hl,de
 381+ 8F3A 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 382+ 8F3D 77                   ld   (hl),a             ; insert the bottom of the wall.
 383+ 8F3E 2B                   dec hl
 384+ 8F3F 77                   ld   (hl),a             ; insert the bottom of the wall.
 385+ 8F40 23                   inc hl
 386+ 8F41 23                   inc hl
 387+ 8F42 3E AB                ld a,_bottomleft5
 388+ 8F44 77                   ld (hl),a
 389+ 8F45
 390+ 8F45              ;_x2
 391+ 8F45 D1                    pop de
 392+ 8F46 18 B7                jr go_back5              ; jump back to main loop
 393+ 8F48
 394+ 8F48
 395+ 8F48              ;************************************
 396+ 8F48
 397+ 8F48              ;draw the wall for 2nd LEFT layer
 398+ 8F48
 399+ 8F48              ;***********************************
 400+ 8F48
 401+ 8F48              do_2ndwall_l:
 402+ 8F48
 403+ 8F48 D5                   push de                 ;save the current acreen position
 404+ 8F49
 405+ 8F49              ;1st check if theres a wall where we need to draw the black side
 406+ 8F49
 407+ 8F49 1B                   dec de
 408+ 8F4A 1B                   dec de                  ;move 3 place left to position us correctly
 409+ 8F4B
 410+ 8F4B              ;now draw a red wall to the right of section 2
 411+ 8F4B 13                   inc de
 412+ 8F4C 3E B4                ld a,_smallwall
 413+ 8F4E 12                   ld (de),a
 414+ 8F4F 1B                   dec de
 415+ 8F50 12                   ld (de),a               ;draw 2nd one (4 wide)
 416+ 8F51 1B                   dec de
 417+ 8F52 12                   ld (de),a               ;draw 3rd one (4 wide)
 418+ 8F53
 419+ 8F53 13                   inc de
 420+ 8F54 13                   inc de
 421+ 8F55 13                   inc de
 422+ 8F56                               ;put us back to our start position ready
 423+ 8F56                                              ;to start drawing the black side
 424+ 8F56
 425+ 8F56              ;now check if we need to draw a black side on the right
 426+ 8F56              ;by looking to the character to the right of the wall
 427+ 8F56              ;and if there is not a wall already drawn, then draw a
 428+ 8F56              ;black side
 429+ 8F56
 430+ 8F56 13                   inc de
 431+ 8F57 1A                   ld a,(de)               ;read whats there
 432+ 8F58 FE B4                cp _smallwall           ;is it a wall
 433+ 8F5A CA 64 8F             jp z,_x1r_2_l           ;if yes, do NOT draw a black side.
 434+ 8F5D 1B                   dec de
 435+ 8F5E 3E 95                ld a,$95                ;draw top left side
 436+ 8F60 12                   ld (de),a               ;draw middle top bit
 437+ 8F61 3C                   inc a
 438+ 8F62 13                   inc de
 439+ 8F63 12                   ld (de),a               ;draw middle top bit
 440+ 8F64
 441+ 8F64
 442+ 8F64              ;top line done
 443+ 8F64
 444+ 8F64              ;now do the bottom line underneath
 445+ 8F64
 446+ 8F64              ;REMEMBER - 1 block is 2 8 bit squares at the section
 447+ 8F64              _x1r_2_l:
 448+ 8F64 1B                   dec de
 449+ 8F65 1B                   dec de
 450+ 8F66 1B                   dec de                  ;move left 3 places in the display
 451+ 8F67 21 21 00             ld  hl,$0021           ;jump to the next line below + 1 char right
 452+ 8F6A 19                   add hl,de
 453+ 8F6B
 454+ 8F6B
 455+ 8F6B              ;now draw a red wall to the right of section 2
 456+ 8F6B 23                   inc hl
 457+ 8F6C 3E B4                ld a,_smallwall
 458+ 8F6E 77                   ld (hl),a
 459+ 8F6F 2B                   dec hl
 460+ 8F70 77                   ld (hl),a
 461+ 8F71 2B                   dec hl
 462+ 8F72 77                   ld (hl),a               ;draw 3rd one (3 wide)
 463+ 8F73
 464+ 8F73 23                   inc hl
 465+ 8F74 23                   inc hl
 466+ 8F75 23                   inc hl
 467+ 8F76
 468+ 8F76              ;now check if we need to draw a black side on the left of the lower half wall
 469+ 8F76              ;do this by checking if the next block is already a wall just like above
 470+ 8F76
 471+ 8F76 23                   inc hl      ;look at the right block
 472+ 8F77 7E                   ld a,(hl)
 473+ 8F78 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 474+ 8F7A CA 84 8F             jp z,_x2r_2_l
 475+ 8F7D 3E 98                ld a,$98            ;draw rightmost bottom
 476+ 8F7F 2B                   dec hl
 477+ 8F80 77                   ld (hl),a
 478+ 8F81
 479+ 8F81 3C                  inc a
 480+ 8F82 23                   inc hl
 481+ 8F83 77                   ld (hl),a
 482+ 8F84
 483+ 8F84 D1           _x2r_2_l  pop de
 484+ 8F85 C3 FF 8E             jp go_back5              ; jump back to main loop
 485+ 8F88
 486+ 8F88              ;##########################################
 487+ 8F88
 488+ 8F88              ;draw the wall for 3rd LEFT layer
 489+ 8F88
 490+ 8F88              ;##########################################
 491+ 8F88
 492+ 8F88              do_3rdwall_l:
 493+ 8F88
 494+ 8F88 D5                   push de                 ;save the current acreen position
 495+ 8F89              ;1st check if theres a wall where we need to draw the black side
 496+ 8F89
 497+ 8F89 1B                  dec de
 498+ 8F8A 1B                   dec de
 499+ 8F8B 1B                   dec de
 500+ 8F8C 1B                   dec de
 501+ 8F8D 1B                   dec de
 502+ 8F8E 1B                   dec de
 503+ 8F8F
 504+ 8F8F
 505+ 8F8F              ;now draw a red wall to the left of section 2,  top half
 506+ 8F8F
 507+ 8F8F 3E B4                ld a,_smallwall;$8e                ;8e - 3rd wall graphic
 508+ 8F91 12                   ld (de),a
 509+ 8F92 13                   inc de
 510+ 8F93 12                   ld (de),a
 511+ 8F94 13                   inc de
 512+ 8F95 12                   ld (de),a
 513+ 8F96 13                   inc de
 514+ 8F97 12                   ld (de),a               ;draw 4th one (4 wide)
 515+ 8F98
 516+ 8F98
 517+ 8F98              ;now check if we need to draw a black side on the right
 518+ 8F98              ;by looking to the character to the right of the wall
 519+ 8F98              ;and if there is not a wall already drawn, then draw a
 520+ 8F98              ;black side
 521+ 8F98
 522+ 8F98 13                   inc de
 523+ 8F99 1A                   ld a,(de)               ;read whats there
 524+ 8F9A                     ; dec de                  ;put our pointer back to the original position
 525+ 8F9A FE B4                cp _smallwall           ;is it a wall
 526+ 8F9C CA AC 8F             jp z,_x1r_3l               ;if yes, do NOT draw a black side.
 527+ 8F9F 1B                   dec de
 528+ 8FA0 13                   inc de
 529+ 8FA1 13                   inc de
 530+ 8FA2 13                   inc de
 531+ 8FA3 3E C5                ld a,$c5             ;draw top right side
 532+ 8FA5 12                   ld (de),a
 533+ 8FA6 1B                   dec de
 534+ 8FA7 3C                   inc a
 535+ 8FA8 12                   ld (de),a
 536+ 8FA9 3C                   inc a
 537+ 8FAA 1B                   dec de
 538+ 8FAB 12                   ld (de),a
 539+ 8FAC
 540+ 8FAC              ;Top line done
 541+ 8FAC              ;now do the bottom line
 542+ 8FAC
 543+ 8FAC              _x1r_3l:
 544+ 8FAC 1B                   dec de
 545+ 8FAD 1B                   dec de
 546+ 8FAE 1B                   dec de
 547+ 8FAF 1B                   dec de
 548+ 8FB0
 549+ 8FB0 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 8FB3 19                   add  hl,de
 551+ 8FB4 3E B4                ld a,_smallwall;$8e
 552+ 8FB6 77                   ld (hl),a
 553+ 8FB7 23                   inc hl
 554+ 8FB8 77                   ld (hl),a
 555+ 8FB9 23                   inc hl
 556+ 8FBA 77                   ld (hl),a
 557+ 8FBB 23                   inc hl
 558+ 8FBC 77                   ld (hl),a
 559+ 8FBD
 560+ 8FBD 23                   inc hl
 561+ 8FBE
 562+ 8FBE
 563+ 8FBE              ;now check if we need to draw a black side on the left of the lower half wall
 564+ 8FBE              ;do this by checking if the next block is already a wall just like above
 565+ 8FBE
 566+ 8FBE 23                   inc hl      ;look at the right block
 567+ 8FBF 7E                   ld a,(hl)
 568+ 8FC0 2B                   dec hl
 569+ 8FC1 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 570+ 8FC3 CA D1 8F             jp z,_x2r_3l
 571+ 8FC6 2B                   dec hl
 572+ 8FC7              ;inc hl
 573+ 8FC7 3E C3                ld a,$c3            ;draw leftmost bottom
 574+ 8FC9 23                   inc hl
 575+ 8FCA 77                   ld (hl),a
 576+ 8FCB 23                   inc hl
 577+ 8FCC 3D                   dec a
 578+ 8FCD 77                   ld (hl),a
 579+ 8FCE 23                   inc hl
 580+ 8FCF 3D                   dec a
 581+ 8FD0 77                   ld (hl),a
 582+ 8FD1
 583+ 8FD1 D1           _x2r_3l  pop de
 584+ 8FD2 C3 FF 8E             jp go_back5              ; jump back to main loop
 585+ 8FD5
 586+ 8FD5              ;##########################################
 587+ 8FD5
 588+ 8FD5              ;draw the wall for 4th (and last!) LEFT layer
 589+ 8FD5
 590+ 8FD5              ;##########################################
 591+ 8FD5
 592+ 8FD5              do_4thwall_l:
 593+ 8FD5
 594+ 8FD5              ;draw top half of wall
 595+ 8FD5
 596+ 8FD5 D5                   push de                 ;save the current acreen position
 597+ 8FD6              ;1st check if theres a wall where we need to draw the black side
 598+ 8FD6 1B                   dec de
 599+ 8FD7 1B                   dec de
 600+ 8FD8 1B                   dec de
 601+ 8FD9 1B                   dec de
 602+ 8FDA 1B                   dec de
 603+ 8FDB 1B                   dec de
 604+ 8FDC              ;now draw a red wall to the right of section 2,  top half
 605+ 8FDC
 606+ 8FDC 3E B4                ld a,_smallwall;$8d
 607+ 8FDE 12                   ld (de),a
 608+ 8FDF 1B                   dec de
 609+ 8FE0 12                   ld (de),a
 610+ 8FE1 13                   inc de                  ;move print position back for black wall
 611+ 8FE2
 612+ 8FE2              ;now check if we need to draw a black side on the right
 613+ 8FE2              ;by looking to the character to the right of the wall
 614+ 8FE2              ;and if there is not a wall already drawn, then draw a
 615+ 8FE2              ;black side
 616+ 8FE2
 617+ 8FE2 13                   inc de                  ;jump left 1 char in the display
 618+ 8FE3 1A                   ld a,(de)               ;read whats there
 619+ 8FE4 1B                   dec de                  ;put our pointer back to the original position
 620+ 8FE5 FE B4                cp _smallwall;$8e                 ;is it a wall
 621+ 8FE7 CA FB 8F             jp z,_x1r_31_l               ;if yes, do NOT draw a black side.
 622+ 8FEA              ;        dec de
 623+ 8FEA 3E B9                ld a,$b9              ;draw top right side
 624+ 8FEC 13                   inc de
 625+ 8FED 13                   inc de
 626+ 8FEE 13                   inc de
 627+ 8FEF 13                   inc de
 628+ 8FF0 12                   ld (de),a           ;draw 4 black sides
 629+ 8FF1 1B                   dec de
 630+ 8FF2 3C                   inc a
 631+ 8FF3 12                   ld (de),a
 632+ 8FF4 3C                   inc a
 633+ 8FF5 1B                   dec de
 634+ 8FF6 12                   ld (de),a
 635+ 8FF7 3C                   inc a
 636+ 8FF8 1B                   dec de
 637+ 8FF9 12                   ld (de),a
 638+ 8FFA
 639+ 8FFA 1B                   dec de              ;move to wall start
 640+ 8FFB
 641+ 8FFB
 642+ 8FFB              ;top line done
 643+ 8FFB
 644+ 8FFB              ;now do the bottom line underneath
 645+ 8FFB
 646+ 8FFB              _x1r_31_l
 647+ 8FFB 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 648+ 8FFE 19                   add  hl,de
 649+ 8FFF
 650+ 8FFF 3E B4                ld a,_smallwall;$8d
 651+ 9001 77                   ld (hl),a
 652+ 9002 2B                   dec hl
 653+ 9003 77                   ld (hl),a
 654+ 9004
 655+ 9004 23                   inc hl
 656+ 9005
 657+ 9005
 658+ 9005              ;now check if we need to draw a black side on the left of the lower half wall
 659+ 9005              ;do this by checking if the next block is already a wall just like above
 660+ 9005
 661+ 9005 23                   inc hl      ;look at the left block
 662+ 9006 7E                   ld a,(hl)
 663+ 9007 2B                   dec hl
 664+ 9008 FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 665+ 900A CA 1D 90             jp z,_x2r_31_l
 666+ 900D
 667+ 900D                   ;  dec hl
 668+ 900D 3E BD                ld a,$bd            ;draw leftmost bottom
 669+ 900F 23                   inc hl
 670+ 9010 23                   inc hl
 671+ 9011 23                   inc hl
 672+ 9012 23                   inc hl
 673+ 9013
 674+ 9013 77                   ld (hl),a
 675+ 9014 2B                   dec hl
 676+ 9015 3C                   inc a
 677+ 9016 77                   ld (hl),a
 678+ 9017 2B                   dec hl
 679+ 9018 3C                   inc a
 680+ 9019 77                   ld (hl),a
 681+ 901A 2B                   dec hl
 682+ 901B 3C                   inc a
 683+ 901C 77                   ld (hl),a
 684+ 901D
 685+ 901D D1           _x2r_31_l  pop de
 686+ 901E C3 FF 8E             jp go_back5              ; jump back to main loop
 687+ 9021
 688+ 9021
 689+ 9021              ;############################################
 690+ 9021              ;############################################
 691+ 9021              ;draw LEFT layer 4
 692+ 9021              ;############################################
 693+ 9021              ;############################################
 694+ 9021
 695+ 9021              draw_4
 696+ 9021
 697+ 9021              ; hl=maze location being drawn.
 698+ 9021              ; now determine what to draw for this section.
 699+ 9021
 700+ 9021
 701+ 9021 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 702+ 9024
 703+ 9024 CD DD 8C             call load_de            ;get left and right and front jump into de reg
 704+ 9027 19                   add hl,de               ;jump backwards along the user view 1 space
 705+ 9028 22 25 FA             ld (furthest_point),hl  ;re save it
 706+ 902B
 707+ 902B              ;we should also move our pointer left to read where the walls are.
 708+ 902B              ;this will be from this point onwards as we can see the blocks more fully
 709+ 902B
 710+ 902B 11 FF FF             ld de,$ffff              ;to move the printed position -3
 711+ 902E ED 53 11 FA          ld (var4),de            ;as block is 3 chars wide
 712+ 9032
 713+ 9032              ;we need to move pointer 1 to the left for wall checking
 714+ 9032 ED 5B 0B FA          ld de,(left)
 715+ 9036 19                   add hl,de
 716+ 9037 22 15 FA             ld (var6),hl ;re save it
 717+ 903A
 718+ 903A
 719+ 903A ED 53 0F FA          ld (var3),de
 720+ 903E 11 51 01             ld de,$0151            ; offset to row 10 column 16 - left of  centre of the 3d view.
 721+ 9041 CD 47 90             call do_draw_4
 722+ 9044
 723+ 9044
 724+ 9044 C3 3A 92             jp draw_3              ;now draw the 4th level
 725+ 9047
 726+ 9047              do_draw_4:
 727+ 9047
 728+ 9047 2A 71 81             ld hl,(d_file)         ; fetch the location of the display file.
 729+ 904A 19                   add hl,de
 730+ 904B 06 04                ld b,4                 ; count for 3 blocks left of display file
 731+ 904D                                             ; 0 is not counted so loops 3 times
 732+ 904D ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
 733+ 9051 EB                   ex de,hl
 734+ 9052
 735+ 9052              ;       hl = furthest point in the maze
 736+ 9052              ;       de = d_file location to store byte to display
 737+ 9052
 738+ 9052              loop9:
 739+ 9052 E5                   push hl
 740+ 9053
 741+ 9053              ;#############################################################################
 742+ 9053              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 743+ 9053
 744+ 9053 3A 28 FA             ld a,(maze_highbyte)
 745+ 9056 BC                   cp h                    ;are weoutside of our maze?
 746+ 9057 CA 8A 90             jp z,cont_5
 747+ 905A
 748+ 905A                       ;if we are on a different maze boundary
 749+ 905A                                              ;then draw a maze wall as we are the top
 750+ 905A                                              ;or north wall but maze data has no
 751+ 905A                                              ;wall data.
 752+ 905A
 753+ 905A              ;4 = 1st LEFT wall
 754+ 905A              ;3 = 2nd LEFT wall
 755+ 905A              ;2 = 3rd LEFT wall
 756+ 905A              ;1 = 4th LEFT wall
 757+ 905A
 758+ 905A 78                   ld a,b                  ;our current wall counter
 759+ 905B FE 04                cp 4
 760+ 905D C2 68 90             jp nz,a4_1              ;its not a wall
 761+ 9060 3E 01                ld a,1
 762+ 9062 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 763+ 9063 C6 80                add a,128               ;make sure we set a wall!
 764+ 9065 C3 B9 90             jp draw_9               ;draw the 1st block to the left
 765+ 9068
 766+ 9068              ;        ld a,b
 767+ 9068 FE 03        a4_1:   cp 3
 768+ 906A C2 75 90             jp nz,a4_2              ;its not wall
 769+ 906D 3E 01                ld a,1
 770+ 906F 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 771+ 9070 C6 80                add a,128               ;make sure we set a wall!
 772+ 9072 C3 F9 90             jp draw_9_2L           ;draw the 2nd block to the left
 773+ 9075
 774+ 9075 FE 02        a4_2:   cp 2
 775+ 9077 C2 82 90             jp nz,a4_3              ;its not wall
 776+ 907A 3E 01                ld a,1
 777+ 907C 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 778+ 907D C6 80                add a,128               ;make sure we set a wall!
 779+ 907F C3 6B 91             jp draw_9_3L           ;draw the 3rd block to the left
 780+ 9082
 781+ 9082              ;a must = 1 if we get here.
 782+ 9082 3E 01        a4_3:   ld a,1
 783+ 9084 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 784+ 9085 C6 80                add a,128               ;make sure we set a wall!
 785+ 9087 C3 CA 91             jp draw_9_4L           ;draw the 4th block to the left
 786+ 908A
 787+ 908A              ;############################################################################
 788+ 908A
 789+ 908A
 790+ 908A              ;now check if we are on the south wall and frig it to draw the
 791+ 908A              ;walls we need.
 792+ 908A              ;reg a already contains l
 793+ 908A
 794+ 908A              ;cont_4s:
 795+ 908A
 796+ 908A
 797+ 908A              cont_5:
 798+ 908A 7E                   ld a,(hl)
 799+ 908B 17                   rla
 800+ 908C DA 9F 90             jp c,do_wall4            ;bit 7 (128)
 801+ 908F
 802+ 908F               ;       call do_no_wall4         ; otherwise draw no wall
 803+ 908F
 804+ 908F              go_back4:
 805+ 908F 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 806+ 9092 19                   add hl,de
 807+ 9093 EB                   ex de,hl
 808+ 9094 E1                   pop hl
 809+ 9095 D5                   push de
 810+ 9096 ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 811+ 909A 19                   add hl,de               ; move to the start of the next block to print
 812+ 909B                                              ;we need to move back 4 blocks
 813+ 909B                                              ;as the first block obscures the view
 814+ 909B                                              ;of the next 3 blocks.
 815+ 909B D1                   pop de
 816+ 909C 10 B4                djnz loop9
 817+ 909E C9                   ret
 818+ 909F
 819+ 909F              do_wall4:
 820+ 909F
 821+ 909F              draw_4s:
 822+ 909F
 823+ 909F              ;Draw wall based on b count
 824+ 909F
 825+ 909F              wall4L_start:
 826+ 909F
 827+ 909F 78                   ld a,b
 828+ 90A0 D6 01                sub 1                   ;4th wall  to the left
 829+ 90A2 CA CA 91             jp z,draw_9_4L
 830+ 90A5
 831+ 90A5 78                   ld a,b
 832+ 90A6 D6 02                sub 2                   ;3rd wall to the left
 833+ 90A8 CA 6B 91             jp z,draw_9_3L
 834+ 90AB
 835+ 90AB 78                   ld a,b
 836+ 90AC D6 03                sub 3                   ;2nd wall immediately wall to the left
 837+ 90AE CA F9 90             jp z,draw_9_2L
 838+ 90B1
 839+ 90B1 78                   ld a,b
 840+ 90B2 D6 04                sub 4                   ;1st wall immediately wall to the left
 841+ 90B4 CA B9 90             jp z,draw_9
 842+ 90B7
 843+ 90B7 E1                   pop hl
 844+ 90B8 C9                   ret
 845+ 90B9
 846+ 90B9              draw_9:
 847+ 90B9 C5                   push bc
 848+ 90BA D5                   push de                 ;save our display pointer
 849+ 90BB 06 04                ld b,4                  ;block is 4 blocks high
 850+ 90BD 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 851+ 90C0 1B                   dec de
 852+ 90C1
 853+ 90C1 3E B7        loop10: ld   a,_mediumwall_1      ;grey sides facing us
 854+ 90C3 12                   ld (de),a               ; insert thepart of the wall.
 855+ 90C4 13                   inc de
 856+ 90C5 12                   ld (de),a               ;put grey side to our right
 857+ 90C6 13                   inc de
 858+ 90C7 12                   ld (de),a
 859+ 90C8 13                   inc de
 860+ 90C9 12                   ld (de),a
 861+ 90CA 1B                   dec de
 862+ 90CB 1B                   dec de
 863+ 90CC 1B                   dec de                  ;go left 1 again
 864+ 90CD EB                   ex de,hl
 865+ 90CE 19                   add  hl,de              ; advance to the next row of the display file.
 866+ 90CF EB                   ex de,hl
 867+ 90D0 10 EF                djnz loop10             ;do this 3 times
 868+ 90D2
 869+ 90D2                      ;now draw the blank face
 870+ 90D2 D1                   pop de                  ;back to our original position
 871+ 90D3 D5                   push de
 872+ 90D4 13                   inc de
 873+ 90D5 13                   inc de                  ;move ahead 3 spaces in the display
 874+ 90D6 13                   inc de
 875+ 90D7              ;        inc de
 876+ 90D7
 877+ 90D7              ;check if the char to our right is a wall block.
 878+ 90D7              ;if so, do not draw a black face as we need to hide it or it will
 879+ 90D7              ;ovewrite the already drawn block
 880+ 90D7
 881+ 90D7 1A                   ld a,(de)
 882+ 90D8 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 883+ 90DA C2 E1 90             jp nz,cont_1            ;there is no block so draw black edge
 884+ 90DD D1                   pop de
 885+ 90DE C1                   pop bc
 886+ 90DF 18 AE                jr go_back4             ;otherwise quit this draw
 887+ 90E1
 888+ 90E1 EB           cont_1  ex  de,hl
 889+ 90E2 11 21 00             ld de,$0021
 890+ 90E5 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
 891+ 90E7 77                   ld  (hl),a
 892+ 90E8 19                   add hl,de
 893+ 90E9 3E AF                ld  a,_black      ;triangle sloping to right bottom
 894+ 90EB 77                   ld  (hl),a
 895+ 90EC 19                   add hl,de
 896+ 90ED 3E AF                ld  a,_black      ;triangle sloping to right bottom
 897+ 90EF 77                   ld  (hl),a
 898+ 90F0 19                   add hl,de
 899+ 90F1
 900+ 90F1 77                   ld  (hl),a
 901+ 90F2 3E B0                ld  a,_topcorner1
 902+ 90F4 77                   ld  (hl),a
 903+ 90F5 D1                   pop de
 904+ 90F6 C1                   pop bc
 905+ 90F7 18 96                jr go_back4              ; jump back to main loop
 906+ 90F9
 907+ 90F9              ;************************************
 908+ 90F9              ;*Draw the 2nd LEFT block of section 4
 909+ 90F9              ;************************************
 910+ 90F9
 911+ 90F9              draw_9_2L:
 912+ 90F9 C5                   push bc
 913+ 90FA 21 FF FF             ld hl,$ffff                 ;move start point (-1) `to correct position
 914+ 90FD 19                   add hl,de
 915+ 90FE EB                   ex de,hl
 916+ 90FF D5                   push de
 917+ 9100
 918+ 9100              ;now draw the 2nd wall itself
 919+ 9100 06 04                ld b,4                  ;block is 4 blocks high
 920+ 9102 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 921+ 9105 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 922+ 9107
 923+ 9107              loop10r_2L:
 924+ 9107 12                   ld (de),a             ; insert thepart of the wall.
 925+ 9108 1B                   dec de
 926+ 9109 12                   ld (de),a               ;put grey side to our right
 927+ 910A 1B                   dec de
 928+ 910B 12                   ld (de),a
 929+ 910C 1B                   dec de
 930+ 910D 12                   ld (de),a
 931+ 910E 1B                   dec de
 932+ 910F 12                   ld (de),a
 933+ 9110 13                   inc de
 934+ 9111 13                   inc de
 935+ 9112 13                   inc de
 936+ 9113 13                   inc de                  ;go left 1 again
 937+ 9114 EB                   ex de,hl
 938+ 9115 19                   add  hl,de              ; advance to the next row of the display file.
 939+ 9116 EB                   ex de,hl
 940+ 9117 10 EE                djnz loop10r_2L             ;do this 3 times
 941+ 9119
 942+ 9119                      ;now draw the blank face
 943+ 9119 D1                   pop de                  ;back to our original position
 944+ 911A D5                   push de
 945+ 911B 13                   inc de                  ;move left 3 space left in the display
 946+ 911C 13                   inc de
 947+ 911D 13                   inc de
 948+ 911E
 949+ 911E              ;check if the char to our right is a wall block.
 950+ 911E              ;if so, do not draw a black face as we need to hide it or it will
 951+ 911E              ;ovewrite the already drawn block
 952+ 911E
 953+ 911E 1A                   ld a,(de)
 954+ 911F FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 955+ 9121 C2 29 91             jp nz,cont_1r_2L           ;there is no block so draw black edge
 956+ 9124 D1                   pop de
 957+ 9125 C1                   pop bc
 958+ 9126 C3 8F 90             jp go_back4             ;otherwise quit this draw
 959+ 9129
 960+ 9129              cont_1r_2L:
 961+ 9129 EB                   ex  de,hl
 962+ 912A 11 21 00             ld de,$0021
 963+ 912D
 964+ 912D              ;need to loop 2 times drawing 2 lots of 3 top
 965+ 912D              ;& bottom chars- move down 1after 1st 3 top chars drawn
 966+ 912D              ;
 967+ 912D
 968+ 912D 3E 02                ld a,2
 969+ 912F 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 970+ 9132
 971+ 9132              ;loop for 2 black wall columns
 972+ 9132 3E 03                ld a,3                  ;column start height
 973+ 9134 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 974+ 9137
 975+ 9137 06 03                ld b,3                  ;loop 3 times for 3 columns
 976+ 9139 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 977+ 913C 3E 97                ld a,$97
 978+ 913E 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 979+ 9141
 980+ 9141              loop10br_2L:
 981+ 9141 C5                   push bc                 ;save count
 982+ 9142 3A 04 FA             ld a,(var1)             ;column height
 983+ 9145 47                   ld b,a                  ;holds the column height in chars
 984+ 9146 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 985+ 9149 F5                   push af                 ;save a for bottom corners
 986+ 914A 77                   ld  (hl),a
 987+ 914B
 988+ 914B              loop10ar_2L:
 989+ 914B 19                   add hl,de
 990+ 914C 3E AF                ld  a,_black            ;black wall fill
 991+ 914E 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 992+ 914F 10 FA                djnz loop10ar_2L
 993+ 9151
 994+ 9151 F1                   pop af                  ;retrivetop corner
 995+ 9152 3D                   dec a                   ;prep for next top corner
 996+ 9153 32 05 FA             ld (var2),a             ;re-save it for next corner
 997+ 9156 C6 04                add a,4                 ;get the correct char to print
 998+ 9158 77                   ld  (hl),a              ;draw the bottom of the wall
 999+ 9159
1000+ 9159                      ;now change column count
1001+ 9159 3A 04 FA             ld a,(var1)
1002+ 915C C1                   pop bc
1003+ 915D
1004+ 915D 2A 13 FA             ld hl,(var5)
1005+ 9160 2B                   dec hl                  ;move print position to the left
1006+ 9161 22 13 FA             ld (var5),hl
1007+ 9164
1008+ 9164 10 DB                djnz loop10br_2L
1009+ 9166
1010+ 9166 D1                   pop de
1011+ 9167 C1                   pop bc
1012+ 9168 C3 8F 90             jp go_back4             ; jump back to main loop
1013+ 916B
1014+ 916B              ;#############################################
1015+ 916B              ;*Draw the 3rd LEFT block of section 4
1016+ 916B              ;#############################################
1017+ 916B
1018+ 916B              draw_9_3L:
1019+ 916B C5                   push bc
1020+ 916C D5                   push de                 ;save our display pointer
1021+ 916D 06 04                ld b,4                  ;block is 4 blocks high
1022+ 916F 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1023+ 9172 11 4A C1             ld de,$C162-24              ;start of drawing
1024+ 9175
1025+ 9175              loop10r_3L:
1026+ 9175 3E B7                ld a,_mediumwall_1      ;grey sides facing us
1027+ 9177 12                   ld (de),a               ; insert thepart of the wall.
1028+ 9178 EB                   ex de,hl
1029+ 9179 19                   add  hl,de              ; advance to the next row of the display file.
1030+ 917A EB                   ex de,hl
1031+ 917B 10 F8                djnz loop10r_3L             ;do this 3 times
1032+ 917D
1033+ 917D                      ;now draw the blank face
1034+ 917D D1                   pop de                  ;back to our original position
1035+ 917E D5                   push de
1036+ 917F
1037+ 917F              ;check if the char to our right is a wall block.
1038+ 917F              ;if so, do not draw a black face as we need to hide it or it will
1039+ 917F              ;ovewrite the already drawn block
1040+ 917F
1041+ 917F 1A                   ld a,(de)
1042+ 9180 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1043+ 9182 C2 8A 91             jp nz,cont_1r_3L            ;there is no block so draw black edge
1044+ 9185
1045+ 9185 D1                   pop de
1046+ 9186 C1                   pop bc
1047+ 9187 C3 8F 90             jp go_back4             ;otherwise quit this draw
1048+ 918A
1049+ 918A              cont_1r_3L:
1050+ 918A EB                   ex de,hl
1051+ 918B 11 21 00             ld de,$0021
1052+ 918E 21 4B C1             ld hl,$c161-22
1053+ 9191
1054+ 9191              ;need to loop 2 times drawing 2 lots of 3 top
1055+ 9191              ;& bottom chars- move down 1after 1st 3 top chars drawn
1056+ 9191              ;
1057+ 9191
1058+ 9191              ;loop for 5 black wall columns
1059+ 9191 3E 03                ld a,3                  ;column start height
1060+ 9193 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
1061+ 9196
1062+ 9196 06 05                ld b,5                  ;loop 5 times for 3 columns
1063+ 9198 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1064+ 919B 3E CD                ld a,$cd ;91
1065+ 919D 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1066+ 91A0
1067+ 91A0              loop10br_2aL:
1068+ 91A0 C5                   push bc                 ;save count
1069+ 91A1 3A 04 FA             ld a,(var1)             ;column height
1070+ 91A4 47                   ld b,a                  ;holds the column height in chars
1071+ 91A5 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1072+ 91A8 F5                   push af                 ;save a for bottom corners
1073+ 91A9 77                   ld  (hl),a
1074+ 91AA
1075+ 91AA              loop10ar_2aL:
1076+ 91AA 19                   add hl,de
1077+ 91AB 3E AF                ld  a,_black            ;black wall fill
1078+ 91AD 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1079+ 91AE 10 FA                djnz loop10ar_2aL
1080+ 91B0
1081+ 91B0 F1                   pop af                  ;retrivetop corner
1082+ 91B1 3D                   dec a                   ;prep for next top corner
1083+ 91B2 32 05 FA             ld (var2),a             ;re-save it for next corner
1084+ 91B5 C6 06                add a,6                 ;get the correct char to print
1085+ 91B7 77                   ld  (hl),a              ;draw the bottom of the wall
1086+ 91B8
1087+ 91B8                      ;now change column count
1088+ 91B8 3A 04 FA             ld a,(var1)
1089+ 91BB C1                   pop bc
1090+ 91BC
1091+ 91BC 2A 13 FA             ld hl,(var5)
1092+ 91BF 23                   inc hl                  ;move print position to the right
1093+ 91C0 22 13 FA             ld (var5),hl
1094+ 91C3
1095+ 91C3 10 DB                djnz loop10br_2aL
1096+ 91C5
1097+ 91C5 D1                   pop de
1098+ 91C6 C1                   pop bc
1099+ 91C7 C3 8F 90             jp go_back4              ; jump back to main loop
1100+ 91CA
1101+ 91CA              ;#############################################
1102+ 91CA              ;*Draw the 4th LEFT block of section 4
1103+ 91CA              ;#############################################
1104+ 91CA
1105+ 91CA              ; we only need to draw 2 columns of black sides.
1106+ 91CA
1107+ 91CA              draw_9_4L:
1108+ 91CA
1109+ 91CA              ; we only need to draw up to 2 columns of black sides.
1110+ 91CA
1111+ 91CA
1112+ 91CA C5                   push bc
1113+ 91CB D5                   push de                 ;save our display pointer
1114+ 91CC
1115+ 91CC              ;check if the char to our left is a wall block.
1116+ 91CC              ;if so, do not draw a black face as we need to hide it or it will
1117+ 91CC              ;ovewrite the already drawn block
1118+ 91CC
1119+ 91CC 21 4A C1             ld hl,$C151-7              ;start of drawing
1120+ 91CF 7E                   ld a,(hl)
1121+ 91D0 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1122+ 91D2 C2 DA 91             jp nz,cont_3L            ;there is no block so draw black edge
1123+ 91D5
1124+ 91D5 D1                   pop de
1125+ 91D6 C1                   pop bc
1126+ 91D7 C3 8F 90             jp go_back4             ;otherwise quit this draw
1127+ 91DA
1128+ 91DA              cont_3L:
1129+ 91DA 11 21 00             ld de,33                ;to jump to next line below
1130+ 91DD 3E CA                ld a,$ca                ;top of the wall
1131+ 91DF E5                   push hl                 ;save for drawing 2nd black wall
1132+ 91E0 77                   ld (hl),a               ;to cover up wall 5
1133+ 91E1 19                   add hl,de               ;jump to next line
1134+ 91E2 3E AF                ld a,_black
1135+ 91E4 77                   ld (hl),a
1136+ 91E5 19                   add hl,de
1137+ 91E6 77                   ld (hl),a
1138+ 91E7 19                   add hl,de
1139+ 91E8 3E CF                ld a,$cf                ;draw bottom of the line
1140+ 91EA 77                   ld (hl),a
1141+ 91EB
1142+ 91EB              ;now check if we need to cover wall 5 with a 2nd black line to the left
1143+ 91EB              ;hl points to top of the 4 blocks
1144+ 91EB E1                   pop hl                  ;restore our pointer in char ram
1145+ 91EC 23                   inc hl                  ;go left 1 place
1146+ 91ED E5                   push hl
1147+ 91EE 19                   add hl,de               ;now we are at the wall 5 top position
1148+ 91EF 7E                   ld a,(hl)
1149+ 91F0 FE B4                cp _smallwall
1150+ 91F2 E1                   pop hl
1151+ 91F3 20 0B                jr nz,exit3L
1152+ 91F5              ;draw the second wall over section 5 wall
1153+ 91F5 36 C9                ld (hl),$c9             ;top of the wall
1154+ 91F7 19                   add hl,de
1155+ 91F8 36 AF                ld (hl),_black
1156+ 91FA 19                   add hl,de
1157+ 91FB 36 AF                ld (hl),_black
1158+ 91FD 19                   add hl,de
1159+ 91FE 36 CE                ld (hl),$ce             ;bottom of the wall
1160+ 9200
1161+ 9200 D1           exit3L:  pop de                  ;now exit
1162+ 9201 C1                   pop bc
1163+ 9202 C3 8F 90             jp go_back4
1164+ 9205
1165+ 9205              ;###################################################
1166+ 9205              ;not needed down here
1167+ 9205
1168+ 9205 C5                   push bc
1169+ 9206 D5                   push de                 ;save our display pointer
1170+ 9207
1171+ 9207              ;check if the char to our right is a wall block.
1172+ 9207              ;if so, do not draw a black face as we need to hide it or it will
1173+ 9207              ;ovewrite the already drawn block
1174+ 9207
1175+ 9207 21 4A C1             ld hl,$C151-7              ;start of drawing
1176+ 920A 7E                   ld a,(hl)
1177+ 920B FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1178+ 920D C2 15 92             jp nz,cont_3L_l            ;there is no block so draw black edge
1179+ 9210
1180+ 9210 D1                   pop de
1181+ 9211 C1                   pop bc
1182+ 9212 C3 8F 90             jp go_back4             ;otherwise quit this draw
1183+ 9215
1184+ 9215              cont_3L_l:
1185+ 9215 06 04                ld b,4                  ;block is 4 blocks high
1186+ 9217 3E CA                ld a,$ca
1187+ 9219 77                   ld (hl),a
1188+ 921A 23                   inc hl
1189+ 921B 3D                   dec a
1190+ 921C 77                   ld (hl),a
1191+ 921D
1192+ 921D              ;need 2 black walls now!
1193+ 921D 3E AF                ld a,_black
1194+ 921F 11 21 00             ld de,33;34                ;1 line width
1195+ 9222
1196+ 9222 CD 35 92             CALL black_wall_1         ;draw 2 black blocks
1197+ 9225 13                   inc de                        ;jump to next line below
1198+ 9226
1199+ 9226 CD 35 92             CALL black_wall_1         ;draw 2 black blocks
1200+ 9229 19                   add hl,de               ;jump to next line below
1201+ 922A
1202+ 922A
1203+ 922A              ;top half done - so do bottom half - 2 blacks first
1204+ 922A
1205+ 922A              ;de already holds 34  -1 line plus 2 chars to the right
1206+ 922A
1207+ 922A 3E CE                ld a,$ce
1208+ 922C 77                   ld (hl),a
1209+ 922D 2B                   dec hl
1210+ 922E 3C                   inc a
1211+ 922F 77                   ld (hl),a
1212+ 9230
1213+ 9230 D1                   pop de
1214+ 9231 C1                   pop bc
1215+ 9232 C3 8F 90             jp go_back4
1216+ 9235
1217+ 9235              ;draw 2 black walls across 1 line
1218+ 9235              black_wall_1:
1219+ 9235 19                   add hl,de      ;jump 1 line below
1220+ 9236 77                   ld (hl),a
1221+ 9237 2B                   dec hl
1222+ 9238 77                   ld (hl),a
1223+ 9239 C9                   ret
1224+ 923A
1225+ 923A
1226+ 923A
1227+ 923A              ;#############################################
1228+ 923A              ;#############################################
1229+ 923A              ;# draw LEFT wall 3
1230+ 923A              ;#############################################
1231+ 923A              ;#############################################
1232+ 923A
1233+ 923A              draw_3:
1234+ 923A              ;ret
1235+ 923A              ; hl=maze location being drawn.
1236+ 923A              ; now determine what to draw for this section.
1237+ 923A
1238+ 923A
1239+ 923A 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1240+ 923D
1241+ 923D CD DD 8C             call load_de            ;get left and right and front jump into de reg
1242+ 9240
1243+ 9240 19                   add hl,de               ;jump backwards along the user view 1 space
1244+ 9241 22 25 FA             ld (furthest_point),hl ;re save it
1245+ 9244
1246+ 9244 11 FF FF             ld de,$ffff             ;to move the display position -1
1247+ 9247 ED 53 11 FA          ld (var4),de
1248+ 924B
1249+ 924B ED 5B 0B FA          ld de,(left)            ;move our check position left -1
1250+ 924F 19                   add hl,de
1251+ 9250 22 15 FA             ld (var6),hl
1252+ 9253
1253+ 9253
1254+ 9253 ED 53 0F FA          ld (var3),de
1255+ 9257 11 0A 01             ld de,$10a;10b           ; offset to row 8 column5 - left of  centre of the 3d view.
1256+ 925A
1257+ 925A              ;2nd block starts at $109 and is 3 wall chars wide
1258+ 925A CD 60 92             call do_draw_3
1259+ 925D
1260+ 925D C3 CC 93             jp draw_2           ;now draw the 2nd level
1261+ 9260
1262+ 9260              do_draw_3:
1263+ 9260
1264+ 9260 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
1265+ 9263 19                   add  hl,de
1266+ 9264
1267+ 9264
1268+ 9264              ; draw left half of the display.
1269+ 9264
1270+ 9264 06 03                ld b,3                 ; count for 1 blocks left of display file
1271+ 9266 ED 5B 15 FA          ld de,(var6)           ; retrieve the maze location.
1272+ 926A
1273+ 926A
1274+ 926A EB                   ex   de,hl              ; transfer de to hl.
1275+ 926B
1276+ 926B              ;       hl = furthest point in the maze
1277+ 926B              ;       de = d_file location to store byte to display
1278+ 926B
1279+ 926B              loop11:
1280+ 926B E5                   push hl
1281+ 926C
1282+ 926C              ;################################################################
1283+ 926C
1284+ 926C              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1285+ 926C              ;and stop drrawing anything else.
1286+ 926C
1287+ 926C 3A 28 FA             ld a,(maze_highbyte)
1288+ 926F BC                   cp h                    ;are we at the top part of the maze?
1289+ 9270 CA 97 92             jp z,cont_3s
1290+ 9273                                              ;if we are on a different maze boundary
1291+ 9273                                              ;then draw a maze wall as we are the top
1292+ 9273                                              ;or north wall but maze data has no
1293+ 9273                                              ;wall data.
1294+ 9273              ;see which wall we are at and draw the correct one before jumping out
1295+ 9273              ;of the loop and stop drawing past the maze wall.
1296+ 9273
1297+ 9273              ;3 = first left wall
1298+ 9273              ;2 = 2nd left wall
1299+ 9273              ;1 = 4rd left wall
1300+ 9273
1301+ 9273 78                   ld a,b                  ;our current wall counter
1302+ 9274 D6 03                sub 3
1303+ 9276 C2 81 92             jp nz,a3                 ;its not wall 1
1304+ 9279 3E 01                ld a,1
1305+ 927B 47                   ld b,a
1306+ 927C C6 80                add a,128               ;make sure we set a wall!
1307+ 927E C3 BC 92             jp draw_10             ;jump straight to making an end wall
1308+ 9281
1309+ 9281
1310+ 9281 78           a3:     ld a,b                  ;our current wall counter
1311+ 9282 D6 02                sub 2
1312+ 9284 C2 8F 92             jp nz,a3_1                 ;its not wall 1
1313+ 9287 3E 01                ld a,1
1314+ 9289 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1315+ 928A C6 80                add a,128               ;make sure we set a wall!
1316+ 928C C3 2E 93             jp draw_10_2L	       	;draw the 2nd wall to the right
1317+ 928F
1318+ 928F 3E 01        a3_1:   ld a,1
1319+ 9291 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1320+ 9292 C6 80                add a,128               ;make sure we set a wall!
1321+ 9294 C3 A0 93             jp draw_10_3L	       	;draw the 2nd wall to the right
1322+ 9297
1323+ 9297              ;################################################################
1324+ 9297
1325+ 9297
1326+ 9297              ;now check if we are on the south wall and frig it to draw the
1327+ 9297              ;walls we need.
1328+ 9297              ;reg a already contains l
1329+ 9297
1330+ 9297              cont_3s:
1331+ 9297              ;        ld a,l
1332+ 9297              ;        cp $FA  ;250
1333+ 9297              ;        jp nz,cont_6
1334+ 9297              ;        ld l,240                ;fake it that we are at
1335+ 9297              ;        jp draw_10             ;the south wall
1336+ 9297
1337+ 9297
1338+ 9297 7E           cont_6: ld a,(hl)
1339+ 9298 17                   rla
1340+ 9299 DA A8 92             jp c,do_wall3            ;bit 7 (128)
1341+ 929C
1342+ 929C                     ; call do_no_wall3         ; otherwise draw no wall
1343+ 929C
1344+ 929C              go_back3:
1345+ 929C                    ;  ld hl,(var4)            ;used for left and right drawing
1346+ 929C                    ;  add hl,de               ; holds current screen position
1347+ 929C                    ;  ex de,hl
1348+ 929C              ;we move the start position of block number 2 to the left of the display
1349+ 929C              ;and although we overwrite the next block, we can still do the
1350+ 929C              ;check to see if a block is already drawn.
1351+ 929C
1352+ 929C                      ;dec de                  ;move our start print position
1353+ 929C                      ;dec de                  ;of block 2 back 3 spaces in the
1354+ 929C 1B                   dec de ;only 1 space back  ;display file
1355+ 929D E1                   pop hl
1356+ 929E D5                   push de
1357+ 929F ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1358+ 92A3 19                   add hl,de                ; go left 1 block in the maze
1359+ 92A4 D1                   pop de
1360+ 92A5 10 C4                djnz loop11
1361+ 92A7 C9                   ret
1362+ 92A8              ;now do the 2nd position
1363+ 92A8
1364+ 92A8
1365+ 92A8
1366+ 92A8              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1367+ 92A8
1368+ 92A8              do_wall3:
1369+ 92A8
1370+ 92A8                      ;check if bit 2 is set as thats an end
1371+ 92A8                      ;and b must then be changed to 1 to stop drawing.
1372+ 92A8
1373+ 92A8              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1374+ 92A8              ;        jr z,draw_10
1375+ 92A8              ;        ld b,1                  ;set b so we exit on return
1376+ 92A8
1377+ 92A8              ;now draw the wall based on bc value
1378+ 92A8              ;wall3_start:
1379+ 92A8
1380+ 92A8
1381+ 92A8 78                   ld a,b			               ;b is the loop count i.e # of walls to draw
1382+ 92A9 D6 03               	sub 3			               ;3 = the wall imediately right
1383+ 92AB CA BC 92             jp z,draw_10          ;draw an end wall if blockid=16
1384+ 92AE
1385+ 92AE 78                   ld a,b
1386+ 92AF D6 02                sub 2
1387+ 92B1 CA 2E 93             jp z,draw_10_2L         		;draw the 1st wall to the right
1388+ 92B4
1389+ 92B4 78                   ld a,b
1390+ 92B5 D6 01                sub 1
1391+ 92B7 CA A0 93             jp z,draw_10_3L	       	;draw the 2nd wall to the right
1392+ 92BA
1393+ 92BA E1                   pop hl                  ;nothing to draw so return
1394+ 92BB C9                   ret
1395+ 92BC
1396+ 92BC
1397+ 92BC              draw_10:
1398+ 92BC C5                   push bc
1399+ 92BD D5                   push de                 ;save our display pointer
1400+ 92BE 1B                   dec de
1401+ 92BF 1B                   dec de
1402+ 92C0
1403+ 92C0 06 08                ld b,8                  ;block is 8 blocks high
1404+ 92C2 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
1405+ 92C5 3E B5                ld a, _mediumwall       ;wall on sides facing us
1406+ 92C7 12           loop12: ld (de),a               ; insert the part of the wall.
1407+ 92C8 13                   inc de
1408+ 92C9 12                   ld (de),a               ; insert the part of the wall.
1409+ 92CA 13                   inc de
1410+ 92CB 12                   ld (de),a               ; insert the part of the wall.
1411+ 92CC 13                   inc de
1412+ 92CD 12                   ld (de),a               ; insert the part of the wall.
1413+ 92CE 13                   inc de
1414+ 92CF 12                   ld (de),a               ; insert the part of the wall.
1415+ 92D0 13                   inc de
1416+ 92D1 12                   ld (de),a               ; insert the part of the wall.
1417+ 92D2 13                   inc de
1418+ 92D3 12                   ld (de),a
1419+ 92D4 13                   inc de
1420+ 92D5 12                   ld (de),a
1421+ 92D6 1B                   dec de
1422+ 92D7 1B                   dec de
1423+ 92D8 1B                   dec de
1424+ 92D9 1B                   dec de
1425+ 92DA 1B                   dec de
1426+ 92DB 1B                   dec de
1427+ 92DC 1B                   dec de
1428+ 92DD EB                   ex de,hl
1429+ 92DE 19                   add  hl,de              ; advance to the next row of the display file.
1430+ 92DF EB                   ex de,hl
1431+ 92E0 10 E5                djnz loop12             ;do this 3 times
1432+ 92E2
1433+ 92E2                      ;now draw the blank face to the right of the block
1434+ 92E2                      ;create first column of right face characters
1435+ 92E2 D1                   pop de                  ;back to our original position
1436+ 92E3 D5                   push de
1437+ 92E4 13                   inc de
1438+ 92E5 13                   inc de
1439+ 92E6 13                   inc de
1440+ 92E7 13                   inc de                  ;move ahead 5 spaces in the display (right)
1441+ 92E8 13                   inc de
1442+ 92E9 13                   inc de
1443+ 92EA
1444+ 92EA                  ;    inc de
1445+ 92EA                  ;    inc de
1446+ 92EA                  ;    inc de
1447+ 92EA              ;check if the char to our right is a wall block.
1448+ 92EA              ;if so, do not draw a black face as we need to hide it or it will
1449+ 92EA              ;ovewrite the already drawn block
1450+ 92EA              ;jp cont_2
1451+ 92EA 1A                   ld a,(de)
1452+ 92EB FE B5                cp _mediumwall        ;is there an already drawn screen block here?
1453+ 92ED C2 F4 92             jp nz,cont_2            ;there is no block so draw black edge
1454+ 92F0 D1                   pop de
1455+ 92F1 C1                   pop bc
1456+ 92F2 18 A8                jr go_back3             ;otherwise quit this draw
1457+ 92F4
1458+ 92F4 EB           cont_2: ex  de,hl
1459+ 92F5 11 21 00             ld de,$0021
1460+ 92F8
1461+ 92F8              ;loop for 2 columns
1462+ 92F8
1463+ 92F8 06 02                ld b,2                  ; loop 2 times for 2 columns
1464+ 92FA 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1465+ 92FD 3E 07                ld a,7
1466+ 92FF 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1467+ 9302
1468+ 9302              loop12b:
1469+ 9302 C5                   push bc                 ;save count
1470+ 9303 3A 04 FA             ld a,(var1)
1471+ 9306 47                   ld b,a                  ;holds the column height in chars
1472+ 9307 3E B3                ld  a,_topcorner4      ;triangle sloping to right bottom
1473+ 9309 77                   ld  (hl),a
1474+ 930A
1475+ 930A              loop12a:                   ;we must start at 5 to draw 4 face blocks on right
1476+ 930A 19                   add hl,de
1477+ 930B 3E AF                ld  a,_black      ;triangle sloping to right bottom
1478+ 930D 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1479+ 930E 10 FA                djnz loop12a
1480+ 9310
1481+ 9310
1482+ 9310 3E B0                ld  a,_topcorner1
1483+ 9312 77                   ld  (hl),a
1484+ 9313
1485+ 9313                      ;now change column count
1486+ 9313 3A 04 FA             ld a,(var1)
1487+ 9316 D6 02                sub 2                   ;subtract 2
1488+ 9318 32 04 FA             ld (var1),a
1489+ 931B C1                   pop bc
1490+ 931C
1491+ 931C 2A 13 FA             ld hl,(var5)
1492+ 931F 23                   inc hl                  ;move print position to the right
1493+ 9320 11 21 00             ld de,$21               ;move top of next column down and across 1
1494+ 9323 19                   add hl,de
1495+ 9324 22 13 FA             ld (var5),hl
1496+ 9327
1497+ 9327 10 D9                djnz loop12b
1498+ 9329 D1                   pop de
1499+ 932A C1                   pop bc
1500+ 932B C3 9C 92             jp go_back3              ; jump back to main loop
1501+ 932E
1502+ 932E
1503+ 932E              ;#############################################
1504+ 932E              ;     draw the 2nd LEFT block
1505+ 932E              ;#############################################
1506+ 932E
1507+ 932E              draw_10_2L:
1508+ 932E
1509+ 932E C5                    push bc
1510+ 932F 11 FF C0              ld de, $c110-17          ;start print position of wall
1511+ 9332 D5                   push de
1512+ 9333              ;dont draw a front wall as we never see it.
1513+ 9333
1514+ 9333 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1515+ 9336 19                   add hl,de
1516+ 9337 EB                   ex de,hl
1517+ 9338              ;we do not need a front wall for this row as it is never seen.
1518+ 9338              ;below jp code can be removed :) Because a square block here
1519+ 9338              ;is 8 x 8
1520+ 9338
1521+ 9338 13                   inc de                  ;move ahead 1 space in the display (right)
1522+ 9339
1523+ 9339              ;check if the char to our left is a wall block.
1524+ 9339              ;if so, do not draw a black face as we need to hide it or it will
1525+ 9339              ;ovewrite the already drawn block
1526+ 9339 1A                    ld a,(de)
1527+ 933A FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1528+ 933C C2 44 93              jp nz,cont_2r_2L            ;there is no block so draw black edge
1529+ 933F D1                    pop de
1530+ 9340 C1                    pop bc
1531+ 9341 C3 9C 92              jp go_back3             ;otherwise quit this draw
1532+ 9344
1533+ 9344
1534+ 9344              ;draw the black edge wall
1535+ 9344
1536+ 9344              cont_2r_2L:
1537+ 9344 EB                    ex  de,hl
1538+ 9345 11 21 00              ld de,$0021
1539+ 9348
1540+ 9348              ;need to loop 2 times drawing 2 lots of 3 top
1541+ 9348              ;& bottom chars- move down 1after 1st 3 top chars drawn
1542+ 9348              ;
1543+ 9348
1544+ 9348 3E 02                ld a,2
1545+ 934A 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1546+ 934D
1547+ 934D              ;loop for 3 black wall columns
1548+ 934D 3E 07                ld a,7                  ;column start height
1549+ 934F 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1550+ 9352
1551+ 9352 06 03        loop_xL:ld b,3                  ;loop 3 times for 3 columns
1552+ 9354 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1553+ 9357 3E 95                ld a,$95
1554+ 9359 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1555+ 935C
1556+ 935C              loop12br_2L:
1557+ 935C C5                   push bc                 ;save count
1558+ 935D 3A 04 FA             ld a,(var1)             ;column height
1559+ 9360 47                   ld b,a                  ;holds the column height in chars
1560+ 9361 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1561+ 9364 F5                   push af                 ;save a for bottom corners
1562+ 9365 77                   ld  (hl),a
1563+ 9366
1564+ 9366              loop12ar_2L:
1565+ 9366 19                   add hl,de
1566+ 9367 3E AF                ld  a,_black            ;black wall fill
1567+ 9369 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1568+ 936A 10 FA                djnz loop12ar_2L
1569+ 936C
1570+ 936C F1                   pop af                  ;retrivetop corner
1571+ 936D 3C                   inc a                   ;prep for next top corner
1572+ 936E 32 05 FA             ld (var2),a             ;re-save it for next corner
1573+ 9371 C6 02                add a,2;4                 ;get the correct char to print
1574+ 9373 77                   ld  (hl),a              ;draw the bottom of the wall
1575+ 9374
1576+ 9374                      ;now change column count
1577+ 9374 3A 04 FA             ld a,(var1)
1578+ 9377 C1                   pop bc
1579+ 9378
1580+ 9378 2A 13 FA             ld hl,(var5)
1581+ 937B 23                   inc hl                  ;move print position to the left
1582+ 937C 22 13 FA             ld (var5),hl
1583+ 937F
1584+ 937F 10 DB                djnz loop12br_2L
1585+ 9381
1586+ 9381              ;1st set of 3 top bits drawn
1587+ 9381              ;now jump down the display 1 line
1588+ 9381              ;then draw another 3 columns
1589+ 9381
1590+ 9381 3A 18 FA             ld a,(var7)             ;get our loop counter
1591+ 9384 3D                   dec a
1592+ 9385 28 12                jr z,exit_1L             ;exit after 2 loops
1593+ 9387 32 18 FA             ld (var7),a             ;save it
1594+ 938A 2A 13 FA             ld hl,(var5)
1595+ 938D              ;get our last print position
1596+ 938D                                              ;need to go to next line -1 char
1597+ 938D 19                   add hl,de
1598+ 938E                                              ; now move back in the display
1599+ 938E                                              ;1 char
1600+ 938E 22 13 FA             ld (var5),hl            ;re save it for use above
1601+ 9391
1602+ 9391 3E 05                ld a,5                  ;reduce black wall column height
1603+ 9393 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1604+ 9396
1605+ 9396 C3 52 93             jp loop_xL
1606+ 9399
1607+ 9399
1608+ 9399 D1           exit_1L: pop de
1609+ 939A C1                   pop bc
1610+ 939B 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1611+ 939D
1612+ 939D C3 9C 92             jp go_back3              ; jump back to main loop
1613+ 93A0
1614+ 93A0              ;#############################################
1615+ 93A0              ;*Draw the 3rd LEFT block of section3
1616+ 93A0              ;#############################################
1617+ 93A0
1618+ 93A0              ; we only need to draw 2 columns of black sides.
1619+ 93A0              ; if theres no brick pattern !
1620+ 93A0
1621+ 93A0              draw_10_3L:
1622+ 93A0 C5                   push bc
1623+ 93A1 D5                   push de                 ;save our display pointer
1624+ 93A2
1625+ 93A2 21 29 C1             ld hl,$C18C-66-30-3              ;start of drawing
1626+ 93A5 7E                   ld a,(hl)               ;read what char is there
1627+ 93A6 FE B5                cp _mediumwall
1628+ 93A8 20 05                jr nz,cont_1r_4L        ;exit if a wall is already there
1629+ 93AA D1                   pop de
1630+ 93AB C1                   pop bc
1631+ 93AC C3 8F 90             jp go_back4             ;otherwise quit this draw
1632+ 93AF
1633+ 93AF              cont_1r_4L:
1634+ 93AF
1635+ 93AF 3E C9                ld a,$c9
1636+ 93B1 77                   ld (hl),a
1637+ 93B2
1638+ 93B2 3E AF                ld a,_black
1639+ 93B4 11 21 00             ld de,33                ;1 line width
1640+ 93B7
1641+ 93B7 CD C3 93             CALL black_wall         ;draw 4 black blocks
1642+ 93BA
1643+ 93BA 19                   add hl,de               ;jump to next line below
1644+ 93BB
1645+ 93BB
1646+ 93BB              ;top half done - so do bottom half - 2 blacks first
1647+ 93BB
1648+ 93BB              ;de already holds 32
1649+ 93BB
1650+ 93BB 3E CE                ld a,$ce
1651+ 93BD 77                   ld (hl),a
1652+ 93BE
1653+ 93BE D1                   pop de
1654+ 93BF C1                   pop bc
1655+ 93C0 C3 9C 92             jp go_back3
1656+ 93C3
1657+ 93C3              ;draw 2 black walls across 1 line
1658+ 93C3              black_wall:
1659+ 93C3 19                   add hl,de      ;jump 1 line below
1660+ 93C4 77                   ld (hl),a
1661+ 93C5 19                   add hl,de      ;jump 1 line below
1662+ 93C6 77                   ld (hl),a
1663+ 93C7 19                   add hl,de      ;jump 1 line below
1664+ 93C8 77                   ld (hl),a
1665+ 93C9 19                   add hl,de      ;jump 1 line below
1666+ 93CA 77                   ld (hl),a
1667+ 93CB
1668+ 93CB
1669+ 93CB C9                   ret
1670+ 93CC
1671+ 93CC
1672+ 93CC
1673+ 93CC              ;#############################################
1674+ 93CC              ;#############################################
1675+ 93CC              ; draw 2nd layer
1676+ 93CC              ;#############################################
1677+ 93CC              ;#############################################
1678+ 93CC
1679+ 93CC              draw_2:
1680+ 93CC              ;
1681+ 93CC              ;ret
1682+ 93CC              ; hl=maze location being drawn.
1683+ 93CC              ; now determine what to draw for this section.
1684+ 93CC
1685+ 93CC
1686+ 93CC 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1687+ 93CF
1688+ 93CF CD DD 8C             call load_de            ;get left and right and front jump into de reg
1689+ 93D2
1690+ 93D2 19                   add hl,de               ;jump backwards along the user view 1 space
1691+ 93D3 22 25 FA             ld (furthest_point),hl ;re save it
1692+ 93D6
1693+ 93D6 11 FF FF             ld de,$ffff             ;to move the display position -1
1694+ 93D9 ED 53 11 FA          ld (var4),de
1695+ 93DD
1696+ 93DD ED 5B 0B FA          ld de,(left)
1697+ 93E1
1698+ 93E1              ;we need to move pointer 1 to the left for wall checking
1699+ 93E1 19                   add hl,de
1700+ 93E2 22 15 FA             ld (var6),hl ;re save it
1701+ 93E5
1702+ 93E5 ED 53 0F FA          ld (var3),de
1703+ 93E9
1704+ 93E9 11 A4 00             ld  de,$a4           ; offset to row10 column 7 - left of  centre of the 3d view.
1705+ 93EC CD F2 93             call do_draw_2
1706+ 93EF
1707+ 93EF C3 84 94             jp draw_1           ;now draw the 2nd level
1708+ 93F2
1709+ 93F2              do_draw_2:
1710+ 93F2
1711+ 93F2 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
1712+ 93F5 19                   add  hl,de
1713+ 93F6
1714+ 93F6
1715+ 93F6              ; draw left half then right half of the display.
1716+ 93F6
1717+ 93F6 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1718+ 93F8                                              ; 0 is not counted so loops 12 times
1719+ 93F8 ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1720+ 93FC EB                   ex   de,hl              ; transfer de to hl.
1721+ 93FD
1722+ 93FD              ;       hl = furthest point in the maze
1723+ 93FD              ;       de = d_file location to store byte to display
1724+ 93FD
1725+ 93FD E5           loop14: push hl
1726+ 93FE
1727+ 93FE              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1728+ 93FE
1729+ 93FE 3A 28 FA             ld a,(maze_highbyte)
1730+ 9401 BC                   cp h                    ;are we at the top part of the maze?
1731+ 9402 CA 0D 94             jp z,cont_2s
1732+ 9405                                              ;if we are on a different maze boundary
1733+ 9405                                              ;then draw a maze wall as we are the top
1734+ 9405                                              ;or north wall but maze data has no
1735+ 9405                                              ;wall data.
1736+ 9405
1737+ 9405 3E 01                ld a,1
1738+ 9407 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1739+ 9408 C6 7F                add a,127               ;make sure we set a wall!
1740+ 940A C3 22 94             jp do_wall2             ;jump straight to making an end wall
1741+ 940D
1742+ 940D              ;*#########################################
1743+ 940D              cont_2s:
1744+ 940D 7E                   ld a,(hl)
1745+ 940E 17                   rla
1746+ 940F DA 22 94             jp c,do_wall2            ;bit 7 (128)
1747+ 9412
1748+ 9412                     ; call do_no_wall2         ; otherwise draw no wall
1749+ 9412
1750+ 9412              go_back2:
1751+ 9412 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1752+ 9415 19                   add hl,de               ; holds current screen position
1753+ 9416 EB                   ex de,hl
1754+ 9417 E1                   pop hl
1755+ 9418 D5                   push de
1756+ 9419 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1757+ 941D 19                   add hl,de                ; go left 1 block in the maze
1758+ 941E D1                   pop de
1759+ 941F 10 DC                djnz loop14
1760+ 9421 C9                   ret
1761+ 9422              ;now do the 2nd position
1762+ 9422
1763+ 9422
1764+ 9422              do_wall2:
1765+ 9422                      ;check if bit 2 is set as thats an end
1766+ 9422                      ;and b must then be changed to 1 to stop drawing.
1767+ 9422
1768+ 9422 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1769+ 9424 28 02                jr z,draw_11
1770+ 9426 06 01                ld b,1                  ;set b so we exit on return
1771+ 9428
1772+ 9428              draw_11:
1773+ 9428                                   ; draw the wall face bit
1774+ 9428 C5                   push bc
1775+ 9429 D5                   push de
1776+ 942A 13                   inc de
1777+ 942B                                     ;save our display pointer
1778+ 942B 06 0E                ld b,14                  ;block is 14 blocks high
1779+ 942D 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1780+ 9430 3E B6                ld   a,_largewall            ;wall on sides facing us
1781+ 9432              loop13:
1782+ 9432 12                   ld (de),a             ; insert the part of the wall.
1783+ 9433 13                   inc de
1784+ 9434 12                   ld (de),a               ;put grey side to our right
1785+ 9435 13                   inc de
1786+ 9436 12                   ld (de),a               ;put grey side to our right
1787+ 9437 13                   inc de
1788+ 9438 12                   ld (de),a               ;put grey side to our right
1789+ 9439 13                   inc de
1790+ 943A 12                   ld (de),a               ;put grey side to our right
1791+ 943B 1B                   dec de
1792+ 943C 1B                   dec de
1793+ 943D 1B                   dec de
1794+ 943E 1B                   dec de
1795+ 943F EB                   ex de,hl
1796+ 9440 19                   add  hl,de              ; advance to the next row of the display file.
1797+ 9441 EB                   ex de,hl
1798+ 9442 10 EE                djnz loop13             ;do this 3 times
1799+ 9444
1800+ 9444                      ;now draw the blank face to the right of the block
1801+ 9444                      ;create first column of right face characters
1802+ 9444 D1                   pop de                  ;back to our original position
1803+ 9445 13                   inc de
1804+ 9446 13                   inc de
1805+ 9447 13                   inc de                  ;move ahead 6 spaces in the display (right)
1806+ 9448 13                   inc de
1807+ 9449 13                   inc de
1808+ 944A 13                   inc de
1809+ 944B EB                   ex  de,hl
1810+ 944C 11 21 00             ld de,$0021
1811+ 944F
1812+ 944F 06 03                ld b,3                  ; for 8 face columns to draw to draw
1813+ 9451 22 13 FA             ld (var5),hl
1814+ 9454 3E 0D                ld a,13                 ; for 14 blocks high per column
1815+ 9456 32 04 FA             ld (var1),a
1816+ 9459
1817+ 9459              loop13b:
1818+ 9459 C5                   push bc
1819+ 945A 3A 04 FA             ld a,(var1)
1820+ 945D 47                   ld b,a
1821+ 945E 3E B3                ld a,_topcorner4
1822+ 9460 77                   ld (hl),a
1823+ 9461
1824+ 9461              loop13a:
1825+ 9461 19                   add hl,de
1826+ 9462 3E AF                ld  a,_black  ;leftinnerwall  ;black      ;triangle sloping to right bottom
1827+ 9464 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1828+ 9465 10 FA                djnz loop13a
1829+ 9467
1830+ 9467                      ;ld  (hl),a
1831+ 9467 3E B0                ld  a,_topcorner1
1832+ 9469 77                   ld  (hl),a
1833+ 946A
1834+ 946A              ; now change the column count
1835+ 946A 3A 04 FA             ld a,(var1)
1836+ 946D D6 02                sub 2
1837+ 946F 32 04 FA             ld (var1),a
1838+ 9472 C1                   pop bc
1839+ 9473
1840+ 9473 2A 13 FA             ld hl,(var5)
1841+ 9476 23                   inc hl
1842+ 9477 11 21 00             ld de,$21
1843+ 947A 19                   add hl,de
1844+ 947B 22 13 FA             ld (var5),hl
1845+ 947E
1846+ 947E 10 D9                djnz loop13b
1847+ 9480
1848+ 9480 C1                   pop bc
1849+ 9481 C3 12 94             jp go_back2              ; jump back to main loop
1850+ 9484
1851+ 9484
1852+ 9484              ;#############################################
1853+ 9484              ; draw 1st layer
1854+ 9484              ;#############################################
1855+ 9484
1856+ 9484              draw_1:
1857+ 9484
1858+ 9484              ;ret
1859+ 9484              ; hl=maze location being drawn.
1860+ 9484              ; now determine what to draw for this section.
1861+ 9484
1862+ 9484
1863+ 9484 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1864+ 9487
1865+ 9487 CD DD 8C             call load_de            ;get left and right and front jump into de reg
1866+ 948A
1867+ 948A 19                   add hl,de               ;jump backwards along the user view 1 space
1868+ 948B 22 25 FA             ld (furthest_point),hl ;re save it
1869+ 948E
1870+ 948E 11 FF FF             ld de,$ffff             ;to move the display position -1
1871+ 9491 ED 53 11 FA          ld (var4),de
1872+ 9495
1873+ 9495 ED 5B 0B FA          ld de,(left)
1874+ 9499
1875+ 9499              ;we need to move pointer 1 to the left for wall checking
1876+ 9499 19                   add hl,de
1877+ 949A 22 15 FA             ld (var6),hl
1878+ 949D
1879+ 949D ED 53 0F FA          ld (var3),de
1880+ 94A1 11 20 00             ld  de,$020           ; offset to row 1 column 0 - left of  centre of the 3d view.
1881+ 94A4 CD AA 94             call do_draw_1
1882+ 94A7
1883+ 94A7 C3 2D 95             jp draw_0           ;now draw the 2nd level
1884+ 94AA
1885+ 94AA              do_draw_1:
1886+ 94AA
1887+ 94AA 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
1888+ 94AD 19                   add  hl,de
1889+ 94AE
1890+ 94AE
1891+ 94AE              ; draw left half then right half of the display.
1892+ 94AE
1893+ 94AE 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1894+ 94B0                                              ; 0 is not counted so loops 12 times
1895+ 94B0 ED 5B 15 FA          ld   de,(var6); retrieve the maze location.
1896+ 94B4 EB                   ex   de,hl              ; transfer de to hl.
1897+ 94B5
1898+ 94B5              ;       hl = furthest point in the maze
1899+ 94B5              ;       de = d_file location to store byte to display
1900+ 94B5
1901+ 94B5 E5           loop15: push hl
1902+ 94B6
1903+ 94B6              ;see if we are at the north wall. If we dont, we get a left wall
1904+ 94B6              ;drawn because we implicitly draw a wall if we are at the top
1905+ 94B6
1906+ 94B6              ;        ld a,(player_dir)
1907+ 94B6              ;        cp 2                    ;r we looking south
1908+ 94B6              ;        jp z,cont_7
1909+ 94B6              ;        ld a,l
1910+ 94B6              ;        cp 17
1911+ 94B6              ;        jp c,do_wall1
1912+ 94B6
1913+ 94B6              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1914+ 94B6
1915+ 94B6 3A 28 FA             ld a,(maze_highbyte)
1916+ 94B9 BC                   cp h                    ;are we at the top part of the maze?
1917+ 94BA CA C5 94             jp z,cont_7
1918+ 94BD                                              ;if we are on a different maze boundary
1919+ 94BD                                              ;then draw a maze wall as we are the top
1920+ 94BD                                              ;or north wall but maze data has no
1921+ 94BD                                              ;wall data.
1922+ 94BD
1923+ 94BD 3E 01                ld a,1
1924+ 94BF 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1925+ 94C0 C6 7F                add a,127               ;make sure we set a wall!
1926+ 94C2 C3 DA 94             jp do_wall1             ;jump straight to making an end wall
1927+ 94C5
1928+ 94C5              ;#########################################################
1929+ 94C5
1930+ 94C5 7E           cont_7: ld a,(hl)
1931+ 94C6 17                   rla
1932+ 94C7 DA DA 94             jp c,do_wall1            ;bit 7 (128)
1933+ 94CA
1934+ 94CA                     ; call do_no_wall1         ; otherwise draw no wall
1935+ 94CA
1936+ 94CA              go_back1:
1937+ 94CA 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
1938+ 94CD 19                   add hl,de               ; holds current screen position
1939+ 94CE EB                   ex de,hl
1940+ 94CF E1                   pop hl
1941+ 94D0 D5                   push de
1942+ 94D1 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1943+ 94D5 19                   add hl,de                ; go left 1 block in the maze
1944+ 94D6 D1                   pop de
1945+ 94D7 10 DC                djnz loop15
1946+ 94D9
1947+ 94D9              ;jp draw_0
1948+ 94D9 C9                   ret
1949+ 94DA              ;now do the 2nd position
1950+ 94DA
1951+ 94DA
1952+ 94DA
1953+ 94DA              ; there is not a wall so insert black to show that the location is too far away to see its detail.
1954+ 94DA
1955+ 94DA              do_wall1:
1956+ 94DA                      ;check if bit 2 is set as thats an end
1957+ 94DA                      ;and b must then be changed to 1 to stop drawing.
1958+ 94DA
1959+ 94DA CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1960+ 94DC 28 02                jr z,draw_12
1961+ 94DE 06 01                ld b,1                  ;set b so we exit on return
1962+ 94E0
1963+ 94E0              ;draw the corridor bit to the left (1 column)
1964+ 94E0              draw_12:
1965+ 94E0 C5                   push bc
1966+ 94E1 D5                   push de                 ;save our display pointer
1967+ 94E2 06 16                ld b,22                  ;block is 22 blocks high
1968+ 94E4 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1969+ 94E7 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1970+ 94E9 12           loop16: ld   (de),a             ; insert thepart of the wall.
1971+ 94EA 13                   inc de
1972+ 94EB 12                   ld (de),a               ;put grey side to our right
1973+ 94EC                      ;inc de
1974+ 94EC                      ;ld (de),a               ;put grey side to our right
1975+ 94EC                      ;inc de
1976+ 94EC                      ;ld (de),a               ;put grey side to our right
1977+ 94EC                      ;inc de
1978+ 94EC                      ;ld (de),a               ;put grey side to our right
1979+ 94EC                      ;dec de
1980+ 94EC                      ;dec de
1981+ 94EC                      ;dec de
1982+ 94EC 1B                   dec de
1983+ 94ED EB                   ex de,hl
1984+ 94EE 19                   add  hl,de              ; advance to the next row of the display file.
1985+ 94EF EB                   ex de,hl
1986+ 94F0 10 F7                djnz loop16             ;do this 3 times
1987+ 94F2
1988+ 94F2                      ;now draw the blank face to the right of the block
1989+ 94F2                      ;create first column of right face characters
1990+ 94F2 D1                   pop de                  ;back to our original position
1991+ 94F3                      ;inc de
1992+ 94F3                      ;inc de
1993+ 94F3                      ;inc de                  ;move ahead 4 spaces in the display (right)
1994+ 94F3 13                   inc de
1995+ 94F4 13                   inc de
1996+ 94F5 EB                   ex  de,hl
1997+ 94F6 11 21 00             ld de,$0021
1998+ 94F9
1999+ 94F9              ;now draw the face we see on our left as we walk forward
2000+ 94F9 06 04                ld b,4                  ; for 8 face columns to draw to draw
2001+ 94FB 22 13 FA             ld (var5),hl
2002+ 94FE 3E 15                ld a,21                 ; for 14 blocks high per column
2003+ 9500 32 04 FA             ld (var1),a
2004+ 9503
2005+ 9503              loop14b:
2006+ 9503 C5                   push bc
2007+ 9504 3A 04 FA             ld a,(var1)
2008+ 9507 47                   ld b,a
2009+ 9508 3E B3                ld a,_topcorner4
2010+ 950A 77                   ld (hl),a
2011+ 950B
2012+ 950B              loop14a:
2013+ 950B 19                   add hl,de
2014+ 950C 3E AF                ld  a,_black            ;triangle sloping to right bottom
2015+ 950E 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
2016+ 950F 10 FA                djnz loop14a
2017+ 9511
2018+ 9511                      ;ld  (hl),a
2019+ 9511 3E B0                ld  a,_topcorner1
2020+ 9513 77                   ld  (hl),a
2021+ 9514
2022+ 9514              ; now change the column count
2023+ 9514 3A 04 FA             ld a,(var1)
2024+ 9517 D6 02                sub 2
2025+ 9519 32 04 FA             ld (var1),a
2026+ 951C C1                   pop bc
2027+ 951D
2028+ 951D 2A 13 FA             ld hl,(var5)
2029+ 9520 23                   inc hl
2030+ 9521 11 21 00             ld de,$21
2031+ 9524 19                   add hl,de
2032+ 9525 22 13 FA             ld (var5),hl
2033+ 9528
2034+ 9528 10 D9                djnz loop14b
2035+ 952A
2036+ 952A C1                   pop bc
2037+ 952B 18 9D                jr go_back1              ; jump back to main loop
2038+ 952D
2039+ 952D              ;        jp draw_1               ;draw next layer
2040+ 952D
2041+ 952D              ; there is a wall so insert chequerboard for the wall face.
2042+ 952D
2043+ 952D              ;do_no_wall1:
2044+ 952D              ;        ret ; no wall so do nothing
2045+ 952D              ;        push de
2046+ 952D              ;        ld   a,_topwhitebottomchequer
2047+ 952D              ;        ld   (de),a                             ; insert the top of the wall face.
2048+ 952D              ;        ld   hl,$0021
2049+ 952D              ;        add  hl,de                              ; advance to the next row of the display file.
2050+ 952D              ;        ld   (hl),_topchequerbottomwhite        ; insert the bottom of the wall face.
2051+ 952D              ;        pop de
2052+ 952D              ;        ret
2053+ 952D
2054+ 952D
2055+ 952D
2056+ 952D
2057+ 952D              ;#############################################
2058+ 952D              ; draw layer 0
2059+ 952D              ;#############################################
2060+ 952D
2061+ 952D              draw_0:
2062+ 952D              ;ret
2063+ 952D
2064+ 952D
2065+ 952D              ; hl=maze location being drawn.
2066+ 952D              ; now determine what to draw for this section.
2067+ 952D
2068+ 952D
2069+ 952D 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
2070+ 9530
2071+ 9530 CD DD 8C             call load_de            ;get left and right and front jump into de reg
2072+ 9533
2073+ 9533 19                   add hl,de               ;jump backwards along the user view 1 space
2074+ 9534
2075+ 9534              ;move map pointer left to read the walls
2076+ 9534              ;;        ld de,(left)
2077+ 9534              ;;        add hl,de
2078+ 9534
2079+ 9534
2080+ 9534
2081+ 9534              ;;        ld (furthest_point),hl ;re save it
2082+ 9534
2083+ 9534              ;        ld de,$ffff             ;to move the display position -1
2084+ 9534              ;        ld (var4),de
2085+ 9534
2086+ 9534 ED 5B 0B FA          ld de,(left)
2087+ 9538
2088+ 9538              ;we need to move pointer 1 to the left for wall checking
2089+ 9538 19                   add hl,de
2090+ 9539 22 15 FA             ld (var6),hl
2091+ 953C
2092+ 953C ED 53 0F FA          ld (var3),de
2093+ 9540 11 00 00             ld  de,$00              ;offset to row0 column 0 - left of  centre of the 3d view.
2094+ 9543                                              ;1 column of left face to draw
2095+ 9543                  ;    call do_draw_0
2096+ 9543
2097+ 9543
2098+ 9543              do_draw_0:
2099+ 9543
2100+ 9543 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
2101+ 9546 19                   add  hl,de
2102+ 9547
2103+ 9547
2104+ 9547              ; draw left half then right half of the display.
2105+ 9547
2106+ 9547 06 01                ld b,1                 ; count for 2 blocks left or right of display file
2107+ 9549 ED 5B 15 FA          ld de,(var6)           ; 0 is not counted so loops 12 times
2108+ 954D                     ; ld   de,(furthest_point); retrieve the maze location.
2109+ 954D EB                   ex   de,hl              ; transfer de to hl.
2110+ 954E
2111+ 954E              ;       hl = furthest point in the maze
2112+ 954E              ;       de = d_file location to store byte to display
2113+ 954E
2114+ 954E              loop17: ;push hl
2115+ 954E
2116+ 954E
2117+ 954E              ;check if we are at the north wall
2118+ 954E
2119+ 954E              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
2120+ 954E
2121+ 954E 3A 28 FA             ld a,(maze_highbyte)
2122+ 9551 BC                   cp h                    ;are we at the top part of the maze?
2123+ 9552 CA 5D 95             jp z,cont_4
2124+ 9555                                              ;if we are on a different maze boundary
2125+ 9555                                              ;then draw a maze wall as we are the top
2126+ 9555                                              ;or north wall but maze data has no
2127+ 9555                                              ;wall data.
2128+ 9555
2129+ 9555 3E 01                ld a,1
2130+ 9557 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
2131+ 9558 C6 7F                add a,127               ;make sure we set a wall!
2132+ 955A C3 6B 95             jp draw_13             ;jump straight to making an end wall
2133+ 955D
2134+ 955D              ;##########################################
2135+ 955D
2136+ 955D 7E           cont_4: ld a,(hl)
2137+ 955E 17                   rla
2138+ 955F DA 63 95             jp c,do_wall0            ;bit 7 (128)
2139+ 9562
2140+ 9562 C9                   ret
2141+ 9563
2142+ 9563
2143+ 9563
2144+ 9563              do_wall0:
2145+ 9563                      ;check if bit 2 is set as thats an end
2146+ 9563                      ;and b must then be changed to 1 to stop drawing.
2147+ 9563
2148+ 9563 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
2149+ 9565 DA 6B 95             jp c,draw_13
2150+ 9568
2151+ 9568 C3 84 95             jp draw_brick_l         ; otherwise draw no wall
2152+ 956B
2153+ 956B              ;we need to draw 1 vertical line from pos 1,1 to show
2154+ 956B              ;the side of the block.
2155+ 956B
2156+ 956B              ;draw the sidewall brick pattern
2157+ 956B              draw_13:
2158+ 956B 3E B3                ld a,_topcorner4
2159+ 956D 12                   ld (de),a
2160+ 956E 21 21 00             ld hl,$21                ;jp to next line below
2161+ 9571 19                   add hl,de
2162+ 9572 EB                   ex de,hl
2163+ 9573
2164+ 9573 06 16                ld b,22                  ;block is 24 blocks high
2165+ 9575 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
2166+ 9578 3E AF                ld a,_black            ;wall on sides facing us;
2167+ 957A 12           loop18: ld (de),a             ; insert the part of the wall.
2168+ 957B EB                   ex de,hl
2169+ 957C 19                   add  hl,de              ; advance to the next row of the display file.
2170+ 957D EB                   ex de,hl
2171+ 957E 10 FA                djnz loop18
2172+ 9580
2173+ 9580 3E B0                ld a,_topcorner1
2174+ 9582 12                   ld (de),a
2175+ 9583 C9                   ret
2176+ 9584
2177+ 9584              draw_brick_l:
2178+ 9584 21 21 00             ld hl,$21                ;jp to next line below
2179+ 9587 19                   add hl,de
2180+ 9588 EB                   ex de,hl
2181+ 9589
2182+ 9589 06 16                ld b,22                  ;block is 24 blocks high
2183+ 958B 21 21 00             ld hl,$021
2184+ 958E                                         ;load with 32 to jump to line below us
2185+ 958E 3E B8                ld a,_hugewall;_largewall            ;wall on sides facing us;
2186+ 9590              loop18l:
2187+ 9590 12                   ld (de),a             ; insert the part of the wall.
2188+ 9591 EB                   ex de,hl
2189+ 9592 19                   add  hl,de              ; advance to the next row of the display file.
2190+ 9593 EB                   ex de,hl
2191+ 9594 10 FA                djnz loop18l
2192+ 9596
2193+ 9596 C9                   ret
2194+ 9597
# file closed: src/4-rd3dmazeV6.asm
 450  9597                  INCLUDE "5-rd3dmazeV6.asm" ; draw wall in front of player+setup right part of screen
# file opened: src/5-rd3dmazeV6.asm
   1+ 9597
   2+ 9597
   3+ 9597              ;#############################################
   4+ 9597              ;original code to draw maze FRONT walls here from 3D Monster Maze
   5+ 9597              ;call it a homage ;)
   6+ 9597              ;#############################################
   7+ 9597
   8+ 9597
   9+ 9597              ; ############################
  10+ 9597              ; draw wall in front of player
  11+ 9597              ; ############################
  12+ 9597
  13+ 9597              ; a wall face must be drawn centred within the view.
  14+ 9597              ; the wall face is one character wider than it is high.
  15+ 9597
  16+ 9597              draw_front_view:
  17+ 9597
  18+ 9597              ;        ld a,(depth)            ;find out how far we can see - will never be higher than 6
  19+ 9597 3A 02 FA             ld a, (maxview)
  20+ 959A FE 06                cp 6
  21+ 959C C8                   ret z				               ;too far away so return doing nothing
  22+ 959D FE 05        	    cp 5
  23+ 959F C8                   ret z
  24+ 95A0 C2 AD 95             jp nz,set4
  25+ 95A3 0E 0D                ld c,13;12
  26+ 95A5 3E B4        		ld a,_smallwall			      ;this is the character to draw (brick pattern)
  27+ 95A7 32 04 FA     		ld (var1),a
  28+ 95AA C3 F0 95             jp draw_wall
  29+ 95AD FE 04        set4:   cp 4
  30+ 95AF C2 BC 95             jp nz,set3
  31+ 95B2 0E 0B                ld c,11
  32+ 95B4 3E B4        		ld a,_smallwall 			     ;this is the character to draw (brick pattern)
  33+ 95B6 32 04 FA     		ld (var1),a
  34+ 95B9 C3 F0 95             jp draw_wall
  35+ 95BC FE 03        set3:   cp 3
  36+ 95BE C2 CB 95             jp nz,set2
  37+ 95C1 0E 0A                ld c,10
  38+ 95C3 3E B7        		ld a,_mediumwall_1			   ;this is the character to draw (brick pattern)
  39+ 95C5 32 04 FA     		ld (var1),a
  40+ 95C8 C3 F0 95             jp draw_wall
  41+ 95CB FE 02        set2:   cp 2
  42+ 95CD C2 DA 95             jp nz,set1
  43+ 95D0 0E 08                ld c,8
  44+ 95D2 3E B5        		ld a,_mediumwall			      ;this is the character to draw (brick pattern)
  45+ 95D4 32 04 FA     		ld (var1),a
  46+ 95D7 C3 F0 95             jp draw_wall
  47+ 95DA FE 01        set1:   cp 1
  48+ 95DC C2 E9 95             jp nz,set0
  49+ 95DF 0E 05                ld c,5
  50+ 95E1 3E B6        		ld a,_largewall			      ;this is the character to draw (brick pattern)
  51+ 95E3 32 04 FA     		ld (var1),a
  52+ 95E6 C3 F0 95             jp draw_wall
  53+ 95E9              ;must be zero if we get here
  54+ 95E9 0E 01        set0:   ld c,1
  55+ 95EB 3E B8                ld a,_hugewall;_largewall
  56+ 95ED 32 04 FA             ld (var1),a
  57+ 95F0
  58+ 95F0              draw_wall:
  59+ 95F0              ;ld c,1 ;section from player
  60+ 95F0
  61+ 95F0 2A 71 81     l49f6:  ld   hl,(d_file)                        ; fetch the location of the display file.
  62+ 95F3 11 21 00             ld   de,$0021                           ; each row is 33 characters wide.
  63+ 95F6
  64+ 95F6              ;        ld   bc,(l4085)                         ; fetch the details for the section: b=width of section, c=distance of section from player.
  65+ 95F6 06 00                ld   b,$00
  66+ 95F8 09                   add  hl,bc                              ; advance across the screen to the current distance of the wall.
  67+ 95F9
  68+ 95F9 3E 19                ld   a,$19                              ; the width of the view.
  69+ 95FB 41                   ld   b,c                                ; fetch the distance.
  70+ 95FC CB 20                sla  b                                  ; multiply the distance by 2 since the wall be spans to the left and right of the centre column of the view.
  71+ 95FE 90                   sub  b                                  ; determine the width of the wall face.
  72+ 95FF 47                   ld   b,a                                ; b=width of the wall face (it will be an odd number of characters).
  73+ 9600
  74+ 9600 D6 01                sub  $01                                ; determine the wall height (it will be an even number of characters).
  75+ 9602
  76+ 9602              ; enter a loop to draw each column of the wall face.
  77+ 9602
  78+ 9602 C5           l4a0d:  push bc                                 ; save the wall face width.
  79+ 9603 E5                   push hl                                 ; save the address within the display file.
  80+ 9604
  81+ 9604 41                   ld   b,c                                ; fetch the distance, which corresponds to the number of blank rows to show above the wall face.
  82+ 9605
  83+ 9605 36 20        l4a10:  ld   (hl),_space                        ; insert a space above the wall face.
  84+ 9607 19                   add  hl,de                              ; advance to the next row.
  85+ 9608 10 FB                djnz l4a10                              ; repeat for all rows above the wall face.
  86+ 960A
  87+ 960A 47                   ld   b,a                                ; fetch the wall height.
  88+ 960B
  89+ 960B F5           l4a16:  push af
  90+ 960C 3A 04 FA     		ld a,(var1)
  91+ 960F 77           		ld   (hl),a                             ; insert a wall face character into the display file.
  92+ 9610 F1                   pop af
  93+ 9611 19           		      add  hl,de                              ; advance to the next row.
  94+ 9612 10 F7                djnz l4a16                              ; repeat for all rows forming the height of the wall face.
  95+ 9614
  96+ 9614 41                   ld   b,c                                ; fetch the distance, which corresponds the the number of blank rows to show above the wall face.
  97+ 9615 05                   dec  b                                  ; there is one less blank row below the wall face than above it due to the status message row.
  98+ 9616 28 05                jr   z,l4a24                            ; jump if there are no rows below the wall to blank.
  99+ 9618
 100+ 9618 36 20        l4a1f:  ld   (hl),_space                        ; insert a space below the wall face.
 101+ 961A 19                   add  hl,de                              ; advance to the next row.
 102+ 961B 10 FB                djnz l4a1f                              ; repeat for all rows below the wall face.
 103+ 961D
 104+ 961D E1           l4a24:  pop  hl                                 ; retrieve the address within the display file.
 105+ 961E 23                   inc  hl                                 ; advance to the next column to the right.
 106+ 961F
 107+ 961F C1                   pop  bc                                 ; retrieve the wall face width.
 108+ 9620 10 E0                djnz l4a0d                              ; repeat for all columns of the wall face.
 109+ 9622
 110+ 9622              ;call my_print
 111+ 9622 C9                   ret
 112+ 9623
 113+ 9623              ;#################################################################
 114+ 9623              ;#################################################################
 115+ 9623              ; draw maze end walls left and right of the player view
 116+ 9623              ;#################################################################
 117+ 9623              ;#################################################################
 118+ 9623
 119+ 9623              ;we will just copy parts of the front wall left and right on the screen
 120+ 9623              ;depending if theres a side wall or not. No side wall, do nothing!
 121+ 9623
 122+ 9623              draw_side_walls
 123+ 9623
 124+ 9623              ;1st we need to know if the front view is a side wallsurrounding the maze
 125+ 9623              ;this is $81 (129) if its a side wall
 126+ 9623
 127+ 9623              ;so we have an end wall here!
 128+ 9623
 129+ 9623              ;1st, check if maxdepth =4 or less. We do not want to draw anything for
 130+ 9623              ;depth 5 or 6
 131+ 9623
 132+ 9623 B7                   or a                    ;clear carry flag
 133+ 9624 3A 02 FA             ld a,(maxview)          ;how far we can see in front of us
 134+ 9627 FE 05                cp 5
 135+ 9629 D0                   ret nc                  ;exit if its 5 or greater
 136+ 962A                                              ;carry set if <5
 137+ 962A
 138+ 962A              ;now check if maxview and depth are the same as this indicates a side wall
 139+ 962A              ;reg a already contains maxview
 140+ 962A              ;#        ld b,a
 141+ 962A              ;#        ld a,(depth)
 142+ 962A              ;#        sub b                   ;should be 0 if the same
 143+ 962A              ;#        ret nz                  ;exit if different
 144+ 962A
 145+ 962A              ;now we cheat :) we just keep copying lines of the wall left & right
 146+ 962A              ;untill we hit a non space in the display file!
 147+ 962A
 148+ 962A              ;reg a contains our depth
 149+ 962A              ;        ld a,(maxview)
 150+ 962A 3A 06 FA             ld a,(depth)
 151+ 962D
 152+ 962D FE 00                cp 0
 153+ 962F                      ;depth 1
 154+ 962F CA 47 96             jp z,cp_wall_1          ;wall immediately in front of us
 155+ 9632 FE 01                cp 1
 156+ 9634                      ;depth 2
 157+ 9634 CA 71 96             jp z,cp_wall_2
 158+ 9637 FE 02                cp 2
 159+ 9639                      ;depth 3
 160+ 9639 CA B9 96             jp z,cp_wall_3
 161+ 963C FE 03                cp 3
 162+ 963E                      ;depth 4
 163+ 963E CA 01 97             jp z,cp_wall_4
 164+ 9641 FE 04                cp 4
 165+ 9643                      ;depth 5
 166+ 9643 CA 4C 97             jp z,cp_wall_5
 167+ 9646 C9                   ret                     ;go back now
 168+ 9647
 169+ 9647              cp_wall_1:
 170+ 9647              ;do left side first - check for char A3 (black block for maze wall at a distance
 171+ 9647
 172+ 9647 21 4A C1             ld hl,$c14a             ;we should be 10 lines down(10,0)
 173+ 964A 7E                   ld a,(hl)               ;check our character
 174+ 964B FE 20                cp ' '                  ;should be space indicating nothing there
 175+ 964D
 176+ 964D CC 60 96             call  z,loop91
 177+ 9650                       ;draw left half
 178+ 9650
 179+ 9650              ;now do the right side
 180+ 9650 21 39 C0             ld hl,$c039             ;we should be 10 lines down(10,24)
 181+ 9653 7E                   ld a,(hl)               ;check our character
 182+ 9654 FE 20                cp ' '                  ;should be space indicating noting there
 183+ 9656 C0                   ret nz                  ;exit if no space there
 184+ 9657 21 39 C0             ld hl,$c039             ;top left face
 185+ 965A              ;        ld de,$c038             ;1 line right of front wall
 186+ 965A 06 16                ld b,22                 ;copy 22 lines
 187+ 965C C3 65 96             jp loop90               ;draw right side!
 188+ 965F C9                   ret                     ;exit altogether
 189+ 9660
 190+ 9660 21 21 C0     loop91: ld hl,$c021             ;top left face
 191+ 9663              ;        ld de,$c022             ;1 line left
 192+ 9663 06 16                ld b,22                 ;copy 22 lines
 193+ 9665              loop90: ;ld a,(de)
 194+ 9665 3E B8                ld a,_hugewall
 195+ 9667 77                   ld (hl),a
 196+ 9668 D5                   push de
 197+ 9669 11 21 00             ld de,33
 198+ 966C 19                   add hl,de               ;go to next line
 199+ 966D D1                   pop de
 200+ 966E 10 F5                djnz loop90
 201+ 9670 C9                   ret
 202+ 9671
 203+ 9671              cp_wall_2:
 204+ 9671              ;do left side first - check for char ' ' showing nothing drawn there
 205+ 9671
 206+ 9671 21 A9 C0             ld hl,$c0a9             ;we should be at the top left of the face
 207+ 9674 DD 21 A9 C0          ld ix,$c0a9
 208+ 9678              ;        ld de,$c0ab             ;1 line left of our wall face
 209+ 9678 11 1F FA             ld de,lr_wall
 210+ 967B 3E B6                ld a,_largewall
 211+ 967D 12                   ld (de),a
 212+ 967E
 213+ 967E 0E 05                ld c,5                  ;draw 5 columns to the border
 214+ 9680 E5           loop80: push hl
 215+ 9681 06 0E                ld b,14
 216+ 9683 DD 7E 00             ld a,(ix+0)             ;check our character
 217+ 9686 FE 20                cp ' '                  ;should be space indicating noting there
 218+ 9688 CC 94 97             call z,loop93
 219+ 968B DD 2B                dec ix
 220+ 968D E1                   pop hl
 221+ 968E 2B                   dec hl                 ;move left 1 line in the display
 222+ 968F 0D                   dec c
 223+ 9690 C2 80 96             jp nz,loop80            ;do this 5 times
 224+ 9693
 225+ 9693              ;now do the right side
 226+ 9693 21 B9 C0             ld hl,$c0b9             ;we should be at the top right of the face
 227+ 9696 DD 21 B9 C0          ld ix,$c0b9
 228+ 969A               ;       ld de,$c0b8             ;1 line left of our wall face
 229+ 969A 11 1F FA             ld de,lr_wall
 230+ 969D 3E B6                ld a,_largewall
 231+ 969F 12                   ld (de),a
 232+ 96A0
 233+ 96A0 0E 05                ld c,5                  ;draw 5 columns to the border
 234+ 96A2 E5           loop81: push hl
 235+ 96A3 06 0E                ld b,14
 236+ 96A5 DD 7E 00             ld a,(ix+0)             ;check our character
 237+ 96A8 FE 20                cp ' '                  ;should be space indicating noting there
 238+ 96AA C2 B0 96             jp nz,loop82            ;skip over if no space there
 239+ 96AD CC 94 97             call z,loop93
 240+ 96B0 DD 23        loop82  inc ix
 241+ 96B2                               ;do the next line
 242+ 96B2 E1                   pop hl
 243+ 96B3 23                   inc hl
 244+ 96B4 0D                   dec c
 245+ 96B5 C2 A2 96             jp nz,loop81
 246+ 96B8 C9                   ret                     ;exit routine totally
 247+ 96B9
 248+ 96B9              cp_wall_3:
 249+ 96B9              ;do left side first - check for char ' ' showing nothing drawn there
 250+ 96B9
 251+ 96B9 21 0F C1             ld hl,$c10f             ;we should be at the top left of the face
 252+ 96BC DD 21 0F C1          ld ix,$c10f
 253+ 96C0              ;        ld de,$c110             ;1 line left of our wall face
 254+ 96C0 11 1F FA             ld de,lr_wall
 255+ 96C3 3E B5                ld a,_mediumwall
 256+ 96C5 12                   ld (de),a
 257+ 96C6
 258+ 96C6 0E 08                ld c,8                  ;draw 8 columns to the border
 259+ 96C8 E5           loop83: push hl
 260+ 96C9 06 08                ld b,8                 ;10 chars high
 261+ 96CB DD 7E 00             ld a,(ix+0)             ;check our character
 262+ 96CE FE 20                cp ' '                  ;should be space indicating noting there
 263+ 96D0 CC 94 97             call z,loop93
 264+ 96D3 DD 2B                dec ix
 265+ 96D5 E1                   pop hl
 266+ 96D6 2B                   dec hl                 ;move left 1 line in the display
 267+ 96D7 0D                   dec c
 268+ 96D8 C2 C8 96             jp nz,loop83            ;do this 5 times
 269+ 96DB
 270+ 96DB              ;now do the right side
 271+ 96DB 21 19 C1             ld hl,$c119             ;we should be at the top right of the face
 272+ 96DE DD 21 19 C1          ld ix,$c119
 273+ 96E2              ;        ld de,$c118             ;1 line left of our wall face
 274+ 96E2 11 1F FA             ld de,lr_wall
 275+ 96E5 3E B5                ld a,_mediumwall
 276+ 96E7 12                   ld (de),a
 277+ 96E8
 278+ 96E8 0E 08                ld c,8                  ;draw 8 columns to the border
 279+ 96EA E5           loop84: push hl
 280+ 96EB 06 08                ld b,8                 ;8 chars high
 281+ 96ED DD 7E 00             ld a,(ix+0)             ;check our character
 282+ 96F0 FE 20                cp ' '                  ;should be space indicating noting there
 283+ 96F2 C2 F8 96             jp nz,loop85            ;skip over if no space there
 284+ 96F5 CC 94 97             call z,loop93
 285+ 96F8 DD 23        loop85: inc ix
 286+ 96FA                               ;do the next line
 287+ 96FA E1                   pop hl
 288+ 96FB 23                   inc hl
 289+ 96FC 0D                   dec c
 290+ 96FD C2 EA 96             jp nz,loop84
 291+ 9700 C9                   ret                     ;exit routine totally
 292+ 9701
 293+ 9701              cp_wall_4:
 294+ 9701              ;do left side first - check for char ' ' showing nothing drawn there
 295+ 9701
 296+ 9701 21 53 C1             ld hl,$c153             ;we should be at the top left of the face
 297+ 9704 DD 21 53 C1          ld ix,$c153
 298+ 9708              ;
 299+ 9708 11 1F FA             ld de,lr_wall
 300+ 970B 3E B7                ld a,_mediumwall_1
 301+ 970D 12                   ld (de),a
 302+ 970E 11 54 C1             ld de,$c154             ;1 line left of our wall face
 303+ 9711 0E 0A                ld c,10                  ;draw 10 columns to the border
 304+ 9713 E5           loop86: push hl
 305+ 9714 06 04                ld b,4                  ;4 chars high
 306+ 9716 DD 7E 00             ld a,(ix+0)             ;check our character
 307+ 9719 FE 20                cp ' '                  ;should be space indicating noting there
 308+ 971B CC 94 97             call z,loop93
 309+ 971E DD 2B                dec ix
 310+ 9720 E1                   pop hl
 311+ 9721 2B                   dec hl                  ;move left 1 line in the display
 312+ 9722 0D                   dec c
 313+ 9723 C2 13 97             jp nz,loop86            ;do this 5 times
 314+ 9726
 315+ 9726              ;now do the right side
 316+ 9726 21 59 C1             ld hl,$c159             ;we should be at the top right of the face
 317+ 9729 DD 21 59 C1          ld ix,$c159
 318+ 972D              ;        ld de,$c158             ;1 line left of our wall face
 319+ 972D 11 1F FA             ld de,lr_wall
 320+ 9730 3E B7                ld a,_mediumwall_1
 321+ 9732 12                   ld (de),a
 322+ 9733
 323+ 9733 0E 0A                ld c,10                  ;draw 10 columns to the border
 324+ 9735 E5           loop87: push hl
 325+ 9736 06 04                ld b,4                 ;4 chars high
 326+ 9738 DD 7E 00             ld a,(ix+0)             ;check our character
 327+ 973B FE 20                cp ' '                  ;should be space indicating noting there
 328+ 973D C2 43 97             jp nz,loop88            ;skip over if no space there
 329+ 9740 CC 94 97             call z,loop93
 330+ 9743 DD 23        loop88: inc ix
 331+ 9745                               ;do the next line
 332+ 9745 E1                   pop hl
 333+ 9746 23                   inc hl
 334+ 9747 0D                   dec c
 335+ 9748 C2 35 97             jp nz,loop87
 336+ 974B C9                   ret                     ;exit routine totally
 337+ 974C
 338+ 974C              cp_wall_5:
 339+ 974C              ;do left side first - check for char ' ' showing nothing drawn there
 340+ 974C
 341+ 974C 21 77 C1             ld hl,$c177             ;we should be at the top left of the face
 342+ 974F DD 21 77 C1          ld ix,$c177
 343+ 9753              ;        ld de,$c176             ;1 line left of our wall face
 344+ 9753 11 1F FA             ld de,lr_wall
 345+ 9756 3E B4                ld a,_smallwall
 346+ 9758 12                   ld (de),a
 347+ 9759
 348+ 9759 0E 0D                ld c,13                  ;draw 10 columns to the border
 349+ 975B E5           loop89: push hl
 350+ 975C 06 02                ld b,2                  ;4 chars high
 351+ 975E DD 7E 00             ld a,(ix+0)             ;check our character
 352+ 9761 FE A2                cp _bottomblack         ;should be space indicating noting there
 353+ 9763 CC 94 97             call z,loop93
 354+ 9766 DD 2B                dec ix
 355+ 9768 E1                   pop hl
 356+ 9769 2B                   dec hl                  ;move left 1 line in the display
 357+ 976A 0D                   dec c
 358+ 976B C2 5B 97             jp nz,loop89            ;do this 5 times
 359+ 976E
 360+ 976E              ;now do the right side
 361+ 976E 21 75 C1             ld hl,$c175             ;we should be at the top right of the face
 362+ 9771 DD 21 75 C1          ld ix,$c175
 363+ 9775              ;        ld de,$c176             ;1 line left of our wall face
 364+ 9775 11 1F FA             ld de,lr_wall
 365+ 9778 3E B4                ld a,_smallwall
 366+ 977A 12                   ld (de),a
 367+ 977B
 368+ 977B 0E 0F                ld c,15                  ;draw 10 columns to the border
 369+ 977D E5           loop871:push hl
 370+ 977E 06 02                ld b,2                  ;2 chars high
 371+ 9780 DD 7E 00             ld a,(ix+0)             ;check our character
 372+ 9783 FE A2                cp _bottomblack         ;should be space indicating noting there
 373+ 9785 C2 8B 97             jp nz,loop881            ;skip over if no space there
 374+ 9788 CC 94 97             call z,loop93
 375+ 978B DD 23        loop881:inc ix
 376+ 978D                               ;do the next line
 377+ 978D E1                   pop hl
 378+ 978E 23                   inc hl
 379+ 978F 0D                   dec c
 380+ 9790 C2 7D 97             jp nz,loop871
 381+ 9793 C9                   ret                     ;exit routine totally
 382+ 9794
 383+ 9794
 384+ 9794              ;#######################################################
 385+ 9794              ;This routine draws the end wall blocks left & right
 386+ 9794              ;######################################################
 387+ 9794
 388+ 9794              ;it matches so draw a wall face by copying the existing one!
 389+ 9794              loop93:; dec de                  ;go 1 line left
 390+ 9794 1A           loop92: ld a,(de)
 391+ 9795 77                   ld (hl),a
 392+ 9796 D5                   push de
 393+ 9797 11 21 00             ld de,33
 394+ 979A 19                   add hl,de               ;go to next line
 395+ 979B D1                   pop de
 396+ 979C 10 F6                djnz loop92
 397+ 979E
 398+ 979E C9                   ret
 399+ 979F
 400+ 979F              ;#################################################################
 401+ 979F              ;#################################################################
 402+ 979F              ;draw colours     ; go through char display file and paint colours
 403+ 979F              ;#################################################################
 404+ 979F              ;#################################################################
 405+ 979F
 406+ 979F
 407+ 979F 28 00        wallcol       dw  40             ;bright red
 408+ 97A1              skycol        equ 80            ; grey paper, black ink
 409+ 97A1              floorcol      equ 98             ; brown paper, black ink
 410+ 97A1              ;corridcol     equ 112            ; yellow paper, black ink
 411+ 97A1 28           sky_floor     db  40            ;store current sky or floor colour
 412+ 97A2 00           wall_temp     db  0             ;temporary store for wall colour graduation
 413+ 97A3 00 C3        scr_attr_add  dw $c300  ;22528          ;start of spectrum attributes after char screen or 22528 actual sceen
 414+ 97A5
 415+ 97A5              ; go through the display file at c000, check the character, change the colour
 416+ 97A5              ; if at row 26, start on next line at far left (0)
 417+ 97A5              ; do it again until you reach line 24 and column 25
 418+ 97A5
 419+ 97A5              ; built character display is at location c000
 420+ 97A5
 421+ 97A5 3E 50        draw_colours: ld a, skycol           ; set the sky colour
 422+ 97A7 32 A1 97                   ld (sky_floor),a
 423+ 97AA 97                         sub a                 ; make a zero
 424+ 97AB 32 0B FA                   ld (left),a
 425+ 97AE 01 0F 03                   ld bc,783             ; 768 attributes to fill
 426+ 97B1 ED 5B A3 97                ld de,(scr_attr_add)  ; start of spectrum attributes after char screen
 427+ 97B5 21 00 C0                   ld hl,$c000           ; start of zx81 display file in memory
 428+ 97B8
 429+ 97B8 CD AF 98     here:         call set_wall_col     ;set the wall colour graduation colour
 430+ 97BB CD E3 97                   call loop_1
 431+ 97BE A7                         and a                 ;reset zero
 432+ 97BF 23                         inc hl                ;current character memory we are checking
 433+ 97C0 13                         inc de                ;current attribute location
 434+ 97C1 0B                         dec bc                ;number of attribute cells to traverse
 435+ 97C2 78                         ld a,b
 436+ 97C3 FE 00                      cp 0
 437+ 97C5 20 F1                      jr nz,here
 438+ 97C7 79                         ld a,c
 439+ 97C8 FE 00                      cp 0             ;dec on single reg affects flags
 440+ 97CA
 441+ 97CA 28 02                      jr z,lastcol     ;colour in the last block before exiting
 442+ 97CC 18 EA                      jr here
 443+ 97CE
 444+ 97CE 3A A1 97     lastcol:      ld a,(sky_floor)   ; colour in the last square
 445+ 97D1                                               ; plus last 7  squares
 446+ 97D1 12                         ld(de),a
 447+ 97D2 3E 70                      ld a,112
 448+ 97D4 13                         inc de
 449+ 97D5 12                         ld (de),a
 450+ 97D6 13                         inc de
 451+ 97D7 12                         ld (de),a
 452+ 97D8 13                         inc de
 453+ 97D9 12                         ld (de),a
 454+ 97DA 13                         inc de
 455+ 97DB 12                         ld (de),a
 456+ 97DC 13                         inc de
 457+ 97DD 12                         ld (de),a
 458+ 97DE 13                         inc de
 459+ 97DF 12                         ld (de),a
 460+ 97E0 13                         inc de
 461+ 97E1 12                         ld (de),a
 462+ 97E2
 463+ 97E2 C9                         ret
 464+ 97E3
 465+ 97E3              ;start checking chars and setting colours
 466+ 97E3
 467+ 97E3 7E           loop_1:        ld a, (hl)       ; get value at start of zx81 display file
 468+ 97E4 FE B5                       cp _mediumwall            ; top left triangle
 469+ 97E6 20 07                       jr nz, next1
 470+ 97E8 3A 9F 97                    ld a, (wallcol)
 471+ 97EB 12                          ld (de),a        ; colour it if it matches
 472+ 97EC C3 7C 98                    jp next_pos      ; go on to next char position
 473+ 97EF
 474+ 97EF FE AF        next1:         cp _black            ; top right triangle
 475+ 97F1 20 06                       jr nz, next2
 476+ 97F3 3E FE                       ld a, 254        ;black paper, black ink
 477+ 97F5 12                          ld (de),a        ; colour it if it matches
 478+ 97F6 C3 7C 98                    jp next_pos      ; go on to next char position
 479+ 97F9
 480+ 97F9 FE B3        next2:         cp _topcorner4           ; top left triangle
 481+ 97FB 20 06                       jr nz, next3
 482+ 97FD 3E 50                       ld a,skycol          ;paper cyan, ink 1
 483+ 97FF 12                          ld (de),a        ; colour it if it matches
 484+ 9800 C3 7C 98                    jp next_pos      ; go on to next char position
 485+ 9803
 486+ 9803 FE B0        next3:         cp _topcorner1            ; top left triangle
 487+ 9805 20 06                       jr nz, next4
 488+ 9807 3E 62                       ld a,floorcol
 489+ 9809 12                          ld (de),a        ; colour it if it matches
 490+ 980A C3 7C 98                    jp next_pos      ; go on to next char position
 491+ 980D
 492+ 980D FE B6        next4:         cp _largewall            ; look for wall character
 493+ 980F 20 07                       jr nz, next5
 494+ 9811 3A 9F 97                    ld a,  (wallcol)
 495+ 9814 12                          ld (de),a        ; colour it if it matches
 496+ 9815 C3 7C 98                    jp next_pos      ; go on to next char position
 497+ 9818
 498+ 9818 FE B4        next5:        cp _smallwall            ;was char 09 - lower middle of screen wall character bottom
 499+ 981A 20 07                      jr nz, next6
 500+ 981C 3A 9F 97                   ld a,  (wallcol)
 501+ 981F 12                         ld (de),a
 502+ 9820 C3 7C 98                   jp next_pos
 503+ 9823
 504+ 9823 FE B7        next6:        cp _mediumwall_1            ;was chr 10 - middle of screen upper wall character
 505+ 9825 20 07                      jr nz, next7
 506+ 9827 3A 9F 97                   ld a, (wallcol)         ;
 507+ 982A 12                         ld (de),a
 508+ 982B C3 7C 98                   jp next_pos
 509+ 982E
 510+ 982E FE A9        next7:        cp _topleft5            ;was chr 10 - middle of screen upper wall character
 511+ 9830 20 06                      jr nz, next8
 512+ 9832 3E 50                      ld a, skycol         ;
 513+ 9834 12                         ld (de),a
 514+ 9835 C3 7C 98                   jp next_pos
 515+ 9838
 516+ 9838 FE B8        next8:        cp _hugewall
 517+ 983A 20 07                      jr nz, next9
 518+ 983C 3A 9F 97                   ld a, (wallcol)         ;
 519+ 983F 12                         ld (de),a
 520+ 9840 C3 7C 98                   jp next_pos
 521+ 9843
 522+ 9843 FE 8E        next9:        cp $8e            ;stretched wall 5
 523+ 9845 20 07                      jr nz, next10
 524+ 9847 3A 9F 97                   ld a, (wallcol)         ;
 525+ 984A 12                         ld (de),a
 526+ 984B C3 7C 98                   jp next_pos
 527+ 984E
 528+ 984E FE 8D        next10:       cp $8d             ;stretched wall 5 more
 529+ 9850 20 0A                      jr nz, next11
 530+ 9852 3A 9F 97                   ld a, (wallcol)         ;
 531+ 9855 12                         ld (de),a
 532+ 9856 3A 9F 97                   ld a, (wallcol)         ;
 533+ 9859 C3 7C 98                   jp next_pos
 534+ 985C
 535+ 985C FE 8B        next11:       cp $8b             ;stretched wall 5 more
 536+ 985E 20 0A                      jr nz, next12
 537+ 9860 3A 9F 97                   ld a, (wallcol)         ;
 538+ 9863 12                         ld (de),a
 539+ 9864 3A 9F 97                   ld a, (wallcol)         ;
 540+ 9867 C3 7C 98                   jp next_pos
 541+ 986A
 542+ 986A FE 8C        next12:       cp $8c             ;stretched wall 5 more
 543+ 986C 20 0A                      jr nz, next20
 544+ 986E 3A 9F 97                   ld a, (wallcol)         ;
 545+ 9871 12                         ld (de),a
 546+ 9872 3A 9F 97                   ld a, (wallcol)         ;
 547+ 9875 C3 7C 98                   jp next_pos
 548+ 9878
 549+ 9878              ;draw sky or floor colour as we found no matches above
 550+ 9878
 551+ 9878 3A A1 97     next20         ld a,(sky_floor) ;
 552+ 987B 12                          ld (de),a        ; colour it if it matches
 553+ 987C 3A 0B FA     next_pos:      ld a, (left)
 554+ 987F 3C                          inc a
 555+ 9880 FE 19                       cp 25            ; are we at 24th column?
 556+ 9882 32 0B FA                    ld (left),a
 557+ 9885 C0                          ret nz           ; return if not
 558+ 9886
 559+ 9886              ;now do paper colour of score and nav git on right
 560+ 9886                             ;now decrease bc by 7 & increase display pos by 7
 561+ 9886                             ;to start of next line
 562+ 9886 97                          sub a            ; zero a register
 563+ 9887 32 0B FA                    ld (left),a      ; back to start
 564+ 988A 3E 08                       ld a,8           ; 7 spaces to next line
 565+ 988C 0B           loop_4:        dec bc           ;change ldir count
 566+ 988D 23                          inc hl
 567+ 988E 13                          inc de
 568+ 988F F5                          push af
 569+ 9890 3E 70                       ld a,112         ;yellow paper, ink 9
 570+ 9892 12                          ld (de),a
 571+ 9893 F1                          pop af
 572+ 9894 A7                          and a           ;move screen print position
 573+ 9895 3D                          dec a
 574+ 9896 20 F4                       jr nz, loop_4
 575+ 9898 1B                          dec de           ; get to start of spectrum line in the display
 576+ 9899
 577+ 9899                             ; check if we are below the middles of the display
 578+ 9899                             ; so we change the 'white' colour to floor
 579+ 9899 E5                          push hl
 580+ 989A D5                          push de
 581+ 989B                            ; 22912 is the start of the floor level
 582+ 989B                             ; de holds current position in spectrum display
 583+ 989B
 584+ 989B
 585+ 989B 2A A3 97                    ld hl,(scr_attr_add)
 586+ 989E ED 34 7F 01                 add hl,383        ;this for display at 22528 is 22911   ; start of first floor line
 587+ 98A2 ED 52                       sbc hl,de        ;are we there yet?
 588+ 98A4 C2 AC 98                    jp nz,exit2 ;was nz
 589+ 98A7 3E 62                       ld a,floorcol
 590+ 98A9 32 A1 97                    ld (sky_floor),a
 591+ 98AC D1           exit2:         pop de
 592+ 98AD E1                          pop hl
 593+ 98AE C9                          ret
 594+ 98AF
 595+ 98AF
 596+ 98AF              set_wall_col:
 597+ 98AF                              ;set the wall colour graduation colour from light (top part) to dark(bottom part of wall) in 6 increments
 598+ 98AF                              ;de holds current attribute cell we are colouring in
 599+ 98AF E5                           push hl
 600+ 98B0 D5                           push de
 601+ 98B1                              ;de holds current attribute cell we are colouring in
 602+ 98B1
 603+ 98B1 3E BC                        ld a,188
 604+ 98B3 2A A3 97                     ld hl,(scr_attr_add)     ;top of the display
 605+ 98B6 B7 ED 52                     sub hl,de
 606+ 98B9 20 05                        jr nz,setcol_1   ;check next quarter of display
 607+ 98BB 32 9F 97                     ld (wallcol),a
 608+ 98BE 18 5D                        jr setcol_exit
 609+ 98C0
 610+ 98C0
 611+ 98C0 C6 02        setcol_1:       add a,2
 612+ 98C2 2A A3 97                     ld hl,(scr_attr_add)
 613+ 98C5 ED 34 80 00                  add hl,128    ;next 1/6 of the display
 614+ 98C9 B7 ED 52                     sub hl,de
 615+ 98CC 20 05                        jr nz,setcol_2   ;check next 1/6th of display
 616+ 98CE 32 9F 97                     ld (wallcol),a
 617+ 98D1 18 4A                        jr setcol_exit
 618+ 98D3
 619+ 98D3 C6 02        setcol_2        add a,2
 620+ 98D5 2A A3 97                     ld hl,(scr_attr_add)
 621+ 98D8 ED 34 00 01                  add hl,256     ;next 1/6  down of the display
 622+ 98DC B7 ED 52                     sub hl,de
 623+ 98DF 20 05                        jr nz,setcol_3   ;check next 1/6th of display
 624+ 98E1 32 9F 97                     ld (wallcol),a
 625+ 98E4 18 37                        jr setcol_exit
 626+ 98E6
 627+ 98E6 C6 02        setcol_3        add a,2
 628+ 98E8 2A A3 97                     ld hl,(scr_attr_add)
 629+ 98EB ED 34 80 01                  add hl,384     ;    ;next 1/6 of the display
 630+ 98EF B7 ED 52                     sub hl,de
 631+ 98F2 20 05                        jr nz,setcol_4   ;check next 1/6th of display
 632+ 98F4 32 9F 97                     ld (wallcol),a
 633+ 98F7 18 24                        jr setcol_exit
 634+ 98F9
 635+ 98F9 C6 02        setcol_4        add a,2
 636+ 98FB 2A A3 97                     ld hl,(scr_attr_add)
 637+ 98FE ED 34 00 02                  add hl,512    ;next 1/6 of the display
 638+ 9902 B7 ED 52                     sub hl,de
 639+ 9905 20 05                        jr nz,setcol_5   ;check next 1/6th of display
 640+ 9907 32 9F 97                     ld (wallcol),a
 641+ 990A 18 11                        jr setcol_exit
 642+ 990C
 643+ 990C C6 02        setcol_5        add a,2
 644+ 990E 2A A3 97                     ld hl,(scr_attr_add)
 645+ 9911 ED 34 80 02                  add hl,640     ;bottom 6th of the display
 646+ 9915 B7 ED 52                     sub hl,de
 647+ 9918 20 03                        jr nz,setcol_exit   ;check next 1/6th of display
 648+ 991A 32 9F 97                     ld (wallcol),a
 649+ 991D
 650+ 991D D1           setcol_exit:    pop de
 651+ 991E E1                           pop hl
 652+ 991F C9                           ret
 653+ 9920
 654+ 9920              ;#######################################################################
 655+ 9920              ;setup right hand side of the screen
 656+ 9920
 657+ 9920              draw_screen_right:
 658+ 9920
 659+ 9920 DD 21 0C 82                ld ix,message_border1       ;top border Message
 660+ 9924 CD D4 81                   CALL print_message
 661+ 9927 DD 21 17 82                ld ix,message_get       ;"Get Out" Message
 662+ 992B CD D4 81                   CALL print_message
 663+ 992E DD 21 22 82                ld ix,message_out       ;"Get Out" Message
 664+ 9932 CD D4 81                   CALL print_message
 665+ 9935 DD 21 2D 82                ld ix,message_border4       ;top border Message
 666+ 9939 CD D4 81                   CALL print_message
 667+ 993C                            ;do some colouring around the 'get out' words
 668+ 993C 21 39 58                   ld hl,22585
 669+ 993F 3E 94                      ld a,148
 670+ 9941 77                         ld (hl),A
 671+ 9942 21 3F 58                   ld hl,22585+6
 672+ 9945 77                         ld (hl),a
 673+ 9946 21 59 58                   ld hl,22617
 674+ 9949 77                         ld (hl),a
 675+ 994A 21 5F 58                   ld hl,22617+6
 676+ 994D 77                         ld (hl),a
 677+ 994E                            ;print "level" words
 678+ 994E DD 21 87 82                ld ix,message_level       ;top border Message
 679+ 9952 CD D4 81                   CALL print_message
 680+ 9955              ;now print the level numbers
 681+ 9955 DD 21 98 99                ld ix,L00       ;top border Message
 682+ 9959 CD D4 81                   CALL print_message
 683+ 995C DD 21 9F 99                ld ix,L01       ;top border Message
 684+ 9960 CD D4 81                   CALL print_message
 685+ 9963 DD 21 A6 99                ld ix,L23      ;top border Message
 686+ 9967 CD D4 81                   CALL print_message
 687+ 996A DD 21 AD 99                ld ix,L45        ;top border Message
 688+ 996E CD D4 81                   CALL print_message
 689+ 9971 DD 21 B4 99                ld ix,L67       ;top border Message
 690+ 9975 CD D4 81                   CALL print_message
 691+ 9978 DD 21 BB 99                ld ix,L89       ;top border Message
 692+ 997C CD D4 81                   CALL print_message
 693+ 997F DD 21 C2 99                ld ix,L1011       ;top border Message
 694+ 9983 CD D4 81                   CALL print_message
 695+ 9986 DD 21 C9 99                ld ix,L1213       ;top border Message
 696+ 998A CD D4 81                   CALL print_message
 697+ 998D DD 21 D0 99                ld ix,L1415
 698+ 9991 CD D4 81                   CALL print_message
 699+ 9994 CD D7 99                   call set_floor_colour
 700+ 9997 C9                         ret
 701+ 9998
 702+ 9998 06 1B 86 20  L00           db 6,27,134,     " 0 ",$7f
 702+ 999C 30 20 7F
 703+ 999F 07 1B 86 20  L01           db 7,27,134,     " 1 ",$7f
 703+ 99A3 31 20 7F
 704+ 99A6 08 1B 86 32  L23           db 8,27,134,     "2 3",$7f
 704+ 99AA 20 33 7F
 705+ 99AD 09 1B 86 34  L45           db 9,27,134,     "4 5",$7f
 705+ 99B1 20 35 7F
 706+ 99B4 0A 1B 86 36  L67           db 10,27,134,    "6 7",$7f
 706+ 99B8 20 37 7F
 707+ 99BB 0B 1B 86 38  L89           db 11,27,134,    "8 9",$7f
 707+ 99BF 20 39 7F
 708+ 99C2 0C 1B 86 D7  L1011         db 12,27,134,$d7," ",$d8,$7f
 708+ 99C6 20 D8 7F
 709+ 99C9 0D 1B 86 D9  L1213         db 13,27,134,$d9," ",$da,$7f
 709+ 99CD 20 DA 7F
 710+ 99D0 0E 1B 86 DB  L1415         db 14,27,134,$db," ",$dc,$7f
 710+ 99D4 20 DC 7F
 711+ 99D7
 712+ 99D7              ;###################################################################
 713+ 99D7
 714+ 99D7              ;set floor colour on right of the display - shows what floor we are on
 715+ 99D7
 716+ 99D7              set_floor_colour:
 717+ 99D7 AF                   xor a               ;zero a reg
 718+ 99D8 47                   ld b,a
 719+ 99D9 2A 22 FA             ld hl,(cur_map)     ;get our current map
 720+ 99DC 55                   ld d,l
 721+ 99DD 15                   dec d               ;need to point 1 less
 722+ 99DE 1E 02                ld e,2
 723+ 99E0 ED 30                mul de              ;multiply our current map number by 2
 724+ 99E2 21 ED 99             ld hl,data_table
 725+ 99E5 19                   add hl,de           ;should now be pointing to the correct place in the table
 726+ 99E6 5E                   ld e,(hl)
 727+ 99E7 23                   inc hl
 728+ 99E8 56                   ld d,(hl)
 729+ 99E9                      ;now colour it white on screen
 730+ 99E9 3E 87                ld a,135
 731+ 99EB 12                   ld (de),a
 732+ 99EC C9                   ret
 733+ 99ED
 734+ 99ED
 735+ 99ED
 736+ 99ED
 737+ 99ED              data_table:
 738+ 99ED DC 58                dw  $58dc       ;23003-256    ;GND
 739+ 99EF FC 58                dw  $58fc       ;23004-224    ;1
 740+ 99F1 1B 59                dw  $591b       ;23003-192    ;2
 741+ 99F3 1D 59                dw  $591d       ;23005-192    ;3
 742+ 99F5 3B 59                dw  $593b       ;23003-160    ;4
 743+ 99F7 3D 59                dw  $593d       ;23005-160    ;5
 744+ 99F9 5B 59                dw  $595b       ;23003-128    ;6
 745+ 99FB 5D 59                dw  $595d       ;23005-128    ;7
 746+ 99FD 7B 59                dw  $597b       ;23003-96    ;8
 747+ 99FF 7D 59                dw  $597d       ;23005-96    ;9
 748+ 9A01 9B 59                dw  $599b       ;23003-64    ;10
 749+ 9A03 9D 59                dw  $599d       ;23005-64    ;11
 750+ 9A05 BB 59                dw  $59bb       ;23003-32    ;12
 751+ 9A07 BD 59                dw  $59bd       ;23005-32    ;13
 752+ 9A09 DB 59                dw  $59db       ;23003       ;14
 753+ 9A0B DD 59                dw  $59dd       ;23005       ;15
 754+ 9A0D              ;22528 to 23296
 755+ 9A0D
 756+ 9A0D
 757+ 9A0D
# file closed: src/5-rd3dmazeV6.asm
 451  9A0D                  INCLUDE "6-rd3dmazeV6.asm" ; draw right side of maze
# file opened: src/6-rd3dmazeV6.asm
   1+ 9A0D
   2+ 9A0D              ;############################################
   3+ 9A0D              ;############################################
   4+ 9A0D
   5+ 9A0D              ;draw section the right side of the screen
   6+ 9A0D
   7+ 9A0D              ;############################################
   8+ 9A0D              ;############################################
   9+ 9A0D
  10+ 9A0D              draw_right_side:
  11+ 9A0D
  12+ 9A0D 3A 06 FA                   ld a,(depth)
  13+ 9A10 FE 06                      cp 6
  14+ 9A12 CA 31 9A                   jp z,draw_6r
  15+ 9A15 FE 05        do_5r:        cp 5
  16+ 9A17 CA 3B 9A                   jp z,draw_5r
  17+ 9A1A FE 04                      cp 4
  18+ 9A1C CA F7 9B                   jp z,draw_4r
  19+ 9A1F FE 03                      cp 3
  20+ 9A21 CA DD 9D                   jp z,draw_3r
  21+ 9A24 FE 02                      cp 2
  22+ 9A26 CA 62 9F                   jp z,draw_2r
  23+ 9A29 FE 01                      cp 1
  24+ 9A2B CA FD 9F                   jp z,draw_1r
  25+ 9A2E C3 93 A0                   jp draw_0r
  26+ 9A31              ;end of routine
  27+ 9A31                        ;    ret
  28+ 9A31
  29+ 9A31              ;############################################
  30+ 9A31              ;############################################
  31+ 9A31
  32+ 9A31              ;draw section 6 right - well, nothing to do atm!
  33+ 9A31
  34+ 9A31              ;############################################
  35+ 9A31              ;############################################
  36+ 9A31
  37+ 9A31              draw_6r:
  38+ 9A31              ;do nothing on screen as already done via left side draw
  39+ 9A31              ;just incremement where we are in the maze view
  40+ 9A31
  41+ 9A31 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  42+ 9A34 CD DD 8C             call load_de            ;get left and right and front jump into de reg
  43+ 9A37 19                   add hl,de               ;Additional add to simulate layer 6
  44+ 9A38 22 25 FA             ld (furthest_point),hl ;re save it
  45+ 9A3B
  46+ 9A3B              ;############################################
  47+ 9A3B              ;############################################
  48+ 9A3B
  49+ 9A3B              ;draw section 5 right
  50+ 9A3B
  51+ 9A3B              ;############################################
  52+ 9A3B              ;############################################
  53+ 9A3B
  54+ 9A3B              draw_5r:
  55+ 9A3B
  56+ 9A3B              ;ret
  57+ 9A3B              ; hl=maze location being drawn.
  58+ 9A3B              ; now determine what to draw for this section.
  59+ 9A3B
  60+ 9A3B 97                   sub a                   ;make 'a' zero
  61+ 9A3C 3D                   dec a                   ;make it 255 to show nothing to do
  62+ 9A3D 32 27 FA             ld (blockid),a          ;save it for wall drawing
  63+ 9A40
  64+ 9A40              ;first we need to decrement how far we can see to the layer
  65+ 9A40              ;we are working on
  66+ 9A40
  67+ 9A40 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
  68+ 9A43 CD DD 8C             call load_de            ;get left and right and front jump into de reg
  69+ 9A46
  70+ 9A46 19                   add hl,de               ;Additional add to simulate layer 6
  71+ 9A47 22 25 FA             ld (furthest_point),hl ;re save it
  72+ 9A4A
  73+ 9A4A 11 01 00             ld de,$0001             ;to move the display position +1
  74+ 9A4D ED 53 11 FA          ld (var4),de
  75+ 9A51
  76+ 9A51              ;move the maze location pointer 1 to the right - used for all
  77+ 9A51              ;remaining blocks to test if there is a wall there or not.
  78+ 9A51
  79+ 9A51 ED 5B 0D FA          ld de,(right)
  80+ 9A55 19                   add hl,de
  81+ 9A56 22 15 FA             ld (var6),hl            ;right position in maze from our location
  82+ 9A59
  83+ 9A59 ED 53 0F FA          ld (var3),de            ;display position +1
  84+ 9A5D 11 79 01             ld   de,$0179           ; offset to row 11 column 10 - left of  centre of the 3d view.
  85+ 9A60 CD 6E 9A             call do_draw_5r
  86+ 9A63
  87+ 9A63 97                   sub a                   ;make reg a zero
  88+ 9A64 32 1E FA             ld (var10),a            ;used in the maze wall drawing at layer 5
  89+ 9A67 3A 27 FA             ld a,(blockid)          ;get the right hand maze wall location
  90+ 9A6A 3C                   inc a                   ;if blockid was 255 (UNUSED) its will now be zero
  91+ 9A6B                                              ;so
  92+ 9A6B C3 F7 9B             jp draw_4r              ;now draw the 4th level
  93+ 9A6E
  94+ 9A6E              do_draw_5r:
  95+ 9A6E
  96+ 9A6E 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
  97+ 9A71 19                   add  hl,de
  98+ 9A72
  99+ 9A72
 100+ 9A72              ; draw right half of the display.
 101+ 9A72
 102+ 9A72 06 04                ld b,4                  ; count for 3 columns right of our position
 103+ 9A74 ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
 104+ 9A78
 105+ 9A78              ;check if we are at the bottom right of the maze
 106+ 9A78              ;if so, there is no wall after position 255 so point us to
 107+ 9A78              ;position 240 and fake the wall!
 108+ 9A78              ;;;        ld a,e
 109+ 9A78              ;;;        cp 255
 110+ 9A78              ;;;        jp nz,cont_3  ;continue if we are not at position 255
 111+ 9A78              ;;;        ld e,240      ;fake where we are so we draw a wall :)
 112+ 9A78
 113+ 9A78
 114+ 9A78              ;now move the maze pointer right (+1) 1 position
 115+ 9A78              ;so we can read the type of walls to our left
 116+ 9A78
 117+ 9A78              ;cont_3:
 118+ 9A78              ;*         push hl
 119+ 9A78              ;*        ld hl,(left)
 120+ 9A78              ;*        add hl,de
 121+ 9A78              ;*        ex de,hl
 122+ 9A78              ;*        pop hl
 123+ 9A78
 124+ 9A78 EB                   ex   de,hl              ; transfer de to hl.
 125+ 9A79
 126+ 9A79              ;       hl = furthest point in the maze
 127+ 9A79              ;       de = d_file location to store byte to display
 128+ 9A79
 129+ 9A79              ;we have to load the first plot position with a corner bit to show
 130+ 9A79              ;the end of the wall at the position we can see next to the center
 131+ 9A79              ;plot position on section 6
 132+ 9A79              ;then, while we draw the other blocks we can see we just want top and
 133+ 9A79              ;bottom blacks pointed so will use var1 and var 2 to hold the
 134+ 9A79              ;character block we need to print.
 135+ 9A79
 136+ 9A79              ;2020 - we dont need to do this as we are drawing
 137+ 9A79              ;a side wall and wont see the hashes!
 138+ 9A79
 139+ 9A79 3E B4                ld a,_smallwall;_topright5          ; load with top right char $a9
 140+ 9A7B              ;        ld a,'#'
 141+ 9A7B 32 04 FA             ld (var1),a             ;top of mwadd udg
 142+ 9A7E              ;        inc a
 143+ 9A7E              ;        inc a
 144+ 9A7E              ;        ld a,_smallwall;_topright5          ; load with top right char $a9
 145+ 9A7E
 146+ 9A7E 32 05 FA             ld (var2),a             ;ld with bottom right wall udg char
 147+ 9A81
 148+ 9A81              loop8r:
 149+ 9A81 E5                   push hl
 150+ 9A82
 151+ 9A82              ;##############################################################################
 152+ 9A82              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 153+ 9A82
 154+ 9A82 3A 28 FA             ld a,(maze_highbyte)
 155+ 9A85 BC                   cp h                    ;are we at the top part of the maze?
 156+ 9A86 CA B9 9A             jp z,cont_5a
 157+ 9A89                                              ;if we are on a different maze boundary
 158+ 9A89                                              ;then draw a maze wall as we are the top
 159+ 9A89                                              ;or north wall but maze data has no
 160+ 9A89                                              ;wall data.
 161+ 9A89                                              ;wall data.
 162+ 9A89              ;4 = 1st left wall
 163+ 9A89              ;3 = 2nd left wall
 164+ 9A89              ;2 = 3rd left wall
 165+ 9A89              ;1 = 4th left wall
 166+ 9A89
 167+ 9A89 78                   ld a,b                  ;our current wall counter
 168+ 9A8A FE 04                cp 4
 169+ 9A8C C2 97 9A             jp nz,b5_1                 ;its not wall 4
 170+ 9A8F 3E 01                ld a,1
 171+ 9A91 47                   ld b,a
 172+ 9A92 C6 80                add a,128               ;make sure we set a wall!
 173+ 9A94 C3 EF 9A             jp  do_wall5a          ;jump straight to making an end wall
 174+ 9A97
 175+ 9A97 FE 03        b5_1:   cp 3
 176+ 9A99 C2 A4 9A             jp nz,b5_2             ;its not wall 3
 177+ 9A9C 3E 01                ld a,1
 178+ 9A9E 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 179+ 9A9F C6 80                add a,128               ;make sure we set a wall!
 180+ 9AA1 C3 16 9B             jp do_2ndwall_r        ;draw the 2nd block to the left
 181+ 9AA4
 182+ 9AA4 FE 02        b5_2:   cp 2
 183+ 9AA6 C2 B1 9A             jp nz,b5_3             ;its not wall 3
 184+ 9AA9 3E 01                ld a,1
 185+ 9AAB 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 186+ 9AAC C6 80                add a,128               ;make sure we set a wall!
 187+ 9AAE C3 5E 9B             jp do_3rdwall_r       ;draw the 2nd block to the left
 188+ 9AB1
 189+ 9AB1              ;a must = 1 if we get here.
 190+ 9AB1 3E 01        b5_3:   ld a,1
 191+ 9AB3 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 192+ 9AB4 C6 80                add a,128               ;make sure we set a wall!
 193+ 9AB6 C3 AB 9B             jp do_4thwall_r         ;jump straight to making an end wall
 194+ 9AB9
 195+ 9AB9              ;*############################################################################
 196+ 9AB9
 197+ 9AB9              ;now zero out the end wall variable
 198+ 9AB9              cont_5a
 199+ 9AB9 97                   sub a                   ;zero a reg
 200+ 9ABA 32 17 FA             ld (end_wall),a           ;save 0 in the end wall variable
 201+ 9ABD
 202+ 9ABD
 203+ 9ABD              ;check we are at an outside maze wall
 204+ 9ABD 7E                   ld a,(hl)               ;otherwise, check if there is a wall
 205+ 9ABE FE 81                cp _mh                  ;maze wall block
 206+ 9AC0 20 07                jr nz,cont10            ;its a wall block so need to draw the wall
 207+ 9AC2 F5                   push af                 ;save which print location we are at
 208+ 9AC3 3E 01                ld a,1                  ;for drawing the maze wall to the screen
 209+ 9AC5 32 17 FA             ld (end_wall),a          ;edge
 210+ 9AC8 F1                   pop af
 211+ 9AC9              ;        ld b,1                  ;stop drawing more blocks as its an end wall
 212+ 9AC9
 213+ 9AC9 17           cont10: rla
 214+ 9ACA DA DD 9A             jp c,do_wall5r          ;bit 7 (128)
 215+ 9ACD
 216+ 9ACD              ;        call do_no_wall5r      ; otherwise draw no wall
 217+ 9ACD
 218+ 9ACD              go_back5r:
 219+ 9ACD 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 220+ 9AD0 19                   add hl,de               ; holds current screen position
 221+ 9AD1 EB                   ex de,hl
 222+ 9AD2 E1                   pop hl
 223+ 9AD3 D5                   push de
 224+ 9AD4 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
 225+ 9AD8 19                   add hl,de               ; go left 1 block in the maze
 226+ 9AD9 D1                   pop de
 227+ 9ADA 10 A5                djnz loop8r
 228+ 9ADC C9                   ret
 229+ 9ADD
 230+ 9ADD
 231+ 9ADD              do_wall5r:
 232+ 9ADD
 233+ 9ADD              ;check if b=2 - if so we are not at a wall immediately next to our right
 234+ 9ADD              ;nor are we at an and wall. We are drawing the 2nd block to the right
 235+ 9ADD              ;b=3 for 3rd block to the right.
 236+ 9ADD
 237+ 9ADD 78                   ld a,b
 238+ 9ADE D6 01                sub 1
 239+ 9AE0 CA AB 9B             jp z,do_4thwall_r       ;draw the cnd block to the right
 240+ 9AE3
 241+ 9AE3 78                   ld a,b                  ;b is our loop count
 242+ 9AE4 D6 02                sub 2                   ;check if a=2
 243+ 9AE6 CA 5E 9B             jp z,do_3rdwall_r       ;draw the 2nd block to the right
 244+ 9AE9
 245+ 9AE9 78                   ld a,b
 246+ 9AEA D6 03                sub 3
 247+ 9AEC CA 16 9B             jp z,do_2ndwall_r       ;draw the cnd block to the right
 248+ 9AEF
 249+ 9AEF              ;b must = 4 if we get here
 250+ 9AEF
 251+ 9AEF              ;check if bit 2 is set as thats an end
 252+ 9AEF              ;and b must then be changed to 1 to stop drawing.
 253+ 9AEF
 254+ 9AEF              do_wall5a:
 255+ 9AEF CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
 256+ 9AF1 28 04                jr z,draw8r
 257+ 9AF3
 258+ 9AF3 97                   sub a                  ;we Don't have an outside maze wall (end wall)
 259+ 9AF4 32 17 FA             ld (end_wall),a           ;save that we are NOT at an end wall
 260+ 9AF7
 261+ 9AF7 D5           draw8r:  push de
 262+ 9AF8 3A 04 FA             ld a,(var1)           ;top of wall udg
 263+ 9AFB 12                   ld (de),a             ; insert the top of the wall.
 264+ 9AFC
 265+ 9AFC 13                   inc de
 266+ 9AFD 12                   ld (de),a             ; insert the top of the wall - 2nd right.
 267+ 9AFE 1B                   dec de
 268+ 9AFF              ;now check if we need to draw a black side on the right
 269+ 9AFF              ;by looking to the character to the right of the wall
 270+ 9AFF              ;and if there is not a wall already drawn, then draw a
 271+ 9AFF              ;black side
 272+ 9AFF
 273+ 9AFF 3E AA                ld a,_topright5         ;if not, draw the top left side
 274+ 9B01 1B                   dec de                  ;move to the right of the bricks
 275+ 9B02 12                   ld (de),a               ;draw a black and chevron side
 276+ 9B03 13                   inc de                  ;go back 1 space again
 277+ 9B04
 278+ 9B04 21 21 00     _x1r:   ld   hl,$0021           ;jump to the next line below
 279+ 9B07
 280+ 9B07 19                   add  hl,de
 281+ 9B08 3A 05 FA             ld a,(var2)             ;draw our wall bottom.
 282+ 9B0B 77                   ld   (hl),a             ; insert the bottom of the wall.
 283+ 9B0C 23                   inc hl
 284+ 9B0D 77                   ld   (hl),a             ; insert the top of the wall.
 285+ 9B0E 2B                   dec hl
 286+ 9B0F 2B                   dec hl                  ;look at the left block
 287+ 9B10 3E AC                ld a,_bottomright5
 288+ 9B12 77                   ld (hl),a
 289+ 9B13
 290+ 9B13 D1           _x2r:   pop de
 291+ 9B14
 292+ 9B14
 293+ 9B14 18 B7                jr go_back5r              ; jump back to main loop
 294+ 9B16
 295+ 9B16
 296+ 9B16              ;************************************
 297+ 9B16
 298+ 9B16              ;draw the wall for 2nd right layer
 299+ 9B16
 300+ 9B16              ;***********************************
 301+ 9B16
 302+ 9B16              do_2ndwall_r:
 303+ 9B16
 304+ 9B16 D5                   push de                 ;save the current acreen position
 305+ 9B17              ;1st check if theres a wall where we need to draw the black side
 306+ 9B17 1A                   ld a,(de)
 307+ 9B18 FE B4                cp _smallwall
 308+ 9B1A CA 20 9B             jp z,miss5              ;theres a wall drawn already so do not
 309+ 9B1D                                              ;draw any black sides & jump over
 310+ 9B1D
 311+ 9B1D 3E 91                ld   a,$91;b9              ;top right section 3 (1)
 312+ 9B1F 12                   ld   (de),a             ; insert the top of the wall.
 313+ 9B20
 314+ 9B20              ;now draw a red wall to the right of section 2
 315+ 9B20 13           miss5:  inc de
 316+ 9B21 3E B4                ld a,_smallwall
 317+ 9B23 12                   ld (de),a
 318+ 9B24 13                   inc de
 319+ 9B25 12                   ld (de),a               ;draw 2nd one (4 wide)
 320+ 9B26 13                   inc de
 321+ 9B27 12                   ld (de),a               ;draw 3rd one (4 wide)
 322+ 9B28              ;        inc de
 323+ 9B28              ;        ld (de),a               ;draw 4th one (4 wide)
 324+ 9B28
 325+ 9B28               ;       dec de
 326+ 9B28 1B                   dec de
 327+ 9B29 1B                   dec de
 328+ 9B2A 1B                   dec de
 329+ 9B2B
 330+ 9B2B              ;now check if we need to draw a black side on the right
 331+ 9B2B              ;by looking to the character to the right of the wall
 332+ 9B2B              ;and if there is not a wall already drawn, then draw a
 333+ 9B2B              ;black side
 334+ 9B2B
 335+ 9B2B 1B                   dec de                  ;jump left 1 char in the display
 336+ 9B2C 1A                   ld a,(de)               ;read whats there
 337+ 9B2D 13                   inc de                  ;put our pointer back to the original position
 338+ 9B2E FE B4                cp _smallwall           ;is it a wall
 339+ 9B30 CA 38 9B             jp z,_x1r_2               ;if yes, do NOT draw a black side.
 340+ 9B33 3E 90                ld a,$90             ;draw top right side
 341+ 9B35 1B                   dec de
 342+ 9B36 12                   ld (de),a               ;draw middle top bit
 343+ 9B37 13                   inc de
 344+ 9B38
 345+ 9B38              ;top line done
 346+ 9B38
 347+ 9B38              ;now do the bottom line underneath
 348+ 9B38
 349+ 9B38              ;REMEMBER - 1 block is 2 8 bit squares at the section
 350+ 9B38              _x1r_2
 351+ 9B38 21 21 00             ld   hl,$0021           ;jump to the next line below + 1 char right
 352+ 9B3B 19                   add  hl,de
 353+ 9B3C
 354+ 9B3C              ;1st check if theres a wall where we need to draw the black side
 355+ 9B3C 7E                   ld a,(hl)
 356+ 9B3D FE B4                cp _smallwall
 357+ 9B3F CA 45 9B             jp z, miss51
 358+ 9B42
 359+ 9B42 3E 94                ld a,$94                ;draw our rightmost wall bottom.
 360+ 9B44 77                   ld   (hl),a             ; insert the bottom of the wall.
 361+ 9B45
 362+ 9B45              ;now draw a red wall to the right of section 2
 363+ 9B45 23           miss51: inc hl
 364+ 9B46 3E B4                ld a,_smallwall
 365+ 9B48 77                   ld (hl),a
 366+ 9B49 23                   inc hl
 367+ 9B4A 77                   ld (hl),a
 368+ 9B4B 23                   inc hl
 369+ 9B4C 77                   ld (hl),a               ;draw 3rd one (3 wide)
 370+ 9B4D 2B                   dec hl
 371+ 9B4E 2B                   dec hl
 372+ 9B4F 2B                   dec hl
 373+ 9B50
 374+ 9B50              ;now check if we need to draw a black side on the left of the lower half wall
 375+ 9B50              ;do this by checking if the next block is already a wall just like above
 376+ 9B50
 377+ 9B50 2B                   dec hl      ;look at the left block
 378+ 9B51 7E                   ld a,(hl)
 379+ 9B52 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 380+ 9B54 CA 5A 9B             jp z,_x2r_2
 381+ 9B57 3E 93                ld a,$93            ;draw leftmost bottom
 382+ 9B59 77                   ld (hl),a
 383+ 9B5A
 384+ 9B5A D1           _x2r_2  pop de
 385+ 9B5B C3 CD 9A             jp go_back5r              ; jump back to main loop
 386+ 9B5E
 387+ 9B5E              ;##########################################
 388+ 9B5E
 389+ 9B5E              ;draw the wall for 3rd right layer
 390+ 9B5E
 391+ 9B5E              ;##########################################
 392+ 9B5E
 393+ 9B5E              do_3rdwall_r:
 394+ 9B5E
 395+ 9B5E D5                   push de                 ;save the current acreen position
 396+ 9B5F              ;1st check if theres a wall where we need to draw the black side
 397+ 9B5F 13                   inc de                  ;move our start location 3 spaces right
 398+ 9B60 13                   inc de
 399+ 9B61 13                   inc de
 400+ 9B62
 401+ 9B62              ;now draw a red wall to the right of section 2,  top half
 402+ 9B62
 403+ 9B62 3E B4                ld a,_smallwall;$8e
 404+ 9B64 12                   ld (de),a
 405+ 9B65 13                   inc de
 406+ 9B66 12                   ld (de),a
 407+ 9B67 13                   inc de
 408+ 9B68 12                   ld (de),a
 409+ 9B69 13                   inc de
 410+ 9B6A 12                   ld (de),a               ;draw 4th one (4 wide)
 411+ 9B6B
 412+ 9B6B 1B                   dec de                  ;move print position back for black wall
 413+ 9B6C 1B                   dec de
 414+ 9B6D 1B                   dec de
 415+ 9B6E
 416+ 9B6E              ;now check if we need to draw a black side on the right
 417+ 9B6E              ;by looking to the character to the right of the wall
 418+ 9B6E              ;and if there is not a wall already drawn, then draw a
 419+ 9B6E              ;black side
 420+ 9B6E
 421+ 9B6E 1B                   dec de                  ;jump left 1 char in the display
 422+ 9B6F 1A                   ld a,(de)               ;read whats there
 423+ 9B70 13                   inc de                  ;put our pointer back to the original position
 424+ 9B71 FE B4                cp _smallwall           ;is it a wall
 425+ 9B73 CA 83 9B             jp z,_x1r_3               ;if yes, do NOT draw a black side.
 426+ 9B76 3E B9                ld a,$b9             ;draw top right side
 427+ 9B78 1B                   dec de
 428+ 9B79 1B                   dec de
 429+ 9B7A 1B                   dec de
 430+ 9B7B 12                   ld (de),a
 431+ 9B7C 13                   inc de
 432+ 9B7D 3C                   inc a
 433+ 9B7E 12                   ld (de),a
 434+ 9B7F 3C                   inc a
 435+ 9B80 13                   inc de
 436+ 9B81 12                   ld (de),a
 437+ 9B82
 438+ 9B82 13                    inc de
 439+ 9B83                                              ;to wall start
 440+ 9B83
 441+ 9B83              ;top line done
 442+ 9B83
 443+ 9B83              ;now do the bottom line underneath
 444+ 9B83
 445+ 9B83              _x1r_3
 446+ 9B83 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 447+ 9B86 19                   add  hl,de
 448+ 9B87
 449+ 9B87 3E B4                ld a,_smallwall;$8e
 450+ 9B89 77                   ld (hl),a
 451+ 9B8A 23                   inc hl
 452+ 9B8B 77                   ld (hl),a
 453+ 9B8C 23                   inc hl
 454+ 9B8D 77                   ld (hl),a
 455+ 9B8E 23                   inc hl
 456+ 9B8F 77                   ld (hl),a
 457+ 9B90
 458+ 9B90 2B                   dec hl
 459+ 9B91 2B                   dec hl
 460+ 9B92 2B                   dec hl
 461+ 9B93
 462+ 9B93
 463+ 9B93              ;now check if we need to draw a black side on the left of the lower half wall
 464+ 9B93              ;do this by checking if the next block is already a wall just like above
 465+ 9B93
 466+ 9B93 2B                   dec hl      ;look at the left block
 467+ 9B94 7E                   ld a,(hl)
 468+ 9B95 23                   inc hl
 469+ 9B96 FE B4                cp _smallwall           ;is there a bottom wall5 here?
 470+ 9B98 CA A7 9B             jp z,_x2r_3
 471+ 9B9B 3E BD                ld a,$bd            ;draw leftmost bottom
 472+ 9B9D 2B                   dec hl
 473+ 9B9E 2B                   dec hl
 474+ 9B9F 2B                   dec hl
 475+ 9BA0
 476+ 9BA0 77                   ld (hl),a
 477+ 9BA1 23                   inc hl
 478+ 9BA2 3C                   inc a
 479+ 9BA3 77                   ld (hl),a
 480+ 9BA4 23                   inc hl
 481+ 9BA5 3C                   inc a
 482+ 9BA6 77                   ld (hl),a
 483+ 9BA7
 484+ 9BA7 D1           _x2r_3  pop de
 485+ 9BA8 C3 CD 9A             jp go_back5r              ; jump back to main loop
 486+ 9BAB
 487+ 9BAB              ;##########################################
 488+ 9BAB
 489+ 9BAB              ;draw the wall for 4th (and last!) right layer
 490+ 9BAB
 491+ 9BAB              ;##########################################
 492+ 9BAB
 493+ 9BAB              do_4thwall_r:
 494+ 9BAB
 495+ 9BAB              ;draw top half of wall
 496+ 9BAB
 497+ 9BAB D5                   push de                 ;save the current acreen position
 498+ 9BAC              ;1st check if theres a wall where we need to draw the black side
 499+ 9BAC 13                   inc de
 500+ 9BAD 13                   inc de
 501+ 9BAE 13                   inc de
 502+ 9BAF 13                   inc de
 503+ 9BB0 13                   inc de
 504+ 9BB1 13                   inc de
 505+ 9BB2              ;now draw a red wall to the right of section 2,  top half
 506+ 9BB2
 507+ 9BB2 3E B4                ld a,_smallwall;$8d
 508+ 9BB4 12                   ld (de),a
 509+ 9BB5 13                   inc de
 510+ 9BB6 12                   ld (de),a
 511+ 9BB7
 512+ 9BB7
 513+ 9BB7 1B                   dec de                  ;move print position back for black wall
 514+ 9BB8
 515+ 9BB8              ;now check if we need to draw a black side on the right
 516+ 9BB8              ;by looking to the character to the right of the wall
 517+ 9BB8              ;and if there is not a wall already drawn, then draw a
 518+ 9BB8              ;black side
 519+ 9BB8
 520+ 9BB8 1B                   dec de                  ;jump left 1 char in the display
 521+ 9BB9 1A                   ld a,(de)               ;read whats there
 522+ 9BBA 13                   inc de                  ;put our pointer back to the original position
 523+ 9BBB FE B4                cp _smallwall;$8e                 ;is it a wall
 524+ 9BBD CA D1 9B             jp z,_x1r_31               ;if yes, do NOT draw a black side.
 525+ 9BC0 3E B9                ld a,$b9              ;draw top right side
 526+ 9BC2 1B                   dec de
 527+ 9BC3 1B                   dec de
 528+ 9BC4 1B                   dec de
 529+ 9BC5 1B                   dec de
 530+ 9BC6 12                   ld (de),a           ;draw 4 black sides
 531+ 9BC7 13                   inc de
 532+ 9BC8 3C                   inc a
 533+ 9BC9 12                   ld (de),a
 534+ 9BCA 3C                   inc a
 535+ 9BCB 13                   inc de
 536+ 9BCC 12                   ld (de),a
 537+ 9BCD 3C                   inc a
 538+ 9BCE 13                   inc de
 539+ 9BCF 12                   ld (de),a
 540+ 9BD0
 541+ 9BD0 13                   inc de              ;move to wall start
 542+ 9BD1
 543+ 9BD1
 544+ 9BD1              ;top line done
 545+ 9BD1
 546+ 9BD1              ;now do the bottom line underneath
 547+ 9BD1
 548+ 9BD1              _x1r_31
 549+ 9BD1 21 21 00      ld   hl,$0021           ;jump to the next line below + 1 char right
 550+ 9BD4 19                   add  hl,de
 551+ 9BD5
 552+ 9BD5 3E B4                ld a,_smallwall;$8d
 553+ 9BD7 77                   ld (hl),a
 554+ 9BD8 23                   inc hl
 555+ 9BD9 77                   ld (hl),a
 556+ 9BDA
 557+ 9BDA 2B                   dec hl
 558+ 9BDB
 559+ 9BDB
 560+ 9BDB              ;now check if we need to draw a black side on the left of the lower half wall
 561+ 9BDB              ;do this by checking if the next block is already a wall just like above
 562+ 9BDB
 563+ 9BDB 2B                   dec hl      ;look at the left block
 564+ 9BDC 7E                   ld a,(hl)
 565+ 9BDD 23                   inc hl
 566+ 9BDE FE B4                cp _smallwall;$8e           ;is there a bottom wall5 here?
 567+ 9BE0 CA F3 9B             jp z,_x2r_31
 568+ 9BE3
 569+ 9BE3 3E BD                ld a,$bd            ;draw leftmost bottom
 570+ 9BE5 2B                   dec hl
 571+ 9BE6 2B                   dec hl
 572+ 9BE7 2B                   dec hl
 573+ 9BE8 2B                   dec hl
 574+ 9BE9
 575+ 9BE9 77                   ld (hl),a
 576+ 9BEA 23                   inc hl
 577+ 9BEB 3C                   inc a
 578+ 9BEC 77                   ld (hl),a
 579+ 9BED 23                   inc hl
 580+ 9BEE 3C                   inc a
 581+ 9BEF 77                   ld (hl),a
 582+ 9BF0 23                   inc hl
 583+ 9BF1 3C                   inc a
 584+ 9BF2 77                   ld (hl),a
 585+ 9BF3
 586+ 9BF3 D1           _x2r_31  pop de
 587+ 9BF4 C3 CD 9A             jp go_back5r              ; jump back to main loop
 588+ 9BF7
 589+ 9BF7              ;############################################
 590+ 9BF7              ;############################################
 591+ 9BF7              ;draw layer 4 right
 592+ 9BF7              ;############################################
 593+ 9BF7              ;############################################
 594+ 9BF7
 595+ 9BF7              draw_4r
 596+ 9BF7
 597+ 9BF7
 598+ 9BF7              ; jump straight into sjasmplus debugger
 599+ 9BF7              ;        BREAK
 600+ 9BF7              ;        ret
 601+ 9BF7
 602+ 9BF7
 603+ 9BF7              ; hl=maze location being drawn.
 604+ 9BF7              ; now determine what to draw for this section.
 605+ 9BF7
 606+ 9BF7
 607+ 9BF7 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
 608+ 9BFA
 609+ 9BFA CD DD 8C             call load_de            ;get left and right and front jump into de reg
 610+ 9BFD
 611+ 9BFD 19                   add hl,de               ;jump backwards along the user view 1 space
 612+ 9BFE 22 25 FA             ld (furthest_point),hl  ;load our last furthest point
 613+ 9C01
 614+ 9C01              ;we should also move our pointer left to read where the walls are.
 615+ 9C01              ;this will be from this point onwards as we can see the blocks more fully
 616+ 9C01
 617+ 9C01              ;        ld de,(right)
 618+ 9C01              ;        add hl,de               ;should be 1 place to the left now
 619+ 9C01              ;        ld (furthest_point),hl ;re save it
 620+ 9C01
 621+ 9C01 11 01 00             ld de,$0001 ;$0003             ;to move the printed position +3
 622+ 9C04                                              ;not including black wall bit
 623+ 9C04 ED 53 11 FA          ld (var4),de
 624+ 9C08
 625+ 9C08
 626+ 9C08              ;we need to move pointer 1 to the right for wall checking
 627+ 9C08 ED 5B 0D FA          ld de,(right)
 628+ 9C0C 19                   add hl,de
 629+ 9C0D 22 15 FA             ld (var6),hl
 630+ 9C10
 631+ 9C10 ED 53 0F FA          ld (var3),de
 632+ 9C14 11 59 01             ld   de,$0159;159       ; offset to row 10 column 19 - right of  centre of the 3d view.
 633+ 9C17 CD 1D 9C             call do_draw_4r
 634+ 9C1A
 635+ 9C1A
 636+ 9C1A              ;ret
 637+ 9C1A C3 DD 9D             jp draw_3r           ;now draw the 4th level
 638+ 9C1D
 639+ 9C1D              do_draw_4r:
 640+ 9C1D
 641+ 9C1D 2A 71 81             ld hl,(d_file)        ; fetch the location of the display file.
 642+ 9C20 19                   add hl,de
 643+ 9C21 06 04                ld b,4                 ; count for max of 4 blocks right of maze position
 644+ 9C23                                              ; 0 is not counted so loops 3 times
 645+ 9C23 ED 5B 15 FA          ld de,(var6)
 646+ 9C27 EB                   ex de,hl              ; transfer de to hl.
 647+ 9C28
 648+ 9C28              loop9r:
 649+ 9C28 E5                   push hl
 650+ 9C29
 651+ 9C29              ;*#########################################
 652+ 9C29              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
 653+ 9C29
 654+ 9C29 3A 28 FA             ld a,(maze_highbyte)
 655+ 9C2C BC                   cp h                    ;are we at the top part of the maze?
 656+ 9C2D CA 60 9C             jp z,cont_4a
 657+ 9C30                                              ;if we are on a different maze boundary
 658+ 9C30                                              ;then draw a maze wall as we are the top
 659+ 9C30                                              ;or north wall but maze data has no
 660+ 9C30                                              ;wall data.
 661+ 9C30              ;4 = 1st right wall
 662+ 9C30              ;3 = 2nd right wall
 663+ 9C30              ;2 = 3rd right wall
 664+ 9C30              ;1 = 4th right wall
 665+ 9C30
 666+ 9C30 78                   ld a,b                  ;our current wall counter
 667+ 9C31 FE 04                cp 4
 668+ 9C33 C2 3E 9C             jp nz,b4                 ;its not wall 2
 669+ 9C36 3E 01                ld a,1
 670+ 9C38 47                   ld b,a
 671+ 9C39 C6 80                add a,128               ;make sure we set a wall!
 672+ 9C3B C3 8F 9C             jp draw_9r             ;jump straight to making an end wall
 673+ 9C3E
 674+ 9C3E FE 03        b4:     cp 3
 675+ 9C40 C2 4B 9C             jp nz,b4_1                 ;its not wall 2
 676+ 9C43 3E 01                ld a,1
 677+ 9C45 47                   ld b,a
 678+ 9C46 C6 80                add a,128               ;make sure we set a wall!
 679+ 9C48 C3 CC 9C             jp draw_9r_2             ;jump straight to making an end wall
 680+ 9C4B
 681+ 9C4B FE 02        b4_1:   cp 2
 682+ 9C4D C2 58 9C             jp nz,b4_2                 ;its not wall 2
 683+ 9C50 3E 01                ld a,1
 684+ 9C52 47                   ld b,a
 685+ 9C53 C6 80                add a,128               ;make sure we set a wall!
 686+ 9C55 C3 3C 9D             jp draw_9r_3             ;jump straight to making an end wall
 687+ 9C58
 688+ 9C58 3E 01        b4_2:   ld a,1
 689+ 9C5A 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
 690+ 9C5B C6 80                add a,128               ;make sure we set a wall!
 691+ 9C5D C3 9D 9D             jp draw_9r_4	       	;draw the 2nd wall to the right
 692+ 9C60
 693+ 9C60              ;*#########################################
 694+ 9C60              cont_4a:
 695+ 9C60 7E                   ld a,(hl)
 696+ 9C61 17                   rla
 697+ 9C62 DA 75 9C             jp c,do_wall4r            ;bit 7 (128)
 698+ 9C65
 699+ 9C65
 700+ 9C65              go_back4r:
 701+ 9C65 2A 11 FA             ld hl,(var4)            ;used for left and right drawing
 702+ 9C68                                              ; holds current screen position
 703+ 9C68 19                   add hl,de
 704+ 9C69 EB                   ex de,hl
 705+ 9C6A E1                   pop hl
 706+ 9C6B D5                   push de
 707+ 9C6C ED 5B 0F FA          ld de,(var3)            ;hold address of next block in the maze we test
 708+ 9C70 19                   add hl,de               ; move to the start of the next block to print
 709+ 9C71                                              ;we need to move back 4 blocks
 710+ 9C71                                              ;as the first block obscures the view
 711+ 9C71                                              ;of the next 3 blocks.
 712+ 9C71 D1                   pop de
 713+ 9C72 10 B4                djnz loop9r
 714+ 9C74 C9                   ret
 715+ 9C75              ;now do the 4th position
 716+ 9C75
 717+ 9C75              do_wall4r:
 718+ 9C75              do_wall4a:
 719+ 9C75
 720+ 9C75              ;now draw the wall based on bc count
 721+ 9C75
 722+ 9C75              wall4_start:
 723+ 9C75
 724+ 9C75 78                   ld a,b
 725+ 9C76 D6 04                sub 4                   ;4 = 1st wall to the right
 726+ 9C78 CA 8F 9C             jp z,draw_9r
 727+ 9C7B
 728+ 9C7B 78                   ld a,b
 729+ 9C7C D6 03                sub 3                   ;3 = 2nd wall immediately to the right
 730+ 9C7E CA CC 9C             jp z,draw_9r_2
 731+ 9C81
 732+ 9C81 78                   ld a,b
 733+ 9C82 D6 02                sub 2                   ;2 = 3rd wall immediately to the right
 734+ 9C84 CA 3C 9D             jp z,draw_9r_3
 735+ 9C87
 736+ 9C87 78                   ld a,b
 737+ 9C88 D6 01                sub 1                   ;1 = 4th wall immediately to the right
 738+ 9C8A CA 9D 9D             jp z,draw_9r_4
 739+ 9C8D
 740+ 9C8D E1                   pop hl
 741+ 9C8E C9                   ret
 742+ 9C8F
 743+ 9C8F
 744+ 9C8F              draw_9r:
 745+ 9C8F C5                   push bc
 746+ 9C90 D5                   push de                 ;save our display pointer
 747+ 9C91 06 04                ld b,4                  ;block is 4 blocks high
 748+ 9C93 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
 749+ 9C96 3E B7        loop10r:ld   a,_mediumwall_1      ;grey sides facing us
 750+ 9C98 12                   ld   (de),a             ; insert thepart of the wall.
 751+ 9C99 13                   inc de
 752+ 9C9A 12                   ld (de),a               ;put grey side to our right
 753+ 9C9B 13                   inc de
 754+ 9C9C 12                   ld (de),a
 755+ 9C9D 13                   inc de
 756+ 9C9E 12                   ld (de),a
 757+ 9C9F 1B                   dec de
 758+ 9CA0 1B                   dec de                  ;go left 1 again
 759+ 9CA1 1B                   dec de
 760+ 9CA2 EB                   ex de,hl
 761+ 9CA3 19                   add  hl,de              ; advance to the next row of the display file.
 762+ 9CA4 EB                   ex de,hl
 763+ 9CA5 10 EF                djnz loop10r             ;do this 3 times
 764+ 9CA7
 765+ 9CA7                      ;now draw the blank face
 766+ 9CA7 D1                   pop de                  ;back to our original position
 767+ 9CA8 D5                   push de
 768+ 9CA9 1B                   dec de                  ;move left 1 space in the display
 769+ 9CAA
 770+ 9CAA              ;check if the char to our right is a wall block.
 771+ 9CAA              ;if so, do not draw a black face as we need to hide it or it will
 772+ 9CAA              ;ovewrite the already drawn block
 773+ 9CAA
 774+ 9CAA 1A                   ld a,(de)
 775+ 9CAB FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 776+ 9CAD C2 B4 9C             jp nz,cont_1r            ;there is no block so draw black edge
 777+ 9CB0 D1                   pop de
 778+ 9CB1 C1                   pop bc
 779+ 9CB2 18 B1                jr go_back4r             ;otherwise quit this draw
 780+ 9CB4
 781+ 9CB4 EB           cont_1r ex  de,hl
 782+ 9CB5 11 21 00             ld de,$0021
 783+ 9CB8 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
 784+ 9CBA 77                   ld  (hl),a
 785+ 9CBB 19                   add hl,de
 786+ 9CBC 3E AF                ld  a,_black
 787+ 9CBE 77                   ld  (hl),a
 788+ 9CBF 19                   add hl,de
 789+ 9CC0 3E AF                ld  a,_black
 790+ 9CC2 77                   ld  (hl),a
 791+ 9CC3 19                   add hl,de
 792+ 9CC4
 793+ 9CC4 77                   ld  (hl),a
 794+ 9CC5 3E B1                ld  a,_topcorner2
 795+ 9CC7 77                   ld  (hl),a
 796+ 9CC8 D1                   pop de
 797+ 9CC9 C1                   pop bc
 798+ 9CCA 18 99                jr go_back4r              ; jump back to main loop
 799+ 9CCC
 800+ 9CCC              ;************************************
 801+ 9CCC              ;*Draw the 2nd right block of section 4
 802+ 9CCC              ;************************************
 803+ 9CCC
 804+ 9CCC              draw_9r_2:
 805+ 9CCC C5                   push bc
 806+ 9CCD 21 03 00             ld hl,3                 ;move display 3 chars to the right
 807+ 9CD0 19                   add hl,de
 808+ 9CD1 EB                   ex de,hl
 809+ 9CD2 D5                   push de
 810+ 9CD3
 811+ 9CD3              ;now draw the 2nd wall itself
 812+ 9CD3 06 04                ld b,4                  ;block is 4 blocks high
 813+ 9CD5 21 21 00             ld hl,$0021           ;load with 32 to jump to line below us
 814+ 9CD8 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 815+ 9CDA
 816+ 9CDA              loop10r_2:
 817+ 9CDA 12                   ld (de),a             ; insert thepart of the wall.
 818+ 9CDB 13                   inc de
 819+ 9CDC 12                   ld (de),a               ;put grey side to our right
 820+ 9CDD 13                   inc de
 821+ 9CDE 12                   ld (de),a
 822+ 9CDF 13                   inc de
 823+ 9CE0 12                   ld (de),a
 824+ 9CE1 13                   inc de
 825+ 9CE2 12                   ld (de),a
 826+ 9CE3 1B                   dec de
 827+ 9CE4 1B                   dec de
 828+ 9CE5 1B                   dec de
 829+ 9CE6 1B                   dec de                  ;go left 1 again
 830+ 9CE7 EB                   ex de,hl
 831+ 9CE8 19                   add  hl,de              ; advance to the next row of the display file.
 832+ 9CE9 EB                   ex de,hl
 833+ 9CEA 10 EE                djnz loop10r_2             ;do this 3 times
 834+ 9CEC
 835+ 9CEC                      ;now draw the blank face
 836+ 9CEC D1                   pop de                  ;back to our original position
 837+ 9CED D5                   push de
 838+ 9CEE 1B                   dec de                  ;move left 1 space in the display
 839+ 9CEF
 840+ 9CEF              ;check if the char to our right is a wall block.
 841+ 9CEF              ;if so, do not draw a black face as we need to hide it or it will
 842+ 9CEF              ;ovewrite the already drawn block
 843+ 9CEF
 844+ 9CEF 1A                   ld a,(de)
 845+ 9CF0 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 846+ 9CF2 C2 FA 9C             jp nz,cont_1r_2           ;there is no block so draw black edge
 847+ 9CF5 D1                   pop de
 848+ 9CF6 C1                   pop bc
 849+ 9CF7 C3 65 9C             jp go_back4r             ;otherwise quit this draw
 850+ 9CFA
 851+ 9CFA              cont_1r_2:
 852+ 9CFA EB                   ex  de,hl
 853+ 9CFB 11 21 00             ld de,$0021
 854+ 9CFE
 855+ 9CFE              ;need to loop 2 times drawing 2 lots of 3 top
 856+ 9CFE              ;& bottom chars- move down 1after 1st 3 top chars drawn
 857+ 9CFE              ;
 858+ 9CFE
 859+ 9CFE 3E 02                ld a,2
 860+ 9D00 32 18 FA             ld (var7),a             ;save initial count for 2 draws
 861+ 9D03
 862+ 9D03              ;loop for 2 black wall columns
 863+ 9D03 3E 03                ld a,3                  ;column start height
 864+ 9D05 32 04 FA             ld (var1),a           ;save the count for the column hight minus the top corners
 865+ 9D08
 866+ 9D08 06 03                ld b,3                  ;loop 3 times for 3 columns
 867+ 9D0A 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 868+ 9D0D 3E 91                ld a,$91
 869+ 9D0F 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 870+ 9D12
 871+ 9D12              loop10br_2:
 872+ 9D12 C5                   push bc                 ;save count
 873+ 9D13 3A 04 FA             ld a,(var1)             ;column height
 874+ 9D16 47                   ld b,a                  ;holds the column height in chars
 875+ 9D17 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 876+ 9D1A F5                   push af                 ;save a for bottom corners
 877+ 9D1B 77                   ld  (hl),a
 878+ 9D1C
 879+ 9D1C              loop10ar_2:
 880+ 9D1C 19                   add hl,de
 881+ 9D1D 3E AF                ld  a,_black            ;black wall fill
 882+ 9D1F 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 883+ 9D20 10 FA                djnz loop10ar_2
 884+ 9D22
 885+ 9D22 F1                   pop af                  ;retrivetop corner
 886+ 9D23 3D                   dec a                   ;prep for next top corner
 887+ 9D24 32 05 FA             ld (var2),a             ;re-save it for next corner
 888+ 9D27 C6 04                add a,4                 ;get the correct char to print
 889+ 9D29 77                   ld  (hl),a              ;draw the bottom of the wall
 890+ 9D2A
 891+ 9D2A                      ;now change column count
 892+ 9D2A 3A 04 FA             ld a,(var1)
 893+ 9D2D C1                   pop bc
 894+ 9D2E
 895+ 9D2E 2A 13 FA             ld hl,(var5)
 896+ 9D31 2B                   dec hl                  ;move print position to the left
 897+ 9D32 22 13 FA             ld (var5),hl
 898+ 9D35
 899+ 9D35 10 DB                djnz loop10br_2
 900+ 9D37
 901+ 9D37              exit_1_2:
 902+ 9D37 D1                   pop de
 903+ 9D38 C1                   pop bc
 904+ 9D39 C3 65 9C             jp go_back4r              ; jump back to main loop
 905+ 9D3C
 906+ 9D3C              ;#############################################
 907+ 9D3C              ;*Draw the 3rd right block of section 4
 908+ 9D3C              ;#############################################
 909+ 9D3C
 910+ 9D3C              draw_9r_3:
 911+ 9D3C
 912+ 9D3C C5                   push bc
 913+ 9D3D D5                   push de                 ;save our display pointer
 914+ 9D3E 06 04                ld b,4                  ;block is 4 blocks high
 915+ 9D40 21 21 00             ld hl,$0021             ;load with 32 to jump to line below us
 916+ 9D43 11 62 C1             ld de,$C162             ;start of drawing
 917+ 9D46
 918+ 9D46              loop10r_3:
 919+ 9D46 3E B7                ld a,_mediumwall_1      ;grey sides facing us
 920+ 9D48 12                   ld (de),a               ; insert thepart of the wall.
 921+ 9D49 EB                   ex de,hl
 922+ 9D4A 19                   add  hl,de              ; advance to the next row of the display file.
 923+ 9D4B EB                   ex de,hl
 924+ 9D4C 10 F8                djnz loop10r_3          ;do this 3 times
 925+ 9D4E
 926+ 9D4E                      ;now draw the blank face
 927+ 9D4E D1                   pop de                  ;back to our original position
 928+ 9D4F D5                   push de
 929+ 9D50
 930+ 9D50              ;check if the char to our right is a wall block.
 931+ 9D50              ;if so, do not draw a black face as we need to hide it or it will
 932+ 9D50              ;ovewrite the already drawn block
 933+ 9D50
 934+ 9D50
 935+ 9D50 3A 61 C1             ld a,($c161);(de)
 936+ 9D53 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
 937+ 9D55 C2 5D 9D             jp nz,cont_1r_3            ;there is no block so draw black edge
 938+ 9D58
 939+ 9D58 D1                   pop de
 940+ 9D59 C1                   pop bc
 941+ 9D5A C3 65 9C             jp go_back4r             ;otherwise quit this draw
 942+ 9D5D
 943+ 9D5D              cont_1r_3:
 944+ 9D5D EB                   ex  de,hl
 945+ 9D5E 11 21 00             ld de,$0021
 946+ 9D61 21 61 C1             ld hl,$c161
 947+ 9D64
 948+ 9D64              ;need to loop 2 times drawing 2 lots of 3 top
 949+ 9D64              ;& bottom chars- move down 1after 1st 3 top chars drawn
 950+ 9D64              ;
 951+ 9D64
 952+ 9D64              ;loop for 2 black wall columns
 953+ 9D64 3E 03                ld a,3                  ;column start height
 954+ 9D66 32 04 FA             ld (var1),a             ;save the count for the column hight minus the top corners
 955+ 9D69
 956+ 9D69 06 05                ld b,5                  ;loop 5 times for 5 columns
 957+ 9D6B 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
 958+ 9D6E 3E CD                ld a,$cd ;91
 959+ 9D70 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
 960+ 9D73
 961+ 9D73              loop10br_2a:
 962+ 9D73 C5                   push bc                 ;save count
 963+ 9D74 3A 04 FA             ld a,(var1)             ;column height
 964+ 9D77 47                   ld b,a                  ;holds the column height in chars
 965+ 9D78 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
 966+ 9D7B F5                   push af                 ;save a for bottom corners
 967+ 9D7C 77                   ld  (hl),a
 968+ 9D7D
 969+ 9D7D              loop10ar_2a:
 970+ 9D7D 19                   add hl,de
 971+ 9D7E 3E AF                ld  a,_black            ;black wall fill
 972+ 9D80 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
 973+ 9D81 10 FA                djnz loop10ar_2a
 974+ 9D83
 975+ 9D83 F1                   pop af                  ;retrivetop corner
 976+ 9D84 3D                   dec a                   ;prep for next top corner
 977+ 9D85 32 05 FA             ld (var2),a             ;re-save it for next corner
 978+ 9D88 C6 06                add a,6                 ;get the correct char to print
 979+ 9D8A 77                   ld  (hl),a              ;draw the bottom of the wall
 980+ 9D8B
 981+ 9D8B                      ;now change column count
 982+ 9D8B 3A 04 FA             ld a,(var1)
 983+ 9D8E C1                   pop bc
 984+ 9D8F
 985+ 9D8F 2A 13 FA             ld hl,(var5)
 986+ 9D92 2B                   dec hl                  ;move print position to the left
 987+ 9D93 22 13 FA             ld (var5),hl
 988+ 9D96
 989+ 9D96 10 DB                djnz loop10br_2a
 990+ 9D98
 991+ 9D98 D1                   pop de
 992+ 9D99 C1                   pop bc
 993+ 9D9A C3 65 9C             jp go_back4r              ; jump back to main loop
 994+ 9D9D
 995+ 9D9D              ;#############################################
 996+ 9D9D              ;*Draw the 4th RIGHT block of section 4
 997+ 9D9D              ;#############################################
 998+ 9D9D
 999+ 9D9D              ; we only need to draw up to 2 columns of black sides.
1000+ 9D9D
1001+ 9D9D              draw_9r_4:
1002+ 9D9D C5                   push bc
1003+ 9D9E D5                   push de                 ;save our display pointer
1004+ 9D9F
1005+ 9D9F              ;check if the char to our left is a wall block.
1006+ 9D9F              ;if so, do not draw a black face as we need to hide it or it will
1007+ 9D9F              ;ovewrite the already drawn block
1008+ 9D9F
1009+ 9D9F 21 62 C1             ld hl,$C18C+20-30-32              ;start of drawing
1010+ 9DA2 7E                   ld a,(hl)
1011+ 9DA3 FE B7                cp _mediumwall_1        ;is there an already drawn screen block here?
1012+ 9DA5 C2 AD 9D             jp nz,cont_3r            ;there is no block so draw black edge
1013+ 9DA8
1014+ 9DA8 D1                   pop de
1015+ 9DA9 C1                   pop bc
1016+ 9DAA C3 65 9C             jp go_back4r             ;otherwise quit this draw
1017+ 9DAD
1018+ 9DAD              cont_3r:
1019+ 9DAD 11 21 00             ld de,33                ;to jump to next line below
1020+ 9DB0 3E CA                ld a,$ca                ;top of the wall
1021+ 9DB2 E5                   push hl                 ;save for drawing 2nd black wall
1022+ 9DB3 77                   ld (hl),a               ;to cover up wall 5
1023+ 9DB4 19                   add hl,de               ;jump to next line
1024+ 9DB5 3E AF                ld a,_black
1025+ 9DB7 77                   ld (hl),a
1026+ 9DB8 19                   add hl,de
1027+ 9DB9 77                   ld (hl),a
1028+ 9DBA 19                   add hl,de
1029+ 9DBB 3E CF                ld a,$cf                ;draw bottom of the line
1030+ 9DBD 77                   ld (hl),a
1031+ 9DBE
1032+ 9DBE              ;now check if we need to cover wall 5 with a 2nd black line to the left
1033+ 9DBE              ;hl points to top of the 4 blocks
1034+ 9DBE E1                   pop hl                  ;restore our pointer in char ram
1035+ 9DBF 2B                   dec hl                  ;go left 1 place
1036+ 9DC0 E5                   push hl
1037+ 9DC1 19                   add hl,de               ;now we are at the wall 5 top position
1038+ 9DC2 7E                   ld a,(hl)
1039+ 9DC3 FE B4                cp _smallwall
1040+ 9DC5 E1                   pop hl
1041+ 9DC6 20 0B                jr nz,exit3r
1042+ 9DC8              ;draw the second wall over section 5 wall
1043+ 9DC8 36 C9                ld (hl),$c9             ;top of the wall
1044+ 9DCA 19                   add hl,de
1045+ 9DCB 36 AF                ld (hl),_black
1046+ 9DCD 19                   add hl,de
1047+ 9DCE 36 AF                ld (hl),_black
1048+ 9DD0 19                   add hl,de
1049+ 9DD1 36 CE                ld (hl),$ce             ;bottom of the wall
1050+ 9DD3
1051+ 9DD3 D1           exit3r:  pop de                  ;now exit
1052+ 9DD4 C1                   pop bc
1053+ 9DD5 C3 65 9C             jp go_back4r
1054+ 9DD8
1055+ 9DD8
1056+ 9DD8              ;draw 2 black walls across 1 line
1057+ 9DD8              black_wall_2:
1058+ 9DD8 19                   add hl,de      ;jump 1 line below
1059+ 9DD9 77                   ld (hl),a
1060+ 9DDA 23                   inc hl
1061+ 9DDB 77                   ld (hl),a
1062+ 9DDC C9                   ret
1063+ 9DDD
1064+ 9DDD
1065+ 9DDD              ;#############################################
1066+ 9DDD              ;#############################################
1067+ 9DDD              ;# draw wall 3 right
1068+ 9DDD              ;#############################################
1069+ 9DDD              ;#############################################
1070+ 9DDD
1071+ 9DDD              draw_3r:
1072+ 9DDD
1073+ 9DDD              ; hl=maze location being drawn.
1074+ 9DDD              ; now determine what to draw for this section.
1075+ 9DDD
1076+ 9DDD
1077+ 9DDD 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1078+ 9DE0
1079+ 9DE0 CD DD 8C             call load_de            ;get left and right and front jump into de reg
1080+ 9DE3
1081+ 9DE3 19                   add hl,de               ;jump backwards along the user view 1 space
1082+ 9DE4 22 25 FA             ld (furthest_point),hl  ;re save it
1083+ 9DE7
1084+ 9DE7 11 01 00             ld de,$0001             ;to move the display position +1
1085+ 9DEA ED 53 11 FA          ld (var4),de
1086+ 9DEE
1087+ 9DEE ED 5B 0D FA          ld de,(right)
1088+ 9DF2
1089+ 9DF2 19                   add hl,de
1090+ 9DF3 22 15 FA             ld (var6),hl
1091+ 9DF6                         ;save the maze position
1092+ 9DF6
1093+ 9DF6 ED 53 0F FA          ld (var3),de
1094+ 9DFA 11 19 01             ld de,$0119           ; offset right of  centre of the 3d view.
1095+ 9DFD
1096+ 9DFD CD 03 9E             call do_draw_3r
1097+ 9E00
1098+ 9E00
1099+ 9E00 C3 62 9F             jp draw_2r              ;now draw the 2nd level
1100+ 9E03
1101+ 9E03              do_draw_3r:
1102+ 9E03
1103+ 9E03 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
1104+ 9E06 19                   add  hl,de
1105+ 9E07
1106+ 9E07
1107+ 9E07              ; draw  right half of the display.
1108+ 9E07
1109+ 9E07 06 03                ld b,3                  ; count for 2 blocks left or right of display file
1110+ 9E09                                              ; 0 is not counted so loops 12 times
1111+ 9E09 ED 5B 15 FA          ld de,(var6)            ; retrieve the maze location.
1112+ 9E0D
1113+ 9E0D EB                   ex   de,hl              ; transfer de to hl.
1114+ 9E0E
1115+ 9E0E              ;       hl = furthest point in the maze
1116+ 9E0E              ;       de = d_file location to store byte to display
1117+ 9E0E
1118+ 9E0E              loop11r:
1119+ 9E0E E5                   push hl
1120+ 9E0F
1121+ 9E0F              ;*#########################################
1122+ 9E0F              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1123+ 9E0F
1124+ 9E0F 3A 28 FA             ld a,(maze_highbyte)
1125+ 9E12 BC                   cp h                    ;are we at the top part of the maze?
1126+ 9E13 CA 3A 9E             jp z,cont_3a
1127+ 9E16                                              ;if we are on a different maze boundary
1128+ 9E16                                              ;then draw a maze wall as we are the top
1129+ 9E16                                              ;or north wall but maze data has no
1130+ 9E16                                              ;wall data.
1131+ 9E16              ;3 = first right wall
1132+ 9E16              ;2 = 2nd right wall
1133+ 9E16              ;1 = 3rd right wall
1134+ 9E16
1135+ 9E16 78                   ld a,b                  ;our current wall counter
1136+ 9E17 D6 03                sub 3
1137+ 9E19 C2 24 9E             jp nz,b3_1                 ;its not wall 2
1138+ 9E1C 3E 01                ld a,1
1139+ 9E1E 47                   ld b,a
1140+ 9E1F C6 80                add a,128               ;make sure we set a wall!
1141+ 9E21 C3 5E 9E             jp draw_10r             ;jump straight to making an end wall
1142+ 9E24
1143+ 9E24 78           b3_1    ld a,b                  ;our current wall counter
1144+ 9E25 D6 02                sub 2
1145+ 9E27 C2 32 9E             jp nz,b3_2                 ;its not wall 2
1146+ 9E2A 3E 01                ld a,1
1147+ 9E2C 47                   ld b,a
1148+ 9E2D C6 80                add a,128               ;make sure we set a wall!
1149+ 9E2F C3 CC 9E             jp draw_10r_2             ;jump straight to making an end wall
1150+ 9E32
1151+ 9E32
1152+ 9E32 3E 01        b3_2:   ld a,1
1153+ 9E34 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1154+ 9E35 C6 80                add a,128               ;make sure we set a wall!
1155+ 9E37 C3 3E 9F             jp draw_10r_3	       	;draw the 2nd wall to the right
1156+ 9E3A
1157+ 9E3A              ;*#########################################
1158+ 9E3A              cont_3a:
1159+ 9E3A 7E                   ld a,(hl)
1160+ 9E3B 17                   rla
1161+ 9E3C DA 4A 9E             jp c,do_wall3r            ;if bit 7=128 theres a wall
1162+ 9E3F
1163+ 9E3F
1164+ 9E3F              go_back3r:
1165+ 9E3F E1                   pop hl
1166+ 9E40 D5                   push de
1167+ 9E41 ED 5B 0F FA          ld de,(var3)            ;used for left and right drawing
1168+ 9E45 19                   add hl,de                ; go right 1 block in the maze
1169+ 9E46 D1                   pop de
1170+ 9E47 10 C5                djnz loop11r
1171+ 9E49 C9                   ret
1172+ 9E4A              ;now do the next maze position
1173+ 9E4A
1174+ 9E4A
1175+ 9E4A              do_wall3r:
1176+ 9E4A
1177+ 9E4A                      ;check if bit 1 is set as thats an end wall
1178+ 9E4A                      ;and b must then be changed to 1 to stop drawing.
1179+ 9E4A
1180+ 9E4A                      ;2020 draw layers according to how close to the middle
1181+ 9E4A              ;         bit 1,a                 ; is this a side wall? (129 but we rla'd accumulator)
1182+ 9E4A              ;         jr z,wall3_start
1183+ 9E4A              ;         ld b,1                  ;it IS a sidewall so set b so we exit on return
1184+ 9E4A
1185+ 9E4A              ;**** Whats this for? Does it work!
1186+ 9E4A              ;         ld a,(blockid)
1187+ 9E4A              ;         cp 16
1188+ 9E4A              ;         jp z,draw_10r          ;16 = a side wall
1189+ 9E4A
1190+ 9E4A              ;now draw the wall based on bc value
1191+ 9E4A              wall3_start:
1192+ 9E4A
1193+ 9E4A
1194+ 9E4A 78                  ld a,b			               ;b is the loop count i.e # of walls to draw
1195+ 9E4B D6 01               	sub 1			               ;3 = the wall imediately right
1196+ 9E4D CA 3E 9F             jp z,draw_10r_3          ;draw an end wall if blockid=16
1197+ 9E50
1198+ 9E50 78                   ld a,b
1199+ 9E51 D6 03                sub 3
1200+ 9E53 CA 5E 9E             jp z,draw_10r         		;draw the 1st wall to the right
1201+ 9E56
1202+ 9E56 78                   ld a,b
1203+ 9E57 D6 02                sub 2
1204+ 9E59 CA CC 9E             jp z,draw_10r_2	       	;draw the 2nd wall to the right
1205+ 9E5C
1206+ 9E5C E1                   pop hl                  ;nothing to draw so return
1207+ 9E5D C9                   ret
1208+ 9E5E
1209+ 9E5E
1210+ 9E5E              draw_10r:
1211+ 9E5E C5                    push bc                ;save loop count
1212+ 9E5F 11 19 C1              ld de,$c119             ;start of print position
1213+ 9E62 D5                    push de                 ;save our display pointer
1214+ 9E63
1215+ 9E63 06 08                 ld b,8                  ;block is 8 blocks high
1216+ 9E65 21 21 00              ld hl,$0021             ;load with 32 to jump to line below us
1217+ 9E68 3E B5                 ld a, _mediumwall       ;wall on sides facing us
1218+ 9E6A 12           loop12r: ld (de),a               ; insert the part of the wall.
1219+ 9E6B 13                    inc de
1220+ 9E6C 12                    ld (de),a               ;put grey side to our right
1221+ 9E6D 13                    inc de
1222+ 9E6E 12                    ld (de),a               ;put grey side to our right
1223+ 9E6F 13                    inc de
1224+ 9E70 12                    ld (de),a               ;put grey side to our right
1225+ 9E71 13                    inc de
1226+ 9E72 12                    ld (de),a               ;put grey side to our right
1227+ 9E73 13                    inc de
1228+ 9E74 12                    ld (de),a               ;put grey side to our right
1229+ 9E75
1230+ 9E75 13                    inc de
1231+ 9E76 12                    ld (de),a
1232+ 9E77 13                    inc de
1233+ 9E78 12                    ld (de),a
1234+ 9E79 1B                    dec de
1235+ 9E7A 1B                    dec de
1236+ 9E7B
1237+ 9E7B 1B                    dec de
1238+ 9E7C 1B                    dec de
1239+ 9E7D 1B                    dec de
1240+ 9E7E 1B                    dec de
1241+ 9E7F 1B                    dec de
1242+ 9E80 EB                    ex de,hl
1243+ 9E81 19                    add  hl,de              ; advance to the next row of the display file.
1244+ 9E82 EB                    ex de,hl
1245+ 9E83 10 E5                 djnz loop12r            ;do this 3 times
1246+ 9E85
1247+ 9E85              ;now draw the blank face to the leftt of the block
1248+ 9E85              ;create first column of left face characters
1249+ 9E85
1250+ 9E85 D1                    pop de                  ;back to our original position
1251+ 9E86 D5                    push de
1252+ 9E87 1B                    dec de                  ;move ahead 1 space in the display (right)
1253+ 9E88
1254+ 9E88              ;check if the char to our left is a wall block.
1255+ 9E88              ;if so, do not draw a black face as we need to hide it or it will
1256+ 9E88              ;ovewrite the already drawn block
1257+ 9E88
1258+ 9E88 1A                    ld a,(de)
1259+ 9E89 FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1260+ 9E8B C2 92 9E              jp nz,cont_2r            ;there is no block so draw black edge
1261+ 9E8E D1                    pop de
1262+ 9E8F C1                    pop bc
1263+ 9E90 18 AD                 jr go_back3r             ;otherwise quit this draw
1264+ 9E92
1265+ 9E92
1266+ 9E92 EB           cont_2r: ex  de,hl
1267+ 9E93 11 21 00              ld de,$0021
1268+ 9E96
1269+ 9E96              ;loop for 2 columns
1270+ 9E96
1271+ 9E96 06 02                ld b,2                  ; loop 2 times for 2 columns
1272+ 9E98 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1273+ 9E9B 3E 07                ld a,7
1274+ 9E9D 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1275+ 9EA0
1276+ 9EA0              loop12br:
1277+ 9EA0 C5                   push bc                 ;save count
1278+ 9EA1 3A 04 FA             ld a,(var1)
1279+ 9EA4 47                   ld b,a                  ;holds the column height in chars
1280+ 9EA5 3E B2                ld  a,_topcorner3      ;triangle sloping to right bottom
1281+ 9EA7 77                   ld  (hl),a
1282+ 9EA8
1283+ 9EA8              loop12ar:                   ;we must start at5 to draw 4 face blocks on right
1284+ 9EA8 19                   add hl,de
1285+ 9EA9 3E AF                ld  a,_black      ;triangle sloping to right bottom
1286+ 9EAB 77                   ld  (hl),a              ;draw 6 black blocks and 2 edges
1287+ 9EAC 10 FA                djnz loop12ar
1288+ 9EAE
1289+ 9EAE
1290+ 9EAE 3E B1                ld  a,_topcorner2
1291+ 9EB0 77                   ld  (hl),a
1292+ 9EB1
1293+ 9EB1                      ;now change column count
1294+ 9EB1 3A 04 FA             ld a,(var1)
1295+ 9EB4 D6 02                sub 2                   ;subtract 2
1296+ 9EB6 32 04 FA             ld (var1),a
1297+ 9EB9 C1                   pop bc
1298+ 9EBA
1299+ 9EBA 2A 13 FA             ld hl,(var5)
1300+ 9EBD 2B                   dec hl                  ;move print position to the left
1301+ 9EBE 11 21 00             ld de,$21               ;move top of next column down and across 1
1302+ 9EC1 19                   add hl,de
1303+ 9EC2 22 13 FA             ld (var5),hl
1304+ 9EC5
1305+ 9EC5 10 D9                djnz loop12br
1306+ 9EC7 D1                   pop de
1307+ 9EC8 C1                   pop bc
1308+ 9EC9 C3 3F 9E             jp go_back3r              ; jump back to main loop
1309+ 9ECC
1310+ 9ECC              ;**********************************
1311+ 9ECC              ;     draw the 2nd right block
1312+ 9ECC              ;***********************************
1313+ 9ECC
1314+ 9ECC              draw_10r_2:
1315+ 9ECC
1316+ 9ECC C5                    push bc
1317+ 9ECD 11 19 C1              ld de, $c119           ;start print position of wall
1318+ 9ED0 D5                   push de
1319+ 9ED1              ;dont draw a front wall as we never see it.
1320+ 9ED1
1321+ 9ED1 21 08 00             ld hl,8                 ;move 8 blocks over to start position
1322+ 9ED4 19                   add hl,de
1323+ 9ED5 EB                   ex de,hl
1324+ 9ED6              ;we do not need a front wall for this row as it is never seen.
1325+ 9ED6              ;below jp code can be removed :) Because a square block here
1326+ 9ED6              ;is 8 x 8
1327+ 9ED6
1328+ 9ED6 1B                    dec de                  ;move ahead 1 space in the display (right)
1329+ 9ED7
1330+ 9ED7              ;check if the char to our left is a wall block.
1331+ 9ED7              ;if so, do not draw a black face as we need to hide it or it will
1332+ 9ED7              ;ovewrite the already drawn block
1333+ 9ED7 1A                    ld a,(de)
1334+ 9ED8 FE B5                 cp _mediumwall        ;is there an already drawn screen block here?
1335+ 9EDA C2 E2 9E              jp nz,cont_2r_2            ;there is no block so draw black edge
1336+ 9EDD D1                    pop de
1337+ 9EDE C1                    pop bc
1338+ 9EDF C3 3F 9E              jp go_back3r             ;otherwise quit this draw
1339+ 9EE2
1340+ 9EE2
1341+ 9EE2              ;draw the black edge wall
1342+ 9EE2
1343+ 9EE2              cont_2r_2:
1344+ 9EE2 EB                    ex  de,hl
1345+ 9EE3 11 21 00              ld de,$0021
1346+ 9EE6
1347+ 9EE6              ;need to loop 2 times drawing 2 lots of 3 top
1348+ 9EE6              ;& bottom chars- move down 1after 1st 3 top chars drawn
1349+ 9EE6              ;
1350+ 9EE6
1351+ 9EE6 3E 02                ld a,2
1352+ 9EE8 32 18 FA             ld (var7),a             ;save initial count for 2 draws
1353+ 9EEB
1354+ 9EEB              ;loop for 3 black wall columns
1355+ 9EEB 3E 07                ld a,7                  ;column start height
1356+ 9EED 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1357+ 9EF0
1358+ 9EF0 06 03        loop_x: ld b,3                  ;loop 3 times for 3 columns
1359+ 9EF2 22 13 FA             ld (var5),hl            ;address of first face block after corner chamfer
1360+ 9EF5 3E 91                ld a,$91
1361+ 9EF7 32 05 FA             ld (var2),a             ;ld var2 with top right sloping corner black
1362+ 9EFA
1363+ 9EFA              loop12br_2:
1364+ 9EFA C5                   push bc                 ;save count
1365+ 9EFB 3A 04 FA             ld a,(var1)             ;column height
1366+ 9EFE 47                   ld b,a                  ;holds the column height in chars
1367+ 9EFF 3A 05 FA             ld  a,(var2)            ;triangle sloping to right bottom
1368+ 9F02 F5                   push af                 ;save a for bottom corners
1369+ 9F03 77                   ld  (hl),a
1370+ 9F04
1371+ 9F04              loop12ar_2:
1372+ 9F04 19                   add hl,de
1373+ 9F05 3E AF                ld  a,_black            ;black wall fill
1374+ 9F07 77                   ld  (hl),a              ;draw 6 black blocks and3 edges
1375+ 9F08 10 FA                djnz loop12ar_2
1376+ 9F0A
1377+ 9F0A F1                   pop af                  ;retrivetop corner
1378+ 9F0B 3D                   dec a                   ;prep for next top corner
1379+ 9F0C 32 05 FA             ld (var2),a             ;re-save it for next corner
1380+ 9F0F C6 04                add a,4                 ;get the correct char to print
1381+ 9F11 77                   ld  (hl),a              ;draw the bottom of the wall
1382+ 9F12
1383+ 9F12                      ;now change column count
1384+ 9F12 3A 04 FA             ld a,(var1)
1385+ 9F15 C1                   pop bc
1386+ 9F16
1387+ 9F16 2A 13 FA             ld hl,(var5)
1388+ 9F19 2B                   dec hl                  ;move print position to the left
1389+ 9F1A 22 13 FA             ld (var5),hl
1390+ 9F1D
1391+ 9F1D 10 DB                djnz loop12br_2
1392+ 9F1F
1393+ 9F1F              ;1st set of 3 top bits drawn
1394+ 9F1F              ;now jump down the display 1 line
1395+ 9F1F              ;then draw another 3 columns
1396+ 9F1F
1397+ 9F1F 3A 18 FA             ld a,(var7)             ;get our loop counter
1398+ 9F22 3D                   dec a
1399+ 9F23 28 12                jr z,exit_1             ;exit after 2 loops
1400+ 9F25 32 18 FA             ld (var7),a             ;save it
1401+ 9F28 2A 13 FA             ld hl,(var5)
1402+ 9F2B              ;get our last print position
1403+ 9F2B                                              ;need to go to next line -1 char
1404+ 9F2B 19                   add hl,de
1405+ 9F2C                                              ; now move back in the display
1406+ 9F2C                                              ;1 char
1407+ 9F2C 22 13 FA             ld (var5),hl            ;re save it for use above
1408+ 9F2F
1409+ 9F2F 3E 05                ld a,5                  ;reduce black wall column height
1410+ 9F31 32 04 FA             ld  (var1),a            ;save the count for the column hight minus the top corners
1411+ 9F34
1412+ 9F34 C3 F0 9E             jp loop_x
1413+ 9F37
1414+ 9F37
1415+ 9F37 D1           exit_1: pop de
1416+ 9F38 C1                   pop bc
1417+ 9F39 06 01                ld b,1                  ;if we draw this wall, we need to stop drawing any more walls
1418+ 9F3B C3 3F 9E             jp go_back3r              ; jump back to main loop
1419+ 9F3E
1420+ 9F3E
1421+ 9F3E              ;#############################################
1422+ 9F3E              ;*Draw the 3rd RIGHT block of section3
1423+ 9F3E              ;#############################################
1424+ 9F3E
1425+ 9F3E
1426+ 9F3E              	; we only need to draw 2 columns of black sides.
1427+ 9F3E                  ; if theres no brick pattern !
1428+ 9F3E
1429+ 9F3E              draw_10r_3:
1430+ 9F3E C5                   push bc
1431+ 9F3F D5                   push de                 ;save our display pointer
1432+ 9F40
1433+ 9F40 21 41 C1             ld hl,$C18C-66-30-3+24  ;start of drawing
1434+ 9F43 7E                   ld a,(hl)               ;read what char is there
1435+ 9F44 FE B5                cp _mediumwall
1436+ 9F46 20 05                jr nz,cont_1r_4        ;exit if a wall is already there
1437+ 9F48 D1                   pop de
1438+ 9F49 C1                   pop bc
1439+ 9F4A C3 3F 9E             jp go_back3r             ;otherwise quit this draw
1440+ 9F4D
1441+ 9F4D              cont_1r_4:
1442+ 9F4D
1443+ 9F4D 3E C9                ld a,$c9
1444+ 9F4F 77                   ld (hl),a
1445+ 9F50
1446+ 9F50 3E AF                ld a,_black
1447+ 9F52 11 21 00             ld de,33                ;1 line width
1448+ 9F55
1449+ 9F55 CD C3 93             CALL black_wall         ;draw 4 black blocks
1450+ 9F58
1451+ 9F58 19                   add hl,de               ;jump to next line below
1452+ 9F59
1453+ 9F59
1454+ 9F59              ;top half done - so do bottom half - 2 blacks first
1455+ 9F59
1456+ 9F59              ;de already holds 32
1457+ 9F59
1458+ 9F59 3E CE                ld a,$ce
1459+ 9F5B 77                   ld (hl),a
1460+ 9F5C
1461+ 9F5C D1                   pop de
1462+ 9F5D C1                   pop bc
1463+ 9F5E C3 3F 9E             jp go_back3r
1464+ 9F61
1465+ 9F61              ;draw 2 black walls across 1 line
1466+ 9F61              ;black_wall:
1467+ 9F61              ;        add hl,de      ;jump 1 line below
1468+ 9F61              ;        ld (hl),a
1469+ 9F61              ;        add hl,de      ;jump 1 line below
1470+ 9F61              ;        ld (hl),a
1471+ 9F61              ;        add hl,de      ;jump 1 line below
1472+ 9F61              ;        ld (hl),a
1473+ 9F61              ;        add hl,de      ;jump 1 line below
1474+ 9F61              ;        ld (hl),a
1475+ 9F61
1476+ 9F61 C9                   ret
1477+ 9F62
1478+ 9F62
1479+ 9F62
1480+ 9F62              ;#############################################
1481+ 9F62              ;#############################################
1482+ 9F62              ; draw  layer 2
1483+ 9F62              ;#############################################
1484+ 9F62              ;#############################################
1485+ 9F62
1486+ 9F62              draw_2r:
1487+ 9F62
1488+ 9F62
1489+ 9F62              ; hl=maze location being drawn.
1490+ 9F62              ; now determine what to draw for this section.
1491+ 9F62              test
1492+ 9F62
1493+ 9F62 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1494+ 9F65
1495+ 9F65 CD DD 8C             call load_de            ;get left and right and front jump into de reg
1496+ 9F68
1497+ 9F68 19                   add hl,de               ;jump backwards along the user view 1 space
1498+ 9F69 22 25 FA             ld (furthest_point),hl ;re save it
1499+ 9F6C
1500+ 9F6C 11 01 00             ld de,$0001             ;to move the display position +1
1501+ 9F6F ED 53 11 FA          ld (var4),de
1502+ 9F73
1503+ 9F73 ED 5B 0D FA          ld de,(right)
1504+ 9F77
1505+ 9F77              ;we need to move pointer 1 to the left for wall checking
1506+ 9F77 19                   add hl,de
1507+ 9F78 22 15 FA             ld (var6),hl
1508+ 9F7B
1509+ 9F7B ED 53 0F FA          ld (var3),de
1510+ 9F7F 11 B9 00             ld  de,$0b9           ; offset to right of centre of the 3d view.
1511+ 9F82 CD 88 9F             call do_draw_2r
1512+ 9F85
1513+ 9F85 C3 FD 9F             jp draw_1r           ;now draw the 2nd level
1514+ 9F88
1515+ 9F88              do_draw_2r:
1516+ 9F88
1517+ 9F88 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
1518+ 9F8B 19                   add  hl,de
1519+ 9F8C
1520+ 9F8C
1521+ 9F8C 06 01                ld b,1                 ; count for 1 blocks left or right of display file
1522+ 9F8E                                              ; 0 is not counted so loops 12 times
1523+ 9F8E ED 5B 15 FA          ld de,(var6)
1524+ 9F92
1525+ 9F92 EB                   ex   de,hl              ; transfer de to hl.
1526+ 9F93
1527+ 9F93
1528+ 9F93 E5           loop14r: push hl
1529+ 9F94
1530+ 9F94              ;*#########################################
1531+ 9F94              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1532+ 9F94
1533+ 9F94 3A 28 FA             ld a,(maze_highbyte)
1534+ 9F97 BC                   cp h                    ;are we at the top part of the maze?
1535+ 9F98 CA A3 9F             jp z,cont_2a
1536+ 9F9B                                              ;if we are on a different maze boundary
1537+ 9F9B                                              ;then draw a maze wall as we are the top
1538+ 9F9B                                              ;or north wall but maze data has no
1539+ 9F9B                                              ;wall data.
1540+ 9F9B
1541+ 9F9B 3E 01                ld a,1
1542+ 9F9D 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1543+ 9F9E C6 7F                add a,127               ;make sure we set a wall!
1544+ 9FA0 C3 AA 9F             jp draw_11r             ;jump straight to making an end wall
1545+ 9FA3
1546+ 9FA3              ;*#########################################
1547+ 9FA3              cont_2a:
1548+ 9FA3 7E                   ld a,(hl)
1549+ 9FA4 17                   rla
1550+ 9FA5 DA AA 9F             jp c,do_wall2r            ;bit 7 (128)
1551+ 9FA8
1552+ 9FA8
1553+ 9FA8              go_back2r:
1554+ 9FA8 E1                   pop hl
1555+ 9FA9 C9                   ret
1556+ 9FAA              ;now do the 2nd position
1557+ 9FAA
1558+ 9FAA
1559+ 9FAA
1560+ 9FAA              do_wall2r:
1561+ 9FAA                      ;check if bit 2 is set as thats an end wall.
1562+ 9FAA                      ;and b must then be changed to 1 to stop drawing.
1563+ 9FAA              ;        bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1564+ 9FAA              ;        jr z,draw_11r
1565+ 9FAA              ;        ld b,1                  ;set b so we exit on return
1566+ 9FAA
1567+ 9FAA              ;?? 2020 do we need this??????
1568+ 9FAA              ;        ld a,(blockid)
1569+ 9FAA              ;        cp 16
1570+ 9FAA              ;        jp z,draw_11r           ;draw an endwall if blockid=16
1571+ 9FAA              ;        pop hl
1572+ 9FAA              ;        ret
1573+ 9FAA
1574+ 9FAA
1575+ 9FAA              draw_11r:
1576+ 9FAA              ;        push bc
1577+ 9FAA D5                   push de                 ;save our display pointer
1578+ 9FAB 06 0E                ld b,14                  ;block is 14 blocks high
1579+ 9FAD 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1580+ 9FB0 3E B6                ld   a,_largewall            ;wall on sides facing us
1581+ 9FB2
1582+ 9FB2              ;draw 4 columns of bricks
1583+ 9FB2              loop13r:
1584+ 9FB2 12                   ld (de),a             ; insert the part of the wall.
1585+ 9FB3 13                   inc de
1586+ 9FB4 12                   ld (de),a               ;draw brick side
1587+ 9FB5 13                   inc de
1588+ 9FB6 12                   ld (de),a
1589+ 9FB7 13                   inc de
1590+ 9FB8 12                   ld (de),a
1591+ 9FB9 13                   inc de
1592+ 9FBA 12                   ld (de),a
1593+ 9FBB 1B                   dec de
1594+ 9FBC 1B                   dec de
1595+ 9FBD 1B                   dec de
1596+ 9FBE 1B                   dec de
1597+ 9FBF EB                   ex de,hl
1598+ 9FC0 19                   add  hl,de              ; advance to the next row of the display file.
1599+ 9FC1 EB                   ex de,hl
1600+ 9FC2 10 EE               djnz loop13r             ;do this 3 times
1601+ 9FC4
1602+ 9FC4
1603+ 9FC4
1604+ 9FC4                      ;now draw the blank face to the left of the block
1605+ 9FC4                      ;create first column of left face characters
1606+ 9FC4 D1                   pop de                  ;back to our original position
1607+ 9FC5 1B                   dec de
1608+ 9FC6 EB                   ex  de,hl
1609+ 9FC7 11 21 00             ld de,$0021
1610+ 9FCA
1611+ 9FCA 06 03                ld b,3                  ; for 4 face columns to draw to draw
1612+ 9FCC 22 13 FA             ld (var5),hl
1613+ 9FCF 3E 0D                ld a,13                 ; for 14 blocks high per column
1614+ 9FD1 32 04 FA             ld (var1),a
1615+ 9FD4
1616+ 9FD4              ;draw the black sides
1617+ 9FD4              loop13br:
1618+ 9FD4 C5                   push bc
1619+ 9FD5 3A 04 FA             ld a,(var1)
1620+ 9FD8 47                   ld b,a
1621+ 9FD9 3E B2                ld a,_topcorner3
1622+ 9FDB 77                   ld (hl),a
1623+ 9FDC
1624+ 9FDC              loop13ar:
1625+ 9FDC 19                   add hl,de
1626+ 9FDD 3E AF                ld  a,_black
1627+ 9FDF 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1628+ 9FE0 10 FA                djnz loop13ar
1629+ 9FE2
1630+ 9FE2 3E B1                ld  a,_topcorner2
1631+ 9FE4 77                   ld  (hl),a
1632+ 9FE5
1633+ 9FE5              ; now change the column count
1634+ 9FE5 3A 04 FA             ld a,(var1)
1635+ 9FE8 D6 02                sub 2
1636+ 9FEA 32 04 FA             ld (var1),a
1637+ 9FED C1                   pop bc
1638+ 9FEE
1639+ 9FEE 2A 13 FA             ld hl,(var5)
1640+ 9FF1 2B                   dec hl
1641+ 9FF2 11 21 00             ld de,$21
1642+ 9FF5 19                   add hl,de
1643+ 9FF6 22 13 FA             ld (var5),hl
1644+ 9FF9
1645+ 9FF9 10 D9                djnz loop13br
1646+ 9FFB
1647+ 9FFB 18 AB                jr go_back2r              ; jump back to main loop
1648+ 9FFD
1649+ 9FFD
1650+ 9FFD
1651+ 9FFD              ;#############################################
1652+ 9FFD              ;#############################################
1653+ 9FFD              ; draw 1st layer right
1654+ 9FFD              ;#############################################
1655+ 9FFD              ;#############################################
1656+ 9FFD
1657+ 9FFD              draw_1r:
1658+ 9FFD
1659+ 9FFD              ; hl=maze location being drawn.
1660+ 9FFD              ; now determine what to draw for this section.
1661+ 9FFD
1662+ 9FFD
1663+ 9FFD 2A 25 FA             ld hl,(furthest_point)  ;load our last furthest point
1664+ A000
1665+ A000 CD DD 8C             call load_de            ;get left and right and front jump into de reg
1666+ A003
1667+ A003 19                   add hl,de               ;jump backwards along the user view 1 space
1668+ A004 22 25 FA             ld (furthest_point),hl ;re save it
1669+ A007
1670+ A007 11 01 00             ld de,$0001             ;to move the display position +1
1671+ A00A ED 53 11 FA          ld (var4),de
1672+ A00E
1673+ A00E ED 5B 0D FA          ld de,(right)
1674+ A012
1675+ A012              ;we need to move pointer 1 to the left for wall checking
1676+ A012 19                   add hl,de
1677+ A013 22 15 FA             ld (var6),hl
1678+ A016
1679+ A016              ;        ld de,$0001             ;to move the display position +1
1680+ A016 ED 53 0F FA          ld (var3),de
1681+ A01A 11 38 00             ld  de,$038           ; offset to row 1 column 0 - left of  centre of the 3d view.
1682+ A01D CD 23 A0             call do_draw_1r
1683+ A020
1684+ A020
1685+ A020 C3 93 A0             jp draw_0r           ;now draw the 2nd level
1686+ A023
1687+ A023              do_draw_1r:
1688+ A023
1689+ A023 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
1690+ A026 19                   add  hl,de
1691+ A027
1692+ A027 06 01                ld b,1                 ; count for 2 blocks left or right of display file
1693+ A029                                              ; 0 is not counted so loops 12 times
1694+ A029 ED 5B 15 FA          ld de,(var6)
1695+ A02D EB                   ex   de,hl              ; transfer de to hl.
1696+ A02E
1697+ A02E              ;       hl = furthest point in the maze
1698+ A02E              ;       de = d_file location to store byte to display
1699+ A02E
1700+ A02E E5           loop15r: push hl
1701+ A02F
1702+ A02F              ;*#########################################
1703+ A02F              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1704+ A02F
1705+ A02F 3A 28 FA             ld a,(maze_highbyte)
1706+ A032 BC                   cp h                    ;are we at the top part of the maze?
1707+ A033 CA 3E A0             jp z,cont_1a
1708+ A036                                              ;if we are on a different maze boundary
1709+ A036                                              ;then draw a maze wall as we are the top
1710+ A036                                              ;or north wall but maze data has no
1711+ A036                                              ;wall data.
1712+ A036
1713+ A036 3E 01                ld a,1
1714+ A038 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1715+ A039 C6 7F                add a,127               ;make sure we set a wall!
1716+ A03B C3 4B A0             jp draw_12r             ;jump straight to making an end wall
1717+ A03E
1718+ A03E              ;*#########################################
1719+ A03E              cont_1a:
1720+ A03E 7E                   ld a,(hl)
1721+ A03F 17                   rla
1722+ A040 DA 45 A0             jp c,do_wall1r            ;bit 7 (128)
1723+ A043
1724+ A043              go_back1r:
1725+ A043 E1                   pop hl
1726+ A044 C9                   ret
1727+ A045
1728+ A045              do_wall1r:
1729+ A045                      ;check if bit 2 is set as thats an end
1730+ A045                      ;and b must then be changed to 1 to stop drawing.
1731+ A045
1732+ A045 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1733+ A047 28 02                jr z,draw_12r
1734+ A049 06 01                ld b,1                  ;set b so we exit on return
1735+ A04B
1736+ A04B              ;**** Whats this for? Does it work!
1737+ A04B
1738+ A04B              ;        ld a,(blockid)
1739+ A04B              ;        cp 16
1740+ A04B              ;        jp z,draw_12r           ;draw an end wall if blockid=16
1741+ A04B              ;        pop hl
1742+ A04B              ;        ret
1743+ A04B
1744+ A04B
1745+ A04B              ;draw the corridor bit to the left (1 column)
1746+ A04B              draw_12r:
1747+ A04B D5                   push de                 ;save our display pointer
1748+ A04C 06 16                ld b,22                  ;block is 22 blocks high
1749+ A04E 21 21 00             ld   hl,$0021           ;load with 32 to jump to line below us
1750+ A051 3E B8                ld   a,_hugewall;_largewall            ;wall on sides facing us
1751+ A053              loop16r:                        ; insert thepart of the wall.
1752+ A053 13                   inc de
1753+ A054 12                   ld (de),a               ;put grey side to our right
1754+ A055 1B                   dec de
1755+ A056 EB                   ex de,hl
1756+ A057 19                   add  hl,de              ; advance to the next row of the display file.
1757+ A058 EB                   ex de,hl
1758+ A059 10 F8                djnz loop16r             ;do this 3 times
1759+ A05B
1760+ A05B                      ;now draw the blank face to the right of the block
1761+ A05B                      ;create first column of right face characters
1762+ A05B D1                   pop de                  ;back to our original position
1763+ A05C EB                   ex  de,hl
1764+ A05D 11 21 00             ld de,$0021
1765+ A060
1766+ A060              ;now draw the face we see on our left as we walk forward
1767+ A060 06 04                ld b,4                  ; for 8 face columns to draw to draw
1768+ A062 22 13 FA             ld (var5),hl
1769+ A065 3E 15                ld a,21                 ; for 14 blocks high per column
1770+ A067 32 04 FA             ld (var1),a
1771+ A06A
1772+ A06A              loop14br:
1773+ A06A C5                   push bc
1774+ A06B 3A 04 FA             ld a,(var1)
1775+ A06E 47                   ld b,a
1776+ A06F 3E B2                ld a,_topcorner3
1777+ A071 77                   ld (hl),a
1778+ A072
1779+ A072              loop14ar:
1780+ A072 19                   add hl,de
1781+ A073 3E AF                ld  a,_black            ;triangle sloping to right bottom
1782+ A075 77                   ld  (hl),a              ;draw 14 black blocks and 3 edges
1783+ A076 10 FA                djnz loop14ar
1784+ A078
1785+ A078 3E B1                ld  a,_topcorner2
1786+ A07A 77                   ld  (hl),a
1787+ A07B
1788+ A07B              ; now change the column count
1789+ A07B 3A 04 FA             ld a,(var1)
1790+ A07E D6 02                sub 2
1791+ A080 32 04 FA             ld (var1),a
1792+ A083 C1                   pop bc
1793+ A084
1794+ A084 2A 13 FA             ld hl,(var5)
1795+ A087 2B                   dec hl
1796+ A088 11 21 00             ld de,$21
1797+ A08B 19                   add hl,de
1798+ A08C 22 13 FA             ld (var5),hl
1799+ A08F
1800+ A08F 10 D9                djnz loop14br
1801+ A091
1802+ A091 18 B0                jr go_back1r              ; jump back to main loop
1803+ A093
1804+ A093
1805+ A093              ;#############################################
1806+ A093              ;#############################################
1807+ A093              ; draw layer 0 right
1808+ A093              ;#############################################
1809+ A093              ;#############################################
1810+ A093
1811+ A093              draw_0r:
1812+ A093              ;ret
1813+ A093
1814+ A093
1815+ A093              ; hl=maze location being drawn.
1816+ A093              ; now determine what to draw for this section.
1817+ A093
1818+ A093 2A 25 FA             ld   hl,(furthest_point); retrieve the maze location.
1819+ A096
1820+ A096 CD DD 8C             call load_de
1821+ A099
1822+ A099              ;**think we can lose these 2 lines.
1823+ A099                                  ;get left and right and front jump into de reg
1824+ A099 19                   add  hl,de
1825+ A09A
1826+ A09A              ;need to move pointer right for wall checking
1827+ A09A ED 5B 0D FA          ld de,(right)
1828+ A09E 19                   add hl,de
1829+ A09F 22 15 FA             ld (var6),hl
1830+ A0A2
1831+ A0A2 ED 53 0F FA          ld (var3),de
1832+ A0A6 11 18 00             ld  de,$18              ;offset to row0 column 24 - left of  centre of the 3d view.
1833+ A0A9                                              ;1 column of left face to draw
1834+ A0A9              ;draw the wall
1835+ A0A9 2A 71 81             ld   hl,(d_file)        ; fetch the location of the display file.
1836+ A0AC 19                   add  hl,de
1837+ A0AD
1838+ A0AD
1839+ A0AD ED 5B 15 FA          ld   de,(var6)
1840+ A0B1 EB                   ex   de,hl              ; transfer de to hl.
1841+ A0B2
1842+ A0B2
1843+ A0B2              loop17r:
1844+ A0B2
1845+ A0B2              ;*#########################################
1846+ A0B2              ;see if h is ouside the current maze 256 byte boundary - if so draw a wall.
1847+ A0B2
1848+ A0B2 3A 28 FA             ld a,(maze_highbyte)
1849+ A0B5 BC                   cp h                    ;are we at the top part of the maze?
1850+ A0B6 CA C1 A0             jp z,cont_0a
1851+ A0B9                                              ;if we are on a different maze boundary
1852+ A0B9                                              ;then draw a maze wall as we are the top
1853+ A0B9                                              ;or north wall but maze data has no
1854+ A0B9                                              ;wall data.
1855+ A0B9
1856+ A0B9 3E 01                ld a,1
1857+ A0BB 47                   ld b,a                  ;make the bc count 1 so we only draw 1 wall
1858+ A0BC C6 7F                add a,127               ;make sure we set a wall!
1859+ A0BE C3 CF A0             jp draw_13r             ;jump straight to making an end wall
1860+ A0C1
1861+ A0C1              ;*#########################################
1862+ A0C1              cont_0a:
1863+ A0C1 7E                   ld a,(hl)
1864+ A0C2 17                   rla
1865+ A0C3 DA C7 A0             jp c,do_wall0r           ;bit 7 (128)
1866+ A0C6 C9                   ret
1867+ A0C7
1868+ A0C7
1869+ A0C7              do_wall0r:
1870+ A0C7                      ;check if bit 2 is set as thats an end wall
1871+ A0C7                      ;and b must then be changed to 1 to stop drawing.
1872+ A0C7
1873+ A0C7 CB 4F                bit 1,a                 ; is this a side wall? (129 but we rla'd accu)
1874+ A0C9 DA CF A0             jp c,draw_13r          ;yes if bit 2 = 1
1875+ A0CC C3 E6 A0             jp draw_wall0r           ;its a wall but not a side wall.
1876+ A0CF
1877+ A0CF
1878+ A0CF
1879+ A0CF
1880+ A0CF              ;we need to draw 1 vertical line from pos 1,1 to show
1881+ A0CF              ;the side of the block.
1882+ A0CF
1883+ A0CF              ;draw sidewall brick pattern
1884+ A0CF              draw_13r:
1885+ A0CF 3E B2                ld a,_topcorner3
1886+ A0D1 EB                   ex de,hl
1887+ A0D2
1888+ A0D2 77                   ld (hl),a
1889+ A0D3 11 21 00             ld de,$21                ;jp to next line below
1890+ A0D6 19                   add hl,de
1891+ A0D7 06 16                ld b,22                  ;block is 22 blocks high
1892+ A0D9 11 21 00             ld de,$021           ;load with 32 to jump to line below us
1893+ A0DC 3E AF                ld a,_black            ;wall on sides facing us;
1894+ A0DE              loop18r:
1895+ A0DE 77                   ld (hl),a             ; insert the part of the wall.
1896+ A0DF 19                   add  hl,de              ; advance to the next row of the display file.
1897+ A0E0 10 FC                djnz loop18r
1898+ A0E2
1899+ A0E2              ;###this bit causes the direction indicator to fail
1900+ A0E2 3E B1                ld a,_topcorner2
1901+ A0E4 77                   ld (hl),a
1902+ A0E5 C9                   ret                     ;return to main program
1903+ A0E6
1904+ A0E6              draw_wall0r:                     ;draw brick pattern only
1905+ A0E6
1906+ A0E6 11 21 00             ld de,$21                ;jp to next line below
1907+ A0E9 19                   add hl,de
1908+ A0EA                     ; ex de,hl
1909+ A0EA
1910+ A0EA 06 16                ld b,22                  ;block is 24 blocks high
1911+ A0EC 21 21 00             ld hl,$021           ;load with 32 to jump to line below us
1912+ A0EF 3E B6                ld a,_largewall            ;wall on sides facing us;
1913+ A0F1              loop19r:
1914+ A0F1 77                   ld (hl),a             ; insert the part of the wall.
1915+ A0F2                     ; ex de,hl
1916+ A0F2 19                   add  hl,de              ; advance to the next row of the display file.
1917+ A0F3                     ; ex de,hl
1918+ A0F3 10 FC                djnz loop19r
1919+ A0F5
1920+ A0F5 C9                   ret                     ;return to main program
1921+ A0F6
# file closed: src/6-rd3dmazeV6.asm
 452  A0F6
 453  A0F6              ;#####################################################
 454  A0F6
 455  A0F6
 456  A0F6              ;###################################################
 457  A0F6              ; Get Keystroke Routine from Your Sinclair Magazine
 458  A0F6              ; From Your Sinclair #22 (Oct.1987)
 459  A0F6              ;###################################################
 460  A0F6
 461  A0F6
 462  A0F6              get_keys:
 463  A0F6               ;
 464  A0F6               ;      YS_KEYS
 465  A0F6               ;
 466  A0F6               ;A,HL,DE corrupt
 467  A0F6               ;B=0, key in C
 468  A0F6
 469  A0F6
 470  A0F6               ;Keyboard Scanning
 471  A0F6               ;by Pete Cooke
 472  A0F6               ;from Your Sinclair #22 (Oct.1987)
 473  A0F6
 474  A0F6               ;prog for Your Sinclair
 475  A0F6               ;
 476  A0F6               ;file for Hisoft GENS
 477  A0F6               ;assembler but should
 478  A0F6               ;be suitable for most
 479  A0F6               ;assemblers on the market
 480  A0F6               ;
 481  A0F6               ;Reads the keyboard
 482  A0F6               ;Returns with C
 483  A0F6               ;holding L/R/U/D/F
 484  A0F6               ;
 485  A0F6               ;bit 4,C left
 486  A0F6               ;bit 3,C right
 487  A0F6               ;bit 2,C up
 488  A0F6               ;bit 1,C down
 489  A0F6               ;bit 0,C fire
 490  A0F6               ;
 491  A0F6               ;bit set to 1 if pressed
 492  A0F6               ;
 493  A0F6               ;keys are chosen by
 494  A0F6               ;values in KEYTAB
 495  A0F6               ;
 496  A0F6 21 3D A1     readke  ld   hl,keytab
 497  A0F9 01 00 05             ld   bc,$0500
 498  A0FC               ;
 499  A0FC               ;5 keys to read
 500  A0FC               ;
 501  A0FC 7E           read_1  ld   a,(hl)
 502  A0FD 1F                   rra
 503  A0FE 1F                   rra
 504  A0FF E6 1E                and  $1e
 505  A101 5F                   ld   e,a
 506  A102 16 00                ld   d,0
 507  A104               ;
 508  A104               ;2*the row number
 509  A104               ;
 510  A104 7E                   ld   a,(hl)
 511  A105 23                   inc  hl
 512  A106 E5                   push hl
 513  A107               ;
 514  A107               ;save place in KEYTAB
 515  A107               ;
 516  A107 21 2B A1             ld   hl,keyadd
 517  A10A 19                   add  hl,de
 518  A10B 57                   ld   d,a
 519  A10C               ;
 520  A10C               ;index port addresses
 521  A10C               ;
 522  A10C C5                   push bc
 523  A10D 4E                   ld   c,(hl)
 524  A10E 23                   inc  hl
 525  A10F 46                   ld   b,(hl)
 526  A110 ED 78                in   a,(c)
 527  A112 04                   inc  b
 528  A113 05                   dec  b
 529  A114 28 01                jr   z,read_2
 530  A116 2F                   cpl
 531  A117 5F           read_2  ld   e,a
 532  A118               ;
 533  A118               ;read the port
 534  A118               ;and flip bits if not
 535  A118               ;Kempston
 536  A118               ;
 537  A118 C1                   pop  bc
 538  A119 E1                   pop  hl
 539  A11A               ;
 540  A11A               ;and get back BC+HL
 541  A11A               ;
 542  A11A 7A                   ld   a,d
 543  A11B E6 07                and  $07
 544  A11D 28 05                jr   z,read_4
 545  A11F               ;
 546  A11F CB 1B        read_3  rr   e
 547  A121 3D                   dec  a
 548  A122 20 FB                jr   nz,read_3
 549  A124               ;
 550  A124               ;rotate L so bit needed
 551  A124               ;is in bit 0
 552  A124               ;
 553  A124 CB 1B        read_4  rr   e
 554  A126 CB 11                rl   c
 555  A128               ;
 556  A128               ;rotate the bit into C
 557  A128               ;
 558  A128 10 D2                djnz read_1
 559  A12A C9                   ret
 560  A12B               ;
 561  A12B               ;exit B=0
 562  A12B               ;     C=keys
 563  A12B               ;
 564  A12B               ;A,HL,DE corrupt
 565  A12B               ;
 566  A12B               ;
 567  A12B               ;port addresses of
 568  A12B               ;the keyboard rows
 569  A12B               ;
 570  A12B FE F7 FE FB  keyadd dw 63486,64510,65022,65278,61438,57342,49150,32766
 570  A12F FE FD FE FE
 570  A133 FE EF FE DF
 570  A137 FE BF FE 7F
 571  A13B 1F 00                dw 31 ;*Kempston*
 572  A13D               ;
 573  A13D               ;
 574  A13D               ;KEYTAB holds the position
 575  A13D               ;of each key as
 576  A13D               ;1/2 row number*8 plus
 577  A13D               ;distance from the edge
 578  A13D               ;eg. P = 5*8+0
 579  A13D               ;    O = 5*8+1
 580  A13D               ;    Q = 1*8+0
 581  A13D               ;    4 = 0*8+3
 582  A13D               ;
 583  A13D 04 24 23 22  keytab db 0*8+4,4*8+4,4*8+3,4*8+2,4*8+0
 583  A141 20
 584  A142               ;           5      6     7      8   0
 585  A142               ;;bit values: 1 = 0 fire
 586  A142               ;             2 = 8 right
 587  A142               ;             4 = 7 up
 588  A142               ;             8 = 6 down
 589  A142               ;            16 = 5 left
 590  A142
 591  A142              ; keytab db 5*8+1,5*8+0,2*8+1,3*8+2,7*8+0
 592  A142               ;
 593  A142               ;set for O,P,S,X,space
 594  A142               ;
 595  A142               ;for a Kempston joystick
 596  A142               ;substitute
 597  A142               ;
 598  A142               ;       db 8*8+1,8*8+0,8*8+3,8*8+2,8*8+4
 599  A142               ;
 600  A142 00           end_k nop
 601  A143
 602  A143              ;##############################################
 603  A143              ;##############################################
 604  A143
 605  A143              ;set map - sets hl to start of map to draw
 606  A143              ;a holds the map number = 0 to 15
 607  A143
 608  A143              set_map:
 609  A143
 610  A143 21 00 A3             ld hl,map_0             ;start of map data 256 bytes each
 611  A146 32 22 FA             ld (cur_map),a          ;save our cur map
 612  A149 22 23 FA             ld (map_start),hl
 613  A14C
 614  A14C 3D                   dec a
 615  A14D 3C                   inc a                   ;exit if its map 0
 616  A14E
 617  A14E 7C                   ld a,h
 618  A14F 32 28 FA             ld (maze_highbyte),a
 619  A152 C8                   ret z       ;if a is 0, just return for map_0
 620  A153
 621  A153 3A 22 FA             ld a,(cur_map)
 622  A156 24           loop3   inc h                   ; times by 256
 623  A157 3D                   dec a
 624  A158 20 FC                jr nz, loop3
 625  A15A 22 23 FA             ld (map_start),hl
 626  A15D 7C                   ld a, h
 627  A15E 32 28 FA             ld (maze_highbyte),a
 628  A161 C9                   ret
 629  A162
 630  A162              ;#################################################################
 631  A162              ;Character screen reservation
 632  A162                      org $c000
 633  C000 00 00 00...  char_screen:   block 768    ;view screen built here from characters
 634  C300
 635  C300 00 00 00...  attr_screen:   block 768    ;colours held here for door animation
 636  C600
 637  C600              ;################################################
 638  C600
 639  C600
 640  C600              ;##############################################
 641  C600              ; Alternate Character set
 642  C600              ;from https://www.jimblimey.com/blog/24-zx-spectrum-fonts/
 643  C600              ;##############################################
 644  C600              charset_1:
 645  C600 00 00 00 00    defb 0,0,0,0,0,0,0,0
 645  C604 00 00 00 00
 646  C608 10 38 38 38    defb 16,56,56,56,16,0,16,0
 646  C60C 10 00 10 00
 647  C610 66 33 33 00    defb 102,51,51,0,0,0,0,0
 647  C614 00 00 00 00
 648  C618 66 66 FF 66    defb 102,102,255,102,102,255,102,102
 648  C61C 66 FF 66 66
 649  C620 14 7E D4 7E    defb 20,126,212,126,149,126,20,0
 649  C624 95 7E 14 00
 650  C628 60 94 68 10    defb 96,148,104,16,44,82,140,0
 650  C62C 2C 52 8C 00
 651  C630 30 48 30 48    defb 48,72,48,72,142,140,120,0
 651  C634 8E 8C 78 00
 652  C638 0C 0C 18 00    defb 12,12,24,0,0,0,0,0
 652  C63C 00 00 00 00
 653  C640 01 02 04 04    defb 1,2,4,4,4,4,2,1
 653  C644 04 04 02 01
 654  C648 80 40 20 20    defb 128,64,32,32,32,32,64,128
 654  C64C 20 20 40 80
 655  C650 00 54 38 FE    defb 0,84,56,254,56,84,0,0
 655  C654 38 54 00 00
 656  C658 00 18 18 7E    defb 0,24,24,126,24,24,0,0
 656  C65C 18 18 00 00
 657  C660 00 00 00 00    defb 0,0,0,0,0,0,48,96
 657  C664 00 00 30 60
 658  C668 00 00 00 7E    defb 0,0,0,126,0,0,0,0
 658  C66C 00 00 00 00
 659  C670 00 00 00 00    defb 0,0,0,0,0,0,48,0
 659  C674 00 00 30 00
 660  C678 01 02 04 08    defb 1,2,4,8,16,32,64,128
 660  C67C 10 20 40 80
 661  C680 7C 86 8A 92    defb 124,134,138,146,162,194,124,0
 661  C684 A2 C2 7C 00
 662  C688 10 30 70 10    defb 16,48,112,16,16,16,124,0
 662  C68C 10 10 7C 00
 663  C690 78 84 08 30    defb 120,132,8,48,64,128,252,0
 663  C694 40 80 FC 00
 664  C698 78 84 04 38    defb 120,132,4,56,4,132,120,0
 664  C69C 04 84 78 00
 665  C6A0 80 44 48 48    defb 128,68,72,72,252,8,8,0
 665  C6A4 FC 08 08 00
 666  C6A8 FE 80 80 7C    defb 254,128,128,124,2,130,124,0
 666  C6AC 02 82 7C 00
 667  C6B0 7A 84 80 BC    defb 122,132,128,188,194,130,124,0
 667  C6B4 C2 82 7C 00
 668  C6B8 FE 84 08 10    defb 254,132,8,16,56,16,16,0
 668  C6BC 38 10 10 00
 669  C6C0 7C 82 7C 82    defb 124,130,124,130,130,130,124,0
 669  C6C4 82 82 7C 00
 670  C6C8 7C 82 86 7A    defb 124,130,134,122,2,130,124,0
 670  C6CC 02 82 7C 00
 671  C6D0 00 30 00 00    defb 0,48,0,0,0,48,0,0
 671  C6D4 00 30 00 00
 672  C6D8 00 30 00 00    defb 0,48,0,0,0,48,32,0
 672  C6DC 00 30 20 00
 673  C6E0 08 10 20 40    defb 8,16,32,64,32,16,8,0
 673  C6E4 20 10 08 00
 674  C6E8 00 00 7E 00    defb 0,0,126,0,126,0,0,0
 674  C6EC 7E 00 00 00
 675  C6F0 20 10 08 04    defb 32,16,8,4,8,16,32,0
 675  C6F4 08 10 20 00
 676  C6F8 7C 82 04 08    defb 124,130,4,8,16,0,16,0
 676  C6FC 10 00 10 00
 677  C700 7C 82 9A AA    defb 124,130,154,170,170,158,124,0
 677  C704 AA 9E 7C 00
 678  C708 F8 44 42 FE    defb 248,68,66,254,66,66,198,0
 678  C70C 42 42 C6 00
 679  C710 FC 42 42 FC    defb 252,66,66,252,66,66,252,0
 679  C714 42 42 FC 00
 680  C718 7A 84 80 80    defb 122,132,128,128,128,130,124,0
 680  C71C 80 82 7C 00
 681  C720 FC 42 42 42    defb 252,66,66,66,66,66,252,0
 681  C724 42 42 FC 00
 682  C728 FE 42 40 70    defb 254,66,64,112,192,66,254,0
 682  C72C C0 42 FE 00
 683  C730 FE 42 40 70    defb 254,66,64,112,192,64,224,0
 683  C734 C0 40 E0 00
 684  C738 7A 84 80 80    defb 122,132,128,128,156,130,126,2
 684  C73C 9C 82 7E 02
 685  C740 82 44 44 5E    defb 130,68,68,94,244,68,130,0
 685  C744 F4 44 82 00
 686  C748 10 08 08 08    defb 16,8,8,8,8,8,4,0
 686  C74C 08 08 04 00
 687  C750 7E 08 04 04    defb 126,8,4,4,4,132,120,0
 687  C754 04 84 78 00
 688  C758 CC 44 48 F0    defb 204,68,72,240,72,68,198,0
 688  C75C 48 44 C6 00
 689  C760 C0 40 40 40    defb 192,64,64,64,64,66,254,0
 689  C764 40 42 FE 00
 690  C768 C6 6A 5A 4A    defb 198,106,90,74,74,66,198,0
 690  C76C 4A 42 C6 00
 691  C770 CC 64 54 54    defb 204,100,84,84,84,84,204,0
 691  C774 54 54 CC 00
 692  C778 78 84 84 84    defb 120,132,132,132,132,132,120,0
 692  C77C 84 84 78 00
 693  C780 F8 44 44 F8    defb 248,68,68,248,64,64,224,0
 693  C784 40 40 E0 00
 694  C788 78 84 84 84    defb 120,132,132,132,132,140,125,2
 694  C78C 84 8C 7D 02
 695  C790 FC 42 42 FC    defb 252,66,66,252,66,66,198,0
 695  C794 42 42 C6 00
 696  C798 74 88 80 78    defb 116,136,128,120,4,132,120,0
 696  C79C 04 84 78 00
 697  C7A0 7C 54 10 10    defb 124,84,16,16,16,16,48,0
 697  C7A4 10 10 30 00
 698  C7A8 C6 44 44 82    defb 198,68,68,130,130,130,124,0
 698  C7AC 82 82 7C 00
 699  C7B0 CC 44 44 44    defb 204,68,68,68,68,40,16,0
 699  C7B4 44 28 10 00
 700  C7B8 C6 42 42 4A    defb 198,66,66,74,90,106,204,0
 700  C7BC 5A 6A CC 00
 701  C7C0 82 44 28 10    defb 130,68,40,16,40,68,130,0
 701  C7C4 28 44 82 00
 702  C7C8 CC 44 44 38    defb 204,68,68,56,16,16,48,0
 702  C7CC 10 10 30 00
 703  C7D0 FE 84 08 10    defb 254,132,8,16,32,66,254,0
 703  C7D4 20 42 FE 00
 704  C7D8 1C 10 10 10    defb 28,16,16,16,16,16,28,0
 704  C7DC 10 10 1C 00
 705  C7E0 80 40 20 10    defb 128,64,32,16,8,4,2,1
 705  C7E4 08 04 02 01
 706  C7E8 38 08 08 08    defb 56,8,8,8,8,8,56,0
 706  C7EC 08 08 38 00
 707  C7F0 00 00 10 38    defb 0,0,16,56,108,198,0,0
 707  C7F4 6C C6 00 00
 708  C7F8 00 00 00 00    defb 0,0,0,0,0,0,0,255
 708  C7FC 00 00 00 FF
 709  C800 30 30 18 00    defb 48,48,24,0,0,0,0,0
 709  C804 00 00 00 00
 710  C808 00 00 7A 04    defb 0,0,122,4,124,132,122,0
 710  C80C 7C 84 7A 00
 711  C810 80 40 40 5C    defb 128,64,64,92,98,66,188,0
 711  C814 62 42 BC 00
 712  C818 00 00 7A 84    defb 0,0,122,132,128,130,124,0
 712  C81C 80 82 7C 00
 713  C820 02 04 74 8C    defb 2,4,116,140,132,132,122,0
 713  C824 84 84 7A 00
 714  C828 00 00 BC 42    defb 0,0,188,66,124,64,62,0
 714  C82C 7C 40 3E 00
 715  C830 34 48 40 E0    defb 52,72,64,224,64,64,128,0
 715  C834 40 40 80 00
 716  C838 00 00 7A 84    defb 0,0,122,132,140,116,4,120
 716  C83C 8C 74 04 78
 717  C840 80 40 78 44    defb 128,64,120,68,68,68,136,0
 717  C844 44 44 88 00
 718  C848 10 00 10 08    defb 16,0,16,8,8,8,4,0
 718  C84C 08 08 04 00
 719  C850 00 10 00 10    defb 0,16,0,16,8,8,136,112
 719  C854 08 08 88 70
 720  C858 C0 40 48 50    defb 192,64,72,80,224,80,200,0
 720  C85C E0 50 C8 00
 721  C860 30 10 10 10    defb 48,16,16,16,16,16,56,0
 721  C864 10 10 38 00
 722  C868 00 00 AC 54    defb 0,0,172,84,84,68,204,0
 722  C86C 54 44 CC 00
 723  C870 00 00 B8 44    defb 0,0,184,68,68,68,204,0
 723  C874 44 44 CC 00
 724  C878 00 00 78 84    defb 0,0,120,132,132,132,120,0
 724  C87C 84 84 78 00
 725  C880 00 00 B8 44    defb 0,0,184,68,68,120,64,128
 725  C884 44 78 40 80
 726  C888 00 00 74 88    defb 0,0,116,136,136,120,4,2
 726  C88C 88 78 04 02
 727  C890 00 00 B0 48    defb 0,0,176,72,64,64,64,0
 727  C894 40 40 40 00
 728  C898 00 00 78 80    defb 0,0,120,128,112,8,240,0
 728  C89C 70 08 F0 00
 729  C8A0 00 20 10 7C    defb 0,32,16,124,16,16,8,0
 729  C8A4 10 10 08 00
 730  C8A8 00 00 90 48    defb 0,0,144,72,132,132,120,0
 730  C8AC 84 84 78 00
 731  C8B0 00 00 82 44    defb 0,0,130,68,68,40,16,0
 731  C8B4 44 28 10 00
 732  C8B8 00 00 84 42    defb 0,0,132,66,82,106,70,0
 732  C8BC 52 6A 46 00
 733  C8C0 00 00 88 50    defb 0,0,136,80,32,80,136,0
 733  C8C4 20 50 88 00
 734  C8C8 00 00 82 44    defb 0,0,130,68,68,60,4,120
 734  C8CC 44 3C 04 78
 735  C8D0 00 00 7C 88    defb 0,0,124,136,48,68,248,0
 735  C8D4 30 44 F8 00
 736  C8D8 0E 10 10 60    defb 14,16,16,96,16,16,14,0
 736  C8DC 10 10 0E 00
 737  C8E0 18 18 18 00    defb 24,24,24,0,24,24,24,0
 737  C8E4 18 18 18 00
 738  C8E8 E0 10 10 0C    defb 224,16,16,12,16,16,224,0
 738  C8EC 10 10 E0 00
 739  C8F0 00 00 70 9A    defb 0,0,112,154,12,0,0,0
 739  C8F4 0C 00 00 00
 740  C8F8 00 00 18 3C    defb 0,0,24,60,102,255,0,0
 740  C8FC 66 FF 00 00
 741  C900
 742  C900
 743  C900
 744  C900                  include 7-rd3dmazeV6.asm    ;the maze itself and other routines
# file opened: src/7-rd3dmazeV6.asm
   1+ C900              ;this is the maze data and colour exit routine
   2+ C900
   3+ C900              ;##########################################################
   4+ C900              ;maze data
   5+ C900
   6+ C900                      org $a300   ;41728
   7+ A300
   8+ A300              ;################################################################
   9+ A300              ; maze data
  10+ A300              ;################################################################
  11+ A300
  12+ A300              ; the maze lies on a page boundary, allowing the code to check only the low byte of its address.
  13+ A300              ; the maze is 18 positions north-to-south (rows 0 to 17) and 16 positions west-to-east (columns 0 to 15).
  14+ A300              ;
  15+ A300              ;    n
  16+ A300              ;    |
  17+ A300              ; w -+- e
  18+ A300              ;    |
  19+ A300              ;    s
  20+ A300              ;
  21+ A300              ; key: x=wall, space=passageway, e=exit.
  22+ A300
  23+ A300
  24+ A300                 ;   org 34288 ;($85F0) for maze start
  25+ A300
  26+ A300                     ; org 28928               ;$7100 256 byte boundary
  27+ A300
  28+ A300              ;#####################################################################################
  29+ A300              ;This is our 16 Maze's maze data = numbered 0 to 15
  30+ A300              ;#####################################################################################
  31+ A300
  32+ A300              ; maze constants
  33+ A300              ; --------------
  34+ A300              ; the code for the wall must have bit 7 set whereas the other codes must have bit 7 reset.
  35+ A300
  36+ A300              _mw     equ  128   ;bin 10000000              ; wall.
  37+ A300              _mp     equ  32    ;bin 00100000              ; passageway.
  38+ A300              _me     equ  192   ;bin 11000000              ; exit.
  39+ A300              _sp     equ  32    ;bin 00100000              ; passageway.
  40+ A300              _mh     equ  129   ;bin 10000001              ;seperator or end wall
  41+ A300              _ms     equ  131   ;bin 11100000              ;switch
  42+ A300
  43+ A300
  44+ A300              ; _mh - outside wall
  45+ A300              ; _mw - inner maze wall
  46+ A300              ; _mp - space=passageway
  47+ A300              ; _me - exit door
  48+ A300              ; _ms - switch
  49+ A300              ; maze starts at 34288 on a 256 byte boundary
  50+ A300
  51+ A300              ;col  1    2     3    4    5   6    7   8    9    10   11   12   13   14   15   16
  52+ A300              map_0:
  53+ A300 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  53+ A304 20 20 20 20
  53+ A308 20 20 20 20
  53+ A30C 20 20 20 20
  54+ A310 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;2
  54+ A314 80 20 80 20
  54+ A318 80 20 80 20
  54+ A31C 80 20 80 20
  55+ A320 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  55+ A324 20 20 20 20
  55+ A328 20 20 20 20
  55+ A32C 20 20 20 20
  56+ A330 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;4
  56+ A334 80 20 80 20
  56+ A338 80 20 80 20
  56+ A33C 80 20 80 20
  57+ A340 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  57+ A344 20 20 20 20
  57+ A348 20 20 20 20
  57+ A34C 20 20 20 20
  58+ A350 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;6
  58+ A354 80 20 80 20
  58+ A358 80 20 80 20
  58+ A35C 80 20 80 20
  59+ A360 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  59+ A364 80 80 80 20
  59+ A368 20 20 20 20
  59+ A36C 20 20 20 20
  60+ A370 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;8
  60+ A374 80 20 20 20
  60+ A378 80 20 80 20
  60+ A37C 80 20 80 20
  61+ A380 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _me, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  61+ A384 20 20 C0 80
  61+ A388 20 20 20 20
  61+ A38C 20 20 20 20
  62+ A390 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;10
  62+ A394 80 20 80 20
  62+ A398 20 20 80 80
  62+ A39C 20 20 80 20
  63+ A3A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _me, _mw, _mp, _mp, _mp ;11
  63+ A3A4 20 20 20 20
  63+ A3A8 80 20 20 C0
  63+ A3AC 80 20 20 20
  64+ A3B0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mw, _mp ;12
  64+ A3B4 80 20 80 20
  64+ A3B8 20 20 80 80
  64+ A3BC 20 20 80 20
  65+ A3C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  65+ A3C4 20 20 20 20
  65+ A3C8 20 20 20 20
  65+ A3CC 20 20 20 20
  66+ A3D0 81 20 C0 20   db _mh, _mp, _me, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;14
  66+ A3D4 80 20 80 20
  66+ A3D8 80 20 80 20
  66+ A3DC 80 20 80 20
  67+ A3E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  67+ A3E4 20 20 20 20
  67+ A3E8 20 20 20 20
  67+ A3EC 20 20 20 20
  68+ A3F0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;16
  68+ A3F4 80 20 80 20
  68+ A3F8 80 20 80 20
  68+ A3FC 80 20 80 20
  69+ A400
  70+ A400              map_1:
  71+ A400 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  71+ A404 20 20 20 20
  71+ A408 20 20 20 20
  71+ A40C 20 20 20 20
  72+ A410 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;2
  72+ A414 20 20 20 20
  72+ A418 20 80 20 20
  72+ A41C 20 20 20 20
  73+ A420 81 C0 20 80   db _mh, _me, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  73+ A424 20 80 80 80
  73+ A428 20 20 20 20
  73+ A42C 20 20 20 20
  74+ A430 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;4
  74+ A434 20 20 20 20
  74+ A438 20 80 20 20
  74+ A43C 20 20 20 20
  75+ A440 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  75+ A444 20 20 80 20
  75+ A448 20 20 20 20
  75+ A44C 20 20 20 20
  76+ A450 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  76+ A454 20 80 80 80
  76+ A458 20 80 20 20
  76+ A45C 20 20 20 20
  77+ A460 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  77+ A464 20 80 20 20
  77+ A468 20 20 20 20
  77+ A46C 20 20 20 20
  78+ A470 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mp, _me, _mw, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;8
  78+ A474 80 80 20 C0
  78+ A478 80 80 20 80
  78+ A47C 80 80 20 20
  79+ A480 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  79+ A484 80 80 20 80
  79+ A488 20 20 20 20
  79+ A48C 20 20 20 20
  80+ A490 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
  80+ A494 20 80 20 20
  80+ A498 20 80 20 20
  80+ A49C 20 20 20 20
  81+ A4A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
  81+ A4A4 20 20 80 20
  81+ A4A8 20 20 20 20
  81+ A4AC 20 20 20 20
  82+ A4B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;12
  82+ A4B4 20 20 20 20
  82+ A4B8 20 80 20 20
  82+ A4BC 20 20 20 20
  83+ A4C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
  83+ A4C4 20 20 20 20
  83+ A4C8 20 20 20 20
  83+ A4CC 20 20 20 20
  84+ A4D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;14
  84+ A4D4 20 20 20 20
  84+ A4D8 20 80 20 20
  84+ A4DC 20 20 20 20
  85+ A4E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
  85+ A4E4 20 20 20 20
  85+ A4E8 20 20 20 20
  85+ A4EC 20 20 20 20
  86+ A4F0 81 83 20 20   db _mh, _ms, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;16
  86+ A4F4 20 20 20 20
  86+ A4F8 20 80 20 20
  86+ A4FC 20 20 20 20
  87+ A500
  88+ A500
  89+ A500              map_2:
  90+ A500 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
  90+ A504 20 20 20 20
  90+ A508 20 20 20 20
  90+ A50C 20 20 20 20
  91+ A510 81 C0 20 80   db _mh, _me, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
  91+ A514 80 80 80 80
  91+ A518 80 20 20 20
  91+ A51C 20 20 20 20
  92+ A520 81 80 20 80   db _mh, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
  92+ A524 20 20 20 20
  92+ A528 20 20 20 20
  92+ A52C 20 20 20 20
  93+ A530 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
  93+ A534 20 20 20 20
  93+ A538 20 20 20 20
  93+ A53C 20 20 20 20
  94+ A540 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
  94+ A544 20 20 80 20
  94+ A548 20 20 20 20
  94+ A54C 20 20 20 20
  95+ A550 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;6
  95+ A554 20 20 20 20
  95+ A558 20 80 20 20
  95+ A55C 20 20 20 20
  96+ A560 81 20 20 20   db _mh, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
  96+ A564 80 80 80 80
  96+ A568 20 20 20 20
  96+ A56C 20 20 20 20
  97+ A570 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
  97+ A574 20 20 80 20
  97+ A578 20 20 20 80
  97+ A57C 80 80 20 20
  98+ A580 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
  98+ A584 20 C0 20 20
  98+ A588 20 20 20 20
  98+ A58C 20 20 20 20
  99+ A590 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
  99+ A594 20 80 20 20
  99+ A598 20 80 20 20
  99+ A59C 20 20 20 20
 100+ A5A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 100+ A5A4 20 20 20 20
 100+ A5A8 80 20 20 20
 100+ A5AC 20 20 20 20
 101+ A5B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 101+ A5B4 20 20 20 20
 101+ A5B8 80 20 20 20
 101+ A5BC 20 20 20 20
 102+ A5C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 102+ A5C4 20 20 20 20
 102+ A5C8 20 20 20 20
 102+ A5CC 20 20 20 20
 103+ A5D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 103+ A5D4 20 20 20 20
 103+ A5D8 20 20 20 20
 103+ A5DC 20 20 20 20
 104+ A5E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 104+ A5E4 20 20 20 20
 104+ A5E8 20 20 20 20
 104+ A5EC 20 20 20 20
 105+ A5F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 105+ A5F4 20 20 20 20
 105+ A5F8 20 20 20 20
 105+ A5FC 20 20 20 20
 106+ A600
 107+ A600              map_3
 108+ A600 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 108+ A604 20 20 20 20
 108+ A608 20 20 20 20
 108+ A60C 20 20 20 20
 109+ A610 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 109+ A614 20 20 20 80
 109+ A618 20 20 20 20
 109+ A61C 20 20 20 20
 110+ A620 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 110+ A624 20 20 20 80
 110+ A628 20 20 20 20
 110+ A62C 20 20 20 20
 111+ A630 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;4
 111+ A634 20 20 20 80
 111+ A638 20 20 20 20
 111+ A63C 20 20 80 20
 112+ A640 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 112+ A644 20 20 20 20
 112+ A648 20 20 20 20
 112+ A64C 20 20 80 20
 113+ A650 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 113+ A654 20 20 20 80
 113+ A658 20 20 20 20
 113+ A65C 20 20 20 20
 114+ A660 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 114+ A664 20 20 20 20
 114+ A668 20 20 20 20
 114+ A66C 20 20 20 20
 115+ A670 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 115+ A674 20 20 20 80
 115+ A678 20 20 20 20
 115+ A67C 20 20 20 20
 116+ A680 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 116+ A684 20 20 20 20
 116+ A688 20 20 20 20
 116+ A68C 20 20 20 20
 117+ A690 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 117+ A694 80 80 20 80
 117+ A698 20 20 20 20
 117+ A69C 20 20 20 20
 118+ A6A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 118+ A6A4 20 20 80 20
 118+ A6A8 20 20 20 20
 118+ A6AC 20 20 20 20
 119+ A6B0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _me, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 119+ A6B4 20 C0 20 80
 119+ A6B8 20 20 20 20
 119+ A6BC 20 20 20 20
 120+ A6C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 120+ A6C4 20 20 20 20
 120+ A6C8 20 20 20 20
 120+ A6CC 20 20 20 20
 121+ A6D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 121+ A6D4 20 20 20 80
 121+ A6D8 20 20 20 20
 121+ A6DC 20 20 20 20
 122+ A6E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 122+ A6E4 20 20 20 80
 122+ A6E8 20 20 20 20
 122+ A6EC 20 20 20 20
 123+ A6F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 123+ A6F4 20 20 20 80
 123+ A6F8 20 20 20 20
 123+ A6FC 20 20 20 20
 124+ A700
 125+ A700              map_4:
 126+ A700 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 126+ A704 20 20 20 20
 126+ A708 20 20 20 20
 126+ A70C 20 20 20 20
 127+ A710 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;2
 127+ A714 80 80 80 80
 127+ A718 80 80 80 80
 127+ A71C 80 80 20 20
 128+ A720 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp ;3
 128+ A724 20 20 20 20
 128+ A728 20 20 20 80
 128+ A72C 20 80 20 20
 129+ A730 81 C0 20 20   db _mh, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mw, _mp, _mp, _mp, _mp ;4
 129+ A734 20 20 20 20
 129+ A738 80 80 20 80
 129+ A73C 20 20 20 20
 130+ A740 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp ;5
 130+ A744 80 80 80 80
 130+ A748 20 80 20 80
 130+ A74C 20 80 20 20
 131+ A750 81 20 80 80   db _mh, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp ;6
 131+ A754 20 20 20 20
 131+ A758 20 80 20 80
 131+ A75C 80 80 20 20
 132+ A760 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;7
 132+ A764 20 20 80 80
 132+ A768 20 20 20 80
 132+ A76C 20 20 20 20
 133+ A770 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mp, _mp ;8
 133+ A774 80 80 20 20
 133+ A778 20 20 20 80
 133+ A77C 80 80 20 20
 134+ A780 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 134+ A784 20 20 20 80
 134+ A788 20 80 80 80
 134+ A78C 80 80 80 20
 135+ A790 81 80 20 20   db _mh, _mw, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;10
 135+ A794 80 80 20 20
 135+ A798 20 80 20 20
 135+ A79C 20 20 20 20
 136+ A7A0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mp ;11
 136+ A7A4 20 20 80 20
 136+ A7A8 20 20 20 20
 136+ A7AC 20 80 80 20
 137+ A7B0 81 80 20 80   db _mh, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;12
 137+ A7B4 80 80 80 80
 137+ A7B8 80 80 80 80
 137+ A7BC 80 80 20 20
 138+ A7C0 81 20 20 80   db _mh, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp ;13
 138+ A7C4 20 80 20 20
 138+ A7C8 80 20 20 20
 138+ A7CC 80 80 20 20
 139+ A7D0 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp ;14
 139+ A7D4 20 80 20 20
 139+ A7D8 20 20 20 20
 139+ A7DC 20 80 20 20
 140+ A7E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mp, _mp ;15
 140+ A7E4 20 80 80 80
 140+ A7E8 80 80 20 20
 140+ A7EC 80 80 20 20
 141+ A7F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 141+ A7F4 20 20 20 20
 141+ A7F8 20 20 20 20
 141+ A7FC 20 20 20 20
 142+ A800
 143+ A800              map_5:
 144+ A800 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 144+ A804 20 20 20 20
 144+ A808 20 20 20 20
 144+ A80C 20 20 20 20
 145+ A810 81 20 20 80   db _mh, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;2
 145+ A814 80 80 80 20
 145+ A818 80 80 80 80
 145+ A81C 80 80 80 20
 146+ A820 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 146+ A824 20 20 20 20
 146+ A828 20 20 20 20
 146+ A82C 20 20 20 20
 147+ A830 81 20 C0 20   db _mh, _mp, _me, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 147+ A834 20 20 20 20
 147+ A838 20 20 20 20
 147+ A83C 20 20 20 20
 148+ A840 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;5
 148+ A844 80 80 80 20
 148+ A848 80 80 80 80
 148+ A84C 80 80 80 20
 149+ A850 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 149+ A854 20 20 20 20
 149+ A858 20 20 20 20
 149+ A85C 20 20 20 20
 150+ A860 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 150+ A864 20 20 20 20
 150+ A868 20 20 20 20
 150+ A86C 20 20 20 20
 151+ A870 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 151+ A874 20 20 20 20
 151+ A878 20 20 20 20
 151+ A87C 20 20 20 20
 152+ A880 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;9
 152+ A884 80 80 80 20
 152+ A888 80 80 80 80
 152+ A88C 80 80 80 20
 153+ A890 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;10
 153+ A894 20 20 20 20
 153+ A898 20 20 80 20
 153+ A89C 80 20 20 20
 154+ A8A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;11
 154+ A8A4 20 20 20 20
 154+ A8A8 20 80 20 20
 154+ A8AC 20 80 20 20
 155+ A8B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mw, _mp ;12
 155+ A8B4 20 20 20 20
 155+ A8B8 80 20 20 80
 155+ A8BC 20 20 80 20
 156+ A8C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mp ;13
 156+ A8C4 20 20 20 80
 156+ A8C8 20 20 80 20
 156+ A8CC 80 20 20 20
 157+ A8D0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;14
 157+ A8D4 80 80 80 20
 157+ A8D8 20 80 20 20
 157+ A8DC 20 80 80 20
 158+ A8E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;15
 158+ A8E4 20 20 20 20
 158+ A8E8 80 80 80 80
 158+ A8EC 20 20 20 20
 159+ A8F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;16
 159+ A8F4 20 20 20 80
 159+ A8F8 80 80 80 80
 159+ A8FC 80 80 20 20
 160+ A900
 161+ A900              map_6:
 162+ A900 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 162+ A904 20 20 20 20
 162+ A908 20 20 20 20
 162+ A90C 20 20 20 20
 163+ A910 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp, _mw, _mw, _mw, _mp ;2
 163+ A914 80 80 80 80
 163+ A918 80 80 20 20
 163+ A91C 80 80 80 20
 164+ A920 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;3
 164+ A924 80 20 20 20
 164+ A928 80 80 20 20
 164+ A92C 20 80 20 20
 165+ A930 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _ms, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mp ;4
 165+ A934 80 20 83 20
 165+ A938 80 80 80 80
 165+ A93C 80 80 20 20
 166+ A940 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;5
 166+ A944 80 20 80 20
 166+ A948 80 80 20 20
 166+ A94C 20 20 20 20
 167+ A950 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mw, _mp ;6
 167+ A954 80 20 80 20
 167+ A958 20 80 20 20
 167+ A95C 20 80 80 20
 168+ A960 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mw, _mp, _mp ;7
 168+ A964 20 20 20 20
 168+ A968 20 80 20 20
 168+ A96C 20 80 20 20
 169+ A970 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp ;8
 169+ A974 80 80 80 80
 169+ A978 20 80 80 80
 169+ A97C 80 80 80 20
 170+ A980 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 170+ A984 20 20 20 80
 170+ A988 20 20 20 20
 170+ A98C 20 20 20 20
 171+ A990 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mw, _mw, _mp ;10
 171+ A994 80 80 20 80
 171+ A998 20 80 80 20
 171+ A99C 80 80 80 20
 172+ A9A0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp, _mw, _mp, _mw, _mp ;11
 172+ A9A4 20 80 20 80
 172+ A9A8 20 20 80 20
 172+ A9AC 80 20 80 20
 173+ A9B0 81 20 80 20   db _mh, _mp, _mw, _mp, _me, _mw, _mp, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mw, _mp ;12
 173+ A9B4 C0 80 20 80
 173+ A9B8 20 80 20 80
 173+ A9BC 20 20 80 20
 174+ A9C0 81 20 80 20   db _mh, _mp, _mw, _mp, _mw, _mw, _mp, _mw, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp ;13
 174+ A9C4 80 80 20 80
 174+ A9C8 20 80 20 20
 174+ A9CC 20 20 20 20
 175+ A9D0 81 20 80 20   db _mh, _mp, _mw, _mp, _mp, _mp, _mp, _mw, _mp, _mw, _mw, _mw, _mp, _mp, _mp, _mp ;14
 175+ A9D4 20 20 20 80
 175+ A9D8 20 80 80 80
 175+ A9DC 20 20 20 20
 176+ A9E0 81 20 80 80   db _mh, _mp, _mw, _mw, _mw, _mw, _mw, _mw, _mp, _mw, _mw, _mw, _mw, _mp, _mw, _mp ;15
 176+ A9E4 80 80 80 80
 176+ A9E8 20 80 80 80
 176+ A9EC 80 20 80 20
 177+ A9F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 177+ A9F4 20 20 20 20
 177+ A9F8 20 20 20 20
 177+ A9FC 20 20 20 20
 178+ AA00
 179+ AA00              map_7
 180+ AA00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 180+ AA04 20 20 20 20
 180+ AA08 20 20 20 20
 180+ AA0C 20 20 20 20
 181+ AA10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 181+ AA14 20 20 20 80
 181+ AA18 20 20 20 20
 181+ AA1C 20 20 20 20
 182+ AA20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 182+ AA24 20 20 20 80
 182+ AA28 20 20 20 20
 182+ AA2C 20 20 20 20
 183+ AA30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 183+ AA34 20 20 20 80
 183+ AA38 20 20 20 20
 183+ AA3C 20 20 20 20
 184+ AA40 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;5
 184+ AA44 20 20 20 20
 184+ AA48 20 20 20 20
 184+ AA4C 20 20 80 20
 185+ AA50 81 80 20 20   db _mh, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp ;6
 185+ AA54 20 20 20 20
 185+ AA58 20 20 20 20
 185+ AA5C 20 20 80 20
 186+ AA60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 186+ AA64 20 20 20 20
 186+ AA68 20 20 20 20
 186+ AA6C 20 20 20 20
 187+ AA70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 187+ AA74 20 20 20 20
 187+ AA78 20 20 20 20
 187+ AA7C 20 20 20 20
 188+ AA80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 188+ AA84 20 20 20 20
 188+ AA88 20 20 20 20
 188+ AA8C 20 20 20 20
 189+ AA90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp ;10
 189+ AA94 20 20 20 20
 189+ AA98 20 20 20 80
 189+ AA9C 20 20 20 20
 190+ AAA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 190+ AAA4 20 20 20 20
 190+ AAA8 20 20 20 20
 190+ AAAC 20 20 20 20
 191+ AAB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 191+ AAB4 20 20 20 20
 191+ AAB8 20 20 20 20
 191+ AABC 20 20 20 20
 192+ AAC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 192+ AAC4 20 20 20 20
 192+ AAC8 20 20 20 20
 192+ AACC 20 20 20 20
 193+ AAD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 193+ AAD4 20 20 20 20
 193+ AAD8 20 20 20 20
 193+ AADC 20 20 20 20
 194+ AAE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 194+ AAE4 20 20 20 20
 194+ AAE8 20 20 20 20
 194+ AAEC 20 20 20 20
 195+ AAF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 195+ AAF4 20 20 20 20
 195+ AAF8 20 20 20 20
 195+ AAFC 20 20 20 20
 196+ AB00
 197+ AB00              map_8:
 198+ AB00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 198+ AB04 20 20 20 20
 198+ AB08 20 20 20 20
 198+ AB0C 20 20 20 20
 199+ AB10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 199+ AB14 20 20 20 80
 199+ AB18 20 20 20 20
 199+ AB1C 20 20 20 20
 200+ AB20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 200+ AB24 20 20 20 80
 200+ AB28 20 20 20 20
 200+ AB2C 20 20 20 20
 201+ AB30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 201+ AB34 20 20 20 80
 201+ AB38 20 20 20 20
 201+ AB3C 20 20 20 20
 202+ AB40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 202+ AB44 20 20 20 20
 202+ AB48 20 20 20 20
 202+ AB4C 20 20 20 20
 203+ AB50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 203+ AB54 20 20 20 20
 203+ AB58 20 20 20 20
 203+ AB5C 20 20 20 20
 204+ AB60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 204+ AB64 20 20 20 20
 204+ AB68 20 20 20 20
 204+ AB6C 20 20 20 20
 205+ AB70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 205+ AB74 20 20 20 20
 205+ AB78 20 20 20 20
 205+ AB7C 20 20 20 20
 206+ AB80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 206+ AB84 20 20 20 20
 206+ AB88 20 20 20 20
 206+ AB8C 20 20 20 20
 207+ AB90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 207+ AB94 20 20 20 20
 207+ AB98 20 20 20 20
 207+ AB9C 20 20 20 20
 208+ ABA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 208+ ABA4 20 20 80 20
 208+ ABA8 20 20 20 20
 208+ ABAC 20 20 20 20
 209+ ABB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 209+ ABB4 20 20 20 80
 209+ ABB8 20 20 20 20
 209+ ABBC 20 20 20 20
 210+ ABC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mw, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 210+ ABC4 20 20 80 20
 210+ ABC8 20 20 20 20
 210+ ABCC 20 20 20 20
 211+ ABD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 211+ ABD4 20 20 20 20
 211+ ABD8 20 20 20 20
 211+ ABDC 20 20 20 20
 212+ ABE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 212+ ABE4 20 20 20 20
 212+ ABE8 20 20 20 20
 212+ ABEC 20 20 20 20
 213+ ABF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 213+ ABF4 20 20 20 20
 213+ ABF8 20 20 20 20
 213+ ABFC 20 20 20 20
 214+ AC00
 215+ AC00              map_9:
 216+ AC00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 216+ AC04 20 20 20 20
 216+ AC08 20 20 20 20
 216+ AC0C 20 20 20 20
 217+ AC10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 217+ AC14 20 20 20 20
 217+ AC18 20 20 20 20
 217+ AC1C 20 20 20 20
 218+ AC20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 218+ AC24 20 20 20 20
 218+ AC28 20 20 20 20
 218+ AC2C 20 20 20 20
 219+ AC30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 219+ AC34 20 20 20 20
 219+ AC38 20 20 20 20
 219+ AC3C 20 20 20 20
 220+ AC40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 220+ AC44 20 20 20 20
 220+ AC48 20 20 20 20
 220+ AC4C 20 20 20 20
 221+ AC50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 221+ AC54 20 20 20 20
 221+ AC58 20 20 20 20
 221+ AC5C 20 20 20 20
 222+ AC60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 222+ AC64 20 20 20 20
 222+ AC68 20 20 20 20
 222+ AC6C 20 20 20 20
 223+ AC70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 223+ AC74 20 20 20 20
 223+ AC78 20 20 20 20
 223+ AC7C 20 20 20 20
 224+ AC80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 224+ AC84 20 20 20 20
 224+ AC88 20 20 20 20
 224+ AC8C 20 20 20 20
 225+ AC90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 225+ AC94 20 20 20 20
 225+ AC98 20 20 20 20
 225+ AC9C 20 20 20 20
 226+ ACA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 226+ ACA4 20 20 20 20
 226+ ACA8 20 20 20 20
 226+ ACAC 20 20 20 20
 227+ ACB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 227+ ACB4 20 20 20 20
 227+ ACB8 20 20 20 20
 227+ ACBC 20 20 20 20
 228+ ACC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 228+ ACC4 20 20 20 20
 228+ ACC8 20 20 20 20
 228+ ACCC 20 20 20 20
 229+ ACD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 229+ ACD4 20 20 20 20
 229+ ACD8 20 20 20 20
 229+ ACDC 20 20 20 20
 230+ ACE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 230+ ACE4 20 20 20 20
 230+ ACE8 20 20 20 20
 230+ ACEC 20 20 20 20
 231+ ACF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 231+ ACF4 20 20 20 20
 231+ ACF8 20 20 20 20
 231+ ACFC 20 20 20 20
 232+ AD00
 233+ AD00              map_10:
 234+ AD00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 234+ AD04 20 20 20 20
 234+ AD08 20 20 20 20
 234+ AD0C 20 20 20 20
 235+ AD10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 235+ AD14 20 20 20 20
 235+ AD18 20 20 20 20
 235+ AD1C 20 20 20 20
 236+ AD20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 236+ AD24 20 20 20 20
 236+ AD28 20 20 20 20
 236+ AD2C 20 20 20 20
 237+ AD30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 237+ AD34 20 20 20 20
 237+ AD38 20 20 20 20
 237+ AD3C 20 20 20 20
 238+ AD40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 238+ AD44 20 20 20 20
 238+ AD48 20 20 20 20
 238+ AD4C 20 20 20 20
 239+ AD50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 239+ AD54 20 20 20 20
 239+ AD58 20 20 20 20
 239+ AD5C 20 20 20 20
 240+ AD60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 240+ AD64 20 20 20 20
 240+ AD68 20 20 20 20
 240+ AD6C 20 20 20 20
 241+ AD70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 241+ AD74 20 20 20 20
 241+ AD78 20 20 20 20
 241+ AD7C 20 20 20 20
 242+ AD80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 242+ AD84 20 20 20 20
 242+ AD88 20 20 20 20
 242+ AD8C 20 20 20 20
 243+ AD90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 243+ AD94 20 20 20 20
 243+ AD98 20 20 20 20
 243+ AD9C 20 20 20 20
 244+ ADA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 244+ ADA4 20 20 20 20
 244+ ADA8 20 20 20 20
 244+ ADAC 20 20 20 20
 245+ ADB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 245+ ADB4 20 20 20 20
 245+ ADB8 20 20 20 20
 245+ ADBC 20 20 20 20
 246+ ADC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 246+ ADC4 20 20 20 20
 246+ ADC8 20 20 20 20
 246+ ADCC 20 20 20 20
 247+ ADD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 247+ ADD4 20 20 20 20
 247+ ADD8 20 20 20 20
 247+ ADDC 20 20 20 20
 248+ ADE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 248+ ADE4 20 20 20 20
 248+ ADE8 20 20 20 20
 248+ ADEC 20 20 20 20
 249+ ADF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 249+ ADF4 20 20 20 20
 249+ ADF8 20 20 20 20
 249+ ADFC 20 20 20 20
 250+ AE00
 251+ AE00              map_11:
 252+ AE00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 252+ AE04 20 20 20 20
 252+ AE08 20 20 20 20
 252+ AE0C 20 20 20 20
 253+ AE10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 253+ AE14 20 20 20 20
 253+ AE18 20 20 20 20
 253+ AE1C 20 20 20 20
 254+ AE20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 254+ AE24 20 20 20 20
 254+ AE28 20 20 20 20
 254+ AE2C 20 20 20 20
 255+ AE30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 255+ AE34 20 20 20 20
 255+ AE38 20 20 20 20
 255+ AE3C 20 20 20 20
 256+ AE40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 256+ AE44 20 20 20 20
 256+ AE48 20 20 20 20
 256+ AE4C 20 20 20 20
 257+ AE50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 257+ AE54 20 20 20 20
 257+ AE58 20 20 20 20
 257+ AE5C 20 20 20 20
 258+ AE60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 258+ AE64 20 20 20 20
 258+ AE68 20 20 20 20
 258+ AE6C 20 20 20 20
 259+ AE70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 259+ AE74 20 20 20 20
 259+ AE78 20 20 20 20
 259+ AE7C 20 20 20 20
 260+ AE80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 260+ AE84 20 20 20 20
 260+ AE88 20 20 20 20
 260+ AE8C 20 20 20 20
 261+ AE90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 261+ AE94 20 20 20 20
 261+ AE98 20 20 20 20
 261+ AE9C 20 20 20 20
 262+ AEA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 262+ AEA4 20 20 20 20
 262+ AEA8 20 20 20 20
 262+ AEAC 20 20 20 20
 263+ AEB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 263+ AEB4 20 20 20 20
 263+ AEB8 20 20 20 20
 263+ AEBC 20 20 20 20
 264+ AEC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 264+ AEC4 20 20 20 20
 264+ AEC8 20 20 20 20
 264+ AECC 20 20 20 20
 265+ AED0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 265+ AED4 20 20 20 20
 265+ AED8 20 20 20 20
 265+ AEDC 20 20 20 20
 266+ AEE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 266+ AEE4 20 20 20 20
 266+ AEE8 20 20 20 20
 266+ AEEC 20 20 20 20
 267+ AEF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 267+ AEF4 20 20 20 20
 267+ AEF8 20 20 20 20
 267+ AEFC 20 20 20 20
 268+ AF00
 269+ AF00              map_12:
 270+ AF00 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 270+ AF04 20 20 20 20
 270+ AF08 20 20 20 20
 270+ AF0C 20 20 20 20
 271+ AF10 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 271+ AF14 20 20 20 20
 271+ AF18 20 20 20 20
 271+ AF1C 20 20 20 20
 272+ AF20 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 272+ AF24 20 20 20 20
 272+ AF28 20 20 20 20
 272+ AF2C 20 20 20 20
 273+ AF30 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 273+ AF34 20 20 20 20
 273+ AF38 20 20 20 20
 273+ AF3C 20 20 20 20
 274+ AF40 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 274+ AF44 20 20 20 20
 274+ AF48 20 20 20 20
 274+ AF4C 20 20 20 20
 275+ AF50 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 275+ AF54 20 20 20 20
 275+ AF58 20 20 20 20
 275+ AF5C 20 20 20 20
 276+ AF60 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 276+ AF64 20 20 20 20
 276+ AF68 20 20 20 20
 276+ AF6C 20 20 20 20
 277+ AF70 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 277+ AF74 20 20 20 20
 277+ AF78 20 20 20 20
 277+ AF7C 20 20 20 20
 278+ AF80 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 278+ AF84 20 20 20 20
 278+ AF88 20 20 20 20
 278+ AF8C 20 20 20 20
 279+ AF90 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 279+ AF94 20 20 20 20
 279+ AF98 20 20 20 20
 279+ AF9C 20 20 20 20
 280+ AFA0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 280+ AFA4 20 20 20 20
 280+ AFA8 20 20 20 20
 280+ AFAC 20 20 20 20
 281+ AFB0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 281+ AFB4 20 20 20 20
 281+ AFB8 20 20 20 20
 281+ AFBC 20 20 20 20
 282+ AFC0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 282+ AFC4 20 20 20 20
 282+ AFC8 20 20 20 20
 282+ AFCC 20 20 20 20
 283+ AFD0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 283+ AFD4 20 20 20 20
 283+ AFD8 20 20 20 20
 283+ AFDC 20 20 20 20
 284+ AFE0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 284+ AFE4 20 20 20 20
 284+ AFE8 20 20 20 20
 284+ AFEC 20 20 20 20
 285+ AFF0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 285+ AFF4 20 20 20 20
 285+ AFF8 20 20 20 20
 285+ AFFC 20 20 20 20
 286+ B000
 287+ B000              map_13:
 288+ B000 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 288+ B004 20 20 20 20
 288+ B008 20 20 20 20
 288+ B00C 20 20 20 20
 289+ B010 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 289+ B014 20 20 20 20
 289+ B018 20 20 20 20
 289+ B01C 20 20 20 20
 290+ B020 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 290+ B024 20 20 20 20
 290+ B028 20 20 20 20
 290+ B02C 20 20 20 20
 291+ B030 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 291+ B034 20 20 20 20
 291+ B038 20 20 20 20
 291+ B03C 20 20 20 20
 292+ B040 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 292+ B044 20 20 20 20
 292+ B048 20 20 20 20
 292+ B04C 20 20 20 20
 293+ B050 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 293+ B054 20 20 20 20
 293+ B058 20 20 20 20
 293+ B05C 20 20 20 20
 294+ B060 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 294+ B064 20 20 20 20
 294+ B068 20 20 20 20
 294+ B06C 20 20 20 20
 295+ B070 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 295+ B074 20 20 20 20
 295+ B078 20 20 20 20
 295+ B07C 20 20 20 20
 296+ B080 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 296+ B084 20 20 20 20
 296+ B088 20 20 20 20
 296+ B08C 20 20 20 20
 297+ B090 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 297+ B094 20 20 20 20
 297+ B098 20 20 20 20
 297+ B09C 20 20 20 20
 298+ B0A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 298+ B0A4 20 20 20 20
 298+ B0A8 20 20 20 20
 298+ B0AC 20 20 20 20
 299+ B0B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 299+ B0B4 20 20 20 20
 299+ B0B8 20 20 20 20
 299+ B0BC 20 20 20 20
 300+ B0C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 300+ B0C4 20 20 20 20
 300+ B0C8 20 20 20 20
 300+ B0CC 20 20 20 20
 301+ B0D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 301+ B0D4 20 20 20 20
 301+ B0D8 20 20 20 20
 301+ B0DC 20 20 20 20
 302+ B0E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 302+ B0E4 20 20 20 20
 302+ B0E8 20 20 20 20
 302+ B0EC 20 20 20 20
 303+ B0F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 303+ B0F4 20 20 20 20
 303+ B0F8 20 20 20 20
 303+ B0FC 20 20 20 20
 304+ B100
 305+ B100              map_14:
 306+ B100 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 306+ B104 20 20 20 20
 306+ B108 20 20 20 20
 306+ B10C 20 20 20 20
 307+ B110 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 307+ B114 20 20 20 20
 307+ B118 20 20 20 20
 307+ B11C 20 20 20 20
 308+ B120 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 308+ B124 20 20 20 20
 308+ B128 20 20 20 20
 308+ B12C 20 20 20 20
 309+ B130 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 309+ B134 20 20 20 20
 309+ B138 20 20 20 20
 309+ B13C 20 20 20 20
 310+ B140 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 310+ B144 20 20 20 20
 310+ B148 20 20 20 20
 310+ B14C 20 20 20 20
 311+ B150 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 311+ B154 20 20 20 20
 311+ B158 20 20 20 20
 311+ B15C 20 20 20 20
 312+ B160 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 312+ B164 20 20 20 20
 312+ B168 20 20 20 20
 312+ B16C 20 20 20 20
 313+ B170 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 313+ B174 20 20 20 20
 313+ B178 20 20 20 20
 313+ B17C 20 20 20 20
 314+ B180 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 314+ B184 20 20 20 20
 314+ B188 20 20 20 20
 314+ B18C 20 20 20 20
 315+ B190 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 315+ B194 20 20 20 20
 315+ B198 20 20 20 20
 315+ B19C 20 20 20 20
 316+ B1A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 316+ B1A4 20 20 20 20
 316+ B1A8 20 20 20 20
 316+ B1AC 20 20 20 20
 317+ B1B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 317+ B1B4 20 20 20 20
 317+ B1B8 20 20 20 20
 317+ B1BC 20 20 20 20
 318+ B1C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 318+ B1C4 20 20 20 20
 318+ B1C8 20 20 20 20
 318+ B1CC 20 20 20 20
 319+ B1D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 319+ B1D4 20 20 20 20
 319+ B1D8 20 20 20 20
 319+ B1DC 20 20 20 20
 320+ B1E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 320+ B1E4 20 20 20 20
 320+ B1E8 20 20 20 20
 320+ B1EC 20 20 20 20
 321+ B1F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 321+ B1F4 20 20 20 20
 321+ B1F8 20 20 20 20
 321+ B1FC 20 20 20 20
 322+ B200
 323+ B200              map_15:
 324+ B200 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;1
 324+ B204 20 20 20 20
 324+ B208 20 20 20 20
 324+ B20C 20 20 20 20
 325+ B210 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;2
 325+ B214 20 20 20 20
 325+ B218 20 20 20 20
 325+ B21C 20 20 20 20
 326+ B220 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;3
 326+ B224 20 20 20 20
 326+ B228 20 20 20 20
 326+ B22C 20 20 20 20
 327+ B230 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;4
 327+ B234 20 20 20 20
 327+ B238 20 20 20 20
 327+ B23C 20 20 20 20
 328+ B240 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;5
 328+ B244 20 20 20 20
 328+ B248 20 20 20 20
 328+ B24C 20 20 20 20
 329+ B250 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;6
 329+ B254 20 20 20 20
 329+ B258 20 20 20 20
 329+ B25C 20 20 20 20
 330+ B260 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;7
 330+ B264 20 20 20 20
 330+ B268 20 20 20 20
 330+ B26C 20 20 20 20
 331+ B270 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;8
 331+ B274 20 20 20 20
 331+ B278 20 20 20 20
 331+ B27C 20 20 20 20
 332+ B280 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;9
 332+ B284 20 20 20 20
 332+ B288 20 20 20 20
 332+ B28C 20 20 20 20
 333+ B290 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;10
 333+ B294 20 20 20 20
 333+ B298 20 20 20 20
 333+ B29C 20 20 20 20
 334+ B2A0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;11
 334+ B2A4 20 20 20 20
 334+ B2A8 20 20 20 20
 334+ B2AC 20 20 20 20
 335+ B2B0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;12
 335+ B2B4 20 20 20 20
 335+ B2B8 20 20 20 20
 335+ B2BC 20 20 20 20
 336+ B2C0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;13
 336+ B2C4 20 20 20 20
 336+ B2C8 20 20 20 20
 336+ B2CC 20 20 20 20
 337+ B2D0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;14
 337+ B2D4 20 20 20 20
 337+ B2D8 20 20 20 20
 337+ B2DC 20 20 20 20
 338+ B2E0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;15
 338+ B2E4 20 20 20 20
 338+ B2E8 20 20 20 20
 338+ B2EC 20 20 20 20
 339+ B2F0 81 20 20 20   db _mh, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp, _mp ;16
 339+ B2F4 20 20 20 20
 339+ B2F8 20 20 20 20
 339+ B2FC 20 20 20 20
 340+ B300
 341+ B300              ;map start positions
 342+ B300
 343+ B300              ;map0
 344+ B300 00 00                dw  00
 345+ B302              ;map1
 346+ B302 00 00                dw  00
 347+ B304              ;map2
 348+ B304 00 00                dw  00
 349+ B306              ;map3
 350+ B306 00 00                dw  00
 351+ B308              ;map4
 352+ B308 00 00                dw  00
 353+ B30A              ;map5
 354+ B30A 00 00                dw  00
 355+ B30C              ;map6
 356+ B30C 00 00                dw  00
 357+ B30E              ;map7
 358+ B30E 00 00                dw  00
 359+ B310              ;map8
 360+ B310 00 00                dw  00
 361+ B312              ;map9
 362+ B312 00 00                dw  00
 363+ B314              ;map10
 364+ B314 00 00                dw  00
 365+ B316              ;map11
 366+ B316 00 00                dw  00
 367+ B318              ;map12
 368+ B318 00 00                dw  00
 369+ B31A              ;map13
 370+ B31A 00 00                dw  00
 371+ B31C              ;map14
 372+ B31C 00 00                dw  00
 373+ B31E              ;map15
 374+ B31E 00 00                dw  00
 375+ B320
 376+ B320 00                   nop
 377+ B321 00                   nop
 378+ B322 00                   nop
 379+ B323
 380+ B323
 381+ B323              ;##################################################################################
 382+ B323              ;door exit animation
 383+ B323              ;the idea here is that the following will happen when you reach the exit:-
 384+ B323              ;    0 turn off the buffer screen via reg $69
 385+ B323              ;    1 draw a black box growing ever bigger to fill the screen - thats exit_anim routine
 386+ B323              ;    2 leave that screen on show
 387+ B323              ;    3 point to the buffer screen
 388+ B323              ;    4 draw the first screen of the next level - unless its the last level (level 255 when you finish the game!)
 389+ B323              ;    5 copy the attributes to a place in memory - probably after the char screen at $c000
 390+ B323              ;    6 switch the buffer screen back on via reg $69
 391+ B323              ;    7 make all the buffer screen colours black
 392+ B323              ;    8 switch in the buffer screen
 393+ B323              ;    9 turn off the buffer screen because we want to see the colours materialise!
 394+ B323              ;    9 draw the colours back in from the copied colours earlier but from the outside in - new_maze_anim routine
 395+ B323              ;    10 go back to normal!
 396+ B323              ;
 397+ B323              ;
 398+ B323              exit_anim:
 399+ B323 DD 01                    BREAK
 400+ B325 ED 91 69 00              nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 401+ B329                          ;set processor speed to max while we do behind the scenes work
 402+ B329                         ; nextreg 7,3
 403+ B329                          ;get our current screen memory map
 404+ B329 3E 52                    ld a,$52
 405+ B32B CD 95 81                 call readnextreg
 406+ B32E 32 09 B4                 ld (cur_screen),a   ;save it
 407+ B331 3E 69                    ld a,$69
 408+ B333 CD 95 81                 call readnextreg
 409+ B336 32 0A B4                 ld (cur_page),a   ;save it
 410+ B339
 411+ B339                          ;see if we are already showing the main ULA screen - ULABank will = $0A
 412+ B339                         ; sub $0a
 413+ B339                         ; jr z,cont_12        ;if yes, draw the exit
 414+ B339                          ;its a no - so we need to redraw our screen in the alternate buffer memory which is page 10
 415+ B339                          ;as page 14 is currently paged into view
 416+ B339              ;redraw the existing screen to page 10 currently bufferred
 417+ B339                         ; call redraw_screen
 418+ B339
 419+ B339              ;now we can draw our exit as normal
 420+ B339                          ;page in our ULA screen
 421+ B339                        ;  nextreg $52,10
 422+ B339                        ;  ld a,10
 423+ B339                        ;  ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 424+ B339
 425+ B339              ;            nextreg $69,0      ;turn off screen buffering so we write directly to the screen
 426+ B339
 427+ B339              cont_12:    ;nextreg $69,0       ;turn off screen buffering so we write directly to the screen
 428+ B339 ED 91 07 00              nextreg 7,0
 429+ B33D CD 74 B3                 call do_exit_anim
 430+ B340 CD 5E 81                 call pause
 431+ B343
 432+ B343              ;need to make the screen black, draw ink bits, copy colours to somewhere else then copy back
 433+ B343
 434+ B343                        ;  nextreg $69,64       ;turn ON screen buffering so we write directly to the ALTERNATE screen our new maze start
 435+ B343 CD 5B B3                 call redraw_screen
 436+ B346 CD 5E 81                 call pause
 437+ B349 CD 5E 81                 call pause
 438+ B34C CD 0B B4                 call new_maze_anim
 439+ B34F CD 5E 81                 call pause
 440+ B352 CD 5E 81                 call pause
 441+ B355                    ;      nextreg $52,10
 442+ B355 3E 0A                    ld a,10
 443+ B357 32 BD 81                 ld (ULABank),a    ;tell the flip ula routine which page is being viewed
 444+ B35A
 445+ B35A              ;            call readnextreg
 446+ B35A               ;           ld a,(cur_screen)   ;get original screen
 447+ B35A               ;           xor 10^14       ; alternate between 10 and 14
 448+ B35A               ;           nextreg $52,a
 449+ B35A
 450+ B35A               ;           nextreg $69,64       ;turn on screen buffering so we write directly to the screen
 451+ B35A C9                       ret                 ;return to normal game
 452+ B35B              ;------------------------------------------------------------------------------------------
 453+ B35B              redraw_screen:
 454+ B35B CD 73 81                   call clear_char_screen    ;clear screen @c000
 455+ B35E
 456+ B35E CD 20 8C                   call get_distance ; get distance we can see
 457+ B361                                              ; and save depth we can see
 458+ B361                            ; load de is done when getting the distance above
 459+ B361                            ; we need de to hold the jump value in the maze direction
 460+ B361                            ; we are looking
 461+ B361
 462+ B361 CD F4 8D                   call draw_left_side   ; start drawing the left side of the maze
 463+ B364
 464+ B364                            ;we need to repopulate var furthest_point
 465+ B364
 466+ B364 CD 20 8C                   call get_distance     ; get distance we can see
 467+ B367                                                  ; and set de accordingly
 468+ B367                                                  ; and save depth we can see
 469+ B367
 470+ B367 CD 0D 9A                   call draw_right_side  ; start drawing the right side of the maze
 471+ B36A
 472+ B36A CD 97 95                   call draw_front_view  ; draw wall in front of player
 473+ B36D
 474+ B36D                            ;check if we are at an end wall. If so, draw walls left
 475+ B36D                            ;and right to simulate the long outside edge wall
 476+ B36D
 477+ B36D CD 23 96                   call draw_side_walls
 478+ B370
 479+ B370                            ;draw screen at mem location 0000
 480+ B370                            ;my print used to print screen @c000 to 16384 inc udg's
 481+ B370 CD 1B 8B                   call my_print         ;copy to screen from c000
 482+ B373
 483+ B373                     ;       call draw_colours     ;colourise the display
 484+ B373
 485+ B373 C9                           ret
 486+ B374              ;end drawing the new screen
 487+ B374              ;----------------------------------------------------------------------------------
 488+ B374              do_exit_anim:
 489+ B374
 490+ B374              ;Original base code by David Saphier from Facebook May 2018
 491+ B374
 492+ B374 97                       sub a
 493+ B375 32 06 B4                 ld (in_out),a       ;indicate we are drawing out from the middle
 494+ B378
 495+ B378
 496+ B378              ;reset the boxes to default
 497+ B378              ; this must be the same as the size of the square to draw
 498+ B378 3E 02                    ld a,2    ; reduce the size of the square to draw
 499+ B37A 32 07 B4                 ld (size1),a
 500+ B37D
 501+ B37D              ; this must equal the number of squares to draw
 502+ B37D 3E 02                    ld a,2  ;number of boxes to draw
 503+ B37F 32 08 B4                 ld (num2draw1),a
 504+ B382
 505+ B382 21 6C 59                 ld hl,256+11+22528+65+32 ;start point - middle of the screen nearly!
 506+ B385
 507+ B385
 508+ B385 3E 00        d_box1:	    ld a,0              ;set colour
 509+ B387 CD A9 B3                 call box1           ;draw the box
 510+ B38A                   ;       call FlipULABuffers_peter
 511+ B38A 11 E0 FF                	ld de,65504         ; 65504  (-32)
 512+ B38D
 513+ B38D 19                       add hl,de           ;next box to draw
 514+ B38E CD 5E 81                 call pause
 515+ B391 CD 5E 81                 call pause
 516+ B394
 517+ B394 3A 07 B4                 ld a,(size1)     ; increase the size of the square to draw
 518+ B397 3C                       inc a
 519+ B398 3C                       inc a
 520+ B399 32 07 B4                 ld (size1),a
 521+ B39C
 522+ B39C
 523+ B39C 3A 08 B4                 ld a,(num2draw1)  ;number of boxes to draw
 524+ B39F 3C                       inc a
 525+ B3A0 32 08 B4                 ld (num2draw1),a
 526+ B3A3 FE 0E                    cp 14
 527+ B3A5 C2 85 B3                 jp nz, d_box1     ; exit when we get to 2 as routine fails after that.
 528+ B3A8
 529+ B3A8 C9                       ret
 530+ B3A9
 531+ B3A9              ;davids code here amended by me....
 532+ B3A9              box1:
 533+ B3A9 3A 07 B4                 ld a,(size1)
 534+ B3AC 47                       ld b,a
 535+ B3AD
 536+ B3AD              ml11:
 537+ B3AD CD EE B3     	call docol1
 538+ B3B0 77           	ld (hl),a
 539+ B3B1 23           	inc hl
 540+ B3B2 10 F9        	djnz ml11
 541+ B3B4 F5               push af
 542+ B3B5 3A 07 B4         ld a,(size1)
 543+ B3B8 3D               dec a
 544+ B3B9 47              	ld b,a
 545+ B3BA F1               pop af
 546+ B3BB 2B           	dec hl
 547+ B3BC
 548+ B3BC              ml21:
 549+ B3BC CD EE B3     	call docol1
 550+ B3BF 11 20 00     	ld de,32     ;was 32
 551+ B3C2 19           	add hl,de
 552+ B3C3 77           	ld (hl),a
 553+ B3C4 10 F6        	djnz ml21
 554+ B3C6 F5               push af
 555+ B3C7 3A 07 B4         ld a,(size1)
 556+ B3CA 47              	ld b,a
 557+ B3CB F1               pop af
 558+ B3CC 2D           	dec l
 559+ B3CD
 560+ B3CD              ml31:
 561+ B3CD CD EE B3     	call docol1
 562+ B3D0 77            	ld (hl),a
 563+ B3D1 2B            	dec hl
 564+ B3D2 10 F9         	djnz ml31
 565+ B3D4 F5               push af
 566+ B3D5 3A 07 B4         ld a,(size1)
 567+ B3D8 3D               dec a
 568+ B3D9 47              	ld b,a
 569+ B3DA F1               pop af
 570+ B3DB 2C            	inc l
 571+ B3DC
 572+ B3DC              ml41:
 573+ B3DC CD EE B3     	call docol1
 574+ B3DF 11 E0 FF     	ld de,65504; was 65504  (-32)
 575+ B3E2 19           	add hl,de
 576+ B3E3 77           	ld (hl),a
 577+ B3E4 10 F6        	djnz ml41
 578+ B3E6 F5               push af
 579+ B3E7 3A 07 B4         ld a,(size1)
 580+ B3EA 3D                dec a
 581+ B3EB 47              	ld b,a
 582+ B3EC F1               pop af
 583+ B3ED C9           	ret
 584+ B3EE
 585+ B3EE              ;end of davids code...
 586+ B3EE
 587+ B3EE              ;set square colours
 588+ B3EE              docol1:
 589+ B3EE 3A 06 B4             ld a,(in_out)
 590+ B3F1 3D                   dec a                          ;check if a=0
 591+ B3F2 28 03                jr z,do_out
 592+ B3F4 3E F0                ld a,240
 593+ B3F6 C9                   ret
 594+ B3F7              do_out
 595+ B3F7 E5                   push hl
 596+ B3F8 2A 04 B4             ld hl,(fadein)
 597+ B3FB 7E                   ld a,(hl)
 598+ B3FC 23                   inc hl
 599+ B3FD 3E B4                ld a,180   ;test
 600+ B3FF 22 04 B4             ld (fadein),hl
 601+ B402 E1                   pop hl
 602+ B403 C9                   ret
 603+ B404
 604+ B404 00 00        fadein     dw 0   ;holds address of colours to fetch for screen colouring
 605+ B406 00           in_out:    db 0   ;1=draw inward, 0=draw outward
 606+ B407 02           size1:     db 2   ; size of square to draw ;double the number to draw
 607+ B408 02           num2draw1: db 2   ;number of squares to draw
 608+ B409 00           cur_screen db 0   ;hold the current screen in view for the exit screen
 609+ B40A 00           cur_page   db 0   ;hold the current screen thats paged in view for the exit screen
 610+ B40B
 611+ B40B              ;###########################################################################
 612+ B40B
 613+ B40B              new_maze_anim:
 614+ B40B              ;    nextreg $69,0
 615+ B40B              ; nextreg $52,10
 616+ B40B 3E 01                    ld a,1
 617+ B40D 32 06 B4                 ld (in_out),a       ;indicate we are drawing in to the middle
 618+ B410
 619+ B410              ;set hl yo point to screen colours to colour in
 620+ B410 21 00 00                 ld hl,0             ;ROM for now
 621+ B413 22 04 B4                 ld (fadein),hl
 622+ B416
 623+ B416
 624+ B416              ;reset the boxes to default
 625+ B416              ; this must be the same as the size of the square to draw
 626+ B416 3E 18                    ld a,24    ; reduce the size of the square to draw
 627+ B418 32 07 B4                 ld (size1),a
 628+ B41B
 629+ B41B              ; this must equal the number of squares to draw
 630+ B41B 3E 0C                    ld a,12  ;number of boxes to draw
 631+ B41D 32 08 B4                 ld (num2draw1),a
 632+ B420
 633+ B420 21 01 58                 ld hl,22529;    22528+65-32-32 ;start point - middle of the screen nearly!
 634+ B423
 635+ B423
 636+ B423              d_box_1:
 637+ B423 CD A9 B3                 call box1           ;draw the box
 638+ B426                        ;  call FlipULABuffers_peter
 639+ B426 11 22 00                	ld de,34
 640+ B429
 641+ B429 19                       add hl,de           ;next box to draw
 642+ B42A CD 5E 81                 call pause
 643+ B42D CD 5E 81                 call pause
 644+ B430
 645+ B430 3A 07 B4                 ld a,(size1)     ; increase the size of the square to draw
 646+ B433 3D                       dec a
 647+ B434 3D                       dec a
 648+ B435 32 07 B4                 ld (size1),a
 649+ B438
 650+ B438
 651+ B438 3A 08 B4                 ld a,(num2draw1)  ;number of boxes to draw
 652+ B43B 3D                       dec a
 653+ B43C 32 08 B4                 ld (num2draw1),a
 654+ B43F FE 00                    cp 0
 655+ B441 C2 23 B4                 jp nz, d_box_1     ; exit when we get to 2 as routine fails after that.
 656+ B444
 657+ B444 C9                       ret
 658+ B445
 659+ B445              ;*********************************************************************
 660+ B445              ; Making LDIR 21% faster
 661+ B445              ;taken from MSX Assembly page - http://map.grauw.nl/articles/fast_loops.php
 662+ B445
 663+ B445
 664+ B445              ;LDI Performs a "LD (DE),(HL)", then increments DE and HL, and decrements BC.
 665+ B445
 666+ B445              ;Now, on with the lesson. Aside from OTIR you can also unroll other things. INIR, LDIR and LDDR will also greatly benefit from this method, and sometimes it is also ;beneficial to unroll normal loops which use DJNZ, JR or JP.
 667+ B445
 668+ B445              ;In the case of LDIR however, the number of loops is often too large to simply use an LDI that number of times. That would take up too much space. So what we can do ;instead is to unroll only part of the loop. Say, we need to LDIR something 256 (100H) times. Instead of LDIR we could write:
 669+ B445
 670+ B445              ;we need to move 768 bytes = 48 x 16
 671+ B445              copy_colours:
 672+ B445
 673+ B445               ;       ld hl,$c300
 674+ B445               ;       ld bc,768
 675+ B445               ;       ld de,22528
 676+ B445               ;       ld a,(hl)
 677+ B445               ;       ld (de),a
 678+ B445               ;       ldir
 679+ B445               ;       ret
 680+ B445
 681+ B445
 682+ B445 01 00 03                   ld bc,768             ;number of cells to copy
 683+ B448 21 00 C3                   ld hl,attr_screen     ;address of colours screen to copy
 684+ B44B 11 00 58                   ld de,22528           ;attributes on main screen
 685+ B44E              Loop_col:
 686+ B44E ED A0            ldi  ; 16x LDI
 687+ B450 ED A0            ldi
 688+ B452 ED A0            ldi
 689+ B454 ED A0            ldi
 690+ B456 ED A0            ldi
 691+ B458 ED A0            ldi
 692+ B45A ED A0            ldi
 693+ B45C ED A0            ldi
 694+ B45E ED A0            ldi
 695+ B460 ED A0            ldi
 696+ B462 ED A0            ldi
 697+ B464 ED A0            ldi
 698+ B466 ED A0            ldi
 699+ B468 ED A0            ldi
 700+ B46A ED A0            ldi
 701+ B46C ED A0            ldi
 702+ B46E EA 4E B4         jp pe,Loop_col  ; Loop until bc = zero
 703+ B471              ;        ld a,c
 704+ B471              ;        dec a
 705+ B471              ;        jp nz, loop_col
 706+ B471 C9                         ret
 707+ B472
 708+ B472
# file closed: src/7-rd3dmazeV6.asm
 745  B472
 746  B472              ;##############################################
 747  B472              ;misc data
 748  B472              ;various variables
 749  B472              ;udg charachter set
 750  B472              ;##############################################
 751  B472
 752  B472                      org 64000       ;fa00
 753  FA00
 754  FA00              ;variables
 755  FA00              ;-----------------------------------------------
 756  FA00
 757  FA00 00 00        player_pos: dw $0                  ; only when in the main game loop
 758  FA02                                             ; holds the low byte of the current insertion location when inserting a passageway into the maze.
 759  FA02
 760  FA02              ;l4083:  db 134               ; high byte of the maze location data
 761  FA02              ;l4084:  db 08                ; holds the desired length of the passageway beign inserted when constructing the maze.
 762  FA02 06           maxview: db 6                   ;holds how far we can see before
 763  FA03                                              ;hitting a wall
 764  FA03              ;l4085:  db $01               ; holds the passageway direction when inserting a passageway into the maze ($00=north, $01=west, $02=south, $03=east).
 765  FA03
 766  FA03 00           flags:  db 0                 ; flags:
 767  FA04                                           ;na   bit 7: 1=the player has been caught.
 768  FA04                                           ;na   bit 6: 1=the player has moved forwards.408a
 769  FA04                                           ;na   bit 5: 1=the player has not moved and so there is no need to redraw the view of the maze.
 770  FA04                                           ;na   bit 4: 1=the exit is visible.
 771  FA04                                           ;na   bit 3: 1=rex has moved.
 772  FA04                                           ;na   bit 2: 1=rex has moved into a new location.
 773  FA04                                           ;na   bit 1: 1=rex has his left foot forward, 0=rex has his right foot forward.
 774  FA04                                           ; bit 0: maxview used bit
 775  FA04
 776  FA04 00           var1:   db 0  ; used for printing
 777  FA05
 778  FA05 00           var2:   db 0  ; used for printing
 779  FA06
 780  FA06 00           depth:  db 0  ; stores our depth of field when we are looking
 781  FA07 00           l4086:  db 0
 782  FA08
 783  FA08              player_dir:
 784  FA08 00                   db 0  ;; only when in the main game loop
 785  FA09              de_count:
 786  FA09 00 00                dw 0  ;used to hold 2 bytes of reg de for maze locating info
 787  FA0B
 788  FA0B 00 00        left     dw 0000
 789  FA0D 00 00        right    dw 0000
 790  FA0F 00 00        var3     dw 0000     ;misc. used in drawing walls
 791  FA11 00 00        var4     dw 0000     ;misc. used in drawing walls
 792  FA13 00 00        var5     dw 0000     ;misc - used in drawing walls
 793  FA15 00 00        var6     dw 0000     ;stores current maze block check position
 794  FA17
 795  FA17 00           end_wall db 0        ;stores whether current wall being draw is
 796  FA18                                   ;an outside maze wall or not (as we want to treat
 797  FA18                                   ;this differnetly when drawn in future
 798  FA18 00 00        var7     dw 0        ;misc loop counter in walls
 799  FA1A 00 00        var8     dw 0        ;not used
 800  FA1C 00 00        var9     dw 0        ;not used
 801  FA1E 00           var10    db 0        ;used for maze wall drawing at depth 5
 802  FA1F 00           lr_wall  db 0        ;used for left and right wall drawing in draw_side_walls routine
 803  FA20 00 00        w5_start dw 0        ;not used
 804  FA22 00           cur_map  db 0        ;stores current map to draw or show
 805  FA23 00 00        map_start dw 0       ;tores the map start address
 806  FA25
 807  FA25 00 00        furthest_point dw 0 ;store the address of the furthest point
 808  FA27                                  ;we can see in the maze from our position.
 809  FA27 00           blockid  db 0        ;stores  block position of layer 5 for wall drawing
 810  FA28 71           maze_highbyte db $71 ;holds high byte of current maze in use
 811  FA29 00           map_show    db  0    ;tells is if we are already showing the map
 812  FA2A 00           show_exit       db 0 ;used to say whether to draw the full size exit door or not
 813  FA2B                                   ;0 = draw a closed exit door
 814  FA2B                                   ;1 = draw an open exit door
 815  FA2B 00           switch_pulled   db  0 ; 0 and 1 for on and off - default off
 816  FA2C 00 00        sp_store        dw  0   ;save and restore the SP
 817  FA2E
 818  FA2E              ;#############################################################
 819  FA2E              ;reserve 200 bytes for the stack - points here from BASIC
 820  FA2E              ;stack pointer lives here
 821  FA2E 00 00 00...  stack_p        block 200
 822  FAF6
 823  FAF6              ;stack pointer is at 64511
 824  FAF6
 825  FAF6              ;##############################################
 826  FAF6              ;udg charachter set starts at 64512
 827  FAF6              ;##############################################
 828  FAF6
 829  FAF6                      org 64512
 830  FC00
 831  FC00              ;##############################################
 832  FC00                    ;UDG Characher Defs
 833  FC00              ;##############################################
 834  FC00              _chars:
 835  FC00 48 4B 97 93   db	72,75,151,147,137,68,36,18      ;80	65080	;door wood effect 1
 835  FC04 89 44 24 12
 836  FC08 A8 44 A2 A9   db	168,68,162,169,41,66,148,164	;81	65088   ;door wood effect 2
 836  FC0C 29 42 94 A4
 837  FC10 11 2A 52 54   db	17,42,82,84,78,78,37,18  	    ;82	65096   ;door wood effect 3
 837  FC14 4E 4E 25 12
 838  FC18 28 48 A4 94   db	40,72,164,148,74,146,36,72  	;83	65104   ;door wood effect 4
 838  FC1C 4A 92 24 48
 839  FC20 34 34 34 F7   db	52,52,52,247,247,52,52,52     	;84	65112	;Door Barsvertical
 839  FC24 F7 34 34 34
 840  FC28 00 00 00 FF   db	0,0,0,255,255,0,0,0   	        ;85	65120   ;Door Bars Crossbars
 840  FC2C FF 00 00 00
 841  FC30 AC EC 6C 2C   db	172,236,108,44,44,46,47,45	    ;86	65128	;door bars left side
 841  FC34 2C 2E 2F 2D
 842  FC38 35 37 36 34   db	53,55,54,52,52,116,244,180	    ;87	65136	;door bars right side
 842  FC3C 34 74 F4 B4
 843  FC40              ;rest of door graphic chars are at $b9 onwards below
 844  FC40
 845  FC40 C0 F0 FC FF   db	192,240,252,255,255,252,240,192 ;88	65144   left hand triangle pointed
 845  FC44 FF FC F0 C0
 846  FC48 03 0F 3F FF   db	3,15,63,255,255,63,15,3         ;89	65152	right hand triangle pointed
 846  FC4C FF 3F 0F 03
 847  FC50 00 00 00 00   db	0,0,0,0,0,0,0,0	                ;8a	65160
 847  FC54 00 00 00 00
 848  FC58 FF 55 FF AF   db	255,85,255,175,255,95,255,255   ;8b	65168	upper wall 5 right bottom
 848  FC5C FF 5F FF FF
 849  FC60 FF D5 FF FA   db	255,213,255,250,255,253,255,255	;8c	upper wall 5 left bottom
 849  FC64 FF FD FF FF
 850  FC68
 851  FC68              ;extra layer 5 chars
 852  FC68 FF 3F F3 9F   db	255,63,243,159,244,47,249,143 	 ;8d	small wall stretched (layer 3)
 852  FC6C F4 2F F9 8F
 853  FC70 FF 8C FF 26   db	255,140,255,38,255,140,255,38 	 ;8e	small wall stretched (layer 3)
 853  FC74 FF 8C FF 26
 854  FC78
 855  FC78               ;Section 2 left and right UDG
 856  FC78 00 00 00 00   DB 0,0,0,0,0,3,31,255              ;8f 65200  top right Section 2 (1)
 856  FC7C 00 03 1F FF
 857  FC80 00 00 01 0F   DB 0,0,1,15,127,255,255,255        ;90 65208  top right Section 2 (2)
 857  FC84 7F FF FF FF
 858  FC88 07 3F FF FF   DB 7,63,255,255,255,255,255,255    ;91 65216  top right Section 2 (3)
 858  FC8C FF FF FF FF
 859  FC90
 860  FC90 FF 1F 03 00   DB 255,31,3,0,0,0,0,0              ;92 65224   bottom right Section 2 (1)
 860  FC94 00 00 00 00
 861  FC98 FF FF FF 7F   DB 255,255,255,127,15,1,0,0        ;93 65232   bottom right Section 2 (2)
 861  FC9C 0F 01 00 00
 862  FCA0 FF FF FF FF   DB 255,255,255,255,255,255,63,7    ;94 65240   bottom right Section 2 (3)
 862  FCA4 FF FF 3F 07
 863  FCA8
 864  FCA8 E0 FC FF FF   DB 224,252,255,255,255,255,255,255 ;95 65248   top left Section 2 (1)
 864  FCAC FF FF FF FF
 865  FCB0 00 00 80 F0   DB 0,0,128,240,254,255,255,255     ;96 65256   top left Section 2 (2)
 865  FCB4 FE FF FF FF
 866  FCB8 00 00 00 00   DB 0,0,0,0,0,192,248,255           ;97 65264   top left Section 2 (3)
 866  FCBC 00 C0 F8 FF
 867  FCC0
 868  FCC0 FF FF FF FF   DB 255,255,255,255,255,255,252,224 ;98 65272   bottom left Section 2 (1)
 868  FCC4 FF FF FC E0
 869  FCC8 FF FF FF FE   DB 255,255,255,254,240,128,0,0     ;99 65280   bottom left Section 2 (2)
 869  FCCC F0 80 00 00
 870  FCD0 FF F8 C0 00   DB 255,248,192,0,0,0,0,0           ;9a 65288   bottom left Section 2 (3)
 870  FCD4 00 00 00 00
 871  FCD8
 872  FCD8 80 C0 E0 F0   DB	128,192,224,240,245,250,245,250	;9b	65296	layer 5 left top
 872  FCDC F5 FA F5 FA
 873  FCE0 F5 FA F5 FA   DB	245,250,245,250,240,224,192,128	;9c	65304	layer 5 left bottom
 873  FCE4 F0 E0 C0 80
 874  FCE8 01 03 07 0F   DB	1,3,7,15,95,175,95,175         	;9d	65312   layer 5 right top
 874  FCEC 5F AF 5F AF
 875  FCF0 5F AF 5F AF   DB	95,175,95,175,15,7,3,1         	;9e	65320	layer 5 right bottom
 875  FCF4 0F 07 03 01
 876  FCF8 55 AA 55 AA   DB	85,170,85,170,85,170,85,170    	;9f	65328	chequer
 876  FCFC 55 AA 55 AA
 877  FD00 55 AA 55 AA   DB	85,170,85,170,0,0,0,0          	;a0	65336	top chequer
 877  FD04 00 00 00 00
 878  FD08 00 00 00 00   DB	0,0,0,0,85,170,85,170          	;a1	65344	bottom chequer
 878  FD0C 55 AA 55 AA
 879  FD10 00 00 00 00   DB	0,0,0,0,255,255,255,255        	;a2	65352		bottom black
 879  FD14 FF FF FF FF
 880  FD18 FF FF FF FF   DB	255,255,255,255,0,0,0,0        	;a3	65360		top black
 880  FD1C 00 00 00 00
 881  FD20 FF 08 08 08   DB	255,8,8,8,255,128,128,255      	;a4	65368		brick pattern
 881  FD24 FF 80 80 FF
 882  FD28 99 C8 64 32   DB	153,200,100,50,25,140,206,171  	;a5	65376		top left brick diag
 882  FD2C 19 8C CE AB
 883  FD30 10 28 10 7C   DB	16,40,16,124,16,40,40,68       	;a6	65384		man
 883  FD34 10 28 28 44
 884  FD38 00 78 6B 7E   DB	0,120,107,126,124,104,120,0    	;a7	65392		switch
 884  FD3C 7C 68 78 00
 885  FD40 FF A5 FF A5   DB	255,165,255,165,165,255,165,255	;a8	65400		fancy square
 885  FD44 A5 FF A5 FF
 886  FD48 80 C0 E0 F0   DB	128,192,224,240,255,255,255,255	;a9	65408		top left 5
 886  FD4C FF FF FF FF
 887  FD50 01 03 07 0F   DB	1,3,7,15,255,255,255,255       	;aa	65416		top right 5
 887  FD54 FF FF FF FF
 888  FD58 FF FF FF FF   DB	255,255,255,255,240,224,192,128	;ab	65424		bot left  5
 888  FD5C F0 E0 C0 80
 889  FD60 FF FF FF FF   DB	255,255,255,255,15,7,3,1       	;ac	65432		bot right 5
 889  FD64 0F 07 03 01
 890  FD68 FF E5 FF FD   DB	255,229,255,253,253,255,255,255	;ad	65440		top right fancy
 890  FD6C FD FF FF FF
 891  FD70 FF A7 FF BF   DB	255,167,255,191,191,255,255,255	;ae	65448		top left fancy
 891  FD74 BF FF FF FF
 892  FD78 FF FF FF FF   DB	255,255,255,255,255,255,255,255	;af	65456		all black
 892  FD7C FF FF FF FF
 893  FD80 FF FE FC F8   DB	255,254,252,248,240,224,192,128	;b0	65464		top left triangle
 893  FD84 F0 E0 C0 80
 894  FD88 FF 7F 3F 1F   DB	255,127,63,31,15,7,3,1         	;b1	65472		top right triangle
 894  FD8C 0F 07 03 01
 895  FD90 01 03 07 0F   DB	1,3,7,15,31,63,127,255         	;b2	65480		bot right triangle
 895  FD94 1F 3F 7F FF
 896  FD98 80 C0 E0 F0   DB	128,192,224,240,248,252,254,255	;b3	65488		bot right triangle
 896  FD9C F8 FC FE FF
 897  FDA0
 898  FDA0 FF 55 FF AA   DB	255,85,255,170,255,85,255,170	;b4	65496		small wall
 898  FDA4 FF 55 FF AA
 899  FDA8 FF 88 88 FF   DB	255,136,136,255,162,162,255,128	;b5	65504		mediumwall
 899  FDAC A2 A2 FF 80
 900  FDB0 FF 88 88 88   DB	255,136,136,136,255,224,192,128	;b6	65512		largewall
 900  FDB4 FF E0 C0 80
 901  FDB8 FF AA FF AA   DB	255,170,255,170,255,170,255,170 ;b7	65520		mediumwall_1
 901  FDBC FF AA FF AA
 902  FDC0 FF 88 88 88   DB	255,136,136,136,255,128,128,128 ;b8	65528		hugewall
 902  FDC4 FF 80 80 80
 903  FDC8
 904  FDC8              ;layer 5 section 3 right TOP
 905  FDC8
 906  FDC8 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;b9 top right section 3 (4)
 906  FDCC FF FF FF FF
 907  FDD0 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;ba top right section 3 (3)
 907  FDD4 FF FF FF FF
 908  FDD8 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;bb top right section 3 (2)
 908  FDDC FF FF FF FF
 909  FDE0 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;bc top right section 3 (1)
 909  FDE4 FF FF FF FF
 910  FDE8
 911  FDE8              ;layer 5 section 3 right BOTTOM
 912  FDE8
 913  FDE8 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;bd top right section 3 (6)
 913  FDEC FF 00 00 00
 914  FDF0 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;be top right section 3 (6)
 914  FDF4 FF FF 00 00
 915  FDF8 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;bf top right section 3 (6)
 915  FDFC FF FF FF 00
 916  FE00 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c0 top right section 3 (6)
 916  FE04 FF FF FF FF
 917  FE08
 918  FE08              ;layer 5 section 3 left TOP TBD
 919  FE08
 920  FE08 FF FF FF FF   DB 255,255,255,255,255,0,0,0       ;c1 bottom right section 3 (5)
 920  FE0C FF 00 00 00
 921  FE10 FF FF FF FF   DB 255,255,255,255,255,255,0,0     ;c2 bottom right section 3 (6)
 921  FE14 FF FF 00 00
 922  FE18 FF FF FF FF   DB 255,255,255,255,255,255,255,0   ;c3 bottom right section 3 (6)
 922  FE1C FF FF FF 00
 923  FE20 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c4 bottom right section 3 (6)
 923  FE24 FF FF FF FF
 924  FE28
 925  FE28              ;layer 5 section 3 left BOTTOM TBD
 926  FE28
 927  FE28 00 00 00 FF   DB 0,0,0,255,255,255,255,255       ;c5 bottom right section 3 (5)
 927  FE2C FF FF FF FF
 928  FE30 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;c6 bottom right section 3 (6)
 928  FE34 FF FF FF FF
 929  FE38 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;c7 bottom right section 3 (6)
 929  FE3C FF FF FF FF
 930  FE40 FF FF FF FF   DB 255,255,255,255,255,255,255,255 ;c8 bottom right section 3 (6)
 930  FE44 FF FF FF FF
 931  FE48
 932  FE48
 933  FE48              ;layer 5 section 4 right TOP
 934  FE48
 935  FE48 00 00 00 00   DB 0,0,0,0,0,0,0,255               ;c9 top right section 3 (4)
 935  FE4C 00 00 00 FF
 936  FE50 00 00 00 00   DB 0,0,0,0,0,0,255,255             ;ca top right section 3 (4)
 936  FE54 00 00 FF FF
 937  FE58 00 00 00 00   DB 0,0,0,0,255,255,255,255         ;cb top right section 3 (3)
 937  FE5C FF FF FF FF
 938  FE60 00 00 FF FF   DB 0,0,255,255,255,255,255,255     ;cc top right section 3 (2)
 938  FE64 FF FF FF FF
 939  FE68 00 FF FF FF   DB 0,255,255,255,255,255,255,255   ;cd top right section 3 (1)
 939  FE6C FF FF FF FF
 940  FE70
 941  FE70              ;layer 5 section 4 right BOTTOM
 942  FE70
 943  FE70 FF 00 00 00   db 255,0,0,0,0,0,0,0               ;ce top right section 3 (6)
 943  FE74 00 00 00 00
 944  FE78 FF FF 00 00   db 255,255,0,0,0,0,0,0             ;cf top right section 3 (6)
 944  FE7C 00 00 00 00
 945  FE80 FF FF FF FF   db 255,255,255,255,0,0,0,0         ;d0 top right section 3 (6)
 945  FE84 00 00 00 00
 946  FE88 FF FF FF FF   db 255,255,255,255,255,255,0,0     ;d1 top right section 3 (6)
 946  FE8C FF FF 00 00
 947  FE90 FF FF FF FF   db 255,255,255,255,255,255,255,0   ;d2 top right section 3 (6)
 947  FE94 FF FF FF 00
 948  FE98
 949  FE98
 950  FE98              ;Extra wall5
 951  FE98              ; db	249,63,243,159,244,47,249,143 	;c9	small wall stretched more
 952  FE98              ; db 255,15,255,31,255,15,255,15	   	;ca	small wall stretched
 953  FE98              ; db 240,15,224,31,224,15,112,15	   	;cb	small wall stretched
 954  FE98
 955  FE98              ;triangular door wood parts
 956  FE98 FF FF FE FB   db	255,255,254,251,249,228,228,146     ;d3	   ;door wood effect top corner 1 right side($80)
 956  FE9C F9 E4 E4 92
 957  FEA0 88 CB E7 F3   db	136,203,231,243,249,252,254,255	    ;d4	   ;door wood effect bottom corner 1 (80)
 957  FEA4 F9 FC FE FF
 958  FEA8 FF FE FE FC   db	255,254,254,252,254,238,229,146     ;d5	   ;door wood effect top corner 3 right side($82)
 958  FEAC FE EE E5 92
 959  FEB0 91 CA E2 F4   db	145,202,226,244,250,252,254,255    	;d6    ;door wood effect bottom corner 1 (82)
 959  FEB4 FA FC FE FF
 960  FEB8
 961  FEB8              ;additional characters for level numbers printed on right of display
 962  FEB8              ;single caracter 10,11,12,13,14,15
 963  FEB8 00 4C 52 52    db  0,76,82,82,82,82,76,0             ;d7
 963  FEBC 52 52 4C 00
 964  FEC0 00 48 48 48    db  0,72,72,72,72,72,72,0             ;d8
 964  FEC4 48 48 48 00
 965  FEC8 00 4C 52 42    db  0,76,82,66,68,72,94,0             ;d9
 965  FECC 44 48 5E 00
 966  FED0 00 4C 52 46    db  0,76,82,70,66,82,76,0             ;da
 966  FED4 42 52 4C 00
 967  FED8 00 42 46 4A    db  0,66,70,74,94,66,66,0             ;db
 967  FEDC 5E 42 42 00
 968  FEE0 00 4E 50 4C    db  0,78,80,76,66,82,76,0             ;dc
 968  FEE4 42 52 4C 00
 969  FEE8
 970  FEE8
 971  FEE8              ;END_PROGRAM
 972  FEE8
 973  FEE8
 974  FEE8              ;for SJASMPLUS
 975  FEE8              ;;
 976  FEE8              ;; Set up the Nex output
 977  FEE8              ;;
 978  FEE8
 979  FEE8                      ; This sets the name of the project, the start address,
 980  FEE8                      ; and the initial stack pointer.
 981  FEE8               ;       SAVENEX OPEN "3dmaze.nex";, start_game  ;, END_PROGRAM
 982  FEE8                      SAVEBIN "3dmaze.bin",32768,32767
 983  FEE8
 984  FEE8                      ; This asserts the minimum core version.  Set it to the core version
 985  FEE8                      ; you are developing on.
 986  FEE8              ;        SAVENEX CORE 2,0,0
 987  FEE8
 988  FEE8                      ; This sets the border colour while loading (in this case white),
 989  FEE8                      ; what to do with the file handle of the nex file when starting (0 =
 990  FEE8                      ; close file handle as we're not going to access the project.nex
 991  FEE8                      ; file after starting.  See sjasmplus documentation), whether
 992  FEE8                      ; we preserve the next registers (0 = no, we set to default), and
 993  FEE8                      ; whether we require the full 2MB expansion (0 = no we don't).
 994  FEE8              ;        SAVENEX CFG 7,0,0,0
 995  FEE8
 996  FEE8                      ; Generate the Nex file automatically based on which pages you use.
 997  FEE8              ;        SAVENEX AUTO
 998  FEE8
# file closed: src/rd3dmazeV6-sj.asm
